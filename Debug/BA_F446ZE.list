
BA_F446ZE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075a8  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0800776c  0800776c  0001776c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077bc  080077bc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080077bc  080077bc  000177bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077c4  080077c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077c4  080077c4  000177c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077c8  080077c8  000177c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080077cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010a4  2000000c  080077d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200010b0  080077d8  000210b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000192b4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003862  00000000  00000000  000392f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012d8  00000000  00000000  0003cb58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  0003de30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003fb1  00000000  00000000  0003ef80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c52  00000000  00000000  00042f31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7165  00000000  00000000  0005ab83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00131ce8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004c94  00000000  00000000  00131d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007754 	.word	0x08007754

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08007754 	.word	0x08007754

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <DMX_Init>:
#include "DMX.h"


void DMX_Init(DMX_TypeDef* hdmx, UART_HandleTypeDef* huart, char *DMXFile_name, char *DMXInfoFile_name)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	60f8      	str	r0, [r7, #12]
 8000504:	60b9      	str	r1, [r7, #8]
 8000506:	607a      	str	r2, [r7, #4]
 8000508:	603b      	str	r3, [r7, #0]
	memcpy(hdmx->DMXFile_name, DMXFile_name, 9);
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8000510:	2209      	movs	r2, #9
 8000512:	6879      	ldr	r1, [r7, #4]
 8000514:	4618      	mov	r0, r3
 8000516:	f007 f907 	bl	8007728 <memcpy>
	memcpy(hdmx->DMXInfoFile_name, DMXInfoFile_name, 13);
 800051a:	68fb      	ldr	r3, [r7, #12]
 800051c:	f203 4369 	addw	r3, r3, #1129	; 0x469
 8000520:	220d      	movs	r2, #13
 8000522:	6839      	ldr	r1, [r7, #0]
 8000524:	4618      	mov	r0, r3
 8000526:	f007 f8ff 	bl	8007728 <memcpy>
	hdmx->sending = 0;
 800052a:	68fb      	ldr	r3, [r7, #12]
 800052c:	2200      	movs	r2, #0
 800052e:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
	hdmx->recording = 0;
 8000532:	68fb      	ldr	r3, [r7, #12]
 8000534:	2200      	movs	r2, #0
 8000536:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
	hdmx->received_packets = 0;
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	2200      	movs	r2, #0
 800053e:	f8a3 2478 	strh.w	r2, [r3, #1144]	; 0x478
	hdmx->newpacketcharacter = 1;
 8000542:	68fb      	ldr	r3, [r7, #12]
 8000544:	2201      	movs	r2, #1
 8000546:	f883 247b 	strb.w	r2, [r3, #1147]	; 0x47b
	hdmx->uart = huart;
 800054a:	68fb      	ldr	r3, [r7, #12]
 800054c:	68ba      	ldr	r2, [r7, #8]
 800054e:	f8c3 2884 	str.w	r2, [r3, #2180]	; 0x884
	hdmx->RxComplete = 0;
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	2200      	movs	r2, #0
 8000556:	f883 247a 	strb.w	r2, [r3, #1146]	; 0x47a
	DMX_zeroes(hdmx->TxBuffer);		//TxBuffer mit 0 beschreiben
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	f203 437e 	addw	r3, r3, #1150	; 0x47e
 8000560:	4618      	mov	r0, r3
 8000562:	f000 f81b 	bl	800059c <DMX_zeroes>
	DMX_zeroes(hdmx->RxBuffer);		//RxBuffer mit 0 beschreiben
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	f203 637f 	addw	r3, r3, #1663	; 0x67f
 800056c:	4618      	mov	r0, r3
 800056e:	f000 f815 	bl	800059c <DMX_zeroes>
	hdmx->RxBuffer[513] = 1;			//Zeichen um neues Paket zu identifizieren (in der Datei)
 8000572:	68fb      	ldr	r3, [r7, #12]
 8000574:	2201      	movs	r2, #1
 8000576:	f883 2880 	strb.w	r2, [r3, #2176]	; 0x880
	DMX_Transmit(hdmx, 513);			//Alle Kan�le mit 0 beschreiben
 800057a:	f240 2101 	movw	r1, #513	; 0x201
 800057e:	68f8      	ldr	r0, [r7, #12]
 8000580:	f000 f852 	bl	8000628 <DMX_Transmit>
	HAL_GPIO_WritePin(DMX_DE_GPIO_Port, DMX_DE_Pin, GPIO_PIN_RESET);	//Treiber deaktivieren um Signal durchzuleiten
 8000584:	2200      	movs	r2, #0
 8000586:	2104      	movs	r1, #4
 8000588:	4803      	ldr	r0, [pc, #12]	; (8000598 <DMX_Init+0x9c>)
 800058a:	f002 f81d 	bl	80025c8 <HAL_GPIO_WritePin>
}
 800058e:	bf00      	nop
 8000590:	3710      	adds	r7, #16
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
 8000596:	bf00      	nop
 8000598:	40020000 	.word	0x40020000

0800059c <DMX_zeroes>:

static void DMX_zeroes(uint8_t* array)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 512; i++)
 80005a4:	2300      	movs	r3, #0
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	e007      	b.n	80005ba <DMX_zeroes+0x1e>
	{
		array[i] = 0;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	687a      	ldr	r2, [r7, #4]
 80005ae:	4413      	add	r3, r2
 80005b0:	2200      	movs	r2, #0
 80005b2:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 512; i++)
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	3301      	adds	r3, #1
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80005c0:	dbf3      	blt.n	80005aa <DMX_zeroes+0xe>
	}
}
 80005c2:	bf00      	nop
 80005c4:	bf00      	nop
 80005c6:	3714      	adds	r7, #20
 80005c8:	46bd      	mov	sp, r7
 80005ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ce:	4770      	bx	lr

080005d0 <DMX_sendonechannel>:
{
	DMX_zeroes(hdmx->RxBuffer);
	HAL_GPIO_WritePin(DMX_DE_GPIO_Port, DMX_DE_Pin, GPIO_PIN_RESET);
}
void DMX_sendonechannel(DMX_TypeDef* hdmx, uint16_t channel, uint8_t value)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
 80005d8:	460b      	mov	r3, r1
 80005da:	807b      	strh	r3, [r7, #2]
 80005dc:	4613      	mov	r3, r2
 80005de:	707b      	strb	r3, [r7, #1]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_SET);
 80005e0:	2201      	movs	r2, #1
 80005e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e6:	480f      	ldr	r0, [pc, #60]	; (8000624 <DMX_sendonechannel+0x54>)
 80005e8:	f001 ffee 	bl	80025c8 <HAL_GPIO_WritePin>
		uint8_t temp = hdmx->TxBuffer[channel];
 80005ec:	887b      	ldrh	r3, [r7, #2]
 80005ee:	687a      	ldr	r2, [r7, #4]
 80005f0:	4413      	add	r3, r2
 80005f2:	f893 347e 	ldrb.w	r3, [r3, #1150]	; 0x47e
 80005f6:	73fb      	strb	r3, [r7, #15]
		hdmx->TxBuffer[channel] = value;
 80005f8:	887b      	ldrh	r3, [r7, #2]
 80005fa:	687a      	ldr	r2, [r7, #4]
 80005fc:	4413      	add	r3, r2
 80005fe:	787a      	ldrb	r2, [r7, #1]
 8000600:	f883 247e 	strb.w	r2, [r3, #1150]	; 0x47e
		DMX_Transmit(hdmx, 513);
 8000604:	f240 2101 	movw	r1, #513	; 0x201
 8000608:	6878      	ldr	r0, [r7, #4]
 800060a:	f000 f80d 	bl	8000628 <DMX_Transmit>
		hdmx->TxBuffer[channel] = temp;
 800060e:	887b      	ldrh	r3, [r7, #2]
 8000610:	687a      	ldr	r2, [r7, #4]
 8000612:	4413      	add	r3, r2
 8000614:	7bfa      	ldrb	r2, [r7, #15]
 8000616:	f883 247e 	strb.w	r2, [r3, #1150]	; 0x47e
}
 800061a:	bf00      	nop
 800061c:	3710      	adds	r7, #16
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40020000 	.word	0x40020000

08000628 <DMX_Transmit>:
void DMX_Transmit(DMX_TypeDef* hdmx, uint16_t size)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(DMX_DE_GPIO_Port, DMX_DE_Pin, GPIO_PIN_SET);													//Treiber aktivieren
 8000634:	2201      	movs	r2, #1
 8000636:	2104      	movs	r1, #4
 8000638:	4809      	ldr	r0, [pc, #36]	; (8000660 <DMX_Transmit+0x38>)
 800063a:	f001 ffc5 	bl	80025c8 <HAL_GPIO_WritePin>
//	__HAL_UART_DISABLE(hdmx->uart);																																								//UART deaktivieren
//	DMX_TX_GPIO_Port->MODER = (DMX_TX_GPIO_Port->MODER &~GPIO_MODER_MODE0_Msk) | (1<< (GPIO_MODER_MODE0_Pos));		//Modus vom Ausgangspin �ndern
	HAL_GPIO_WritePin(DMX_TX_GPIO_Port, DMX_TX_Pin, GPIO_PIN_SET);																								//Ausgang auf IDLE Pegel setzen (HIGH)
 800063e:	2201      	movs	r2, #1
 8000640:	2101      	movs	r1, #1
 8000642:	4807      	ldr	r0, [pc, #28]	; (8000660 <DMX_Transmit+0x38>)
 8000644:	f001 ffc0 	bl	80025c8 <HAL_GPIO_WritePin>
	htim11.Instance->CNT = 0;																																										//IDLE Timer zur�cksetzen
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <DMX_Transmit+0x3c>)
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	2200      	movs	r2, #0
 800064e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim11);																																								//Timer starten
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <DMX_Transmit+0x3c>)
 8000652:	f004 fae3 	bl	8004c1c <HAL_TIM_Base_Start_IT>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40020000 	.word	0x40020000
 8000664:	20000a98 	.word	0x20000a98

08000668 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800066e:	2300      	movs	r3, #0
 8000670:	607b      	str	r3, [r7, #4]
 8000672:	4b10      	ldr	r3, [pc, #64]	; (80006b4 <MX_DMA_Init+0x4c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <MX_DMA_Init+0x4c>)
 8000678:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800067c:	6313      	str	r3, [r2, #48]	; 0x30
 800067e:	4b0d      	ldr	r3, [pc, #52]	; (80006b4 <MX_DMA_Init+0x4c>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800068a:	2200      	movs	r2, #0
 800068c:	2100      	movs	r1, #0
 800068e:	203b      	movs	r0, #59	; 0x3b
 8000690:	f001 fa3b 	bl	8001b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000694:	203b      	movs	r0, #59	; 0x3b
 8000696:	f001 fa54 	bl	8001b42 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800069a:	2200      	movs	r2, #0
 800069c:	2100      	movs	r1, #0
 800069e:	2045      	movs	r0, #69	; 0x45
 80006a0:	f001 fa33 	bl	8001b0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80006a4:	2045      	movs	r0, #69	; 0x45
 80006a6:	f001 fa4c 	bl	8001b42 <HAL_NVIC_EnableIRQ>

}
 80006aa:	bf00      	nop
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40023800 	.word	0x40023800

080006b8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08e      	sub	sp, #56	; 0x38
 80006bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]
 80006d2:	4ba0      	ldr	r3, [pc, #640]	; (8000954 <MX_GPIO_Init+0x29c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a9f      	ldr	r2, [pc, #636]	; (8000954 <MX_GPIO_Init+0x29c>)
 80006d8:	f043 0310 	orr.w	r3, r3, #16
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b9d      	ldr	r3, [pc, #628]	; (8000954 <MX_GPIO_Init+0x29c>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0310 	and.w	r3, r3, #16
 80006e6:	623b      	str	r3, [r7, #32]
 80006e8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
 80006ee:	4b99      	ldr	r3, [pc, #612]	; (8000954 <MX_GPIO_Init+0x29c>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	4a98      	ldr	r2, [pc, #608]	; (8000954 <MX_GPIO_Init+0x29c>)
 80006f4:	f043 0304 	orr.w	r3, r3, #4
 80006f8:	6313      	str	r3, [r2, #48]	; 0x30
 80006fa:	4b96      	ldr	r3, [pc, #600]	; (8000954 <MX_GPIO_Init+0x29c>)
 80006fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fe:	f003 0304 	and.w	r3, r3, #4
 8000702:	61fb      	str	r3, [r7, #28]
 8000704:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000706:	2300      	movs	r3, #0
 8000708:	61bb      	str	r3, [r7, #24]
 800070a:	4b92      	ldr	r3, [pc, #584]	; (8000954 <MX_GPIO_Init+0x29c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	4a91      	ldr	r2, [pc, #580]	; (8000954 <MX_GPIO_Init+0x29c>)
 8000710:	f043 0320 	orr.w	r3, r3, #32
 8000714:	6313      	str	r3, [r2, #48]	; 0x30
 8000716:	4b8f      	ldr	r3, [pc, #572]	; (8000954 <MX_GPIO_Init+0x29c>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	f003 0320 	and.w	r3, r3, #32
 800071e:	61bb      	str	r3, [r7, #24]
 8000720:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000722:	2300      	movs	r3, #0
 8000724:	617b      	str	r3, [r7, #20]
 8000726:	4b8b      	ldr	r3, [pc, #556]	; (8000954 <MX_GPIO_Init+0x29c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	4a8a      	ldr	r2, [pc, #552]	; (8000954 <MX_GPIO_Init+0x29c>)
 800072c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000730:	6313      	str	r3, [r2, #48]	; 0x30
 8000732:	4b88      	ldr	r3, [pc, #544]	; (8000954 <MX_GPIO_Init+0x29c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800073a:	617b      	str	r3, [r7, #20]
 800073c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b84      	ldr	r3, [pc, #528]	; (8000954 <MX_GPIO_Init+0x29c>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a83      	ldr	r2, [pc, #524]	; (8000954 <MX_GPIO_Init+0x29c>)
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b81      	ldr	r3, [pc, #516]	; (8000954 <MX_GPIO_Init+0x29c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0301 	and.w	r3, r3, #1
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b7d      	ldr	r3, [pc, #500]	; (8000954 <MX_GPIO_Init+0x29c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a7c      	ldr	r2, [pc, #496]	; (8000954 <MX_GPIO_Init+0x29c>)
 8000764:	f043 0302 	orr.w	r3, r3, #2
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b7a      	ldr	r3, [pc, #488]	; (8000954 <MX_GPIO_Init+0x29c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0302 	and.w	r3, r3, #2
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b76      	ldr	r3, [pc, #472]	; (8000954 <MX_GPIO_Init+0x29c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a75      	ldr	r2, [pc, #468]	; (8000954 <MX_GPIO_Init+0x29c>)
 8000780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b73      	ldr	r3, [pc, #460]	; (8000954 <MX_GPIO_Init+0x29c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b6f      	ldr	r3, [pc, #444]	; (8000954 <MX_GPIO_Init+0x29c>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a6e      	ldr	r2, [pc, #440]	; (8000954 <MX_GPIO_Init+0x29c>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b6c      	ldr	r3, [pc, #432]	; (8000954 <MX_GPIO_Init+0x29c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_SD_Pin|LED_STATE_Pin|LED_RX_Pin|LED_TX_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	213c      	movs	r1, #60	; 0x3c
 80007b2:	4869      	ldr	r0, [pc, #420]	; (8000958 <MX_GPIO_Init+0x2a0>)
 80007b4:	f001 ff08 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DMX_DE_GPIO_Port, DMX_DE_Pin, GPIO_PIN_RESET);
 80007b8:	2200      	movs	r2, #0
 80007ba:	2104      	movs	r1, #4
 80007bc:	4867      	ldr	r0, [pc, #412]	; (800095c <MX_GPIO_Init+0x2a4>)
 80007be:	f001 ff03 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin|LCD_E_Pin|LCD_D0_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	21f0      	movs	r1, #240	; 0xf0
 80007c6:	4866      	ldr	r0, [pc, #408]	; (8000960 <MX_GPIO_Init+0x2a8>)
 80007c8:	f001 fefe 	bl	80025c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 41fc 	mov.w	r1, #32256	; 0x7e00
 80007d2:	4864      	ldr	r0, [pc, #400]	; (8000964 <MX_GPIO_Init+0x2ac>)
 80007d4:	f001 fef8 	bl	80025c8 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED_SD_Pin|LED_STATE_Pin|LED_RX_Pin|LED_TX_Pin;
 80007d8:	233c      	movs	r3, #60	; 0x3c
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ec:	4619      	mov	r1, r3
 80007ee:	485a      	ldr	r0, [pc, #360]	; (8000958 <MX_GPIO_Init+0x2a0>)
 80007f0:	f001 fd3e 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC5
                           PC6 PC7 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 80007f4:	f64f 43ef 	movw	r3, #64751	; 0xfcef
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007fa:	2303      	movs	r3, #3
 80007fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000806:	4619      	mov	r1, r3
 8000808:	4857      	ldr	r0, [pc, #348]	; (8000968 <MX_GPIO_Init+0x2b0>)
 800080a:	f001 fd31 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800080e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000814:	2303      	movs	r3, #3
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800081c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000820:	4619      	mov	r1, r3
 8000822:	4852      	ldr	r0, [pc, #328]	; (800096c <MX_GPIO_Init+0x2b4>)
 8000824:	f001 fd24 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DMX_DE_Pin;
 8000828:	2304      	movs	r3, #4
 800082a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800082c:	2301      	movs	r3, #1
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000834:	2300      	movs	r3, #0
 8000836:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DMX_DE_GPIO_Port, &GPIO_InitStruct);
 8000838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800083c:	4619      	mov	r1, r3
 800083e:	4847      	ldr	r0, [pc, #284]	; (800095c <MX_GPIO_Init+0x2a4>)
 8000840:	f001 fd16 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA8 PA9
                           PA10 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 8000844:	f249 7318 	movw	r3, #38680	; 0x9718
 8000848:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800084a:	2303      	movs	r3, #3
 800084c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000852:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000856:	4619      	mov	r1, r3
 8000858:	4840      	ldr	r0, [pc, #256]	; (800095c <MX_GPIO_Init+0x2a4>)
 800085a:	f001 fd09 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_BACK_Pin|BTN_ENTER_Pin|BTN_DOWN_Pin;
 800085e:	23e0      	movs	r3, #224	; 0xe0
 8000860:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000862:	2300      	movs	r3, #0
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000866:	2301      	movs	r3, #1
 8000868:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086e:	4619      	mov	r1, r3
 8000870:	483a      	ldr	r0, [pc, #232]	; (800095c <MX_GPIO_Init+0x2a4>)
 8000872:	f001 fcfd 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|SDIO_DETECT_Pin;
 8000876:	f44f 7304 	mov.w	r3, #528	; 0x210
 800087a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800087c:	2300      	movs	r3, #0
 800087e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000880:	2301      	movs	r3, #1
 8000882:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000888:	4619      	mov	r1, r3
 800088a:	4837      	ldr	r0, [pc, #220]	; (8000968 <MX_GPIO_Init+0x2b0>)
 800088c:	f001 fcf0 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB14 PB15 PB3 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 8000890:	f64c 73fb 	movw	r3, #53243	; 0xcffb
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000896:	2303      	movs	r3, #3
 8000898:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a2:	4619      	mov	r1, r3
 80008a4:	4832      	ldr	r0, [pc, #200]	; (8000970 <MX_GPIO_Init+0x2b8>)
 80008a6:	f001 fce3 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80008aa:	f248 13ff 	movw	r3, #33279	; 0x81ff
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008b0:	2303      	movs	r3, #3
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008bc:	4619      	mov	r1, r3
 80008be:	4829      	ldr	r0, [pc, #164]	; (8000964 <MX_GPIO_Init+0x2ac>)
 80008c0:	f001 fcd6 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80008c4:	f64f 7383 	movw	r3, #65411	; 0xff83
 80008c8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008ca:	2303      	movs	r3, #3
 80008cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008d6:	4619      	mov	r1, r3
 80008d8:	481f      	ldr	r0, [pc, #124]	; (8000958 <MX_GPIO_Init+0x2a0>)
 80008da:	f001 fcc9 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 80008de:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e4:	2300      	movs	r3, #0
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008f0:	4619      	mov	r1, r3
 80008f2:	481f      	ldr	r0, [pc, #124]	; (8000970 <MX_GPIO_Init+0x2b8>)
 80008f4:	f001 fcbc 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80008f8:	f64f 730b 	movw	r3, #65291	; 0xff0b
 80008fc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008fe:	2303      	movs	r3, #3
 8000900:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000906:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090a:	4619      	mov	r1, r3
 800090c:	4814      	ldr	r0, [pc, #80]	; (8000960 <MX_GPIO_Init+0x2a8>)
 800090e:	f001 fcaf 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D0_Pin|LCD_D1_Pin;
 8000912:	23f0      	movs	r3, #240	; 0xf0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	2301      	movs	r3, #1
 8000918:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091e:	2300      	movs	r3, #0
 8000920:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000926:	4619      	mov	r1, r3
 8000928:	480d      	ldr	r0, [pc, #52]	; (8000960 <MX_GPIO_Init+0x2a8>)
 800092a:	f001 fca1 	bl	8002270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
 800092e:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000934:	2301      	movs	r3, #1
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093c:	2300      	movs	r3, #0
 800093e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	4619      	mov	r1, r3
 8000946:	4807      	ldr	r0, [pc, #28]	; (8000964 <MX_GPIO_Init+0x2ac>)
 8000948:	f001 fc92 	bl	8002270 <HAL_GPIO_Init>

}
 800094c:	bf00      	nop
 800094e:	3738      	adds	r7, #56	; 0x38
 8000950:	46bd      	mov	sp, r7
 8000952:	bd80      	pop	{r7, pc}
 8000954:	40023800 	.word	0x40023800
 8000958:	40021000 	.word	0x40021000
 800095c:	40020000 	.word	0x40020000
 8000960:	40020c00 	.word	0x40020c00
 8000964:	40021800 	.word	0x40021800
 8000968:	40020800 	.word	0x40020800
 800096c:	40021400 	.word	0x40021400
 8000970:	40020400 	.word	0x40020400

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000978:	f000 ff56 	bl	8001828 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097c:	f000 f860 	bl	8000a40 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(1000);
 8000980:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000984:	f000 ffc2 	bl	800190c <HAL_Delay>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000988:	f7ff fe96 	bl	80006b8 <MX_GPIO_Init>
  MX_DMA_Init();
 800098c:	f7ff fe6c 	bl	8000668 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000990:	f000 f98c 	bl	8000cac <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000994:	f006 fc84 	bl	80072a0 <MX_FATFS_Init>
  MX_TIM1_Init();
 8000998:	f000 fb8c 	bl	80010b4 <MX_TIM1_Init>
  MX_TIM10_Init();
 800099c:	f000 fcae 	bl	80012fc <MX_TIM10_Init>
  MX_TIM9_Init();
 80009a0:	f000 fc40 	bl	8001224 <MX_TIM9_Init>
  MX_TIM14_Init();
 80009a4:	f000 fd1e 	bl	80013e4 <MX_TIM14_Init>
  MX_TIM11_Init();
 80009a8:	f000 fcd4 	bl	8001354 <MX_TIM11_Init>
  MX_TIM13_Init();
 80009ac:	f000 fcf4 	bl	8001398 <MX_TIM13_Init>
  MX_TIM7_Init();
 80009b0:	f000 fc02 	bl	80011b8 <MX_TIM7_Init>
  MX_UART4_Init();
 80009b4:	f000 fe92 	bl	80016dc <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);		//LCD
 80009b8:	210c      	movs	r1, #12
 80009ba:	4819      	ldr	r0, [pc, #100]	; (8000a20 <main+0xac>)
 80009bc:	f004 fa1c 	bl	8004df8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);		//LED
 80009c0:	2104      	movs	r1, #4
 80009c2:	4818      	ldr	r0, [pc, #96]	; (8000a24 <main+0xb0>)
 80009c4:	f004 fa18 	bl	8004df8 <HAL_TIM_PWM_Start>


  htim1.Instance->CCR4 = 500;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <main+0xac>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80009d0:	641a      	str	r2, [r3, #64]	; 0x40
  htim9.Instance->CCR2 = 1000;
 80009d2:	4b14      	ldr	r3, [pc, #80]	; (8000a24 <main+0xb0>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80009da:	639a      	str	r2, [r3, #56]	; 0x38


  DMX_Init(&Univers, &huart4, "DMX1.txt", "DMX1Info.txt");
 80009dc:	4b12      	ldr	r3, [pc, #72]	; (8000a28 <main+0xb4>)
 80009de:	4a13      	ldr	r2, [pc, #76]	; (8000a2c <main+0xb8>)
 80009e0:	4913      	ldr	r1, [pc, #76]	; (8000a30 <main+0xbc>)
 80009e2:	4814      	ldr	r0, [pc, #80]	; (8000a34 <main+0xc0>)
 80009e4:	f7ff fd8a 	bl	80004fc <DMX_Init>
  HAL_GPIO_WritePin(DMX_DE_GPIO_Port, DMX_DE_Pin, GPIO_PIN_SET);
 80009e8:	2201      	movs	r2, #1
 80009ea:	2104      	movs	r1, #4
 80009ec:	4812      	ldr	r0, [pc, #72]	; (8000a38 <main+0xc4>)
 80009ee:	f001 fdeb 	bl	80025c8 <HAL_GPIO_WritePin>
  notify(10, 100);
 80009f2:	2164      	movs	r1, #100	; 0x64
 80009f4:	200a      	movs	r0, #10
 80009f6:	f000 f8b5 	bl	8000b64 <notify>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  DMX_sendonechannel(&Univers, 1, testvalue);
 80009fa:	4b10      	ldr	r3, [pc, #64]	; (8000a3c <main+0xc8>)
 80009fc:	781b      	ldrb	r3, [r3, #0]
 80009fe:	461a      	mov	r2, r3
 8000a00:	2101      	movs	r1, #1
 8000a02:	480c      	ldr	r0, [pc, #48]	; (8000a34 <main+0xc0>)
 8000a04:	f7ff fde4 	bl	80005d0 <DMX_sendonechannel>
	  testvalue++;
 8000a08:	4b0c      	ldr	r3, [pc, #48]	; (8000a3c <main+0xc8>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	b2da      	uxtb	r2, r3
 8000a10:	4b0a      	ldr	r3, [pc, #40]	; (8000a3c <main+0xc8>)
 8000a12:	701a      	strb	r2, [r3, #0]
	  HAL_Delay(1000);
 8000a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a18:	f000 ff78 	bl	800190c <HAL_Delay>
	  DMX_sendonechannel(&Univers, 1, testvalue);
 8000a1c:	e7ed      	b.n	80009fa <main+0x86>
 8000a1e:	bf00      	nop
 8000a20:	20000ae0 	.word	0x20000ae0
 8000a24:	20000b28 	.word	0x20000b28
 8000a28:	0800776c 	.word	0x0800776c
 8000a2c:	0800777c 	.word	0x0800777c
 8000a30:	20000c00 	.word	0x20000c00
 8000a34:	2000002c 	.word	0x2000002c
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	200008b4 	.word	0x200008b4

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b0ac      	sub	sp, #176	; 0xb0
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000a4a:	2234      	movs	r2, #52	; 0x34
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f006 fe78 	bl	8007744 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
 8000a5e:	609a      	str	r2, [r3, #8]
 8000a60:	60da      	str	r2, [r3, #12]
 8000a62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	225c      	movs	r2, #92	; 0x5c
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f006 fe69 	bl	8007744 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a72:	2300      	movs	r3, #0
 8000a74:	60bb      	str	r3, [r7, #8]
 8000a76:	4b39      	ldr	r3, [pc, #228]	; (8000b5c <SystemClock_Config+0x11c>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a38      	ldr	r2, [pc, #224]	; (8000b5c <SystemClock_Config+0x11c>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b36      	ldr	r3, [pc, #216]	; (8000b5c <SystemClock_Config+0x11c>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b33      	ldr	r3, [pc, #204]	; (8000b60 <SystemClock_Config+0x120>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	4a32      	ldr	r2, [pc, #200]	; (8000b60 <SystemClock_Config+0x120>)
 8000a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a9c:	6013      	str	r3, [r2, #0]
 8000a9e:	4b30      	ldr	r3, [pc, #192]	; (8000b60 <SystemClock_Config+0x120>)
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ab2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000abc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000aca:	23d8      	movs	r3, #216	; 0xd8
 8000acc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000ad6:	2308      	movs	r3, #8
 8000ad8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000adc:	2302      	movs	r3, #2
 8000ade:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ae2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f002 fb92 	bl	8003210 <HAL_RCC_OscConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000af2:	f000 f8d3 	bl	8000c9c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000af6:	f001 fd9b 	bl	8002630 <HAL_PWREx_EnableOverDrive>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000b00:	f000 f8cc 	bl	8000c9c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b04:	230f      	movs	r3, #15
 8000b06:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b08:	2302      	movs	r3, #2
 8000b0a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b10:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b14:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b1a:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b20:	2105      	movs	r1, #5
 8000b22:	4618      	mov	r0, r3
 8000b24:	f001 fdd4 	bl	80026d0 <HAL_RCC_ClockConfig>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b2e:	f000 f8b5 	bl	8000c9c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000b32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b36:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b40:	f107 030c 	add.w	r3, r7, #12
 8000b44:	4618      	mov	r0, r3
 8000b46:	f001 fedd 	bl	8002904 <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000b50:	f000 f8a4 	bl	8000c9c <Error_Handler>
  }
}
 8000b54:	bf00      	nop
 8000b56:	37b0      	adds	r7, #176	; 0xb0
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40023800 	.word	0x40023800
 8000b60:	40007000 	.word	0x40007000

08000b64 <notify>:
	*@param		cycles: Anzahl der LED Zustandswechsel
	*@param 	delay: Pause zwischen den Zustandwechseln
	*@retval	none
	*/
void notify(uint8_t cycles, uint16_t delay)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b084      	sub	sp, #16
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	460a      	mov	r2, r1
 8000b6e:	71fb      	strb	r3, [r7, #7]
 8000b70:	4613      	mov	r3, r2
 8000b72:	80bb      	strh	r3, [r7, #4]
	HAL_GPIO_WritePin(LED_STATE_GPIO_Port, LED_STATE_Pin, GPIO_PIN_RESET);
 8000b74:	2200      	movs	r2, #0
 8000b76:	2108      	movs	r1, #8
 8000b78:	480c      	ldr	r0, [pc, #48]	; (8000bac <notify+0x48>)
 8000b7a:	f001 fd25 	bl	80025c8 <HAL_GPIO_WritePin>
	for(int i = 0; i < cycles; i++)
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	e00a      	b.n	8000b9a <notify+0x36>
	{
		HAL_GPIO_TogglePin(LED_STATE_GPIO_Port, LED_STATE_Pin);
 8000b84:	2108      	movs	r1, #8
 8000b86:	4809      	ldr	r0, [pc, #36]	; (8000bac <notify+0x48>)
 8000b88:	f001 fd37 	bl	80025fa <HAL_GPIO_TogglePin>
		HAL_Delay(delay);
 8000b8c:	88bb      	ldrh	r3, [r7, #4]
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f000 febc 	bl	800190c <HAL_Delay>
	for(int i = 0; i < cycles; i++)
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	3301      	adds	r3, #1
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	dbf0      	blt.n	8000b84 <notify+0x20>
	}
}
 8000ba2:	bf00      	nop
 8000ba4:	bf00      	nop
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	40021000 	.word	0x40021000

08000bb0 <HAL_TIM_PeriodElapsedCallback>:
	*@brief 	Interruptfuntion f�r alle Timer. Wird aufgerufen wenn der Timer �berl�uft
	*@param 	htim: Timer handle
	*@retval 	none
	*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	if(htim == &htim10)
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a16      	ldr	r2, [pc, #88]	; (8000c14 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d025      	beq.n	8000c0c <HAL_TIM_PeriodElapsedCallback+0x5c>
	{

	}
	else if(htim == &htim11)	//Idle Line send
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a15      	ldr	r2, [pc, #84]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d109      	bne.n	8000bdc <HAL_TIM_PeriodElapsedCallback+0x2c>
	{
		HAL_TIM_Base_Stop_IT(&htim11);																																								//IDLE Timer stoppen
 8000bc8:	4813      	ldr	r0, [pc, #76]	; (8000c18 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000bca:	f004 f897 	bl	8004cfc <HAL_TIM_Base_Stop_IT>
//		DMX_TX_GPIO_Port->MODER = (DMX_TX_GPIO_Port->MODER &~GPIO_MODER_MODE0_Msk) | (2 << (GPIO_MODER_MODE0_Pos));		//Ausgangspin Modus zur�cksetzen
//		__HAL_UART_ENABLE(&huart4);																																										//Uart Schnittstelle aktivieren
		HAL_UART_Transmit_IT(&huart4, Univers.TxBuffer, 513);																													//Bytes senden
 8000bce:	f240 2201 	movw	r2, #513	; 0x201
 8000bd2:	4912      	ldr	r1, [pc, #72]	; (8000c1c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8000bd4:	4812      	ldr	r0, [pc, #72]	; (8000c20 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000bd6:	f005 f922 	bl	8005e1e <HAL_UART_Transmit_IT>
 8000bda:	e017      	b.n	8000c0c <HAL_TIM_PeriodElapsedCallback+0x5c>
	}
	else if(htim == &htim13)	//Timer f�r Aufnahmefunktion - Taktung 1 s
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	4a11      	ldr	r2, [pc, #68]	; (8000c24 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d107      	bne.n	8000bf4 <HAL_TIM_PeriodElapsedCallback+0x44>
	{
		seconds_passed++;
 8000be4:	4b10      	ldr	r3, [pc, #64]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000be6:	881b      	ldrh	r3, [r3, #0]
 8000be8:	b29b      	uxth	r3, r3
 8000bea:	3301      	adds	r3, #1
 8000bec:	b29a      	uxth	r2, r3
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000bf0:	801a      	strh	r2, [r3, #0]
		return;
 8000bf2:	e00b      	b.n	8000c0c <HAL_TIM_PeriodElapsedCallback+0x5c>
	}
	else if(htim == &htim7)	//Timer f�r Wiedergabefunktion - Taktung 1 ms
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4a0d      	ldr	r2, [pc, #52]	; (8000c2c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d107      	bne.n	8000c0c <HAL_TIM_PeriodElapsedCallback+0x5c>
	{
		m_seconds_passed++;
 8000bfc:	4b0c      	ldr	r3, [pc, #48]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000bfe:	881b      	ldrh	r3, [r3, #0]
 8000c00:	b29b      	uxth	r3, r3
 8000c02:	3301      	adds	r3, #1
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000c08:	801a      	strh	r2, [r3, #0]
		return;
 8000c0a:	bf00      	nop
	}
}
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000a08 	.word	0x20000a08
 8000c18:	20000a98 	.word	0x20000a98
 8000c1c:	200004aa 	.word	0x200004aa
 8000c20:	20000c00 	.word	0x20000c00
 8000c24:	20000a50 	.word	0x20000a50
 8000c28:	20000028 	.word	0x20000028
 8000c2c:	20000bb8 	.word	0x20000bb8
 8000c30:	2000002a 	.word	0x2000002a

08000c34 <HAL_UART_RxCpltCallback>:
	*@brief 	Interruptfunktion der UART Schnittstelle. Wird aufgerufen wenn der Empfangsvorgang beendet ist
	*@param 	huart: Pointer auf aufrufenden UART handle
	*@retval 	none
	*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) //Aufruf wenn DMX Paket vollst�ndig empfangen wurde
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	if(Univers.recording == 1)							//Überprüfen ob Aufnahme aktiv ist
 8000c3c:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <HAL_UART_RxCpltCallback+0x38>)
 8000c3e:	f893 347c 	ldrb.w	r3, [r3, #1148]	; 0x47c
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d10b      	bne.n	8000c5e <HAL_UART_RxCpltCallback+0x2a>
	{
		Univers.RxComplete = 1;
 8000c46:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <HAL_UART_RxCpltCallback+0x38>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	f883 247a 	strb.w	r2, [r3, #1146]	; 0x47a
		Univers.received_packets++;
 8000c4e:	4b07      	ldr	r3, [pc, #28]	; (8000c6c <HAL_UART_RxCpltCallback+0x38>)
 8000c50:	f8b3 3478 	ldrh.w	r3, [r3, #1144]	; 0x478
 8000c54:	3301      	adds	r3, #1
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <HAL_UART_RxCpltCallback+0x38>)
 8000c5a:	f8a3 2478 	strh.w	r2, [r3, #1144]	; 0x478
	}
}
 8000c5e:	bf00      	nop
 8000c60:	370c      	adds	r7, #12
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	2000002c 	.word	0x2000002c

08000c70 <HAL_UART_TxCpltCallback>:
	*@brief 	Interruptfunktion der UART Schnittstelle. Wird aufgerufen wenn ein Sendevorgang abgeschlossen ist
	*@param 	huart: Pointer auf aufrufenden UART handle
	*@retval 	none
	*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	if(Univers.sending == 1)
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <HAL_UART_TxCpltCallback+0x24>)
 8000c7a:	f893 347d 	ldrb.w	r3, [r3, #1149]	; 0x47d
 8000c7e:	2b01      	cmp	r3, #1
 8000c80:	d104      	bne.n	8000c8c <HAL_UART_TxCpltCallback+0x1c>
	{
//	__HAL_UART_DISABLE(&huart4);																																									//UART Ausgang auf LOW Pegel setzen ->DMX Brake
//	DMX_TX_GPIO_Port->MODER = (DMX_TX_GPIO_Port->MODER &~GPIO_MODER_MODE0_Msk) | (1<< (GPIO_MODER_MODE0_Pos));		//Modus des Ausgangspins zum beschreiben �ndern
	HAL_GPIO_WritePin(DMX_TX_GPIO_Port, DMX_TX_Pin, GPIO_PIN_RESET);																							//Ausgangspin mit BRAKE Pegel beschreiben (LOW)
 8000c82:	2200      	movs	r2, #0
 8000c84:	2101      	movs	r1, #1
 8000c86:	4804      	ldr	r0, [pc, #16]	; (8000c98 <HAL_UART_TxCpltCallback+0x28>)
 8000c88:	f001 fc9e 	bl	80025c8 <HAL_GPIO_WritePin>
	}
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	2000002c 	.word	0x2000002c
 8000c98:	40020000 	.word	0x40020000

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000ca0:	bf00      	nop
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
	...

08000cac <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_SDIO_SD_Init+0x38>)
 8000cb2:	4a0d      	ldr	r2, [pc, #52]	; (8000ce8 <MX_SDIO_SD_Init+0x3c>)
 8000cb4:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000cb6:	4b0b      	ldr	r3, [pc, #44]	; (8000ce4 <MX_SDIO_SD_Init+0x38>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000cbc:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_SDIO_SD_Init+0x38>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000cc2:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <MX_SDIO_SD_Init+0x38>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_SDIO_SD_Init+0x38>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000cce:	4b05      	ldr	r3, [pc, #20]	; (8000ce4 <MX_SDIO_SD_Init+0x38>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000cd4:	4b03      	ldr	r3, [pc, #12]	; (8000ce4 <MX_SDIO_SD_Init+0x38>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	20000984 	.word	0x20000984
 8000ce8:	40012c00 	.word	0x40012c00

08000cec <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b08c      	sub	sp, #48	; 0x30
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf4:	f107 031c 	add.w	r3, r7, #28
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a77      	ldr	r2, [pc, #476]	; (8000ee8 <HAL_SD_MspInit+0x1fc>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	f040 80e7 	bne.w	8000ede <HAL_SD_MspInit+0x1f2>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000d10:	2300      	movs	r3, #0
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	4b75      	ldr	r3, [pc, #468]	; (8000eec <HAL_SD_MspInit+0x200>)
 8000d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d18:	4a74      	ldr	r2, [pc, #464]	; (8000eec <HAL_SD_MspInit+0x200>)
 8000d1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d1e:	6453      	str	r3, [r2, #68]	; 0x44
 8000d20:	4b72      	ldr	r3, [pc, #456]	; (8000eec <HAL_SD_MspInit+0x200>)
 8000d22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d28:	61bb      	str	r3, [r7, #24]
 8000d2a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
 8000d30:	4b6e      	ldr	r3, [pc, #440]	; (8000eec <HAL_SD_MspInit+0x200>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	4a6d      	ldr	r2, [pc, #436]	; (8000eec <HAL_SD_MspInit+0x200>)
 8000d36:	f043 0302 	orr.w	r3, r3, #2
 8000d3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3c:	4b6b      	ldr	r3, [pc, #428]	; (8000eec <HAL_SD_MspInit+0x200>)
 8000d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d40:	f003 0302 	and.w	r3, r3, #2
 8000d44:	617b      	str	r3, [r7, #20]
 8000d46:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	613b      	str	r3, [r7, #16]
 8000d4c:	4b67      	ldr	r3, [pc, #412]	; (8000eec <HAL_SD_MspInit+0x200>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	4a66      	ldr	r2, [pc, #408]	; (8000eec <HAL_SD_MspInit+0x200>)
 8000d52:	f043 0304 	orr.w	r3, r3, #4
 8000d56:	6313      	str	r3, [r2, #48]	; 0x30
 8000d58:	4b64      	ldr	r3, [pc, #400]	; (8000eec <HAL_SD_MspInit+0x200>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	f003 0304 	and.w	r3, r3, #4
 8000d60:	613b      	str	r3, [r7, #16]
 8000d62:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d64:	2300      	movs	r3, #0
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	4b60      	ldr	r3, [pc, #384]	; (8000eec <HAL_SD_MspInit+0x200>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	4a5f      	ldr	r2, [pc, #380]	; (8000eec <HAL_SD_MspInit+0x200>)
 8000d6e:	f043 0308 	orr.w	r3, r3, #8
 8000d72:	6313      	str	r3, [r2, #48]	; 0x30
 8000d74:	4b5d      	ldr	r3, [pc, #372]	; (8000eec <HAL_SD_MspInit+0x200>)
 8000d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d78:	f003 0308 	and.w	r3, r3, #8
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d80:	2304      	movs	r3, #4
 8000d82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000d90:	230c      	movs	r3, #12
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4855      	ldr	r0, [pc, #340]	; (8000ef0 <HAL_SD_MspInit+0x204>)
 8000d9c:	f001 fa68 	bl	8002270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000da0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000da4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000daa:	2301      	movs	r3, #1
 8000dac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dae:	2303      	movs	r3, #3
 8000db0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000db2:	230c      	movs	r3, #12
 8000db4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000db6:	f107 031c 	add.w	r3, r7, #28
 8000dba:	4619      	mov	r1, r3
 8000dbc:	484d      	ldr	r0, [pc, #308]	; (8000ef4 <HAL_SD_MspInit+0x208>)
 8000dbe:	f001 fa57 	bl	8002270 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc6:	2302      	movs	r3, #2
 8000dc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dce:	2303      	movs	r3, #3
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000dd2:	230c      	movs	r3, #12
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	4846      	ldr	r0, [pc, #280]	; (8000ef8 <HAL_SD_MspInit+0x20c>)
 8000dde:	f001 fa47 	bl	8002270 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000de2:	4b46      	ldr	r3, [pc, #280]	; (8000efc <HAL_SD_MspInit+0x210>)
 8000de4:	4a46      	ldr	r2, [pc, #280]	; (8000f00 <HAL_SD_MspInit+0x214>)
 8000de6:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000de8:	4b44      	ldr	r3, [pc, #272]	; (8000efc <HAL_SD_MspInit+0x210>)
 8000dea:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dee:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000df0:	4b42      	ldr	r3, [pc, #264]	; (8000efc <HAL_SD_MspInit+0x210>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000df6:	4b41      	ldr	r3, [pc, #260]	; (8000efc <HAL_SD_MspInit+0x210>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000dfc:	4b3f      	ldr	r3, [pc, #252]	; (8000efc <HAL_SD_MspInit+0x210>)
 8000dfe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e02:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e04:	4b3d      	ldr	r3, [pc, #244]	; (8000efc <HAL_SD_MspInit+0x210>)
 8000e06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e0a:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e0c:	4b3b      	ldr	r3, [pc, #236]	; (8000efc <HAL_SD_MspInit+0x210>)
 8000e0e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e12:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000e14:	4b39      	ldr	r3, [pc, #228]	; (8000efc <HAL_SD_MspInit+0x210>)
 8000e16:	2220      	movs	r2, #32
 8000e18:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000e1a:	4b38      	ldr	r3, [pc, #224]	; (8000efc <HAL_SD_MspInit+0x210>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e20:	4b36      	ldr	r3, [pc, #216]	; (8000efc <HAL_SD_MspInit+0x210>)
 8000e22:	2204      	movs	r2, #4
 8000e24:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e26:	4b35      	ldr	r3, [pc, #212]	; (8000efc <HAL_SD_MspInit+0x210>)
 8000e28:	2203      	movs	r2, #3
 8000e2a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000e2c:	4b33      	ldr	r3, [pc, #204]	; (8000efc <HAL_SD_MspInit+0x210>)
 8000e2e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000e32:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000e34:	4b31      	ldr	r3, [pc, #196]	; (8000efc <HAL_SD_MspInit+0x210>)
 8000e36:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000e3a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000e3c:	482f      	ldr	r0, [pc, #188]	; (8000efc <HAL_SD_MspInit+0x210>)
 8000e3e:	f000 fe9b 	bl	8001b78 <HAL_DMA_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8000e48:	f7ff ff28 	bl	8000c9c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	4a2b      	ldr	r2, [pc, #172]	; (8000efc <HAL_SD_MspInit+0x210>)
 8000e50:	641a      	str	r2, [r3, #64]	; 0x40
 8000e52:	4a2a      	ldr	r2, [pc, #168]	; (8000efc <HAL_SD_MspInit+0x210>)
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000e58:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <HAL_SD_MspInit+0x218>)
 8000e5a:	4a2b      	ldr	r2, [pc, #172]	; (8000f08 <HAL_SD_MspInit+0x21c>)
 8000e5c:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000e5e:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <HAL_SD_MspInit+0x218>)
 8000e60:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e64:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e66:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <HAL_SD_MspInit+0x218>)
 8000e68:	2240      	movs	r2, #64	; 0x40
 8000e6a:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e6c:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <HAL_SD_MspInit+0x218>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e72:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <HAL_SD_MspInit+0x218>)
 8000e74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e78:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e7a:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <HAL_SD_MspInit+0x218>)
 8000e7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e80:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <HAL_SD_MspInit+0x218>)
 8000e84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e88:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000e8a:	4b1e      	ldr	r3, [pc, #120]	; (8000f04 <HAL_SD_MspInit+0x218>)
 8000e8c:	2220      	movs	r2, #32
 8000e8e:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000e90:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <HAL_SD_MspInit+0x218>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e96:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <HAL_SD_MspInit+0x218>)
 8000e98:	2204      	movs	r2, #4
 8000e9a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <HAL_SD_MspInit+0x218>)
 8000e9e:	2203      	movs	r2, #3
 8000ea0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000ea2:	4b18      	ldr	r3, [pc, #96]	; (8000f04 <HAL_SD_MspInit+0x218>)
 8000ea4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ea8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	; (8000f04 <HAL_SD_MspInit+0x218>)
 8000eac:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000eb0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000eb2:	4814      	ldr	r0, [pc, #80]	; (8000f04 <HAL_SD_MspInit+0x218>)
 8000eb4:	f000 fe60 	bl	8001b78 <HAL_DMA_Init>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8000ebe:	f7ff feed 	bl	8000c9c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4a0f      	ldr	r2, [pc, #60]	; (8000f04 <HAL_SD_MspInit+0x218>)
 8000ec6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ec8:	4a0e      	ldr	r2, [pc, #56]	; (8000f04 <HAL_SD_MspInit+0x218>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	2031      	movs	r0, #49	; 0x31
 8000ed4:	f000 fe19 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000ed8:	2031      	movs	r0, #49	; 0x31
 8000eda:	f000 fe32 	bl	8001b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000ede:	bf00      	nop
 8000ee0:	3730      	adds	r7, #48	; 0x30
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40012c00 	.word	0x40012c00
 8000eec:	40023800 	.word	0x40023800
 8000ef0:	40020400 	.word	0x40020400
 8000ef4:	40020800 	.word	0x40020800
 8000ef8:	40020c00 	.word	0x40020c00
 8000efc:	200008c4 	.word	0x200008c4
 8000f00:	40026458 	.word	0x40026458
 8000f04:	20000924 	.word	0x20000924
 8000f08:	400264a0 	.word	0x400264a0

08000f0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2a:	607b      	str	r3, [r7, #4]
 8000f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	603b      	str	r3, [r7, #0]
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f36:	4a08      	ldr	r2, [pc, #32]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_MspInit+0x4c>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f46:	603b      	str	r3, [r7, #0]
 8000f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40023800 	.word	0x40023800

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <MemManage_Handler+0x4>

08000f76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IncTick();
 8000fb0:	f000 fc8c 	bl	80018cc <HAL_IncTick>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb4:	f000 fc8a 	bl	80018cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}

08000fbc <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fc0:	4803      	ldr	r0, [pc, #12]	; (8000fd0 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8000fc2:	f004 f83b 	bl	800503c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8000fc6:	4803      	ldr	r0, [pc, #12]	; (8000fd4 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8000fc8:	f004 f838 	bl	800503c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000ae0 	.word	0x20000ae0
 8000fd4:	20000b28 	.word	0x20000b28

08000fd8 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <TIM1_UP_TIM10_IRQHandler+0x14>)
 8000fde:	f004 f82d 	bl	800503c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8000fe2:	4803      	ldr	r0, [pc, #12]	; (8000ff0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000fe4:	f004 f82a 	bl	800503c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000ae0 	.word	0x20000ae0
 8000ff0:	20000a08 	.word	0x20000a08

08000ff4 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8000ffa:	f004 f81f 	bl	800503c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8000ffe:	4803      	ldr	r0, [pc, #12]	; (800100c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001000:	f004 f81c 	bl	800503c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001004:	bf00      	nop
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000ae0 	.word	0x20000ae0
 800100c:	20000a98 	.word	0x20000a98

08001010 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001014:	4802      	ldr	r0, [pc, #8]	; (8001020 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001016:	f004 f811 	bl	800503c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800101a:	bf00      	nop
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	20000a50 	.word	0x20000a50

08001024 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 800102a:	f004 f807 	bl	800503c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000b70 	.word	0x20000b70

08001038 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <SDIO_IRQHandler+0x10>)
 800103e:	f002 ff97 	bl	8003f70 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000984 	.word	0x20000984

0800104c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <UART4_IRQHandler+0x10>)
 8001052:	f004 ff29 	bl	8005ea8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000c00 	.word	0x20000c00

08001060 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <DMA2_Stream3_IRQHandler+0x10>)
 8001066:	f000 fec7 	bl	8001df8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200008c4 	.word	0x200008c4

08001074 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <DMA2_Stream6_IRQHandler+0x10>)
 800107a:	f000 febd 	bl	8001df8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000924 	.word	0x20000924

08001088 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <SystemInit+0x28>)
 800108e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001092:	4a07      	ldr	r2, [pc, #28]	; (80010b0 <SystemInit+0x28>)
 8001094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800109c:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <SystemInit+0x28>)
 800109e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010a2:	609a      	str	r2, [r3, #8]
#endif
}
 80010a4:	bf00      	nop
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b092      	sub	sp, #72	; 0x48
 80010b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ba:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010be:	2200      	movs	r2, #0
 80010c0:	601a      	str	r2, [r3, #0]
 80010c2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
 80010d4:	615a      	str	r2, [r3, #20]
 80010d6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80010d8:	1d3b      	adds	r3, r7, #4
 80010da:	2220      	movs	r2, #32
 80010dc:	2100      	movs	r1, #0
 80010de:	4618      	mov	r0, r3
 80010e0:	f006 fb30 	bl	8007744 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010e4:	4b32      	ldr	r3, [pc, #200]	; (80011b0 <MX_TIM1_Init+0xfc>)
 80010e6:	4a33      	ldr	r2, [pc, #204]	; (80011b4 <MX_TIM1_Init+0x100>)
 80010e8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180;
 80010ea:	4b31      	ldr	r3, [pc, #196]	; (80011b0 <MX_TIM1_Init+0xfc>)
 80010ec:	22b4      	movs	r2, #180	; 0xb4
 80010ee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f0:	4b2f      	ldr	r3, [pc, #188]	; (80011b0 <MX_TIM1_Init+0xfc>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80010f6:	4b2e      	ldr	r3, [pc, #184]	; (80011b0 <MX_TIM1_Init+0xfc>)
 80010f8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010fc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fe:	4b2c      	ldr	r3, [pc, #176]	; (80011b0 <MX_TIM1_Init+0xfc>)
 8001100:	2200      	movs	r2, #0
 8001102:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001104:	4b2a      	ldr	r3, [pc, #168]	; (80011b0 <MX_TIM1_Init+0xfc>)
 8001106:	2200      	movs	r2, #0
 8001108:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800110a:	4b29      	ldr	r3, [pc, #164]	; (80011b0 <MX_TIM1_Init+0xfc>)
 800110c:	2280      	movs	r2, #128	; 0x80
 800110e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001110:	4827      	ldr	r0, [pc, #156]	; (80011b0 <MX_TIM1_Init+0xfc>)
 8001112:	f003 fe22 	bl	8004d5a <HAL_TIM_PWM_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800111c:	f7ff fdbe 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001120:	2300      	movs	r3, #0
 8001122:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001124:	2300      	movs	r3, #0
 8001126:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001128:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800112c:	4619      	mov	r1, r3
 800112e:	4820      	ldr	r0, [pc, #128]	; (80011b0 <MX_TIM1_Init+0xfc>)
 8001130:	f004 fd46 	bl	8005bc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800113a:	f7ff fdaf 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800113e:	2360      	movs	r3, #96	; 0x60
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001142:	2300      	movs	r3, #0
 8001144:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001146:	2300      	movs	r3, #0
 8001148:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800114a:	2300      	movs	r3, #0
 800114c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115a:	220c      	movs	r2, #12
 800115c:	4619      	mov	r1, r3
 800115e:	4814      	ldr	r0, [pc, #80]	; (80011b0 <MX_TIM1_Init+0xfc>)
 8001160:	f004 f874 	bl	800524c <HAL_TIM_PWM_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800116a:	f7ff fd97 	bl	8000c9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001176:	2300      	movs	r3, #0
 8001178:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001182:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001186:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800118c:	1d3b      	adds	r3, r7, #4
 800118e:	4619      	mov	r1, r3
 8001190:	4807      	ldr	r0, [pc, #28]	; (80011b0 <MX_TIM1_Init+0xfc>)
 8001192:	f004 fd91 	bl	8005cb8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800119c:	f7ff fd7e 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80011a0:	4803      	ldr	r0, [pc, #12]	; (80011b0 <MX_TIM1_Init+0xfc>)
 80011a2:	f000 fa39 	bl	8001618 <HAL_TIM_MspPostInit>

}
 80011a6:	bf00      	nop
 80011a8:	3748      	adds	r7, #72	; 0x48
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000ae0 	.word	0x20000ae0
 80011b4:	40010000 	.word	0x40010000

080011b8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011be:	463b      	mov	r3, r7
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80011c6:	4b15      	ldr	r3, [pc, #84]	; (800121c <MX_TIM7_Init+0x64>)
 80011c8:	4a15      	ldr	r2, [pc, #84]	; (8001220 <MX_TIM7_Init+0x68>)
 80011ca:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 180;
 80011cc:	4b13      	ldr	r3, [pc, #76]	; (800121c <MX_TIM7_Init+0x64>)
 80011ce:	22b4      	movs	r2, #180	; 0xb4
 80011d0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <MX_TIM7_Init+0x64>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 80011d8:	4b10      	ldr	r3, [pc, #64]	; (800121c <MX_TIM7_Init+0x64>)
 80011da:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011de:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e0:	4b0e      	ldr	r3, [pc, #56]	; (800121c <MX_TIM7_Init+0x64>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011e6:	480d      	ldr	r0, [pc, #52]	; (800121c <MX_TIM7_Init+0x64>)
 80011e8:	f003 fcc8 	bl	8004b7c <HAL_TIM_Base_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80011f2:	f7ff fd53 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011fe:	463b      	mov	r3, r7
 8001200:	4619      	mov	r1, r3
 8001202:	4806      	ldr	r0, [pc, #24]	; (800121c <MX_TIM7_Init+0x64>)
 8001204:	f004 fcdc 	bl	8005bc0 <HAL_TIMEx_MasterConfigSynchronization>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 800120e:	f7ff fd45 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000bb8 	.word	0x20000bb8
 8001220:	40001400 	.word	0x40001400

08001224 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b08c      	sub	sp, #48	; 0x30
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001238:	1d3b      	adds	r3, r7, #4
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
 8001244:	611a      	str	r2, [r3, #16]
 8001246:	615a      	str	r2, [r3, #20]
 8001248:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800124a:	4b2a      	ldr	r3, [pc, #168]	; (80012f4 <MX_TIM9_Init+0xd0>)
 800124c:	4a2a      	ldr	r2, [pc, #168]	; (80012f8 <MX_TIM9_Init+0xd4>)
 800124e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 180;
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <MX_TIM9_Init+0xd0>)
 8001252:	22b4      	movs	r2, #180	; 0xb4
 8001254:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001256:	4b27      	ldr	r3, [pc, #156]	; (80012f4 <MX_TIM9_Init+0xd0>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100;
 800125c:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <MX_TIM9_Init+0xd0>)
 800125e:	2264      	movs	r2, #100	; 0x64
 8001260:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001262:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <MX_TIM9_Init+0xd0>)
 8001264:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001268:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800126a:	4b22      	ldr	r3, [pc, #136]	; (80012f4 <MX_TIM9_Init+0xd0>)
 800126c:	2280      	movs	r2, #128	; 0x80
 800126e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001270:	4820      	ldr	r0, [pc, #128]	; (80012f4 <MX_TIM9_Init+0xd0>)
 8001272:	f003 fc83 	bl	8004b7c <HAL_TIM_Base_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800127c:	f7ff fd0e 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001280:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001284:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001286:	f107 0320 	add.w	r3, r7, #32
 800128a:	4619      	mov	r1, r3
 800128c:	4819      	ldr	r0, [pc, #100]	; (80012f4 <MX_TIM9_Init+0xd0>)
 800128e:	f004 f89b 	bl	80053c8 <HAL_TIM_ConfigClockSource>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001298:	f7ff fd00 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800129c:	4815      	ldr	r0, [pc, #84]	; (80012f4 <MX_TIM9_Init+0xd0>)
 800129e:	f003 fd5c 	bl	8004d5a <HAL_TIM_PWM_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80012a8:	f7ff fcf8 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ac:	2360      	movs	r3, #96	; 0x60
 80012ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 80012b0:	f242 7310 	movw	r3, #10000	; 0x2710
 80012b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b6:	2300      	movs	r3, #0
 80012b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	2204      	movs	r2, #4
 80012c2:	4619      	mov	r1, r3
 80012c4:	480b      	ldr	r0, [pc, #44]	; (80012f4 <MX_TIM9_Init+0xd0>)
 80012c6:	f003 ffc1 	bl	800524c <HAL_TIM_PWM_ConfigChannel>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 80012d0:	f7ff fce4 	bl	8000c9c <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim9, TIM_CHANNEL_2);
 80012d4:	4b07      	ldr	r3, [pc, #28]	; (80012f4 <MX_TIM9_Init+0xd0>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	699a      	ldr	r2, [r3, #24]
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <MX_TIM9_Init+0xd0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012e2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80012e4:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MX_TIM9_Init+0xd0>)
 80012e6:	f000 f997 	bl	8001618 <HAL_TIM_MspPostInit>

}
 80012ea:	bf00      	nop
 80012ec:	3730      	adds	r7, #48	; 0x30
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	20000b28 	.word	0x20000b28
 80012f8:	40014000 	.word	0x40014000

080012fc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001300:	4b12      	ldr	r3, [pc, #72]	; (800134c <MX_TIM10_Init+0x50>)
 8001302:	4a13      	ldr	r2, [pc, #76]	; (8001350 <MX_TIM10_Init+0x54>)
 8001304:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_TIM10_Init+0x50>)
 8001308:	2200      	movs	r2, #0
 800130a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b0f      	ldr	r3, [pc, #60]	; (800134c <MX_TIM10_Init+0x50>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_TIM10_Init+0x50>)
 8001314:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001318:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800131a:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_TIM10_Init+0x50>)
 800131c:	2200      	movs	r2, #0
 800131e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001320:	4b0a      	ldr	r3, [pc, #40]	; (800134c <MX_TIM10_Init+0x50>)
 8001322:	2200      	movs	r2, #0
 8001324:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001326:	4809      	ldr	r0, [pc, #36]	; (800134c <MX_TIM10_Init+0x50>)
 8001328:	f003 fc28 	bl	8004b7c <HAL_TIM_Base_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001332:	f7ff fcb3 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim10, TIM_OPMODE_SINGLE) != HAL_OK)
 8001336:	2108      	movs	r1, #8
 8001338:	4804      	ldr	r0, [pc, #16]	; (800134c <MX_TIM10_Init+0x50>)
 800133a:	f003 fe25 	bl	8004f88 <HAL_TIM_OnePulse_Init>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8001344:	f7ff fcaa 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	bd80      	pop	{r7, pc}
 800134c:	20000a08 	.word	0x20000a08
 8001350:	40014400 	.word	0x40014400

08001354 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001358:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <MX_TIM11_Init+0x3c>)
 800135a:	4a0e      	ldr	r2, [pc, #56]	; (8001394 <MX_TIM11_Init+0x40>)
 800135c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 180;
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_TIM11_Init+0x3c>)
 8001360:	22b4      	movs	r2, #180	; 0xb4
 8001362:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001364:	4b0a      	ldr	r3, [pc, #40]	; (8001390 <MX_TIM11_Init+0x3c>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10;
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_TIM11_Init+0x3c>)
 800136c:	220a      	movs	r2, #10
 800136e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001370:	4b07      	ldr	r3, [pc, #28]	; (8001390 <MX_TIM11_Init+0x3c>)
 8001372:	2200      	movs	r2, #0
 8001374:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_TIM11_Init+0x3c>)
 8001378:	2280      	movs	r2, #128	; 0x80
 800137a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800137c:	4804      	ldr	r0, [pc, #16]	; (8001390 <MX_TIM11_Init+0x3c>)
 800137e:	f003 fbfd 	bl	8004b7c <HAL_TIM_Base_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8001388:	f7ff fc88 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000a98 	.word	0x20000a98
 8001394:	40014800 	.word	0x40014800

08001398 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <MX_TIM13_Init+0x44>)
 800139e:	4a10      	ldr	r2, [pc, #64]	; (80013e0 <MX_TIM13_Init+0x48>)
 80013a0:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 45000;
 80013a2:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <MX_TIM13_Init+0x44>)
 80013a4:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 80013a8:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013aa:	4b0c      	ldr	r3, [pc, #48]	; (80013dc <MX_TIM13_Init+0x44>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000;
 80013b0:	4b0a      	ldr	r3, [pc, #40]	; (80013dc <MX_TIM13_Init+0x44>)
 80013b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013b6:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <MX_TIM13_Init+0x44>)
 80013ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013be:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <MX_TIM13_Init+0x44>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 80013c6:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_TIM13_Init+0x44>)
 80013c8:	f003 fbd8 	bl	8004b7c <HAL_TIM_Base_Init>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <MX_TIM13_Init+0x3e>
  {
    Error_Handler();
 80013d2:	f7ff fc63 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 80013d6:	bf00      	nop
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20000a50 	.word	0x20000a50
 80013e0:	40001c00 	.word	0x40001c00

080013e4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80013e8:	4b12      	ldr	r3, [pc, #72]	; (8001434 <MX_TIM14_Init+0x50>)
 80013ea:	4a13      	ldr	r2, [pc, #76]	; (8001438 <MX_TIM14_Init+0x54>)
 80013ec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 180-1;
 80013ee:	4b11      	ldr	r3, [pc, #68]	; (8001434 <MX_TIM14_Init+0x50>)
 80013f0:	22b3      	movs	r2, #179	; 0xb3
 80013f2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013f4:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <MX_TIM14_Init+0x50>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10-1;
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <MX_TIM14_Init+0x50>)
 80013fc:	2209      	movs	r2, #9
 80013fe:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001400:	4b0c      	ldr	r3, [pc, #48]	; (8001434 <MX_TIM14_Init+0x50>)
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001406:	4b0b      	ldr	r3, [pc, #44]	; (8001434 <MX_TIM14_Init+0x50>)
 8001408:	2280      	movs	r2, #128	; 0x80
 800140a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800140c:	4809      	ldr	r0, [pc, #36]	; (8001434 <MX_TIM14_Init+0x50>)
 800140e:	f003 fbb5 	bl	8004b7c <HAL_TIM_Base_Init>
 8001412:	4603      	mov	r3, r0
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001418:	f7ff fc40 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim14, TIM_OPMODE_SINGLE) != HAL_OK)
 800141c:	2108      	movs	r1, #8
 800141e:	4805      	ldr	r0, [pc, #20]	; (8001434 <MX_TIM14_Init+0x50>)
 8001420:	f003 fdb2 	bl	8004f88 <HAL_TIM_OnePulse_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 800142a:	f7ff fc37 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	20000b70 	.word	0x20000b70
 8001438:	40002000 	.word	0x40002000

0800143c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a16      	ldr	r2, [pc, #88]	; (80014a4 <HAL_TIM_PWM_MspInit+0x68>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d125      	bne.n	800149a <HAL_TIM_PWM_MspInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <HAL_TIM_PWM_MspInit+0x6c>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	4a14      	ldr	r2, [pc, #80]	; (80014a8 <HAL_TIM_PWM_MspInit+0x6c>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6453      	str	r3, [r2, #68]	; 0x44
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <HAL_TIM_PWM_MspInit+0x6c>)
 8001460:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2018      	movs	r0, #24
 8001470:	f000 fb4b 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001474:	2018      	movs	r0, #24
 8001476:	f000 fb64 	bl	8001b42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
 800147c:	2100      	movs	r1, #0
 800147e:	2019      	movs	r0, #25
 8001480:	f000 fb43 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001484:	2019      	movs	r0, #25
 8001486:	f000 fb5c 	bl	8001b42 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800148a:	2200      	movs	r2, #0
 800148c:	2100      	movs	r1, #0
 800148e:	201a      	movs	r0, #26
 8001490:	f000 fb3b 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001494:	201a      	movs	r0, #26
 8001496:	f000 fb54 	bl	8001b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40010000 	.word	0x40010000
 80014a8:	40023800 	.word	0x40023800

080014ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b088      	sub	sp, #32
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a50      	ldr	r2, [pc, #320]	; (80015fc <HAL_TIM_Base_MspInit+0x150>)
 80014ba:	4293      	cmp	r3, r2
 80014bc:	d10e      	bne.n	80014dc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	61fb      	str	r3, [r7, #28]
 80014c2:	4b4f      	ldr	r3, [pc, #316]	; (8001600 <HAL_TIM_Base_MspInit+0x154>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a4e      	ldr	r2, [pc, #312]	; (8001600 <HAL_TIM_Base_MspInit+0x154>)
 80014c8:	f043 0320 	orr.w	r3, r3, #32
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b4c      	ldr	r3, [pc, #304]	; (8001600 <HAL_TIM_Base_MspInit+0x154>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 0320 	and.w	r3, r3, #32
 80014d6:	61fb      	str	r3, [r7, #28]
 80014d8:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80014da:	e08a      	b.n	80015f2 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM9)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a48      	ldr	r2, [pc, #288]	; (8001604 <HAL_TIM_Base_MspInit+0x158>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d116      	bne.n	8001514 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	61bb      	str	r3, [r7, #24]
 80014ea:	4b45      	ldr	r3, [pc, #276]	; (8001600 <HAL_TIM_Base_MspInit+0x154>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	4a44      	ldr	r2, [pc, #272]	; (8001600 <HAL_TIM_Base_MspInit+0x154>)
 80014f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014f4:	6453      	str	r3, [r2, #68]	; 0x44
 80014f6:	4b42      	ldr	r3, [pc, #264]	; (8001600 <HAL_TIM_Base_MspInit+0x154>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014fe:	61bb      	str	r3, [r7, #24]
 8001500:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	2018      	movs	r0, #24
 8001508:	f000 faff 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800150c:	2018      	movs	r0, #24
 800150e:	f000 fb18 	bl	8001b42 <HAL_NVIC_EnableIRQ>
}
 8001512:	e06e      	b.n	80015f2 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM10)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a3b      	ldr	r2, [pc, #236]	; (8001608 <HAL_TIM_Base_MspInit+0x15c>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d116      	bne.n	800154c <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	4b37      	ldr	r3, [pc, #220]	; (8001600 <HAL_TIM_Base_MspInit+0x154>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	4a36      	ldr	r2, [pc, #216]	; (8001600 <HAL_TIM_Base_MspInit+0x154>)
 8001528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800152c:	6453      	str	r3, [r2, #68]	; 0x44
 800152e:	4b34      	ldr	r3, [pc, #208]	; (8001600 <HAL_TIM_Base_MspInit+0x154>)
 8001530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2019      	movs	r0, #25
 8001540:	f000 fae3 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001544:	2019      	movs	r0, #25
 8001546:	f000 fafc 	bl	8001b42 <HAL_NVIC_EnableIRQ>
}
 800154a:	e052      	b.n	80015f2 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM11)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a2e      	ldr	r2, [pc, #184]	; (800160c <HAL_TIM_Base_MspInit+0x160>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d116      	bne.n	8001584 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <HAL_TIM_Base_MspInit+0x154>)
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	4a28      	ldr	r2, [pc, #160]	; (8001600 <HAL_TIM_Base_MspInit+0x154>)
 8001560:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001564:	6453      	str	r3, [r2, #68]	; 0x44
 8001566:	4b26      	ldr	r3, [pc, #152]	; (8001600 <HAL_TIM_Base_MspInit+0x154>)
 8001568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800156a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2100      	movs	r1, #0
 8001576:	201a      	movs	r0, #26
 8001578:	f000 fac7 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800157c:	201a      	movs	r0, #26
 800157e:	f000 fae0 	bl	8001b42 <HAL_NVIC_EnableIRQ>
}
 8001582:	e036      	b.n	80015f2 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM13)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a21      	ldr	r2, [pc, #132]	; (8001610 <HAL_TIM_Base_MspInit+0x164>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d116      	bne.n	80015bc <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <HAL_TIM_Base_MspInit+0x154>)
 8001594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001596:	4a1a      	ldr	r2, [pc, #104]	; (8001600 <HAL_TIM_Base_MspInit+0x154>)
 8001598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800159c:	6413      	str	r3, [r2, #64]	; 0x40
 800159e:	4b18      	ldr	r3, [pc, #96]	; (8001600 <HAL_TIM_Base_MspInit+0x154>)
 80015a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	202c      	movs	r0, #44	; 0x2c
 80015b0:	f000 faab 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 80015b4:	202c      	movs	r0, #44	; 0x2c
 80015b6:	f000 fac4 	bl	8001b42 <HAL_NVIC_EnableIRQ>
}
 80015ba:	e01a      	b.n	80015f2 <HAL_TIM_Base_MspInit+0x146>
  else if(tim_baseHandle->Instance==TIM14)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a14      	ldr	r2, [pc, #80]	; (8001614 <HAL_TIM_Base_MspInit+0x168>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d115      	bne.n	80015f2 <HAL_TIM_Base_MspInit+0x146>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <HAL_TIM_Base_MspInit+0x154>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	4a0c      	ldr	r2, [pc, #48]	; (8001600 <HAL_TIM_Base_MspInit+0x154>)
 80015d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015d4:	6413      	str	r3, [r2, #64]	; 0x40
 80015d6:	4b0a      	ldr	r3, [pc, #40]	; (8001600 <HAL_TIM_Base_MspInit+0x154>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015de:	60bb      	str	r3, [r7, #8]
 80015e0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80015e2:	2200      	movs	r2, #0
 80015e4:	2100      	movs	r1, #0
 80015e6:	202d      	movs	r0, #45	; 0x2d
 80015e8:	f000 fa8f 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80015ec:	202d      	movs	r0, #45	; 0x2d
 80015ee:	f000 faa8 	bl	8001b42 <HAL_NVIC_EnableIRQ>
}
 80015f2:	bf00      	nop
 80015f4:	3720      	adds	r7, #32
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	40001400 	.word	0x40001400
 8001600:	40023800 	.word	0x40023800
 8001604:	40014000 	.word	0x40014000
 8001608:	40014400 	.word	0x40014400
 800160c:	40014800 	.word	0x40014800
 8001610:	40001c00 	.word	0x40001c00
 8001614:	40002000 	.word	0x40002000

08001618 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b08a      	sub	sp, #40	; 0x28
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001620:	f107 0314 	add.w	r3, r7, #20
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a24      	ldr	r2, [pc, #144]	; (80016c8 <HAL_TIM_MspPostInit+0xb0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d11f      	bne.n	800167a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	4b23      	ldr	r3, [pc, #140]	; (80016cc <HAL_TIM_MspPostInit+0xb4>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a22      	ldr	r2, [pc, #136]	; (80016cc <HAL_TIM_MspPostInit+0xb4>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b20      	ldr	r3, [pc, #128]	; (80016cc <HAL_TIM_MspPostInit+0xb4>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 8001656:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800165a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165c:	2302      	movs	r3, #2
 800165e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001660:	2300      	movs	r3, #0
 8001662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001664:	2300      	movs	r3, #0
 8001666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001668:	2301      	movs	r3, #1
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 800166c:	f107 0314 	add.w	r3, r7, #20
 8001670:	4619      	mov	r1, r3
 8001672:	4817      	ldr	r0, [pc, #92]	; (80016d0 <HAL_TIM_MspPostInit+0xb8>)
 8001674:	f000 fdfc 	bl	8002270 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001678:	e022      	b.n	80016c0 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM9)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a15      	ldr	r2, [pc, #84]	; (80016d4 <HAL_TIM_MspPostInit+0xbc>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d11d      	bne.n	80016c0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001684:	2300      	movs	r3, #0
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	4b10      	ldr	r3, [pc, #64]	; (80016cc <HAL_TIM_MspPostInit+0xb4>)
 800168a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168c:	4a0f      	ldr	r2, [pc, #60]	; (80016cc <HAL_TIM_MspPostInit+0xb4>)
 800168e:	f043 0310 	orr.w	r3, r3, #16
 8001692:	6313      	str	r3, [r2, #48]	; 0x30
 8001694:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <HAL_TIM_MspPostInit+0xb4>)
 8001696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001698:	f003 0310 	and.w	r3, r3, #16
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 80016a0:	2340      	movs	r3, #64	; 0x40
 80016a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a4:	2302      	movs	r3, #2
 80016a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ac:	2300      	movs	r3, #0
 80016ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80016b0:	2303      	movs	r3, #3
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	4619      	mov	r1, r3
 80016ba:	4807      	ldr	r0, [pc, #28]	; (80016d8 <HAL_TIM_MspPostInit+0xc0>)
 80016bc:	f000 fdd8 	bl	8002270 <HAL_GPIO_Init>
}
 80016c0:	bf00      	nop
 80016c2:	3728      	adds	r7, #40	; 0x28
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	40010000 	.word	0x40010000
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000
 80016d4:	40014000 	.word	0x40014000
 80016d8:	40021000 	.word	0x40021000

080016dc <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <MX_UART4_Init+0x4c>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	; (800172c <MX_UART4_Init+0x50>)
 80016e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 250000;
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <MX_UART4_Init+0x4c>)
 80016e8:	4a11      	ldr	r2, [pc, #68]	; (8001730 <MX_UART4_Init+0x54>)
 80016ea:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80016ec:	4b0e      	ldr	r3, [pc, #56]	; (8001728 <MX_UART4_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 80016f2:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <MX_UART4_Init+0x4c>)
 80016f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80016fa:	4b0b      	ldr	r3, [pc, #44]	; (8001728 <MX_UART4_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001700:	4b09      	ldr	r3, [pc, #36]	; (8001728 <MX_UART4_Init+0x4c>)
 8001702:	220c      	movs	r2, #12
 8001704:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001706:	4b08      	ldr	r3, [pc, #32]	; (8001728 <MX_UART4_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <MX_UART4_Init+0x4c>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001712:	4805      	ldr	r0, [pc, #20]	; (8001728 <MX_UART4_Init+0x4c>)
 8001714:	f004 fb36 	bl	8005d84 <HAL_UART_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800171e:	f7ff fabd 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001722:	bf00      	nop
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	20000c00 	.word	0x20000c00
 800172c:	40004c00 	.word	0x40004c00
 8001730:	0003d090 	.word	0x0003d090

08001734 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b08a      	sub	sp, #40	; 0x28
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	f107 0314 	add.w	r3, r7, #20
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1d      	ldr	r2, [pc, #116]	; (80017c8 <HAL_UART_MspInit+0x94>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d133      	bne.n	80017be <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001756:	2300      	movs	r3, #0
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <HAL_UART_MspInit+0x98>)
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	4a1b      	ldr	r2, [pc, #108]	; (80017cc <HAL_UART_MspInit+0x98>)
 8001760:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8001764:	6413      	str	r3, [r2, #64]	; 0x40
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <HAL_UART_MspInit+0x98>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800176a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	4b15      	ldr	r3, [pc, #84]	; (80017cc <HAL_UART_MspInit+0x98>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a14      	ldr	r2, [pc, #80]	; (80017cc <HAL_UART_MspInit+0x98>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b12      	ldr	r3, [pc, #72]	; (80017cc <HAL_UART_MspInit+0x98>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = DMX_TX_Pin|DMX_RX_Pin;
 800178e:	2303      	movs	r3, #3
 8001790:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	2302      	movs	r3, #2
 8001794:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001796:	2301      	movs	r3, #1
 8001798:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800179a:	2303      	movs	r3, #3
 800179c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800179e:	2308      	movs	r3, #8
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	4809      	ldr	r0, [pc, #36]	; (80017d0 <HAL_UART_MspInit+0x9c>)
 80017aa:	f000 fd61 	bl	8002270 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	2034      	movs	r0, #52	; 0x34
 80017b4:	f000 f9a9 	bl	8001b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80017b8:	2034      	movs	r0, #52	; 0x34
 80017ba:	f000 f9c2 	bl	8001b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80017be:	bf00      	nop
 80017c0:	3728      	adds	r7, #40	; 0x28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40004c00 	.word	0x40004c00
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40020000 	.word	0x40020000

080017d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800180c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017d8:	480d      	ldr	r0, [pc, #52]	; (8001810 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017da:	490e      	ldr	r1, [pc, #56]	; (8001814 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017dc:	4a0e      	ldr	r2, [pc, #56]	; (8001818 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017e0:	e002      	b.n	80017e8 <LoopCopyDataInit>

080017e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017e6:	3304      	adds	r3, #4

080017e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017ec:	d3f9      	bcc.n	80017e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ee:	4a0b      	ldr	r2, [pc, #44]	; (800181c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017f0:	4c0b      	ldr	r4, [pc, #44]	; (8001820 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017f4:	e001      	b.n	80017fa <LoopFillZerobss>

080017f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017f8:	3204      	adds	r2, #4

080017fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017fc:	d3fb      	bcc.n	80017f6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80017fe:	f7ff fc43 	bl	8001088 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001802:	f005 ff6d 	bl	80076e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001806:	f7ff f8b5 	bl	8000974 <main>
  bx  lr    
 800180a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800180c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001814:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001818:	080077cc 	.word	0x080077cc
  ldr r2, =_sbss
 800181c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001820:	200010b0 	.word	0x200010b0

08001824 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001824:	e7fe      	b.n	8001824 <ADC_IRQHandler>
	...

08001828 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <HAL_Init+0x40>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0d      	ldr	r2, [pc, #52]	; (8001868 <HAL_Init+0x40>)
 8001832:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001836:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001838:	4b0b      	ldr	r3, [pc, #44]	; (8001868 <HAL_Init+0x40>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a0a      	ldr	r2, [pc, #40]	; (8001868 <HAL_Init+0x40>)
 800183e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001842:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <HAL_Init+0x40>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a07      	ldr	r2, [pc, #28]	; (8001868 <HAL_Init+0x40>)
 800184a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001850:	2003      	movs	r0, #3
 8001852:	f000 f94f 	bl	8001af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001856:	2000      	movs	r0, #0
 8001858:	f000 f808 	bl	800186c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800185c:	f7ff fb56 	bl	8000f0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001860:	2300      	movs	r3, #0
}
 8001862:	4618      	mov	r0, r3
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	40023c00 	.word	0x40023c00

0800186c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001874:	4b12      	ldr	r3, [pc, #72]	; (80018c0 <HAL_InitTick+0x54>)
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	4b12      	ldr	r3, [pc, #72]	; (80018c4 <HAL_InitTick+0x58>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	4619      	mov	r1, r3
 800187e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001882:	fbb3 f3f1 	udiv	r3, r3, r1
 8001886:	fbb2 f3f3 	udiv	r3, r2, r3
 800188a:	4618      	mov	r0, r3
 800188c:	f000 f967 	bl	8001b5e <HAL_SYSTICK_Config>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d001      	beq.n	800189a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001896:	2301      	movs	r3, #1
 8001898:	e00e      	b.n	80018b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2b0f      	cmp	r3, #15
 800189e:	d80a      	bhi.n	80018b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018a0:	2200      	movs	r2, #0
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018a8:	f000 f92f 	bl	8001b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018ac:	4a06      	ldr	r2, [pc, #24]	; (80018c8 <HAL_InitTick+0x5c>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
 80018b4:	e000      	b.n	80018b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	20000000 	.word	0x20000000
 80018c4:	20000008 	.word	0x20000008
 80018c8:	20000004 	.word	0x20000004

080018cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d0:	4b06      	ldr	r3, [pc, #24]	; (80018ec <HAL_IncTick+0x20>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b06      	ldr	r3, [pc, #24]	; (80018f0 <HAL_IncTick+0x24>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	4a04      	ldr	r2, [pc, #16]	; (80018f0 <HAL_IncTick+0x24>)
 80018de:	6013      	str	r3, [r2, #0]
}
 80018e0:	bf00      	nop
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr
 80018ea:	bf00      	nop
 80018ec:	20000008 	.word	0x20000008
 80018f0:	20000c44 	.word	0x20000c44

080018f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return uwTick;
 80018f8:	4b03      	ldr	r3, [pc, #12]	; (8001908 <HAL_GetTick+0x14>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000c44 	.word	0x20000c44

0800190c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001914:	f7ff ffee 	bl	80018f4 <HAL_GetTick>
 8001918:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001924:	d005      	beq.n	8001932 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001926:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <HAL_Delay+0x44>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	461a      	mov	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4413      	add	r3, r2
 8001930:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001932:	bf00      	nop
 8001934:	f7ff ffde 	bl	80018f4 <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	68fa      	ldr	r2, [r7, #12]
 8001940:	429a      	cmp	r2, r3
 8001942:	d8f7      	bhi.n	8001934 <HAL_Delay+0x28>
  {
  }
}
 8001944:	bf00      	nop
 8001946:	bf00      	nop
 8001948:	3710      	adds	r7, #16
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20000008 	.word	0x20000008

08001954 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800196a:	68ba      	ldr	r2, [r7, #8]
 800196c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001970:	4013      	ands	r3, r2
 8001972:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800197c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001986:	4a04      	ldr	r2, [pc, #16]	; (8001998 <__NVIC_SetPriorityGrouping+0x44>)
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	60d3      	str	r3, [r2, #12]
}
 800198c:	bf00      	nop
 800198e:	3714      	adds	r7, #20
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019a0:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <__NVIC_GetPriorityGrouping+0x18>)
 80019a2:	68db      	ldr	r3, [r3, #12]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	f003 0307 	and.w	r3, r3, #7
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	4603      	mov	r3, r0
 80019c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	db0b      	blt.n	80019e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	f003 021f 	and.w	r2, r3, #31
 80019d0:	4907      	ldr	r1, [pc, #28]	; (80019f0 <__NVIC_EnableIRQ+0x38>)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	095b      	lsrs	r3, r3, #5
 80019d8:	2001      	movs	r0, #1
 80019da:	fa00 f202 	lsl.w	r2, r0, r2
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	e000e100 	.word	0xe000e100

080019f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019f4:	b480      	push	{r7}
 80019f6:	b083      	sub	sp, #12
 80019f8:	af00      	add	r7, sp, #0
 80019fa:	4603      	mov	r3, r0
 80019fc:	6039      	str	r1, [r7, #0]
 80019fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	db0a      	blt.n	8001a1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	b2da      	uxtb	r2, r3
 8001a0c:	490c      	ldr	r1, [pc, #48]	; (8001a40 <__NVIC_SetPriority+0x4c>)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	0112      	lsls	r2, r2, #4
 8001a14:	b2d2      	uxtb	r2, r2
 8001a16:	440b      	add	r3, r1
 8001a18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a1c:	e00a      	b.n	8001a34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	b2da      	uxtb	r2, r3
 8001a22:	4908      	ldr	r1, [pc, #32]	; (8001a44 <__NVIC_SetPriority+0x50>)
 8001a24:	79fb      	ldrb	r3, [r7, #7]
 8001a26:	f003 030f 	and.w	r3, r3, #15
 8001a2a:	3b04      	subs	r3, #4
 8001a2c:	0112      	lsls	r2, r2, #4
 8001a2e:	b2d2      	uxtb	r2, r2
 8001a30:	440b      	add	r3, r1
 8001a32:	761a      	strb	r2, [r3, #24]
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	e000e100 	.word	0xe000e100
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b089      	sub	sp, #36	; 0x24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a5c:	69fb      	ldr	r3, [r7, #28]
 8001a5e:	f1c3 0307 	rsb	r3, r3, #7
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	bf28      	it	cs
 8001a66:	2304      	movcs	r3, #4
 8001a68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a6a:	69fb      	ldr	r3, [r7, #28]
 8001a6c:	3304      	adds	r3, #4
 8001a6e:	2b06      	cmp	r3, #6
 8001a70:	d902      	bls.n	8001a78 <NVIC_EncodePriority+0x30>
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	3b03      	subs	r3, #3
 8001a76:	e000      	b.n	8001a7a <NVIC_EncodePriority+0x32>
 8001a78:	2300      	movs	r3, #0
 8001a7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a80:	69bb      	ldr	r3, [r7, #24]
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	43da      	mvns	r2, r3
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	401a      	ands	r2, r3
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43d9      	mvns	r1, r3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aa0:	4313      	orrs	r3, r2
         );
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	3b01      	subs	r3, #1
 8001abc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ac0:	d301      	bcc.n	8001ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e00f      	b.n	8001ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ac6:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <SysTick_Config+0x40>)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ace:	210f      	movs	r1, #15
 8001ad0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ad4:	f7ff ff8e 	bl	80019f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ad8:	4b05      	ldr	r3, [pc, #20]	; (8001af0 <SysTick_Config+0x40>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ade:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <SysTick_Config+0x40>)
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ae4:	2300      	movs	r3, #0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	e000e010 	.word	0xe000e010

08001af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff ff29 	bl	8001954 <__NVIC_SetPriorityGrouping>
}
 8001b02:	bf00      	nop
 8001b04:	3708      	adds	r7, #8
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}

08001b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b0a:	b580      	push	{r7, lr}
 8001b0c:	b086      	sub	sp, #24
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	4603      	mov	r3, r0
 8001b12:	60b9      	str	r1, [r7, #8]
 8001b14:	607a      	str	r2, [r7, #4]
 8001b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b1c:	f7ff ff3e 	bl	800199c <__NVIC_GetPriorityGrouping>
 8001b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	68b9      	ldr	r1, [r7, #8]
 8001b26:	6978      	ldr	r0, [r7, #20]
 8001b28:	f7ff ff8e 	bl	8001a48 <NVIC_EncodePriority>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b32:	4611      	mov	r1, r2
 8001b34:	4618      	mov	r0, r3
 8001b36:	f7ff ff5d 	bl	80019f4 <__NVIC_SetPriority>
}
 8001b3a:	bf00      	nop
 8001b3c:	3718      	adds	r7, #24
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}

08001b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b42:	b580      	push	{r7, lr}
 8001b44:	b082      	sub	sp, #8
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	4603      	mov	r3, r0
 8001b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7ff ff31 	bl	80019b8 <__NVIC_EnableIRQ>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b082      	sub	sp, #8
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7ff ffa2 	bl	8001ab0 <SysTick_Config>
 8001b6c:	4603      	mov	r3, r0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3708      	adds	r7, #8
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b086      	sub	sp, #24
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b84:	f7ff feb6 	bl	80018f4 <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d101      	bne.n	8001b94 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e099      	b.n	8001cc8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2202      	movs	r2, #2
 8001ba0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f022 0201 	bic.w	r2, r2, #1
 8001bb2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bb4:	e00f      	b.n	8001bd6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001bb6:	f7ff fe9d 	bl	80018f4 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b05      	cmp	r3, #5
 8001bc2:	d908      	bls.n	8001bd6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2220      	movs	r2, #32
 8001bc8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2203      	movs	r2, #3
 8001bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	e078      	b.n	8001cc8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1e8      	bne.n	8001bb6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	4b38      	ldr	r3, [pc, #224]	; (8001cd0 <HAL_DMA_Init+0x158>)
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c02:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691b      	ldr	r3, [r3, #16]
 8001c08:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c0e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c1a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	2b04      	cmp	r3, #4
 8001c2e:	d107      	bne.n	8001c40 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	697a      	ldr	r2, [r7, #20]
 8001c46:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	695b      	ldr	r3, [r3, #20]
 8001c4e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	f023 0307 	bic.w	r3, r3, #7
 8001c56:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c66:	2b04      	cmp	r3, #4
 8001c68:	d117      	bne.n	8001c9a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	4313      	orrs	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d00e      	beq.n	8001c9a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c7c:	6878      	ldr	r0, [r7, #4]
 8001c7e:	f000 fa7b 	bl	8002178 <DMA_CheckFifoParam>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2240      	movs	r2, #64	; 0x40
 8001c8c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2201      	movs	r2, #1
 8001c92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c96:	2301      	movs	r3, #1
 8001c98:	e016      	b.n	8001cc8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 fa32 	bl	800210c <DMA_CalcBaseAndBitshift>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb0:	223f      	movs	r2, #63	; 0x3f
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3718      	adds	r7, #24
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	f010803f 	.word	0xf010803f

08001cd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ce2:	f7ff fe07 	bl	80018f4 <HAL_GetTick>
 8001ce6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	2b02      	cmp	r3, #2
 8001cf2:	d008      	beq.n	8001d06 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2280      	movs	r2, #128	; 0x80
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e052      	b.n	8001dac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f022 0216 	bic.w	r2, r2, #22
 8001d14:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	695a      	ldr	r2, [r3, #20]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d24:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d103      	bne.n	8001d36 <HAL_DMA_Abort+0x62>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d007      	beq.n	8001d46 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f022 0208 	bic.w	r2, r2, #8
 8001d44:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681a      	ldr	r2, [r3, #0]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 0201 	bic.w	r2, r2, #1
 8001d54:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d56:	e013      	b.n	8001d80 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d58:	f7ff fdcc 	bl	80018f4 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b05      	cmp	r3, #5
 8001d64:	d90c      	bls.n	8001d80 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2220      	movs	r2, #32
 8001d6a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2203      	movs	r2, #3
 8001d78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001d7c:	2303      	movs	r3, #3
 8001d7e:	e015      	b.n	8001dac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1e4      	bne.n	8001d58 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d92:	223f      	movs	r2, #63	; 0x3f
 8001d94:	409a      	lsls	r2, r3
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d004      	beq.n	8001dd2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2280      	movs	r2, #128	; 0x80
 8001dcc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e00c      	b.n	8001dec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2205      	movs	r2, #5
 8001dd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f022 0201 	bic.w	r2, r2, #1
 8001de8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001dea:	2300      	movs	r3, #0
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	370c      	adds	r7, #12
 8001df0:	46bd      	mov	sp, r7
 8001df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df6:	4770      	bx	lr

08001df8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e04:	4b92      	ldr	r3, [pc, #584]	; (8002050 <HAL_DMA_IRQHandler+0x258>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a92      	ldr	r2, [pc, #584]	; (8002054 <HAL_DMA_IRQHandler+0x25c>)
 8001e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e0e:	0a9b      	lsrs	r3, r3, #10
 8001e10:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e16:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e22:	2208      	movs	r2, #8
 8001e24:	409a      	lsls	r2, r3
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	4013      	ands	r3, r2
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d01a      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d013      	beq.n	8001e64 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f022 0204 	bic.w	r2, r2, #4
 8001e4a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e50:	2208      	movs	r2, #8
 8001e52:	409a      	lsls	r2, r3
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e5c:	f043 0201 	orr.w	r2, r3, #1
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e68:	2201      	movs	r2, #1
 8001e6a:	409a      	lsls	r2, r3
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4013      	ands	r3, r2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d012      	beq.n	8001e9a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	695b      	ldr	r3, [r3, #20]
 8001e7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00b      	beq.n	8001e9a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e86:	2201      	movs	r2, #1
 8001e88:	409a      	lsls	r2, r3
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e92:	f043 0202 	orr.w	r2, r3, #2
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9e:	2204      	movs	r2, #4
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d012      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f003 0302 	and.w	r3, r3, #2
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d00b      	beq.n	8001ed0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebc:	2204      	movs	r2, #4
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec8:	f043 0204 	orr.w	r2, r3, #4
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed4:	2210      	movs	r2, #16
 8001ed6:	409a      	lsls	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d043      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d03c      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	2210      	movs	r2, #16
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d018      	beq.n	8001f3a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d108      	bne.n	8001f28 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d024      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	6878      	ldr	r0, [r7, #4]
 8001f24:	4798      	blx	r3
 8001f26:	e01f      	b.n	8001f68 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01b      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	4798      	blx	r3
 8001f38:	e016      	b.n	8001f68 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d107      	bne.n	8001f58 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f022 0208 	bic.w	r2, r2, #8
 8001f56:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d003      	beq.n	8001f68 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6c:	2220      	movs	r2, #32
 8001f6e:	409a      	lsls	r2, r3
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	4013      	ands	r3, r2
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	f000 808e 	beq.w	8002096 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0310 	and.w	r3, r3, #16
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 8086 	beq.w	8002096 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8e:	2220      	movs	r2, #32
 8001f90:	409a      	lsls	r2, r3
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b05      	cmp	r3, #5
 8001fa0:	d136      	bne.n	8002010 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f022 0216 	bic.w	r2, r2, #22
 8001fb0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fc0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d103      	bne.n	8001fd2 <HAL_DMA_IRQHandler+0x1da>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d007      	beq.n	8001fe2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0208 	bic.w	r2, r2, #8
 8001fe0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe6:	223f      	movs	r2, #63	; 0x3f
 8001fe8:	409a      	lsls	r2, r3
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002002:	2b00      	cmp	r3, #0
 8002004:	d07d      	beq.n	8002102 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	4798      	blx	r3
        }
        return;
 800200e:	e078      	b.n	8002102 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d01c      	beq.n	8002058 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d108      	bne.n	800203e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002030:	2b00      	cmp	r3, #0
 8002032:	d030      	beq.n	8002096 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	4798      	blx	r3
 800203c:	e02b      	b.n	8002096 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002042:	2b00      	cmp	r3, #0
 8002044:	d027      	beq.n	8002096 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	4798      	blx	r3
 800204e:	e022      	b.n	8002096 <HAL_DMA_IRQHandler+0x29e>
 8002050:	20000000 	.word	0x20000000
 8002054:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002062:	2b00      	cmp	r3, #0
 8002064:	d10f      	bne.n	8002086 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0210 	bic.w	r2, r2, #16
 8002074:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2201      	movs	r2, #1
 8002082:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800209a:	2b00      	cmp	r3, #0
 800209c:	d032      	beq.n	8002104 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d022      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2205      	movs	r2, #5
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 0201 	bic.w	r2, r2, #1
 80020c0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	3301      	adds	r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
 80020c8:	697a      	ldr	r2, [r7, #20]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d307      	bcc.n	80020de <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d1f2      	bne.n	80020c2 <HAL_DMA_IRQHandler+0x2ca>
 80020dc:	e000      	b.n	80020e0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020de:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2201      	movs	r2, #1
 80020ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d005      	beq.n	8002104 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	4798      	blx	r3
 8002100:	e000      	b.n	8002104 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002102:	bf00      	nop
    }
  }
}
 8002104:	3718      	adds	r7, #24
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop

0800210c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800210c:	b480      	push	{r7}
 800210e:	b085      	sub	sp, #20
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	b2db      	uxtb	r3, r3
 800211a:	3b10      	subs	r3, #16
 800211c:	4a14      	ldr	r2, [pc, #80]	; (8002170 <DMA_CalcBaseAndBitshift+0x64>)
 800211e:	fba2 2303 	umull	r2, r3, r2, r3
 8002122:	091b      	lsrs	r3, r3, #4
 8002124:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002126:	4a13      	ldr	r2, [pc, #76]	; (8002174 <DMA_CalcBaseAndBitshift+0x68>)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	781b      	ldrb	r3, [r3, #0]
 800212e:	461a      	mov	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	2b03      	cmp	r3, #3
 8002138:	d909      	bls.n	800214e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002142:	f023 0303 	bic.w	r3, r3, #3
 8002146:	1d1a      	adds	r2, r3, #4
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	659a      	str	r2, [r3, #88]	; 0x58
 800214c:	e007      	b.n	800215e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002156:	f023 0303 	bic.w	r3, r3, #3
 800215a:	687a      	ldr	r2, [r7, #4]
 800215c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002162:	4618      	mov	r0, r3
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
 800216e:	bf00      	nop
 8002170:	aaaaaaab 	.word	0xaaaaaaab
 8002174:	080077a0 	.word	0x080077a0

08002178 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002180:	2300      	movs	r3, #0
 8002182:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002188:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	699b      	ldr	r3, [r3, #24]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d11f      	bne.n	80021d2 <DMA_CheckFifoParam+0x5a>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d856      	bhi.n	8002246 <DMA_CheckFifoParam+0xce>
 8002198:	a201      	add	r2, pc, #4	; (adr r2, 80021a0 <DMA_CheckFifoParam+0x28>)
 800219a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800219e:	bf00      	nop
 80021a0:	080021b1 	.word	0x080021b1
 80021a4:	080021c3 	.word	0x080021c3
 80021a8:	080021b1 	.word	0x080021b1
 80021ac:	08002247 	.word	0x08002247
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d046      	beq.n	800224a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021bc:	2301      	movs	r3, #1
 80021be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021c0:	e043      	b.n	800224a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021ca:	d140      	bne.n	800224e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021d0:	e03d      	b.n	800224e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021da:	d121      	bne.n	8002220 <DMA_CheckFifoParam+0xa8>
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b03      	cmp	r3, #3
 80021e0:	d837      	bhi.n	8002252 <DMA_CheckFifoParam+0xda>
 80021e2:	a201      	add	r2, pc, #4	; (adr r2, 80021e8 <DMA_CheckFifoParam+0x70>)
 80021e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021e8:	080021f9 	.word	0x080021f9
 80021ec:	080021ff 	.word	0x080021ff
 80021f0:	080021f9 	.word	0x080021f9
 80021f4:	08002211 	.word	0x08002211
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	73fb      	strb	r3, [r7, #15]
      break;
 80021fc:	e030      	b.n	8002260 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002202:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d025      	beq.n	8002256 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800220e:	e022      	b.n	8002256 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002218:	d11f      	bne.n	800225a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800221e:	e01c      	b.n	800225a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002220:	68bb      	ldr	r3, [r7, #8]
 8002222:	2b02      	cmp	r3, #2
 8002224:	d903      	bls.n	800222e <DMA_CheckFifoParam+0xb6>
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b03      	cmp	r3, #3
 800222a:	d003      	beq.n	8002234 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800222c:	e018      	b.n	8002260 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	73fb      	strb	r3, [r7, #15]
      break;
 8002232:	e015      	b.n	8002260 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d00e      	beq.n	800225e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	73fb      	strb	r3, [r7, #15]
      break;
 8002244:	e00b      	b.n	800225e <DMA_CheckFifoParam+0xe6>
      break;
 8002246:	bf00      	nop
 8002248:	e00a      	b.n	8002260 <DMA_CheckFifoParam+0xe8>
      break;
 800224a:	bf00      	nop
 800224c:	e008      	b.n	8002260 <DMA_CheckFifoParam+0xe8>
      break;
 800224e:	bf00      	nop
 8002250:	e006      	b.n	8002260 <DMA_CheckFifoParam+0xe8>
      break;
 8002252:	bf00      	nop
 8002254:	e004      	b.n	8002260 <DMA_CheckFifoParam+0xe8>
      break;
 8002256:	bf00      	nop
 8002258:	e002      	b.n	8002260 <DMA_CheckFifoParam+0xe8>
      break;   
 800225a:	bf00      	nop
 800225c:	e000      	b.n	8002260 <DMA_CheckFifoParam+0xe8>
      break;
 800225e:	bf00      	nop
    }
  } 
  
  return status; 
 8002260:	7bfb      	ldrb	r3, [r7, #15]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
 800226e:	bf00      	nop

08002270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	; 0x24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800227a:	2300      	movs	r3, #0
 800227c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800227e:	2300      	movs	r3, #0
 8002280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002282:	2300      	movs	r3, #0
 8002284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002286:	2300      	movs	r3, #0
 8002288:	61fb      	str	r3, [r7, #28]
 800228a:	e165      	b.n	8002558 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800228c:	2201      	movs	r2, #1
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	fa02 f303 	lsl.w	r3, r2, r3
 8002294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	4013      	ands	r3, r2
 800229e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	429a      	cmp	r2, r3
 80022a6:	f040 8154 	bne.w	8002552 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0303 	and.w	r3, r3, #3
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d005      	beq.n	80022c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d130      	bne.n	8002324 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	2203      	movs	r2, #3
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43db      	mvns	r3, r3
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	4013      	ands	r3, r2
 80022d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	005b      	lsls	r3, r3, #1
 80022e2:	fa02 f303 	lsl.w	r3, r2, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4313      	orrs	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022f8:	2201      	movs	r2, #1
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	43db      	mvns	r3, r3
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	4013      	ands	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	091b      	lsrs	r3, r3, #4
 800230e:	f003 0201 	and.w	r2, r3, #1
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f003 0303 	and.w	r3, r3, #3
 800232c:	2b03      	cmp	r3, #3
 800232e:	d017      	beq.n	8002360 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	005b      	lsls	r3, r3, #1
 800233a:	2203      	movs	r2, #3
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	69fb      	ldr	r3, [r7, #28]
 800234e:	005b      	lsls	r3, r3, #1
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4313      	orrs	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69ba      	ldr	r2, [r7, #24]
 800235e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f003 0303 	and.w	r3, r3, #3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d123      	bne.n	80023b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	08da      	lsrs	r2, r3, #3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3208      	adds	r2, #8
 8002374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	f003 0307 	and.w	r3, r3, #7
 8002380:	009b      	lsls	r3, r3, #2
 8002382:	220f      	movs	r2, #15
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43db      	mvns	r3, r3
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	4013      	ands	r3, r2
 800238e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	691a      	ldr	r2, [r3, #16]
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	4313      	orrs	r3, r2
 80023a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	08da      	lsrs	r2, r3, #3
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	3208      	adds	r2, #8
 80023ae:	69b9      	ldr	r1, [r7, #24]
 80023b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	2203      	movs	r2, #3
 80023c0:	fa02 f303 	lsl.w	r3, r2, r3
 80023c4:	43db      	mvns	r3, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4013      	ands	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f003 0203 	and.w	r2, r3, #3
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4313      	orrs	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	69ba      	ldr	r2, [r7, #24]
 80023e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 80ae 	beq.w	8002552 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	60fb      	str	r3, [r7, #12]
 80023fa:	4b5d      	ldr	r3, [pc, #372]	; (8002570 <HAL_GPIO_Init+0x300>)
 80023fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fe:	4a5c      	ldr	r2, [pc, #368]	; (8002570 <HAL_GPIO_Init+0x300>)
 8002400:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002404:	6453      	str	r3, [r2, #68]	; 0x44
 8002406:	4b5a      	ldr	r3, [pc, #360]	; (8002570 <HAL_GPIO_Init+0x300>)
 8002408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002412:	4a58      	ldr	r2, [pc, #352]	; (8002574 <HAL_GPIO_Init+0x304>)
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	089b      	lsrs	r3, r3, #2
 8002418:	3302      	adds	r3, #2
 800241a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800241e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	220f      	movs	r2, #15
 800242a:	fa02 f303 	lsl.w	r3, r2, r3
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a4f      	ldr	r2, [pc, #316]	; (8002578 <HAL_GPIO_Init+0x308>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d025      	beq.n	800248a <HAL_GPIO_Init+0x21a>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a4e      	ldr	r2, [pc, #312]	; (800257c <HAL_GPIO_Init+0x30c>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d01f      	beq.n	8002486 <HAL_GPIO_Init+0x216>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a4d      	ldr	r2, [pc, #308]	; (8002580 <HAL_GPIO_Init+0x310>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d019      	beq.n	8002482 <HAL_GPIO_Init+0x212>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a4c      	ldr	r2, [pc, #304]	; (8002584 <HAL_GPIO_Init+0x314>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d013      	beq.n	800247e <HAL_GPIO_Init+0x20e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a4b      	ldr	r2, [pc, #300]	; (8002588 <HAL_GPIO_Init+0x318>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d00d      	beq.n	800247a <HAL_GPIO_Init+0x20a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4a      	ldr	r2, [pc, #296]	; (800258c <HAL_GPIO_Init+0x31c>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d007      	beq.n	8002476 <HAL_GPIO_Init+0x206>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a49      	ldr	r2, [pc, #292]	; (8002590 <HAL_GPIO_Init+0x320>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d101      	bne.n	8002472 <HAL_GPIO_Init+0x202>
 800246e:	2306      	movs	r3, #6
 8002470:	e00c      	b.n	800248c <HAL_GPIO_Init+0x21c>
 8002472:	2307      	movs	r3, #7
 8002474:	e00a      	b.n	800248c <HAL_GPIO_Init+0x21c>
 8002476:	2305      	movs	r3, #5
 8002478:	e008      	b.n	800248c <HAL_GPIO_Init+0x21c>
 800247a:	2304      	movs	r3, #4
 800247c:	e006      	b.n	800248c <HAL_GPIO_Init+0x21c>
 800247e:	2303      	movs	r3, #3
 8002480:	e004      	b.n	800248c <HAL_GPIO_Init+0x21c>
 8002482:	2302      	movs	r3, #2
 8002484:	e002      	b.n	800248c <HAL_GPIO_Init+0x21c>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <HAL_GPIO_Init+0x21c>
 800248a:	2300      	movs	r3, #0
 800248c:	69fa      	ldr	r2, [r7, #28]
 800248e:	f002 0203 	and.w	r2, r2, #3
 8002492:	0092      	lsls	r2, r2, #2
 8002494:	4093      	lsls	r3, r2
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4313      	orrs	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800249c:	4935      	ldr	r1, [pc, #212]	; (8002574 <HAL_GPIO_Init+0x304>)
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	089b      	lsrs	r3, r3, #2
 80024a2:	3302      	adds	r3, #2
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024aa:	4b3a      	ldr	r3, [pc, #232]	; (8002594 <HAL_GPIO_Init+0x324>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	43db      	mvns	r3, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4013      	ands	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4313      	orrs	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024ce:	4a31      	ldr	r2, [pc, #196]	; (8002594 <HAL_GPIO_Init+0x324>)
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80024d4:	4b2f      	ldr	r3, [pc, #188]	; (8002594 <HAL_GPIO_Init+0x324>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d003      	beq.n	80024f8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024f8:	4a26      	ldr	r2, [pc, #152]	; (8002594 <HAL_GPIO_Init+0x324>)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024fe:	4b25      	ldr	r3, [pc, #148]	; (8002594 <HAL_GPIO_Init+0x324>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002522:	4a1c      	ldr	r2, [pc, #112]	; (8002594 <HAL_GPIO_Init+0x324>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002528:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <HAL_GPIO_Init+0x324>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800254c:	4a11      	ldr	r2, [pc, #68]	; (8002594 <HAL_GPIO_Init+0x324>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	3301      	adds	r3, #1
 8002556:	61fb      	str	r3, [r7, #28]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	2b0f      	cmp	r3, #15
 800255c:	f67f ae96 	bls.w	800228c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	3724      	adds	r7, #36	; 0x24
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	40023800 	.word	0x40023800
 8002574:	40013800 	.word	0x40013800
 8002578:	40020000 	.word	0x40020000
 800257c:	40020400 	.word	0x40020400
 8002580:	40020800 	.word	0x40020800
 8002584:	40020c00 	.word	0x40020c00
 8002588:	40021000 	.word	0x40021000
 800258c:	40021400 	.word	0x40021400
 8002590:	40021800 	.word	0x40021800
 8002594:	40013c00 	.word	0x40013c00

08002598 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	460b      	mov	r3, r1
 80025a2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	691a      	ldr	r2, [r3, #16]
 80025a8:	887b      	ldrh	r3, [r7, #2]
 80025aa:	4013      	ands	r3, r2
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d002      	beq.n	80025b6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025b0:	2301      	movs	r3, #1
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	e001      	b.n	80025ba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025b6:	2300      	movs	r3, #0
 80025b8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr

080025c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	460b      	mov	r3, r1
 80025d2:	807b      	strh	r3, [r7, #2]
 80025d4:	4613      	mov	r3, r2
 80025d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025d8:	787b      	ldrb	r3, [r7, #1]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d003      	beq.n	80025e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025de:	887a      	ldrh	r2, [r7, #2]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025e4:	e003      	b.n	80025ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025e6:	887b      	ldrh	r3, [r7, #2]
 80025e8:	041a      	lsls	r2, r3, #16
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	619a      	str	r2, [r3, #24]
}
 80025ee:	bf00      	nop
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b085      	sub	sp, #20
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	460b      	mov	r3, r1
 8002604:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800260c:	887a      	ldrh	r2, [r7, #2]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	4013      	ands	r3, r2
 8002612:	041a      	lsls	r2, r3, #16
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	43d9      	mvns	r1, r3
 8002618:	887b      	ldrh	r3, [r7, #2]
 800261a:	400b      	ands	r3, r1
 800261c:	431a      	orrs	r2, r3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	619a      	str	r2, [r3, #24]
}
 8002622:	bf00      	nop
 8002624:	3714      	adds	r7, #20
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
	...

08002630 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002636:	2300      	movs	r3, #0
 8002638:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	603b      	str	r3, [r7, #0]
 800263e:	4b20      	ldr	r3, [pc, #128]	; (80026c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	4a1f      	ldr	r2, [pc, #124]	; (80026c0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002648:	6413      	str	r3, [r2, #64]	; 0x40
 800264a:	4b1d      	ldr	r3, [pc, #116]	; (80026c0 <HAL_PWREx_EnableOverDrive+0x90>)
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002656:	4b1b      	ldr	r3, [pc, #108]	; (80026c4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800265c:	f7ff f94a 	bl	80018f4 <HAL_GetTick>
 8002660:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002662:	e009      	b.n	8002678 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002664:	f7ff f946 	bl	80018f4 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002672:	d901      	bls.n	8002678 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e01f      	b.n	80026b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002678:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002680:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002684:	d1ee      	bne.n	8002664 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002686:	4b11      	ldr	r3, [pc, #68]	; (80026cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002688:	2201      	movs	r2, #1
 800268a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800268c:	f7ff f932 	bl	80018f4 <HAL_GetTick>
 8002690:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002692:	e009      	b.n	80026a8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002694:	f7ff f92e 	bl	80018f4 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80026a2:	d901      	bls.n	80026a8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e007      	b.n	80026b8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80026a8:	4b07      	ldr	r3, [pc, #28]	; (80026c8 <HAL_PWREx_EnableOverDrive+0x98>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026b4:	d1ee      	bne.n	8002694 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3708      	adds	r7, #8
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	40023800 	.word	0x40023800
 80026c4:	420e0040 	.word	0x420e0040
 80026c8:	40007000 	.word	0x40007000
 80026cc:	420e0044 	.word	0x420e0044

080026d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0cc      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e4:	4b68      	ldr	r3, [pc, #416]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d90c      	bls.n	800270c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b65      	ldr	r3, [pc, #404]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b63      	ldr	r3, [pc, #396]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0b8      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d020      	beq.n	800275a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002724:	4b59      	ldr	r3, [pc, #356]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4a58      	ldr	r2, [pc, #352]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800272e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800273c:	4b53      	ldr	r3, [pc, #332]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	4a52      	ldr	r2, [pc, #328]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002748:	4b50      	ldr	r3, [pc, #320]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	494d      	ldr	r1, [pc, #308]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d044      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	4b47      	ldr	r3, [pc, #284]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d119      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e07f      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d003      	beq.n	800278e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800278a:	2b03      	cmp	r3, #3
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278e:	4b3f      	ldr	r3, [pc, #252]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e06f      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	4b3b      	ldr	r3, [pc, #236]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e067      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ae:	4b37      	ldr	r3, [pc, #220]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f023 0203 	bic.w	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4934      	ldr	r1, [pc, #208]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c0:	f7ff f898 	bl	80018f4 <HAL_GetTick>
 80027c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	e00a      	b.n	80027de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c8:	f7ff f894 	bl	80018f4 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e04f      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027de:	4b2b      	ldr	r3, [pc, #172]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 020c 	and.w	r2, r3, #12
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d1eb      	bne.n	80027c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f0:	4b25      	ldr	r3, [pc, #148]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d20c      	bcs.n	8002818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b20      	ldr	r3, [pc, #128]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e032      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4916      	ldr	r1, [pc, #88]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	490e      	ldr	r1, [pc, #56]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002856:	f000 fb7f 	bl	8002f58 <HAL_RCC_GetSysClockFreq>
 800285a:	4602      	mov	r2, r0
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	490a      	ldr	r1, [pc, #40]	; (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	5ccb      	ldrb	r3, [r1, r3]
 800286a:	fa22 f303 	lsr.w	r3, r2, r3
 800286e:	4a09      	ldr	r2, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fff8 	bl	800186c <HAL_InitTick>

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023c00 	.word	0x40023c00
 800288c:	40023800 	.word	0x40023800
 8002890:	08007788 	.word	0x08007788
 8002894:	20000000 	.word	0x20000000
 8002898:	20000004 	.word	0x20000004

0800289c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800289c:	b480      	push	{r7}
 800289e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028a0:	4b03      	ldr	r3, [pc, #12]	; (80028b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80028a2:	681b      	ldr	r3, [r3, #0]
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr
 80028ae:	bf00      	nop
 80028b0:	20000000 	.word	0x20000000

080028b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028b8:	f7ff fff0 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b05      	ldr	r3, [pc, #20]	; (80028d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	0a9b      	lsrs	r3, r3, #10
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4903      	ldr	r1, [pc, #12]	; (80028d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	40023800 	.word	0x40023800
 80028d8:	08007798 	.word	0x08007798

080028dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80028e0:	f7ff ffdc 	bl	800289c <HAL_RCC_GetHCLKFreq>
 80028e4:	4602      	mov	r2, r0
 80028e6:	4b05      	ldr	r3, [pc, #20]	; (80028fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	0b5b      	lsrs	r3, r3, #13
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	4903      	ldr	r1, [pc, #12]	; (8002900 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028f2:	5ccb      	ldrb	r3, [r1, r3]
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40023800 	.word	0x40023800
 8002900:	08007798 	.word	0x08007798

08002904 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b08c      	sub	sp, #48	; 0x30
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800290c:	2300      	movs	r3, #0
 800290e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002910:	2300      	movs	r3, #0
 8002912:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002918:	2300      	movs	r3, #0
 800291a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800291c:	2300      	movs	r3, #0
 800291e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002924:	2300      	movs	r3, #0
 8002926:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002928:	2300      	movs	r3, #0
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 800292c:	2300      	movs	r3, #0
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0301 	and.w	r3, r3, #1
 8002938:	2b00      	cmp	r3, #0
 800293a:	d010      	beq.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800293c:	4b6f      	ldr	r3, [pc, #444]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800293e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002942:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294a:	496c      	ldr	r1, [pc, #432]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800294c:	4313      	orrs	r3, r2
 800294e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002956:	2b00      	cmp	r3, #0
 8002958:	d101      	bne.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800295a:	2301      	movs	r3, #1
 800295c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0302 	and.w	r3, r3, #2
 8002966:	2b00      	cmp	r3, #0
 8002968:	d010      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800296a:	4b64      	ldr	r3, [pc, #400]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800296c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002970:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002978:	4960      	ldr	r1, [pc, #384]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800297a:	4313      	orrs	r3, r2
 800297c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002984:	2b00      	cmp	r3, #0
 8002986:	d101      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002988:	2301      	movs	r3, #1
 800298a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f003 0304 	and.w	r3, r3, #4
 8002994:	2b00      	cmp	r3, #0
 8002996:	d017      	beq.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002998:	4b58      	ldr	r3, [pc, #352]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800299a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800299e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	4955      	ldr	r1, [pc, #340]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029b6:	d101      	bne.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80029b8:	2301      	movs	r3, #1
 80029ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80029c4:	2301      	movs	r3, #1
 80029c6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0308 	and.w	r3, r3, #8
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d017      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029d4:	4b49      	ldr	r3, [pc, #292]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029da:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029e2:	4946      	ldr	r1, [pc, #280]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029e4:	4313      	orrs	r3, r2
 80029e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029f2:	d101      	bne.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 80029f4:	2301      	movs	r3, #1
 80029f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002a00:	2301      	movs	r3, #1
 8002a02:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 808a 	beq.w	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	4b39      	ldr	r3, [pc, #228]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	4a38      	ldr	r2, [pc, #224]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a20:	6413      	str	r3, [r2, #64]	; 0x40
 8002a22:	4b36      	ldr	r3, [pc, #216]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2a:	60bb      	str	r3, [r7, #8]
 8002a2c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002a2e:	4b34      	ldr	r3, [pc, #208]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a33      	ldr	r2, [pc, #204]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002a34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a38:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002a3a:	f7fe ff5b 	bl	80018f4 <HAL_GetTick>
 8002a3e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a40:	e008      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002a42:	f7fe ff57 	bl	80018f4 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e278      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002a54:	4b2a      	ldr	r3, [pc, #168]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d0f0      	beq.n	8002a42 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a60:	4b26      	ldr	r3, [pc, #152]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a68:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a6a:	6a3b      	ldr	r3, [r7, #32]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d02f      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a78:	6a3a      	ldr	r2, [r7, #32]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d028      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a7e:	4b1f      	ldr	r3, [pc, #124]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a86:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a88:	4b1e      	ldr	r3, [pc, #120]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a8e:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002a94:	4a19      	ldr	r2, [pc, #100]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a9a:	4b18      	ldr	r3, [pc, #96]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d114      	bne.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002aa6:	f7fe ff25 	bl	80018f4 <HAL_GetTick>
 8002aaa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aac:	e00a      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002aae:	f7fe ff21 	bl	80018f4 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e240      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac4:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d0ee      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002adc:	d114      	bne.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002ade:	4b07      	ldr	r3, [pc, #28]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aea:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002af2:	4902      	ldr	r1, [pc, #8]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	608b      	str	r3, [r1, #8]
 8002af8:	e00c      	b.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002afa:	bf00      	nop
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40007000 	.word	0x40007000
 8002b04:	42470e40 	.word	0x42470e40
 8002b08:	4b4a      	ldr	r3, [pc, #296]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a49      	ldr	r2, [pc, #292]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b0e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002b12:	6093      	str	r3, [r2, #8]
 8002b14:	4b47      	ldr	r3, [pc, #284]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b20:	4944      	ldr	r1, [pc, #272]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b22:	4313      	orrs	r3, r2
 8002b24:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f003 0310 	and.w	r3, r3, #16
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d004      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002b38:	4b3f      	ldr	r3, [pc, #252]	; (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002b3a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002b48:	4b3a      	ldr	r3, [pc, #232]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b56:	4937      	ldr	r1, [pc, #220]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002b6a:	4b32      	ldr	r3, [pc, #200]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b70:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b78:	492e      	ldr	r1, [pc, #184]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d011      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b8c:	4b29      	ldr	r3, [pc, #164]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b92:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b9a:	4926      	ldr	r1, [pc, #152]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002baa:	d101      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002bac:	2301      	movs	r3, #1
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d00a      	beq.n	8002bd2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002bbc:	4b1d      	ldr	r3, [pc, #116]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002bc2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bca:	491a      	ldr	r1, [pc, #104]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d011      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002bde:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bec:	4911      	ldr	r1, [pc, #68]	; (8002c34 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bfc:	d101      	bne.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d005      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c10:	f040 80ff 	bne.w	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002c14:	4b09      	ldr	r3, [pc, #36]	; (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002c1a:	f7fe fe6b 	bl	80018f4 <HAL_GetTick>
 8002c1e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c20:	e00e      	b.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002c22:	f7fe fe67 	bl	80018f4 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d907      	bls.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e188      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002c34:	40023800 	.word	0x40023800
 8002c38:	424711e0 	.word	0x424711e0
 8002c3c:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002c40:	4b7e      	ldr	r3, [pc, #504]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ea      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0301 	and.w	r3, r3, #1
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d003      	beq.n	8002c60 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d009      	beq.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d028      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d124      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c74:	4b71      	ldr	r3, [pc, #452]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c7a:	0c1b      	lsrs	r3, r3, #16
 8002c7c:	f003 0303 	and.w	r3, r3, #3
 8002c80:	3301      	adds	r3, #1
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c86:	4b6d      	ldr	r3, [pc, #436]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c8c:	0e1b      	lsrs	r3, r3, #24
 8002c8e:	f003 030f 	and.w	r3, r3, #15
 8002c92:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	019b      	lsls	r3, r3, #6
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	085b      	lsrs	r3, r3, #1
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	041b      	lsls	r3, r3, #16
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	061b      	lsls	r3, r3, #24
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	071b      	lsls	r3, r3, #28
 8002cb6:	4961      	ldr	r1, [pc, #388]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0304 	and.w	r3, r3, #4
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d004      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cd2:	d00a      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d035      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ce8:	d130      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002cea:	4b54      	ldr	r3, [pc, #336]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cf0:	0c1b      	lsrs	r3, r3, #16
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	3301      	adds	r3, #1
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cfc:	4b4f      	ldr	r3, [pc, #316]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d02:	0f1b      	lsrs	r3, r3, #28
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	685a      	ldr	r2, [r3, #4]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	019b      	lsls	r3, r3, #6
 8002d14:	431a      	orrs	r2, r3
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	085b      	lsrs	r3, r3, #1
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	041b      	lsls	r3, r3, #16
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	691b      	ldr	r3, [r3, #16]
 8002d24:	061b      	lsls	r3, r3, #24
 8002d26:	431a      	orrs	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	071b      	lsls	r3, r3, #28
 8002d2c:	4943      	ldr	r1, [pc, #268]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002d34:	4b41      	ldr	r3, [pc, #260]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d3a:	f023 021f 	bic.w	r2, r3, #31
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d42:	3b01      	subs	r3, #1
 8002d44:	493d      	ldr	r1, [pc, #244]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d029      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d60:	d124      	bne.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002d62:	4b36      	ldr	r3, [pc, #216]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d68:	0c1b      	lsrs	r3, r3, #16
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	3301      	adds	r3, #1
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002d74:	4b31      	ldr	r3, [pc, #196]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d7a:	0f1b      	lsrs	r3, r3, #28
 8002d7c:	f003 0307 	and.w	r3, r3, #7
 8002d80:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685a      	ldr	r2, [r3, #4]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	019b      	lsls	r3, r3, #6
 8002d8c:	431a      	orrs	r2, r3
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	085b      	lsrs	r3, r3, #1
 8002d94:	3b01      	subs	r3, #1
 8002d96:	041b      	lsls	r3, r3, #16
 8002d98:	431a      	orrs	r2, r3
 8002d9a:	69bb      	ldr	r3, [r7, #24]
 8002d9c:	061b      	lsls	r3, r3, #24
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	071b      	lsls	r3, r3, #28
 8002da4:	4925      	ldr	r1, [pc, #148]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d016      	beq.n	8002de6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	019b      	lsls	r3, r3, #6
 8002dc2:	431a      	orrs	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68db      	ldr	r3, [r3, #12]
 8002dc8:	085b      	lsrs	r3, r3, #1
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	041b      	lsls	r3, r3, #16
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	691b      	ldr	r3, [r3, #16]
 8002dd4:	061b      	lsls	r3, r3, #24
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	071b      	lsls	r3, r3, #28
 8002dde:	4917      	ldr	r1, [pc, #92]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002de0:	4313      	orrs	r3, r2
 8002de2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002de6:	4b16      	ldr	r3, [pc, #88]	; (8002e40 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dec:	f7fe fd82 	bl	80018f4 <HAL_GetTick>
 8002df0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002df4:	f7fe fd7e 	bl	80018f4 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e09f      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e06:	4b0d      	ldr	r3, [pc, #52]	; (8002e3c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	f040 8095 	bne.w	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002e1a:	4b0a      	ldr	r3, [pc, #40]	; (8002e44 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e20:	f7fe fd68 	bl	80018f4 <HAL_GetTick>
 8002e24:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e26:	e00f      	b.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002e28:	f7fe fd64 	bl	80018f4 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d908      	bls.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e085      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002e3a:	bf00      	nop
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	42470068 	.word	0x42470068
 8002e44:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002e48:	4b41      	ldr	r3, [pc, #260]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002e54:	d0e8      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0304 	and.w	r3, r3, #4
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d009      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d02b      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d127      	bne.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002e7e:	4b34      	ldr	r3, [pc, #208]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e84:	0c1b      	lsrs	r3, r3, #16
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	699a      	ldr	r2, [r3, #24]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	019b      	lsls	r3, r3, #6
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	085b      	lsrs	r3, r3, #1
 8002ea0:	3b01      	subs	r3, #1
 8002ea2:	041b      	lsls	r3, r3, #16
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	061b      	lsls	r3, r3, #24
 8002eac:	4928      	ldr	r1, [pc, #160]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002eb4:	4b26      	ldr	r3, [pc, #152]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002eb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002eba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	021b      	lsls	r3, r3, #8
 8002ec6:	4922      	ldr	r1, [pc, #136]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d01d      	beq.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ee2:	d118      	bne.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002ee4:	4b1a      	ldr	r3, [pc, #104]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eea:	0e1b      	lsrs	r3, r3, #24
 8002eec:	f003 030f 	and.w	r3, r3, #15
 8002ef0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699a      	ldr	r2, [r3, #24]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	69db      	ldr	r3, [r3, #28]
 8002efa:	019b      	lsls	r3, r3, #6
 8002efc:	431a      	orrs	r2, r3
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	085b      	lsrs	r3, r3, #1
 8002f04:	3b01      	subs	r3, #1
 8002f06:	041b      	lsls	r3, r3, #16
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	061b      	lsls	r3, r3, #24
 8002f0e:	4910      	ldr	r1, [pc, #64]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002f16:	4b0f      	ldr	r3, [pc, #60]	; (8002f54 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002f18:	2201      	movs	r2, #1
 8002f1a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002f1c:	f7fe fcea 	bl	80018f4 <HAL_GetTick>
 8002f20:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002f24:	f7fe fce6 	bl	80018f4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e007      	b.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002f36:	4b06      	ldr	r3, [pc, #24]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f42:	d1ef      	bne.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002f44:	2300      	movs	r3, #0
}
 8002f46:	4618      	mov	r0, r3
 8002f48:	3730      	adds	r7, #48	; 0x30
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
 8002f54:	42470070 	.word	0x42470070

08002f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002f5c:	b087      	sub	sp, #28
 8002f5e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002f60:	2600      	movs	r6, #0
 8002f62:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8002f64:	2600      	movs	r6, #0
 8002f66:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8002f68:	2600      	movs	r6, #0
 8002f6a:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8002f6c:	2600      	movs	r6, #0
 8002f6e:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f70:	2600      	movs	r6, #0
 8002f72:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002f74:	4ea3      	ldr	r6, [pc, #652]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002f76:	68b6      	ldr	r6, [r6, #8]
 8002f78:	f006 060c 	and.w	r6, r6, #12
 8002f7c:	2e0c      	cmp	r6, #12
 8002f7e:	f200 8137 	bhi.w	80031f0 <HAL_RCC_GetSysClockFreq+0x298>
 8002f82:	f20f 0c08 	addw	ip, pc, #8
 8002f86:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8002f8a:	bf00      	nop
 8002f8c:	08002fc1 	.word	0x08002fc1
 8002f90:	080031f1 	.word	0x080031f1
 8002f94:	080031f1 	.word	0x080031f1
 8002f98:	080031f1 	.word	0x080031f1
 8002f9c:	08002fc7 	.word	0x08002fc7
 8002fa0:	080031f1 	.word	0x080031f1
 8002fa4:	080031f1 	.word	0x080031f1
 8002fa8:	080031f1 	.word	0x080031f1
 8002fac:	08002fcd 	.word	0x08002fcd
 8002fb0:	080031f1 	.word	0x080031f1
 8002fb4:	080031f1 	.word	0x080031f1
 8002fb8:	080031f1 	.word	0x080031f1
 8002fbc:	080030e3 	.word	0x080030e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002fc0:	4b91      	ldr	r3, [pc, #580]	; (8003208 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002fc2:	613b      	str	r3, [r7, #16]
       break;
 8002fc4:	e117      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002fc6:	4b91      	ldr	r3, [pc, #580]	; (800320c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002fc8:	613b      	str	r3, [r7, #16]
      break;
 8002fca:	e114      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002fcc:	4b8d      	ldr	r3, [pc, #564]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002fd4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002fd6:	4b8b      	ldr	r3, [pc, #556]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d024      	beq.n	800302c <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fe2:	4b88      	ldr	r3, [pc, #544]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	099b      	lsrs	r3, r3, #6
 8002fe8:	461a      	mov	r2, r3
 8002fea:	f04f 0300 	mov.w	r3, #0
 8002fee:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002ff2:	f04f 0500 	mov.w	r5, #0
 8002ff6:	ea02 0004 	and.w	r0, r2, r4
 8002ffa:	ea03 0105 	and.w	r1, r3, r5
 8002ffe:	4b83      	ldr	r3, [pc, #524]	; (800320c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003000:	fb03 f201 	mul.w	r2, r3, r1
 8003004:	2300      	movs	r3, #0
 8003006:	fb03 f300 	mul.w	r3, r3, r0
 800300a:	4413      	add	r3, r2
 800300c:	4a7f      	ldr	r2, [pc, #508]	; (800320c <HAL_RCC_GetSysClockFreq+0x2b4>)
 800300e:	fba0 0102 	umull	r0, r1, r0, r2
 8003012:	440b      	add	r3, r1
 8003014:	4619      	mov	r1, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	461a      	mov	r2, r3
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	f7fd f8f1 	bl	8000204 <__aeabi_uldivmod>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4613      	mov	r3, r2
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	e04c      	b.n	80030c6 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800302c:	4b75      	ldr	r3, [pc, #468]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	099b      	lsrs	r3, r3, #6
 8003032:	461a      	mov	r2, r3
 8003034:	f04f 0300 	mov.w	r3, #0
 8003038:	f240 10ff 	movw	r0, #511	; 0x1ff
 800303c:	f04f 0100 	mov.w	r1, #0
 8003040:	ea02 0800 	and.w	r8, r2, r0
 8003044:	ea03 0901 	and.w	r9, r3, r1
 8003048:	4640      	mov	r0, r8
 800304a:	4649      	mov	r1, r9
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	f04f 0300 	mov.w	r3, #0
 8003054:	014b      	lsls	r3, r1, #5
 8003056:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800305a:	0142      	lsls	r2, r0, #5
 800305c:	4610      	mov	r0, r2
 800305e:	4619      	mov	r1, r3
 8003060:	ebb0 0008 	subs.w	r0, r0, r8
 8003064:	eb61 0109 	sbc.w	r1, r1, r9
 8003068:	f04f 0200 	mov.w	r2, #0
 800306c:	f04f 0300 	mov.w	r3, #0
 8003070:	018b      	lsls	r3, r1, #6
 8003072:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003076:	0182      	lsls	r2, r0, #6
 8003078:	1a12      	subs	r2, r2, r0
 800307a:	eb63 0301 	sbc.w	r3, r3, r1
 800307e:	f04f 0000 	mov.w	r0, #0
 8003082:	f04f 0100 	mov.w	r1, #0
 8003086:	00d9      	lsls	r1, r3, #3
 8003088:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800308c:	00d0      	lsls	r0, r2, #3
 800308e:	4602      	mov	r2, r0
 8003090:	460b      	mov	r3, r1
 8003092:	eb12 0208 	adds.w	r2, r2, r8
 8003096:	eb43 0309 	adc.w	r3, r3, r9
 800309a:	f04f 0000 	mov.w	r0, #0
 800309e:	f04f 0100 	mov.w	r1, #0
 80030a2:	0299      	lsls	r1, r3, #10
 80030a4:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80030a8:	0290      	lsls	r0, r2, #10
 80030aa:	4602      	mov	r2, r0
 80030ac:	460b      	mov	r3, r1
 80030ae:	4610      	mov	r0, r2
 80030b0:	4619      	mov	r1, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	461a      	mov	r2, r3
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	f7fd f8a3 	bl	8000204 <__aeabi_uldivmod>
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4613      	mov	r3, r2
 80030c4:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80030c6:	4b4f      	ldr	r3, [pc, #316]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	0c1b      	lsrs	r3, r3, #16
 80030cc:	f003 0303 	and.w	r3, r3, #3
 80030d0:	3301      	adds	r3, #1
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80030d6:	697a      	ldr	r2, [r7, #20]
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	fbb2 f3f3 	udiv	r3, r2, r3
 80030de:	613b      	str	r3, [r7, #16]
      break;
 80030e0:	e089      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030e2:	4948      	ldr	r1, [pc, #288]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80030e4:	6849      	ldr	r1, [r1, #4]
 80030e6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80030ea:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ec:	4945      	ldr	r1, [pc, #276]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80030ee:	6849      	ldr	r1, [r1, #4]
 80030f0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80030f4:	2900      	cmp	r1, #0
 80030f6:	d024      	beq.n	8003142 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030f8:	4942      	ldr	r1, [pc, #264]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80030fa:	6849      	ldr	r1, [r1, #4]
 80030fc:	0989      	lsrs	r1, r1, #6
 80030fe:	4608      	mov	r0, r1
 8003100:	f04f 0100 	mov.w	r1, #0
 8003104:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003108:	f04f 0500 	mov.w	r5, #0
 800310c:	ea00 0204 	and.w	r2, r0, r4
 8003110:	ea01 0305 	and.w	r3, r1, r5
 8003114:	493d      	ldr	r1, [pc, #244]	; (800320c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003116:	fb01 f003 	mul.w	r0, r1, r3
 800311a:	2100      	movs	r1, #0
 800311c:	fb01 f102 	mul.w	r1, r1, r2
 8003120:	1844      	adds	r4, r0, r1
 8003122:	493a      	ldr	r1, [pc, #232]	; (800320c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003124:	fba2 0101 	umull	r0, r1, r2, r1
 8003128:	1863      	adds	r3, r4, r1
 800312a:	4619      	mov	r1, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	461a      	mov	r2, r3
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	f7fd f866 	bl	8000204 <__aeabi_uldivmod>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4613      	mov	r3, r2
 800313e:	617b      	str	r3, [r7, #20]
 8003140:	e04a      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003142:	4b30      	ldr	r3, [pc, #192]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	099b      	lsrs	r3, r3, #6
 8003148:	461a      	mov	r2, r3
 800314a:	f04f 0300 	mov.w	r3, #0
 800314e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003152:	f04f 0100 	mov.w	r1, #0
 8003156:	ea02 0400 	and.w	r4, r2, r0
 800315a:	ea03 0501 	and.w	r5, r3, r1
 800315e:	4620      	mov	r0, r4
 8003160:	4629      	mov	r1, r5
 8003162:	f04f 0200 	mov.w	r2, #0
 8003166:	f04f 0300 	mov.w	r3, #0
 800316a:	014b      	lsls	r3, r1, #5
 800316c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003170:	0142      	lsls	r2, r0, #5
 8003172:	4610      	mov	r0, r2
 8003174:	4619      	mov	r1, r3
 8003176:	1b00      	subs	r0, r0, r4
 8003178:	eb61 0105 	sbc.w	r1, r1, r5
 800317c:	f04f 0200 	mov.w	r2, #0
 8003180:	f04f 0300 	mov.w	r3, #0
 8003184:	018b      	lsls	r3, r1, #6
 8003186:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800318a:	0182      	lsls	r2, r0, #6
 800318c:	1a12      	subs	r2, r2, r0
 800318e:	eb63 0301 	sbc.w	r3, r3, r1
 8003192:	f04f 0000 	mov.w	r0, #0
 8003196:	f04f 0100 	mov.w	r1, #0
 800319a:	00d9      	lsls	r1, r3, #3
 800319c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031a0:	00d0      	lsls	r0, r2, #3
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	1912      	adds	r2, r2, r4
 80031a8:	eb45 0303 	adc.w	r3, r5, r3
 80031ac:	f04f 0000 	mov.w	r0, #0
 80031b0:	f04f 0100 	mov.w	r1, #0
 80031b4:	0299      	lsls	r1, r3, #10
 80031b6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80031ba:	0290      	lsls	r0, r2, #10
 80031bc:	4602      	mov	r2, r0
 80031be:	460b      	mov	r3, r1
 80031c0:	4610      	mov	r0, r2
 80031c2:	4619      	mov	r1, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	461a      	mov	r2, r3
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	f7fd f81a 	bl	8000204 <__aeabi_uldivmod>
 80031d0:	4602      	mov	r2, r0
 80031d2:	460b      	mov	r3, r1
 80031d4:	4613      	mov	r3, r2
 80031d6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80031d8:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	0f1b      	lsrs	r3, r3, #28
 80031de:	f003 0307 	and.w	r3, r3, #7
 80031e2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80031e4:	697a      	ldr	r2, [r7, #20]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	613b      	str	r3, [r7, #16]
      break;
 80031ee:	e002      	b.n	80031f6 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031f0:	4b05      	ldr	r3, [pc, #20]	; (8003208 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80031f2:	613b      	str	r3, [r7, #16]
      break;
 80031f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031f6:	693b      	ldr	r3, [r7, #16]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	371c      	adds	r7, #28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800
 8003208:	00f42400 	.word	0x00f42400
 800320c:	017d7840 	.word	0x017d7840

08003210 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e28d      	b.n	800373e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8083 	beq.w	8003336 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003230:	4b94      	ldr	r3, [pc, #592]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b04      	cmp	r3, #4
 800323a:	d019      	beq.n	8003270 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800323c:	4b91      	ldr	r3, [pc, #580]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003244:	2b08      	cmp	r3, #8
 8003246:	d106      	bne.n	8003256 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003248:	4b8e      	ldr	r3, [pc, #568]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003250:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003254:	d00c      	beq.n	8003270 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003256:	4b8b      	ldr	r3, [pc, #556]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800325e:	2b0c      	cmp	r3, #12
 8003260:	d112      	bne.n	8003288 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003262:	4b88      	ldr	r3, [pc, #544]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800326a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800326e:	d10b      	bne.n	8003288 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003270:	4b84      	ldr	r3, [pc, #528]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003278:	2b00      	cmp	r3, #0
 800327a:	d05b      	beq.n	8003334 <HAL_RCC_OscConfig+0x124>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d157      	bne.n	8003334 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e25a      	b.n	800373e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003290:	d106      	bne.n	80032a0 <HAL_RCC_OscConfig+0x90>
 8003292:	4b7c      	ldr	r3, [pc, #496]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a7b      	ldr	r2, [pc, #492]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800329c:	6013      	str	r3, [r2, #0]
 800329e:	e01d      	b.n	80032dc <HAL_RCC_OscConfig+0xcc>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCC_OscConfig+0xb4>
 80032aa:	4b76      	ldr	r3, [pc, #472]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a75      	ldr	r2, [pc, #468]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 80032b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4b73      	ldr	r3, [pc, #460]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a72      	ldr	r2, [pc, #456]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 80032bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e00b      	b.n	80032dc <HAL_RCC_OscConfig+0xcc>
 80032c4:	4b6f      	ldr	r3, [pc, #444]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a6e      	ldr	r2, [pc, #440]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 80032ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	4b6c      	ldr	r3, [pc, #432]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a6b      	ldr	r2, [pc, #428]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 80032d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d013      	beq.n	800330c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fe fb06 	bl	80018f4 <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fe fb02 	bl	80018f4 <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e21f      	b.n	800373e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032fe:	4b61      	ldr	r3, [pc, #388]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0f0      	beq.n	80032ec <HAL_RCC_OscConfig+0xdc>
 800330a:	e014      	b.n	8003336 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800330c:	f7fe faf2 	bl	80018f4 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003314:	f7fe faee 	bl	80018f4 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b64      	cmp	r3, #100	; 0x64
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e20b      	b.n	800373e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003326:	4b57      	ldr	r3, [pc, #348]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d1f0      	bne.n	8003314 <HAL_RCC_OscConfig+0x104>
 8003332:	e000      	b.n	8003336 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003334:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0302 	and.w	r3, r3, #2
 800333e:	2b00      	cmp	r3, #0
 8003340:	d06f      	beq.n	8003422 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003342:	4b50      	ldr	r3, [pc, #320]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f003 030c 	and.w	r3, r3, #12
 800334a:	2b00      	cmp	r3, #0
 800334c:	d017      	beq.n	800337e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800334e:	4b4d      	ldr	r3, [pc, #308]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003350:	689b      	ldr	r3, [r3, #8]
 8003352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003356:	2b08      	cmp	r3, #8
 8003358:	d105      	bne.n	8003366 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800335a:	4b4a      	ldr	r3, [pc, #296]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d00b      	beq.n	800337e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003366:	4b47      	ldr	r3, [pc, #284]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800336e:	2b0c      	cmp	r3, #12
 8003370:	d11c      	bne.n	80033ac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003372:	4b44      	ldr	r3, [pc, #272]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d116      	bne.n	80033ac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800337e:	4b41      	ldr	r3, [pc, #260]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d005      	beq.n	8003396 <HAL_RCC_OscConfig+0x186>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68db      	ldr	r3, [r3, #12]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d001      	beq.n	8003396 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e1d3      	b.n	800373e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003396:	4b3b      	ldr	r3, [pc, #236]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	00db      	lsls	r3, r3, #3
 80033a4:	4937      	ldr	r1, [pc, #220]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033aa:	e03a      	b.n	8003422 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	68db      	ldr	r3, [r3, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b4:	4b34      	ldr	r3, [pc, #208]	; (8003488 <HAL_RCC_OscConfig+0x278>)
 80033b6:	2201      	movs	r2, #1
 80033b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ba:	f7fe fa9b 	bl	80018f4 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c2:	f7fe fa97 	bl	80018f4 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e1b4      	b.n	800373e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	4b2b      	ldr	r3, [pc, #172]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e0:	4b28      	ldr	r3, [pc, #160]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	691b      	ldr	r3, [r3, #16]
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4925      	ldr	r1, [pc, #148]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 80033f0:	4313      	orrs	r3, r2
 80033f2:	600b      	str	r3, [r1, #0]
 80033f4:	e015      	b.n	8003422 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f6:	4b24      	ldr	r3, [pc, #144]	; (8003488 <HAL_RCC_OscConfig+0x278>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033fc:	f7fe fa7a 	bl	80018f4 <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003402:	e008      	b.n	8003416 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003404:	f7fe fa76 	bl	80018f4 <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d901      	bls.n	8003416 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e193      	b.n	800373e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	4b1b      	ldr	r3, [pc, #108]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1f0      	bne.n	8003404 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 0308 	and.w	r3, r3, #8
 800342a:	2b00      	cmp	r3, #0
 800342c:	d036      	beq.n	800349c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d016      	beq.n	8003464 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003436:	4b15      	ldr	r3, [pc, #84]	; (800348c <HAL_RCC_OscConfig+0x27c>)
 8003438:	2201      	movs	r2, #1
 800343a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343c:	f7fe fa5a 	bl	80018f4 <HAL_GetTick>
 8003440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003442:	e008      	b.n	8003456 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003444:	f7fe fa56 	bl	80018f4 <HAL_GetTick>
 8003448:	4602      	mov	r2, r0
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	2b02      	cmp	r3, #2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e173      	b.n	800373e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003456:	4b0b      	ldr	r3, [pc, #44]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0f0      	beq.n	8003444 <HAL_RCC_OscConfig+0x234>
 8003462:	e01b      	b.n	800349c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003464:	4b09      	ldr	r3, [pc, #36]	; (800348c <HAL_RCC_OscConfig+0x27c>)
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800346a:	f7fe fa43 	bl	80018f4 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003470:	e00e      	b.n	8003490 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003472:	f7fe fa3f 	bl	80018f4 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d907      	bls.n	8003490 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e15c      	b.n	800373e <HAL_RCC_OscConfig+0x52e>
 8003484:	40023800 	.word	0x40023800
 8003488:	42470000 	.word	0x42470000
 800348c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003490:	4b8a      	ldr	r3, [pc, #552]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 8003492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003494:	f003 0302 	and.w	r3, r3, #2
 8003498:	2b00      	cmp	r3, #0
 800349a:	d1ea      	bne.n	8003472 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f003 0304 	and.w	r3, r3, #4
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 8097 	beq.w	80035d8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034aa:	2300      	movs	r3, #0
 80034ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034ae:	4b83      	ldr	r3, [pc, #524]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 80034b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10f      	bne.n	80034da <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ba:	2300      	movs	r3, #0
 80034bc:	60bb      	str	r3, [r7, #8]
 80034be:	4b7f      	ldr	r3, [pc, #508]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 80034c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c2:	4a7e      	ldr	r2, [pc, #504]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 80034c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c8:	6413      	str	r3, [r2, #64]	; 0x40
 80034ca:	4b7c      	ldr	r3, [pc, #496]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 80034cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034d2:	60bb      	str	r3, [r7, #8]
 80034d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034d6:	2301      	movs	r3, #1
 80034d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034da:	4b79      	ldr	r3, [pc, #484]	; (80036c0 <HAL_RCC_OscConfig+0x4b0>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d118      	bne.n	8003518 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034e6:	4b76      	ldr	r3, [pc, #472]	; (80036c0 <HAL_RCC_OscConfig+0x4b0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a75      	ldr	r2, [pc, #468]	; (80036c0 <HAL_RCC_OscConfig+0x4b0>)
 80034ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034f2:	f7fe f9ff 	bl	80018f4 <HAL_GetTick>
 80034f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034f8:	e008      	b.n	800350c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034fa:	f7fe f9fb 	bl	80018f4 <HAL_GetTick>
 80034fe:	4602      	mov	r2, r0
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	1ad3      	subs	r3, r2, r3
 8003504:	2b02      	cmp	r3, #2
 8003506:	d901      	bls.n	800350c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003508:	2303      	movs	r3, #3
 800350a:	e118      	b.n	800373e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	4b6c      	ldr	r3, [pc, #432]	; (80036c0 <HAL_RCC_OscConfig+0x4b0>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003514:	2b00      	cmp	r3, #0
 8003516:	d0f0      	beq.n	80034fa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	2b01      	cmp	r3, #1
 800351e:	d106      	bne.n	800352e <HAL_RCC_OscConfig+0x31e>
 8003520:	4b66      	ldr	r3, [pc, #408]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 8003522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003524:	4a65      	ldr	r2, [pc, #404]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 8003526:	f043 0301 	orr.w	r3, r3, #1
 800352a:	6713      	str	r3, [r2, #112]	; 0x70
 800352c:	e01c      	b.n	8003568 <HAL_RCC_OscConfig+0x358>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	2b05      	cmp	r3, #5
 8003534:	d10c      	bne.n	8003550 <HAL_RCC_OscConfig+0x340>
 8003536:	4b61      	ldr	r3, [pc, #388]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 8003538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353a:	4a60      	ldr	r2, [pc, #384]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 800353c:	f043 0304 	orr.w	r3, r3, #4
 8003540:	6713      	str	r3, [r2, #112]	; 0x70
 8003542:	4b5e      	ldr	r3, [pc, #376]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 8003544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003546:	4a5d      	ldr	r2, [pc, #372]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 8003548:	f043 0301 	orr.w	r3, r3, #1
 800354c:	6713      	str	r3, [r2, #112]	; 0x70
 800354e:	e00b      	b.n	8003568 <HAL_RCC_OscConfig+0x358>
 8003550:	4b5a      	ldr	r3, [pc, #360]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 8003552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003554:	4a59      	ldr	r2, [pc, #356]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	6713      	str	r3, [r2, #112]	; 0x70
 800355c:	4b57      	ldr	r3, [pc, #348]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	4a56      	ldr	r2, [pc, #344]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 8003562:	f023 0304 	bic.w	r3, r3, #4
 8003566:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d015      	beq.n	800359c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003570:	f7fe f9c0 	bl	80018f4 <HAL_GetTick>
 8003574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003576:	e00a      	b.n	800358e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003578:	f7fe f9bc 	bl	80018f4 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	f241 3288 	movw	r2, #5000	; 0x1388
 8003586:	4293      	cmp	r3, r2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e0d7      	b.n	800373e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358e:	4b4b      	ldr	r3, [pc, #300]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0ee      	beq.n	8003578 <HAL_RCC_OscConfig+0x368>
 800359a:	e014      	b.n	80035c6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359c:	f7fe f9aa 	bl	80018f4 <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035a2:	e00a      	b.n	80035ba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035a4:	f7fe f9a6 	bl	80018f4 <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e0c1      	b.n	800373e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ba:	4b40      	ldr	r3, [pc, #256]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1ee      	bne.n	80035a4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035c6:	7dfb      	ldrb	r3, [r7, #23]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d105      	bne.n	80035d8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035cc:	4b3b      	ldr	r3, [pc, #236]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	4a3a      	ldr	r2, [pc, #232]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 80035d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	f000 80ad 	beq.w	800373c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035e2:	4b36      	ldr	r3, [pc, #216]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d060      	beq.n	80036b0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	699b      	ldr	r3, [r3, #24]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d145      	bne.n	8003682 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f6:	4b33      	ldr	r3, [pc, #204]	; (80036c4 <HAL_RCC_OscConfig+0x4b4>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035fc:	f7fe f97a 	bl	80018f4 <HAL_GetTick>
 8003600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003602:	e008      	b.n	8003616 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003604:	f7fe f976 	bl	80018f4 <HAL_GetTick>
 8003608:	4602      	mov	r2, r0
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	1ad3      	subs	r3, r2, r3
 800360e:	2b02      	cmp	r3, #2
 8003610:	d901      	bls.n	8003616 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e093      	b.n	800373e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003616:	4b29      	ldr	r3, [pc, #164]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d1f0      	bne.n	8003604 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69da      	ldr	r2, [r3, #28]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	431a      	orrs	r2, r3
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003630:	019b      	lsls	r3, r3, #6
 8003632:	431a      	orrs	r2, r3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003638:	085b      	lsrs	r3, r3, #1
 800363a:	3b01      	subs	r3, #1
 800363c:	041b      	lsls	r3, r3, #16
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003644:	061b      	lsls	r3, r3, #24
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	071b      	lsls	r3, r3, #28
 800364e:	491b      	ldr	r1, [pc, #108]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003654:	4b1b      	ldr	r3, [pc, #108]	; (80036c4 <HAL_RCC_OscConfig+0x4b4>)
 8003656:	2201      	movs	r2, #1
 8003658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800365a:	f7fe f94b 	bl	80018f4 <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003662:	f7fe f947 	bl	80018f4 <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e064      	b.n	800373e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003674:	4b11      	ldr	r3, [pc, #68]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d0f0      	beq.n	8003662 <HAL_RCC_OscConfig+0x452>
 8003680:	e05c      	b.n	800373c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003682:	4b10      	ldr	r3, [pc, #64]	; (80036c4 <HAL_RCC_OscConfig+0x4b4>)
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003688:	f7fe f934 	bl	80018f4 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003690:	f7fe f930 	bl	80018f4 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b02      	cmp	r3, #2
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e04d      	b.n	800373e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a2:	4b06      	ldr	r3, [pc, #24]	; (80036bc <HAL_RCC_OscConfig+0x4ac>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1f0      	bne.n	8003690 <HAL_RCC_OscConfig+0x480>
 80036ae:	e045      	b.n	800373c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	699b      	ldr	r3, [r3, #24]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d107      	bne.n	80036c8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e040      	b.n	800373e <HAL_RCC_OscConfig+0x52e>
 80036bc:	40023800 	.word	0x40023800
 80036c0:	40007000 	.word	0x40007000
 80036c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036c8:	4b1f      	ldr	r3, [pc, #124]	; (8003748 <HAL_RCC_OscConfig+0x538>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d030      	beq.n	8003738 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d129      	bne.n	8003738 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d122      	bne.n	8003738 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036f2:	68fa      	ldr	r2, [r7, #12]
 80036f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80036f8:	4013      	ands	r3, r2
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80036fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003700:	4293      	cmp	r3, r2
 8003702:	d119      	bne.n	8003738 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800370e:	085b      	lsrs	r3, r3, #1
 8003710:	3b01      	subs	r3, #1
 8003712:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003714:	429a      	cmp	r2, r3
 8003716:	d10f      	bne.n	8003738 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003722:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003724:	429a      	cmp	r2, r3
 8003726:	d107      	bne.n	8003738 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003734:	429a      	cmp	r2, r3
 8003736:	d001      	beq.n	800373c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003738:	2301      	movs	r3, #1
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800373c:	2300      	movs	r3, #0
}
 800373e:	4618      	mov	r0, r3
 8003740:	3718      	adds	r7, #24
 8003742:	46bd      	mov	sp, r7
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	40023800 	.word	0x40023800

0800374c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b082      	sub	sp, #8
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e022      	b.n	80037a4 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d105      	bne.n	8003776 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f7fd fabb 	bl	8000cec <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2203      	movs	r2, #3
 800377a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 f814 	bl	80037ac <HAL_SD_InitCard>
 8003784:	4603      	mov	r3, r0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d001      	beq.n	800378e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e00a      	b.n	80037a4 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2200      	movs	r2, #0
 8003792:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2200      	movs	r2, #0
 8003798:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80037a2:	2300      	movs	r3, #0
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3708      	adds	r7, #8
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}

080037ac <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80037ac:	b5b0      	push	{r4, r5, r7, lr}
 80037ae:	b08e      	sub	sp, #56	; 0x38
 80037b0:	af04      	add	r7, sp, #16
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 80037b4:	2300      	movs	r3, #0
 80037b6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 80037bc:	2300      	movs	r3, #0
 80037be:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 80037c0:	2300      	movs	r3, #0
 80037c2:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80037c4:	2300      	movs	r3, #0
 80037c6:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80037c8:	2376      	movs	r3, #118	; 0x76
 80037ca:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681d      	ldr	r5, [r3, #0]
 80037d0:	466c      	mov	r4, sp
 80037d2:	f107 0314 	add.w	r3, r7, #20
 80037d6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80037da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037de:	f107 0308 	add.w	r3, r7, #8
 80037e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037e4:	4628      	mov	r0, r5
 80037e6:	f003 f829 	bl	800683c <SDIO_Init>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80037f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e04c      	b.n	8003896 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80037fc:	4b28      	ldr	r3, [pc, #160]	; (80038a0 <HAL_SD_InitCard+0xf4>)
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f003 f861 	bl	80068ce <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800380c:	4b24      	ldr	r3, [pc, #144]	; (80038a0 <HAL_SD_InitCard+0xf4>)
 800380e:	2201      	movs	r2, #1
 8003810:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	f001 f856 	bl	80048c4 <SD_PowerON>
 8003818:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800381a:	6a3b      	ldr	r3, [r7, #32]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d00b      	beq.n	8003838 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800382c:	6a3b      	ldr	r3, [r7, #32]
 800382e:	431a      	orrs	r2, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003834:	2301      	movs	r3, #1
 8003836:	e02e      	b.n	8003896 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 ff77 	bl	800472c <SD_InitCard>
 800383e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d00b      	beq.n	800385e <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003852:	6a3b      	ldr	r3, [r7, #32]
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e01b      	b.n	8003896 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003866:	4618      	mov	r0, r3
 8003868:	f003 f8c4 	bl	80069f4 <SDMMC_CmdBlockLength>
 800386c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800386e:	6a3b      	ldr	r3, [r7, #32]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d00f      	beq.n	8003894 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a0a      	ldr	r2, [pc, #40]	; (80038a4 <HAL_SD_InitCard+0xf8>)
 800387a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003880:	6a3b      	ldr	r3, [r7, #32]
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2201      	movs	r2, #1
 800388c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e000      	b.n	8003896 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3728      	adds	r7, #40	; 0x28
 800389a:	46bd      	mov	sp, r7
 800389c:	bdb0      	pop	{r4, r5, r7, pc}
 800389e:	bf00      	nop
 80038a0:	422580a0 	.word	0x422580a0
 80038a4:	004005ff 	.word	0x004005ff

080038a8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b092      	sub	sp, #72	; 0x48
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80038b6:	f7fe f81d 	bl	80018f4 <HAL_GetTick>
 80038ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d107      	bne.n	80038da <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e1bd      	b.n	8003c56 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	f040 81b0 	bne.w	8003c48 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80038ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	441a      	add	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d907      	bls.n	800390c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003900:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e1a4      	b.n	8003c56 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2203      	movs	r2, #3
 8003910:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2200      	movs	r2, #0
 800391a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003920:	2b01      	cmp	r3, #1
 8003922:	d002      	beq.n	800392a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003924:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003926:	025b      	lsls	r3, r3, #9
 8003928:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800392a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800392e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	025b      	lsls	r3, r3, #9
 8003934:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003936:	2390      	movs	r3, #144	; 0x90
 8003938:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800393a:	2302      	movs	r3, #2
 800393c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800393e:	2300      	movs	r3, #0
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003942:	2301      	movs	r3, #1
 8003944:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f107 0214 	add.w	r2, r7, #20
 800394e:	4611      	mov	r1, r2
 8003950:	4618      	mov	r0, r3
 8003952:	f003 f823 	bl	800699c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d90a      	bls.n	8003972 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2202      	movs	r2, #2
 8003960:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003968:	4618      	mov	r0, r3
 800396a:	f003 f887 	bl	8006a7c <SDMMC_CmdReadMultiBlock>
 800396e:	6478      	str	r0, [r7, #68]	; 0x44
 8003970:	e009      	b.n	8003986 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800397e:	4618      	mov	r0, r3
 8003980:	f003 f85a 	bl	8006a38 <SDMMC_CmdReadSingleBlock>
 8003984:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003988:	2b00      	cmp	r3, #0
 800398a:	d012      	beq.n	80039b2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a7a      	ldr	r2, [pc, #488]	; (8003b7c <HAL_SD_ReadBlocks+0x2d4>)
 8003992:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003998:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800399a:	431a      	orrs	r2, r3
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2200      	movs	r2, #0
 80039ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e151      	b.n	8003c56 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80039b6:	e061      	b.n	8003a7c <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d03c      	beq.n	8003a40 <HAL_SD_ReadBlocks+0x198>
 80039c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d039      	beq.n	8003a40 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80039cc:	2300      	movs	r3, #0
 80039ce:	643b      	str	r3, [r7, #64]	; 0x40
 80039d0:	e033      	b.n	8003a3a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4618      	mov	r0, r3
 80039d8:	f002 ff5b 	bl	8006892 <SDIO_ReadFIFO>
 80039dc:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80039de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e4:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80039e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e8:	3301      	adds	r3, #1
 80039ea:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80039ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039ee:	3b01      	subs	r3, #1
 80039f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80039f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039f4:	0a1b      	lsrs	r3, r3, #8
 80039f6:	b2da      	uxtb	r2, r3
 80039f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fa:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80039fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039fe:	3301      	adds	r3, #1
 8003a00:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003a02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a04:	3b01      	subs	r3, #1
 8003a06:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0a:	0c1b      	lsrs	r3, r3, #16
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a10:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a14:	3301      	adds	r3, #1
 8003a16:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a20:	0e1b      	lsrs	r3, r3, #24
 8003a22:	b2da      	uxtb	r2, r3
 8003a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a26:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003a2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a30:	3b01      	subs	r3, #1
 8003a32:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8003a34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a36:	3301      	adds	r3, #1
 8003a38:	643b      	str	r3, [r7, #64]	; 0x40
 8003a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a3c:	2b07      	cmp	r3, #7
 8003a3e:	d9c8      	bls.n	80039d2 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003a40:	f7fd ff58 	bl	80018f4 <HAL_GetTick>
 8003a44:	4602      	mov	r2, r0
 8003a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a48:	1ad3      	subs	r3, r2, r3
 8003a4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003a4c:	429a      	cmp	r2, r3
 8003a4e:	d902      	bls.n	8003a56 <HAL_SD_ReadBlocks+0x1ae>
 8003a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d112      	bne.n	8003a7c <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a48      	ldr	r2, [pc, #288]	; (8003b7c <HAL_SD_ReadBlocks+0x2d4>)
 8003a5c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a62:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e0ec      	b.n	8003c56 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a82:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d096      	beq.n	80039b8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d022      	beq.n	8003ade <HAL_SD_ReadBlocks+0x236>
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	2b01      	cmp	r3, #1
 8003a9c:	d91f      	bls.n	8003ade <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa2:	2b03      	cmp	r3, #3
 8003aa4:	d01b      	beq.n	8003ade <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f003 f84c 	bl	8006b48 <SDMMC_CmdStopTransfer>
 8003ab0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ab2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d012      	beq.n	8003ade <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a2f      	ldr	r2, [pc, #188]	; (8003b7c <HAL_SD_ReadBlocks+0x2d4>)
 8003abe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac6:	431a      	orrs	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003ada:	2301      	movs	r3, #1
 8003adc:	e0bb      	b.n	8003c56 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae4:	f003 0308 	and.w	r3, r3, #8
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d012      	beq.n	8003b12 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <HAL_SD_ReadBlocks+0x2d4>)
 8003af2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af8:	f043 0208 	orr.w	r2, r3, #8
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e0a1      	b.n	8003c56 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b18:	f003 0302 	and.w	r3, r3, #2
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d012      	beq.n	8003b46 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	4a15      	ldr	r2, [pc, #84]	; (8003b7c <HAL_SD_ReadBlocks+0x2d4>)
 8003b26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2c:	f043 0202 	orr.w	r2, r3, #2
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e087      	b.n	8003c56 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b4c:	f003 0320 	and.w	r3, r3, #32
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d064      	beq.n	8003c1e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a08      	ldr	r2, [pc, #32]	; (8003b7c <HAL_SD_ReadBlocks+0x2d4>)
 8003b5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b60:	f043 0220 	orr.w	r2, r3, #32
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e06d      	b.n	8003c56 <HAL_SD_ReadBlocks+0x3ae>
 8003b7a:	bf00      	nop
 8003b7c:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f002 fe84 	bl	8006892 <SDIO_ReadFIFO>
 8003b8a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8e:	b2da      	uxtb	r2, r3
 8003b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b92:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b96:	3301      	adds	r3, #1
 8003b98:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003b9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b9c:	3b01      	subs	r3, #1
 8003b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba2:	0a1b      	lsrs	r3, r3, #8
 8003ba4:	b2da      	uxtb	r2, r3
 8003ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ba8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003baa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bac:	3301      	adds	r3, #1
 8003bae:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bb2:	3b01      	subs	r3, #1
 8003bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003bb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bb8:	0c1b      	lsrs	r3, r3, #16
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bbe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc8:	3b01      	subs	r3, #1
 8003bca:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bce:	0e1b      	lsrs	r3, r3, #24
 8003bd0:	b2da      	uxtb	r2, r3
 8003bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd4:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bd8:	3301      	adds	r3, #1
 8003bda:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003bdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bde:	3b01      	subs	r3, #1
 8003be0:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003be2:	f7fd fe87 	bl	80018f4 <HAL_GetTick>
 8003be6:	4602      	mov	r2, r0
 8003be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bea:	1ad3      	subs	r3, r2, r3
 8003bec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d902      	bls.n	8003bf8 <HAL_SD_ReadBlocks+0x350>
 8003bf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d112      	bne.n	8003c1e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a18      	ldr	r2, [pc, #96]	; (8003c60 <HAL_SD_ReadBlocks+0x3b8>)
 8003bfe:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c04:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2200      	movs	r2, #0
 8003c18:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e01b      	b.n	8003c56 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d002      	beq.n	8003c32 <HAL_SD_ReadBlocks+0x38a>
 8003c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1a6      	bne.n	8003b80 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f240 523a 	movw	r2, #1338	; 0x53a
 8003c3a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e006      	b.n	8003c56 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
  }
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3748      	adds	r7, #72	; 0x48
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	004005ff 	.word	0x004005ff

08003c64 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b092      	sub	sp, #72	; 0x48
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	60f8      	str	r0, [r7, #12]
 8003c6c:	60b9      	str	r1, [r7, #8]
 8003c6e:	607a      	str	r2, [r7, #4]
 8003c70:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003c72:	f7fd fe3f 	bl	80018f4 <HAL_GetTick>
 8003c76:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d107      	bne.n	8003c96 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c8a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e165      	b.n	8003f62 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	f040 8158 	bne.w	8003f54 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003caa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	441a      	add	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d907      	bls.n	8003cc8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e14c      	b.n	8003f62 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2203      	movs	r2, #3
 8003ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	d002      	beq.n	8003ce6 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce2:	025b      	lsls	r3, r3, #9
 8003ce4:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ce6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003cea:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	025b      	lsls	r3, r3, #9
 8003cf0:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003cf2:	2390      	movs	r3, #144	; 0x90
 8003cf4:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f107 0218 	add.w	r2, r7, #24
 8003d0a:	4611      	mov	r1, r2
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f002 fe45 	bl	800699c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d90a      	bls.n	8003d2e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d24:	4618      	mov	r0, r3
 8003d26:	f002 feed 	bl	8006b04 <SDMMC_CmdWriteMultiBlock>
 8003d2a:	6478      	str	r0, [r7, #68]	; 0x44
 8003d2c:	e009      	b.n	8003d42 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2210      	movs	r2, #16
 8003d32:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f002 fec0 	bl	8006ac0 <SDMMC_CmdWriteSingleBlock>
 8003d40:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d012      	beq.n	8003d6e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a87      	ldr	r2, [pc, #540]	; (8003f6c <HAL_SD_WriteBlocks+0x308>)
 8003d4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d56:	431a      	orrs	r2, r3
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2200      	movs	r2, #0
 8003d68:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e0f9      	b.n	8003f62 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003d6e:	69fb      	ldr	r3, [r7, #28]
 8003d70:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003d72:	e065      	b.n	8003e40 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d040      	beq.n	8003e04 <HAL_SD_WriteBlocks+0x1a0>
 8003d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d03d      	beq.n	8003e04 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003d88:	2300      	movs	r3, #0
 8003d8a:	643b      	str	r3, [r7, #64]	; 0x40
 8003d8c:	e037      	b.n	8003dfe <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d96:	3301      	adds	r3, #1
 8003d98:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	021a      	lsls	r2, r3, #8
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dae:	3301      	adds	r3, #1
 8003db0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003db4:	3b01      	subs	r3, #1
 8003db6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	041a      	lsls	r2, r3, #16
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003dcc:	3b01      	subs	r3, #1
 8003dce:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	061a      	lsls	r2, r3, #24
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dde:	3301      	adds	r3, #1
 8003de0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003de4:	3b01      	subs	r3, #1
 8003de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f107 0214 	add.w	r2, r7, #20
 8003df0:	4611      	mov	r1, r2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f002 fd5a 	bl	80068ac <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003df8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dfa:	3301      	adds	r3, #1
 8003dfc:	643b      	str	r3, [r7, #64]	; 0x40
 8003dfe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e00:	2b07      	cmp	r3, #7
 8003e02:	d9c4      	bls.n	8003d8e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003e04:	f7fd fd76 	bl	80018f4 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d902      	bls.n	8003e1a <HAL_SD_WriteBlocks+0x1b6>
 8003e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d112      	bne.n	8003e40 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a53      	ldr	r2, [pc, #332]	; (8003f6c <HAL_SD_WriteBlocks+0x308>)
 8003e20:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2201      	movs	r2, #1
 8003e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e090      	b.n	8003f62 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e46:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d092      	beq.n	8003d74 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d022      	beq.n	8003ea2 <HAL_SD_WriteBlocks+0x23e>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d91f      	bls.n	8003ea2 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e66:	2b03      	cmp	r3, #3
 8003e68:	d01b      	beq.n	8003ea2 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4618      	mov	r0, r3
 8003e70:	f002 fe6a 	bl	8006b48 <SDMMC_CmdStopTransfer>
 8003e74:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003e76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d012      	beq.n	8003ea2 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a3a      	ldr	r2, [pc, #232]	; (8003f6c <HAL_SD_WriteBlocks+0x308>)
 8003e82:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2201      	movs	r2, #1
 8003e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003e9e:	2301      	movs	r3, #1
 8003ea0:	e05f      	b.n	8003f62 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ea8:	f003 0308 	and.w	r3, r3, #8
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d012      	beq.n	8003ed6 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a2d      	ldr	r2, [pc, #180]	; (8003f6c <HAL_SD_WriteBlocks+0x308>)
 8003eb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ebc:	f043 0208 	orr.w	r2, r3, #8
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e045      	b.n	8003f62 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003edc:	f003 0302 	and.w	r3, r3, #2
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d012      	beq.n	8003f0a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a20      	ldr	r2, [pc, #128]	; (8003f6c <HAL_SD_WriteBlocks+0x308>)
 8003eea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef0:	f043 0202 	orr.w	r2, r3, #2
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e02b      	b.n	8003f62 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d012      	beq.n	8003f3e <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a13      	ldr	r2, [pc, #76]	; (8003f6c <HAL_SD_WriteBlocks+0x308>)
 8003f1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f24:	f043 0210 	orr.w	r2, r3, #16
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2200      	movs	r2, #0
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e011      	b.n	8003f62 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f240 523a 	movw	r2, #1338	; 0x53a
 8003f46:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	e006      	b.n	8003f62 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f58:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
  }
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3748      	adds	r7, #72	; 0x48
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	004005ff 	.word	0x004005ff

08003f70 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_SD_IRQHandler+0x2e>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f003 0308 	and.w	r3, r3, #8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d003      	beq.n	8003f9e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f000 fd4a 	bl	8004a30 <SD_Read_IT>
 8003f9c:	e155      	b.n	800424a <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	f000 808f 	beq.w	80040cc <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003fb6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003fc6:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003fca:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	f022 0201 	bic.w	r2, r2, #1
 8003fda:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f003 0308 	and.w	r3, r3, #8
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d039      	beq.n	800405a <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d104      	bne.n	8003ffa <HAL_SD_IRQHandler+0x8a>
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f003 0320 	and.w	r3, r3, #32
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d011      	beq.n	800401e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f002 fda2 	bl	8006b48 <SDMMC_CmdStopTransfer>
 8004004:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004010:	68bb      	ldr	r3, [r7, #8]
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f91f 	bl	800425c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f240 523a 	movw	r2, #1338	; 0x53a
 8004026:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2201      	movs	r2, #1
 800402c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d104      	bne.n	800404a <HAL_SD_IRQHandler+0xda>
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f003 f9c0 	bl	80073d0 <HAL_SD_RxCpltCallback>
 8004050:	e0fb      	b.n	800424a <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f003 f9b2 	bl	80073bc <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8004058:	e0f7      	b.n	800424a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004060:	2b00      	cmp	r3, #0
 8004062:	f000 80f2 	beq.w	800424a <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f003 0320 	and.w	r3, r3, #32
 800406c:	2b00      	cmp	r3, #0
 800406e:	d011      	beq.n	8004094 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4618      	mov	r0, r3
 8004076:	f002 fd67 	bl	8006b48 <SDMMC_CmdStopTransfer>
 800407a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d008      	beq.n	8004094 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	431a      	orrs	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f8e4 	bl	800425c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	f040 80d5 	bne.w	800424a <HAL_SD_IRQHandler+0x2da>
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	f040 80cf 	bne.w	800424a <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0208 	bic.w	r2, r2, #8
 80040ba:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2201      	movs	r2, #1
 80040c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 80040c4:	6878      	ldr	r0, [r7, #4]
 80040c6:	f003 f979 	bl	80073bc <HAL_SD_TxCpltCallback>
}
 80040ca:	e0be      	b.n	800424a <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d008      	beq.n	80040ec <HAL_SD_IRQHandler+0x17c>
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 0308 	and.w	r3, r3, #8
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d003      	beq.n	80040ec <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fcf4 	bl	8004ad2 <SD_Write_IT>
 80040ea:	e0ae      	b.n	800424a <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040f2:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	f000 80a7 	beq.w	800424a <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d005      	beq.n	8004116 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	f043 0202 	orr.w	r2, r3, #2
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	f043 0208 	orr.w	r2, r3, #8
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004136:	f003 0320 	and.w	r3, r3, #32
 800413a:	2b00      	cmp	r3, #0
 800413c:	d005      	beq.n	800414a <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004142:	f043 0220 	orr.w	r2, r3, #32
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004150:	f003 0310 	and.w	r3, r3, #16
 8004154:	2b00      	cmp	r3, #0
 8004156:	d005      	beq.n	8004164 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415c:	f043 0210 	orr.w	r2, r3, #16
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f240 523a 	movw	r2, #1338	; 0x53a
 800416c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800417c:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4618      	mov	r0, r3
 8004184:	f002 fce0 	bl	8006b48 <SDMMC_CmdStopTransfer>
 8004188:	4602      	mov	r2, r0
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d00a      	beq.n	80041b4 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2201      	movs	r2, #1
 80041a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 80041ac:	6878      	ldr	r0, [r7, #4]
 80041ae:	f000 f855 	bl	800425c <HAL_SD_ErrorCallback>
}
 80041b2:	e04a      	b.n	800424a <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d045      	beq.n	800424a <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d104      	bne.n	80041d2 <HAL_SD_IRQHandler+0x262>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 0320 	and.w	r3, r3, #32
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d011      	beq.n	80041f6 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d6:	4a1f      	ldr	r2, [pc, #124]	; (8004254 <HAL_SD_IRQHandler+0x2e4>)
 80041d8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	4618      	mov	r0, r3
 80041e0:	f7fd fde8 	bl	8001db4 <HAL_DMA_Abort_IT>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d02f      	beq.n	800424a <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fa2e 	bl	8004650 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80041f4:	e029      	b.n	800424a <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d104      	bne.n	800420a <HAL_SD_IRQHandler+0x29a>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	f003 0302 	and.w	r3, r3, #2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d011      	beq.n	800422e <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	4a12      	ldr	r2, [pc, #72]	; (8004258 <HAL_SD_IRQHandler+0x2e8>)
 8004210:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	4618      	mov	r0, r3
 8004218:	f7fd fdcc 	bl	8001db4 <HAL_DMA_Abort_IT>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d013      	beq.n	800424a <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fa49 	bl	80046be <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800422c:	e00d      	b.n	800424a <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f003 f8b0 	bl	80073a8 <HAL_SD_AbortCallback>
}
 8004248:	e7ff      	b.n	800424a <HAL_SD_IRQHandler+0x2da>
 800424a:	bf00      	nop
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	08004651 	.word	0x08004651
 8004258:	080046bf 	.word	0x080046bf

0800425c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8004264:	bf00      	nop
 8004266:	370c      	adds	r7, #12
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800427e:	0f9b      	lsrs	r3, r3, #30
 8004280:	b2da      	uxtb	r2, r3
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800428a:	0e9b      	lsrs	r3, r3, #26
 800428c:	b2db      	uxtb	r3, r3
 800428e:	f003 030f 	and.w	r3, r3, #15
 8004292:	b2da      	uxtb	r2, r3
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800429c:	0e1b      	lsrs	r3, r3, #24
 800429e:	b2db      	uxtb	r3, r3
 80042a0:	f003 0303 	and.w	r3, r3, #3
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ae:	0c1b      	lsrs	r3, r3, #16
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042ba:	0a1b      	lsrs	r3, r3, #8
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042d0:	0d1b      	lsrs	r3, r3, #20
 80042d2:	b29a      	uxth	r2, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042dc:	0c1b      	lsrs	r3, r3, #16
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f003 030f 	and.w	r3, r3, #15
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042ee:	0bdb      	lsrs	r3, r3, #15
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f003 0301 	and.w	r3, r3, #1
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004300:	0b9b      	lsrs	r3, r3, #14
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	b2da      	uxtb	r2, r3
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004312:	0b5b      	lsrs	r3, r3, #13
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	b2da      	uxtb	r2, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004324:	0b1b      	lsrs	r3, r3, #12
 8004326:	b2db      	uxtb	r3, r3
 8004328:	f003 0301 	and.w	r3, r3, #1
 800432c:	b2da      	uxtb	r2, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2200      	movs	r2, #0
 8004336:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433c:	2b00      	cmp	r3, #0
 800433e:	d163      	bne.n	8004408 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004344:	009a      	lsls	r2, r3, #2
 8004346:	f640 73fc 	movw	r3, #4092	; 0xffc
 800434a:	4013      	ands	r3, r2
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8004350:	0f92      	lsrs	r2, r2, #30
 8004352:	431a      	orrs	r2, r3
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800435c:	0edb      	lsrs	r3, r3, #27
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	b2da      	uxtb	r2, r3
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800436e:	0e1b      	lsrs	r3, r3, #24
 8004370:	b2db      	uxtb	r3, r3
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	b2da      	uxtb	r2, r3
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004380:	0d5b      	lsrs	r3, r3, #21
 8004382:	b2db      	uxtb	r3, r3
 8004384:	f003 0307 	and.w	r3, r3, #7
 8004388:	b2da      	uxtb	r2, r3
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004392:	0c9b      	lsrs	r3, r3, #18
 8004394:	b2db      	uxtb	r3, r3
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	b2da      	uxtb	r2, r3
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043a4:	0bdb      	lsrs	r3, r3, #15
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	691b      	ldr	r3, [r3, #16]
 80043b6:	1c5a      	adds	r2, r3, #1
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	7e1b      	ldrb	r3, [r3, #24]
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	f003 0307 	and.w	r3, r3, #7
 80043c6:	3302      	adds	r3, #2
 80043c8:	2201      	movs	r2, #1
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80043d2:	fb02 f203 	mul.w	r2, r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	7a1b      	ldrb	r3, [r3, #8]
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	f003 030f 	and.w	r3, r3, #15
 80043e4:	2201      	movs	r2, #1
 80043e6:	409a      	lsls	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80043f4:	0a52      	lsrs	r2, r2, #9
 80043f6:	fb02 f203 	mul.w	r2, r2, r3
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004404:	661a      	str	r2, [r3, #96]	; 0x60
 8004406:	e031      	b.n	800446c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440c:	2b01      	cmp	r3, #1
 800440e:	d11d      	bne.n	800444c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004414:	041b      	lsls	r3, r3, #16
 8004416:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800441e:	0c1b      	lsrs	r3, r3, #16
 8004420:	431a      	orrs	r2, r3
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	3301      	adds	r3, #1
 800442c:	029a      	lsls	r2, r3, #10
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004440:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	661a      	str	r2, [r3, #96]	; 0x60
 800444a:	e00f      	b.n	800446c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a58      	ldr	r2, [pc, #352]	; (80045b4 <HAL_SD_GetCardCSD+0x344>)
 8004452:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004458:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e09d      	b.n	80045a8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004470:	0b9b      	lsrs	r3, r3, #14
 8004472:	b2db      	uxtb	r3, r3
 8004474:	f003 0301 	and.w	r3, r3, #1
 8004478:	b2da      	uxtb	r2, r3
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004482:	09db      	lsrs	r3, r3, #7
 8004484:	b2db      	uxtb	r3, r3
 8004486:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800448a:	b2da      	uxtb	r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004494:	b2db      	uxtb	r3, r3
 8004496:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800449a:	b2da      	uxtb	r2, r3
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044a4:	0fdb      	lsrs	r3, r3, #31
 80044a6:	b2da      	uxtb	r2, r3
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b0:	0f5b      	lsrs	r3, r3, #29
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	f003 0303 	and.w	r3, r3, #3
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044c2:	0e9b      	lsrs	r3, r3, #26
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	f003 0307 	and.w	r3, r3, #7
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d4:	0d9b      	lsrs	r3, r3, #22
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	0d5b      	lsrs	r3, r3, #21
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	2200      	movs	r2, #0
 80044fa:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	0c1b      	lsrs	r3, r3, #16
 8004504:	b2db      	uxtb	r3, r3
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	b2da      	uxtb	r2, r3
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	0bdb      	lsrs	r3, r3, #15
 8004518:	b2db      	uxtb	r3, r3
 800451a:	f003 0301 	and.w	r3, r3, #1
 800451e:	b2da      	uxtb	r2, r3
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452a:	0b9b      	lsrs	r3, r3, #14
 800452c:	b2db      	uxtb	r3, r3
 800452e:	f003 0301 	and.w	r3, r3, #1
 8004532:	b2da      	uxtb	r2, r3
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	0b5b      	lsrs	r3, r3, #13
 8004540:	b2db      	uxtb	r3, r3
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	b2da      	uxtb	r2, r3
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	0b1b      	lsrs	r3, r3, #12
 8004554:	b2db      	uxtb	r3, r3
 8004556:	f003 0301 	and.w	r3, r3, #1
 800455a:	b2da      	uxtb	r2, r3
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	0a9b      	lsrs	r3, r3, #10
 8004568:	b2db      	uxtb	r3, r3
 800456a:	f003 0303 	and.w	r3, r3, #3
 800456e:	b2da      	uxtb	r2, r3
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	0a1b      	lsrs	r3, r3, #8
 800457c:	b2db      	uxtb	r3, r3
 800457e:	f003 0303 	and.w	r3, r3, #3
 8004582:	b2da      	uxtb	r2, r3
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800458e:	085b      	lsrs	r3, r3, #1
 8004590:	b2db      	uxtb	r3, r3
 8004592:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004596:	b2da      	uxtb	r2, r3
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr
 80045b4:	004005ff 	.word	0x004005ff

080045b8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004602:	2300      	movs	r3, #0
}
 8004604:	4618      	mov	r0, r3
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b086      	sub	sp, #24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004618:	2300      	movs	r3, #0
 800461a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800461c:	f107 030c 	add.w	r3, r7, #12
 8004620:	4619      	mov	r1, r3
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f000 f9dc 	bl	80049e0 <SD_SendStatus>
 8004628:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d005      	beq.n	800463c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	431a      	orrs	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	0a5b      	lsrs	r3, r3, #9
 8004640:	f003 030f 	and.w	r3, r3, #15
 8004644:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8004646:	693b      	ldr	r3, [r7, #16]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3718      	adds	r7, #24
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}

08004650 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b084      	sub	sp, #16
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f240 523a 	movw	r2, #1338	; 0x53a
 8004666:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f7ff ffd1 	bl	8004610 <HAL_SD_GetCardState>
 800466e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b06      	cmp	r3, #6
 8004682:	d002      	beq.n	800468a <SD_DMATxAbort+0x3a>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b05      	cmp	r3, #5
 8004688:	d10a      	bne.n	80046a0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f002 fa5a 	bl	8006b48 <SDMMC_CmdStopTransfer>
 8004694:	4602      	mov	r2, r0
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800469a:	431a      	orrs	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d103      	bne.n	80046b0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80046a8:	68f8      	ldr	r0, [r7, #12]
 80046aa:	f002 fe7d 	bl	80073a8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80046ae:	e002      	b.n	80046b6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80046b0:	68f8      	ldr	r0, [r7, #12]
 80046b2:	f7ff fdd3 	bl	800425c <HAL_SD_ErrorCallback>
}
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b084      	sub	sp, #16
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ca:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f240 523a 	movw	r2, #1338	; 0x53a
 80046d4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f7ff ff9a 	bl	8004610 <HAL_SD_GetCardState>
 80046dc:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2201      	movs	r2, #1
 80046e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b06      	cmp	r3, #6
 80046f0:	d002      	beq.n	80046f8 <SD_DMARxAbort+0x3a>
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2b05      	cmp	r3, #5
 80046f6:	d10a      	bne.n	800470e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f002 fa23 	bl	8006b48 <SDMMC_CmdStopTransfer>
 8004702:	4602      	mov	r2, r0
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004708:	431a      	orrs	r2, r3
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	2b00      	cmp	r3, #0
 8004714:	d103      	bne.n	800471e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f002 fe46 	bl	80073a8 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800471c:	e002      	b.n	8004724 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7ff fd9c 	bl	800425c <HAL_SD_ErrorCallback>
}
 8004724:	bf00      	nop
 8004726:	3710      	adds	r7, #16
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800472c:	b5b0      	push	{r4, r5, r7, lr}
 800472e:	b094      	sub	sp, #80	; 0x50
 8004730:	af04      	add	r7, sp, #16
 8004732:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8004734:	2301      	movs	r3, #1
 8004736:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4618      	mov	r0, r3
 800473e:	f002 f8d5 	bl	80068ec <SDIO_GetPowerState>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d102      	bne.n	800474e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8004748:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800474c:	e0b6      	b.n	80048bc <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004752:	2b03      	cmp	r3, #3
 8004754:	d02f      	beq.n	80047b6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4618      	mov	r0, r3
 800475c:	f002 fabb 	bl	8006cd6 <SDMMC_CmdSendCID>
 8004760:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004762:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004764:	2b00      	cmp	r3, #0
 8004766:	d001      	beq.n	800476c <SD_InitCard+0x40>
    {
      return errorstate;
 8004768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800476a:	e0a7      	b.n	80048bc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2100      	movs	r1, #0
 8004772:	4618      	mov	r0, r3
 8004774:	f002 f8ff 	bl	8006976 <SDIO_GetResponse>
 8004778:	4602      	mov	r2, r0
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	2104      	movs	r1, #4
 8004784:	4618      	mov	r0, r3
 8004786:	f002 f8f6 	bl	8006976 <SDIO_GetResponse>
 800478a:	4602      	mov	r2, r0
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2108      	movs	r1, #8
 8004796:	4618      	mov	r0, r3
 8004798:	f002 f8ed 	bl	8006976 <SDIO_GetResponse>
 800479c:	4602      	mov	r2, r0
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	210c      	movs	r1, #12
 80047a8:	4618      	mov	r0, r3
 80047aa:	f002 f8e4 	bl	8006976 <SDIO_GetResponse>
 80047ae:	4602      	mov	r2, r0
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	2b03      	cmp	r3, #3
 80047bc:	d00d      	beq.n	80047da <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f107 020e 	add.w	r2, r7, #14
 80047c6:	4611      	mov	r1, r2
 80047c8:	4618      	mov	r0, r3
 80047ca:	f002 fac1 	bl	8006d50 <SDMMC_CmdSetRelAdd>
 80047ce:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80047d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <SD_InitCard+0xae>
    {
      return errorstate;
 80047d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047d8:	e070      	b.n	80048bc <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047de:	2b03      	cmp	r3, #3
 80047e0:	d036      	beq.n	8004850 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80047e2:	89fb      	ldrh	r3, [r7, #14]
 80047e4:	461a      	mov	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047f2:	041b      	lsls	r3, r3, #16
 80047f4:	4619      	mov	r1, r3
 80047f6:	4610      	mov	r0, r2
 80047f8:	f002 fa8b 	bl	8006d12 <SDMMC_CmdSendCSD>
 80047fc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80047fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d001      	beq.n	8004808 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004804:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004806:	e059      	b.n	80048bc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2100      	movs	r1, #0
 800480e:	4618      	mov	r0, r3
 8004810:	f002 f8b1 	bl	8006976 <SDIO_GetResponse>
 8004814:	4602      	mov	r2, r0
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2104      	movs	r1, #4
 8004820:	4618      	mov	r0, r3
 8004822:	f002 f8a8 	bl	8006976 <SDIO_GetResponse>
 8004826:	4602      	mov	r2, r0
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2108      	movs	r1, #8
 8004832:	4618      	mov	r0, r3
 8004834:	f002 f89f 	bl	8006976 <SDIO_GetResponse>
 8004838:	4602      	mov	r2, r0
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	210c      	movs	r1, #12
 8004844:	4618      	mov	r0, r3
 8004846:	f002 f896 	bl	8006976 <SDIO_GetResponse>
 800484a:	4602      	mov	r2, r0
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2104      	movs	r1, #4
 8004856:	4618      	mov	r0, r3
 8004858:	f002 f88d 	bl	8006976 <SDIO_GetResponse>
 800485c:	4603      	mov	r3, r0
 800485e:	0d1a      	lsrs	r2, r3, #20
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8004864:	f107 0310 	add.w	r3, r7, #16
 8004868:	4619      	mov	r1, r3
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f7ff fd00 	bl	8004270 <HAL_SD_GetCardCSD>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d002      	beq.n	800487c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004876:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800487a:	e01f      	b.n	80048bc <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6819      	ldr	r1, [r3, #0]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004884:	041b      	lsls	r3, r3, #16
 8004886:	461a      	mov	r2, r3
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	4608      	mov	r0, r1
 800488e:	f002 f97d 	bl	8006b8c <SDMMC_CmdSelDesel>
 8004892:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d001      	beq.n	800489e <SD_InitCard+0x172>
  {
    return errorstate;
 800489a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800489c:	e00e      	b.n	80048bc <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681d      	ldr	r5, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	466c      	mov	r4, sp
 80048a6:	f103 0210 	add.w	r2, r3, #16
 80048aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80048ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80048b0:	3304      	adds	r3, #4
 80048b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80048b4:	4628      	mov	r0, r5
 80048b6:	f001 ffc1 	bl	800683c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80048ba:	2300      	movs	r3, #0
}
 80048bc:	4618      	mov	r0, r3
 80048be:	3740      	adds	r7, #64	; 0x40
 80048c0:	46bd      	mov	sp, r7
 80048c2:	bdb0      	pop	{r4, r5, r7, pc}

080048c4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80048c4:	b580      	push	{r7, lr}
 80048c6:	b086      	sub	sp, #24
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80048d0:	2300      	movs	r3, #0
 80048d2:	617b      	str	r3, [r7, #20]
 80048d4:	2300      	movs	r3, #0
 80048d6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4618      	mov	r0, r3
 80048de:	f002 f978 	bl	8006bd2 <SDMMC_CmdGoIdleState>
 80048e2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d001      	beq.n	80048ee <SD_PowerON+0x2a>
  {
    return errorstate;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	e072      	b.n	80049d4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f002 f98b 	bl	8006c0e <SDMMC_CmdOperCond>
 80048f8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d00d      	beq.n	800491c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4618      	mov	r0, r3
 800490c:	f002 f961 	bl	8006bd2 <SDMMC_CmdGoIdleState>
 8004910:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d004      	beq.n	8004922 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	e05b      	b.n	80049d4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004926:	2b01      	cmp	r3, #1
 8004928:	d137      	bne.n	800499a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2100      	movs	r1, #0
 8004930:	4618      	mov	r0, r3
 8004932:	f002 f98b 	bl	8006c4c <SDMMC_CmdAppCommand>
 8004936:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d02d      	beq.n	800499a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800493e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004942:	e047      	b.n	80049d4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2100      	movs	r1, #0
 800494a:	4618      	mov	r0, r3
 800494c:	f002 f97e 	bl	8006c4c <SDMMC_CmdAppCommand>
 8004950:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <SD_PowerON+0x98>
    {
      return errorstate;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	e03b      	b.n	80049d4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	491e      	ldr	r1, [pc, #120]	; (80049dc <SD_PowerON+0x118>)
 8004962:	4618      	mov	r0, r3
 8004964:	f002 f994 	bl	8006c90 <SDMMC_CmdAppOperCommand>
 8004968:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8004970:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004974:	e02e      	b.n	80049d4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2100      	movs	r1, #0
 800497c:	4618      	mov	r0, r3
 800497e:	f001 fffa 	bl	8006976 <SDIO_GetResponse>
 8004982:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	0fdb      	lsrs	r3, r3, #31
 8004988:	2b01      	cmp	r3, #1
 800498a:	d101      	bne.n	8004990 <SD_PowerON+0xcc>
 800498c:	2301      	movs	r3, #1
 800498e:	e000      	b.n	8004992 <SD_PowerON+0xce>
 8004990:	2300      	movs	r3, #0
 8004992:	613b      	str	r3, [r7, #16]

    count++;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	3301      	adds	r3, #1
 8004998:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800499a:	68bb      	ldr	r3, [r7, #8]
 800499c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d802      	bhi.n	80049aa <SD_PowerON+0xe6>
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d0cc      	beq.n	8004944 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d902      	bls.n	80049ba <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80049b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80049b8:	e00c      	b.n	80049d4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	645a      	str	r2, [r3, #68]	; 0x44
 80049ca:	e002      	b.n	80049d2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	c1100000 	.word	0xc1100000

080049e0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d102      	bne.n	80049f6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80049f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049f4:	e018      	b.n	8004a28 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049fe:	041b      	lsls	r3, r3, #16
 8004a00:	4619      	mov	r1, r3
 8004a02:	4610      	mov	r0, r2
 8004a04:	f002 f9c5 	bl	8006d92 <SDMMC_CmdSendStatus>
 8004a08:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	e009      	b.n	8004a28 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	2100      	movs	r1, #0
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f001 ffab 	bl	8006976 <SDIO_GetResponse>
 8004a20:	4602      	mov	r2, r0
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004a26:	2300      	movs	r3, #0
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3710      	adds	r7, #16
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a3c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a42:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d03f      	beq.n	8004aca <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	617b      	str	r3, [r7, #20]
 8004a4e:	e033      	b.n	8004ab8 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f001 ff1c 	bl	8006892 <SDIO_ReadFIFO>
 8004a5a:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	b2da      	uxtb	r2, r3
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3301      	adds	r3, #1
 8004a68:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	b2da      	uxtb	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004a86:	68bb      	ldr	r3, [r7, #8]
 8004a88:	0c1b      	lsrs	r3, r3, #16
 8004a8a:	b2da      	uxtb	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3301      	adds	r3, #1
 8004a94:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	0e1b      	lsrs	r3, r3, #24
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004aac:	693b      	ldr	r3, [r7, #16]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	3301      	adds	r3, #1
 8004ab6:	617b      	str	r3, [r7, #20]
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	2b07      	cmp	r3, #7
 8004abc:	d9c8      	bls.n	8004a50 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004aca:	bf00      	nop
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b086      	sub	sp, #24
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d043      	beq.n	8004b74 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
 8004af0:	e037      	b.n	8004b62 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	3301      	adds	r3, #1
 8004afc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	3b01      	subs	r3, #1
 8004b02:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	781b      	ldrb	r3, [r3, #0]
 8004b08:	021a      	lsls	r2, r3, #8
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3301      	adds	r3, #1
 8004b14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	3b01      	subs	r3, #1
 8004b1a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	041a      	lsls	r2, r3, #16
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	3301      	adds	r3, #1
 8004b2c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	3b01      	subs	r3, #1
 8004b32:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	781b      	ldrb	r3, [r3, #0]
 8004b38:	061a      	lsls	r2, r3, #24
 8004b3a:	68bb      	ldr	r3, [r7, #8]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3301      	adds	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	3b01      	subs	r3, #1
 8004b4a:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f107 0208 	add.w	r2, r7, #8
 8004b54:	4611      	mov	r1, r2
 8004b56:	4618      	mov	r0, r3
 8004b58:	f001 fea8 	bl	80068ac <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	3301      	adds	r3, #1
 8004b60:	617b      	str	r3, [r7, #20]
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	2b07      	cmp	r3, #7
 8004b66:	d9c4      	bls.n	8004af2 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004b74:	bf00      	nop
 8004b76:	3718      	adds	r7, #24
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}

08004b7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d101      	bne.n	8004b8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e041      	b.n	8004c12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d106      	bne.n	8004ba8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f7fc fc82 	bl	80014ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2202      	movs	r2, #2
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	3304      	adds	r3, #4
 8004bb8:	4619      	mov	r1, r3
 8004bba:	4610      	mov	r0, r2
 8004bbc:	f000 fcf0 	bl	80055a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2201      	movs	r2, #1
 8004be4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c10:	2300      	movs	r3, #0
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3708      	adds	r7, #8
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
	...

08004c1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c2a:	b2db      	uxtb	r3, r3
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d001      	beq.n	8004c34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e04e      	b.n	8004cd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2202      	movs	r2, #2
 8004c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f042 0201 	orr.w	r2, r2, #1
 8004c4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a23      	ldr	r2, [pc, #140]	; (8004ce0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d022      	beq.n	8004c9c <HAL_TIM_Base_Start_IT+0x80>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5e:	d01d      	beq.n	8004c9c <HAL_TIM_Base_Start_IT+0x80>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a1f      	ldr	r2, [pc, #124]	; (8004ce4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d018      	beq.n	8004c9c <HAL_TIM_Base_Start_IT+0x80>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ce8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d013      	beq.n	8004c9c <HAL_TIM_Base_Start_IT+0x80>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a1c      	ldr	r2, [pc, #112]	; (8004cec <HAL_TIM_Base_Start_IT+0xd0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00e      	beq.n	8004c9c <HAL_TIM_Base_Start_IT+0x80>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d009      	beq.n	8004c9c <HAL_TIM_Base_Start_IT+0x80>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a19      	ldr	r2, [pc, #100]	; (8004cf4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d004      	beq.n	8004c9c <HAL_TIM_Base_Start_IT+0x80>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a18      	ldr	r2, [pc, #96]	; (8004cf8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d111      	bne.n	8004cc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2b06      	cmp	r3, #6
 8004cac:	d010      	beq.n	8004cd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f042 0201 	orr.w	r2, r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cbe:	e007      	b.n	8004cd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f042 0201 	orr.w	r2, r2, #1
 8004cce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cd0:	2300      	movs	r3, #0
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	40010000 	.word	0x40010000
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	40000800 	.word	0x40000800
 8004cec:	40000c00 	.word	0x40000c00
 8004cf0:	40010400 	.word	0x40010400
 8004cf4:	40014000 	.word	0x40014000
 8004cf8:	40001800 	.word	0x40001800

08004cfc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68da      	ldr	r2, [r3, #12]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0201 	bic.w	r2, r2, #1
 8004d12:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6a1a      	ldr	r2, [r3, #32]
 8004d1a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d1e:	4013      	ands	r3, r2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d10f      	bne.n	8004d44 <HAL_TIM_Base_Stop_IT+0x48>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	6a1a      	ldr	r2, [r3, #32]
 8004d2a:	f240 4344 	movw	r3, #1092	; 0x444
 8004d2e:	4013      	ands	r3, r2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d107      	bne.n	8004d44 <HAL_TIM_Base_Stop_IT+0x48>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681a      	ldr	r2, [r3, #0]
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f022 0201 	bic.w	r2, r2, #1
 8004d42:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr

08004d5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b082      	sub	sp, #8
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d101      	bne.n	8004d6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e041      	b.n	8004df0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d106      	bne.n	8004d86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7fc fb5b 	bl	800143c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2202      	movs	r2, #2
 8004d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	3304      	adds	r3, #4
 8004d96:	4619      	mov	r1, r3
 8004d98:	4610      	mov	r0, r2
 8004d9a:	f000 fc01 	bl	80055a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2201      	movs	r2, #1
 8004da2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2201      	movs	r2, #1
 8004daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2201      	movs	r2, #1
 8004db2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2201      	movs	r2, #1
 8004dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2201      	movs	r2, #1
 8004de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2201      	movs	r2, #1
 8004dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dee:	2300      	movs	r3, #0
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	3708      	adds	r7, #8
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d109      	bne.n	8004e1c <HAL_TIM_PWM_Start+0x24>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	bf14      	ite	ne
 8004e14:	2301      	movne	r3, #1
 8004e16:	2300      	moveq	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	e022      	b.n	8004e62 <HAL_TIM_PWM_Start+0x6a>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d109      	bne.n	8004e36 <HAL_TIM_PWM_Start+0x3e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	bf14      	ite	ne
 8004e2e:	2301      	movne	r3, #1
 8004e30:	2300      	moveq	r3, #0
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	e015      	b.n	8004e62 <HAL_TIM_PWM_Start+0x6a>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d109      	bne.n	8004e50 <HAL_TIM_PWM_Start+0x58>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	bf14      	ite	ne
 8004e48:	2301      	movne	r3, #1
 8004e4a:	2300      	moveq	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	e008      	b.n	8004e62 <HAL_TIM_PWM_Start+0x6a>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	bf14      	ite	ne
 8004e5c:	2301      	movne	r3, #1
 8004e5e:	2300      	moveq	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d001      	beq.n	8004e6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e07c      	b.n	8004f64 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d104      	bne.n	8004e7a <HAL_TIM_PWM_Start+0x82>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2202      	movs	r2, #2
 8004e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e78:	e013      	b.n	8004ea2 <HAL_TIM_PWM_Start+0xaa>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b04      	cmp	r3, #4
 8004e7e:	d104      	bne.n	8004e8a <HAL_TIM_PWM_Start+0x92>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e88:	e00b      	b.n	8004ea2 <HAL_TIM_PWM_Start+0xaa>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d104      	bne.n	8004e9a <HAL_TIM_PWM_Start+0xa2>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e98:	e003      	b.n	8004ea2 <HAL_TIM_PWM_Start+0xaa>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	6839      	ldr	r1, [r7, #0]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fe62 	bl	8005b74 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4a2d      	ldr	r2, [pc, #180]	; (8004f6c <HAL_TIM_PWM_Start+0x174>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d004      	beq.n	8004ec4 <HAL_TIM_PWM_Start+0xcc>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4a2c      	ldr	r2, [pc, #176]	; (8004f70 <HAL_TIM_PWM_Start+0x178>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d101      	bne.n	8004ec8 <HAL_TIM_PWM_Start+0xd0>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <HAL_TIM_PWM_Start+0xd2>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d007      	beq.n	8004ede <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004edc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4a22      	ldr	r2, [pc, #136]	; (8004f6c <HAL_TIM_PWM_Start+0x174>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d022      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x136>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ef0:	d01d      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x136>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a1f      	ldr	r2, [pc, #124]	; (8004f74 <HAL_TIM_PWM_Start+0x17c>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d018      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x136>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a1d      	ldr	r2, [pc, #116]	; (8004f78 <HAL_TIM_PWM_Start+0x180>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d013      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x136>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4a1c      	ldr	r2, [pc, #112]	; (8004f7c <HAL_TIM_PWM_Start+0x184>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d00e      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x136>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a16      	ldr	r2, [pc, #88]	; (8004f70 <HAL_TIM_PWM_Start+0x178>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d009      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x136>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4a18      	ldr	r2, [pc, #96]	; (8004f80 <HAL_TIM_PWM_Start+0x188>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d004      	beq.n	8004f2e <HAL_TIM_PWM_Start+0x136>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a16      	ldr	r2, [pc, #88]	; (8004f84 <HAL_TIM_PWM_Start+0x18c>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d111      	bne.n	8004f52 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b06      	cmp	r3, #6
 8004f3e:	d010      	beq.n	8004f62 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f50:	e007      	b.n	8004f62 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0201 	orr.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3710      	adds	r7, #16
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}
 8004f6c:	40010000 	.word	0x40010000
 8004f70:	40010400 	.word	0x40010400
 8004f74:	40000400 	.word	0x40000400
 8004f78:	40000800 	.word	0x40000800
 8004f7c:	40000c00 	.word	0x40000c00
 8004f80:	40014000 	.word	0x40014000
 8004f84:	40001800 	.word	0x40001800

08004f88 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d101      	bne.n	8004f9c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e041      	b.n	8005020 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa2:	b2db      	uxtb	r3, r3
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d106      	bne.n	8004fb6 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f839 	bl	8005028 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2202      	movs	r2, #2
 8004fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	3304      	adds	r3, #4
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	4610      	mov	r0, r2
 8004fca:	f000 fae9 	bl	80055a0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	681a      	ldr	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f022 0208 	bic.w	r2, r2, #8
 8004fdc:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6819      	ldr	r1, [r3, #0]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2201      	movs	r2, #1
 800500a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2201      	movs	r2, #1
 8005012:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2201      	movs	r2, #1
 800501a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	f003 0302 	and.w	r3, r3, #2
 800504e:	2b02      	cmp	r3, #2
 8005050:	d122      	bne.n	8005098 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b02      	cmp	r3, #2
 800505e:	d11b      	bne.n	8005098 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f06f 0202 	mvn.w	r2, #2
 8005068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2201      	movs	r2, #1
 800506e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d003      	beq.n	8005086 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 fa70 	bl	8005564 <HAL_TIM_IC_CaptureCallback>
 8005084:	e005      	b.n	8005092 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005086:	6878      	ldr	r0, [r7, #4]
 8005088:	f000 fa62 	bl	8005550 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f000 fa73 	bl	8005578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	691b      	ldr	r3, [r3, #16]
 800509e:	f003 0304 	and.w	r3, r3, #4
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d122      	bne.n	80050ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	f003 0304 	and.w	r3, r3, #4
 80050b0:	2b04      	cmp	r3, #4
 80050b2:	d11b      	bne.n	80050ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f06f 0204 	mvn.w	r2, #4
 80050bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2202      	movs	r2, #2
 80050c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	699b      	ldr	r3, [r3, #24]
 80050ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d003      	beq.n	80050da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f000 fa46 	bl	8005564 <HAL_TIM_IC_CaptureCallback>
 80050d8:	e005      	b.n	80050e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f000 fa38 	bl	8005550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fa49 	bl	8005578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f003 0308 	and.w	r3, r3, #8
 80050f6:	2b08      	cmp	r3, #8
 80050f8:	d122      	bne.n	8005140 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f003 0308 	and.w	r3, r3, #8
 8005104:	2b08      	cmp	r3, #8
 8005106:	d11b      	bne.n	8005140 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0208 	mvn.w	r2, #8
 8005110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2204      	movs	r2, #4
 8005116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	69db      	ldr	r3, [r3, #28]
 800511e:	f003 0303 	and.w	r3, r3, #3
 8005122:	2b00      	cmp	r3, #0
 8005124:	d003      	beq.n	800512e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fa1c 	bl	8005564 <HAL_TIM_IC_CaptureCallback>
 800512c:	e005      	b.n	800513a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 fa0e 	bl	8005550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 fa1f 	bl	8005578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0310 	and.w	r3, r3, #16
 800514a:	2b10      	cmp	r3, #16
 800514c:	d122      	bne.n	8005194 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0310 	and.w	r3, r3, #16
 8005158:	2b10      	cmp	r3, #16
 800515a:	d11b      	bne.n	8005194 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0210 	mvn.w	r2, #16
 8005164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2208      	movs	r2, #8
 800516a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f9f2 	bl	8005564 <HAL_TIM_IC_CaptureCallback>
 8005180:	e005      	b.n	800518e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f9e4 	bl	8005550 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f9f5 	bl	8005578 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d10e      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	f003 0301 	and.w	r3, r3, #1
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d107      	bne.n	80051c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f06f 0201 	mvn.w	r2, #1
 80051b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fb fcf8 	bl	8000bb0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ca:	2b80      	cmp	r3, #128	; 0x80
 80051cc:	d10e      	bne.n	80051ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d8:	2b80      	cmp	r3, #128	; 0x80
 80051da:	d107      	bne.n	80051ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 fdc2 	bl	8005d70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051f6:	2b40      	cmp	r3, #64	; 0x40
 80051f8:	d10e      	bne.n	8005218 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68db      	ldr	r3, [r3, #12]
 8005200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005204:	2b40      	cmp	r3, #64	; 0x40
 8005206:	d107      	bne.n	8005218 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f9ba 	bl	800558c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	f003 0320 	and.w	r3, r3, #32
 8005222:	2b20      	cmp	r3, #32
 8005224:	d10e      	bne.n	8005244 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	68db      	ldr	r3, [r3, #12]
 800522c:	f003 0320 	and.w	r3, r3, #32
 8005230:	2b20      	cmp	r3, #32
 8005232:	d107      	bne.n	8005244 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f06f 0220 	mvn.w	r2, #32
 800523c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fd8c 	bl	8005d5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005244:	bf00      	nop
 8005246:	3708      	adds	r7, #8
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b084      	sub	sp, #16
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800525e:	2b01      	cmp	r3, #1
 8005260:	d101      	bne.n	8005266 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005262:	2302      	movs	r3, #2
 8005264:	e0ac      	b.n	80053c0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2b0c      	cmp	r3, #12
 8005272:	f200 809f 	bhi.w	80053b4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005276:	a201      	add	r2, pc, #4	; (adr r2, 800527c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800527c:	080052b1 	.word	0x080052b1
 8005280:	080053b5 	.word	0x080053b5
 8005284:	080053b5 	.word	0x080053b5
 8005288:	080053b5 	.word	0x080053b5
 800528c:	080052f1 	.word	0x080052f1
 8005290:	080053b5 	.word	0x080053b5
 8005294:	080053b5 	.word	0x080053b5
 8005298:	080053b5 	.word	0x080053b5
 800529c:	08005333 	.word	0x08005333
 80052a0:	080053b5 	.word	0x080053b5
 80052a4:	080053b5 	.word	0x080053b5
 80052a8:	080053b5 	.word	0x080053b5
 80052ac:	08005373 	.word	0x08005373
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68b9      	ldr	r1, [r7, #8]
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 fa12 	bl	80056e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	699a      	ldr	r2, [r3, #24]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0208 	orr.w	r2, r2, #8
 80052ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	699a      	ldr	r2, [r3, #24]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f022 0204 	bic.w	r2, r2, #4
 80052da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	6999      	ldr	r1, [r3, #24]
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	691a      	ldr	r2, [r3, #16]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	619a      	str	r2, [r3, #24]
      break;
 80052ee:	e062      	b.n	80053b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fa62 	bl	80057c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800530a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800531a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6999      	ldr	r1, [r3, #24]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	691b      	ldr	r3, [r3, #16]
 8005326:	021a      	lsls	r2, r3, #8
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	430a      	orrs	r2, r1
 800532e:	619a      	str	r2, [r3, #24]
      break;
 8005330:	e041      	b.n	80053b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68b9      	ldr	r1, [r7, #8]
 8005338:	4618      	mov	r0, r3
 800533a:	f000 fab7 	bl	80058ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	69da      	ldr	r2, [r3, #28]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f042 0208 	orr.w	r2, r2, #8
 800534c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	69da      	ldr	r2, [r3, #28]
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 0204 	bic.w	r2, r2, #4
 800535c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	69d9      	ldr	r1, [r3, #28]
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	691a      	ldr	r2, [r3, #16]
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	61da      	str	r2, [r3, #28]
      break;
 8005370:	e021      	b.n	80053b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68b9      	ldr	r1, [r7, #8]
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fb0b 	bl	8005994 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800538c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800539c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69d9      	ldr	r1, [r3, #28]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	021a      	lsls	r2, r3, #8
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	61da      	str	r2, [r3, #28]
      break;
 80053b2:	e000      	b.n	80053b6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80053b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d101      	bne.n	80053e0 <HAL_TIM_ConfigClockSource+0x18>
 80053dc:	2302      	movs	r3, #2
 80053de:	e0b3      	b.n	8005548 <HAL_TIM_ConfigClockSource+0x180>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2202      	movs	r2, #2
 80053ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80053fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005406:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68fa      	ldr	r2, [r7, #12]
 800540e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005418:	d03e      	beq.n	8005498 <HAL_TIM_ConfigClockSource+0xd0>
 800541a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800541e:	f200 8087 	bhi.w	8005530 <HAL_TIM_ConfigClockSource+0x168>
 8005422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005426:	f000 8085 	beq.w	8005534 <HAL_TIM_ConfigClockSource+0x16c>
 800542a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800542e:	d87f      	bhi.n	8005530 <HAL_TIM_ConfigClockSource+0x168>
 8005430:	2b70      	cmp	r3, #112	; 0x70
 8005432:	d01a      	beq.n	800546a <HAL_TIM_ConfigClockSource+0xa2>
 8005434:	2b70      	cmp	r3, #112	; 0x70
 8005436:	d87b      	bhi.n	8005530 <HAL_TIM_ConfigClockSource+0x168>
 8005438:	2b60      	cmp	r3, #96	; 0x60
 800543a:	d050      	beq.n	80054de <HAL_TIM_ConfigClockSource+0x116>
 800543c:	2b60      	cmp	r3, #96	; 0x60
 800543e:	d877      	bhi.n	8005530 <HAL_TIM_ConfigClockSource+0x168>
 8005440:	2b50      	cmp	r3, #80	; 0x50
 8005442:	d03c      	beq.n	80054be <HAL_TIM_ConfigClockSource+0xf6>
 8005444:	2b50      	cmp	r3, #80	; 0x50
 8005446:	d873      	bhi.n	8005530 <HAL_TIM_ConfigClockSource+0x168>
 8005448:	2b40      	cmp	r3, #64	; 0x40
 800544a:	d058      	beq.n	80054fe <HAL_TIM_ConfigClockSource+0x136>
 800544c:	2b40      	cmp	r3, #64	; 0x40
 800544e:	d86f      	bhi.n	8005530 <HAL_TIM_ConfigClockSource+0x168>
 8005450:	2b30      	cmp	r3, #48	; 0x30
 8005452:	d064      	beq.n	800551e <HAL_TIM_ConfigClockSource+0x156>
 8005454:	2b30      	cmp	r3, #48	; 0x30
 8005456:	d86b      	bhi.n	8005530 <HAL_TIM_ConfigClockSource+0x168>
 8005458:	2b20      	cmp	r3, #32
 800545a:	d060      	beq.n	800551e <HAL_TIM_ConfigClockSource+0x156>
 800545c:	2b20      	cmp	r3, #32
 800545e:	d867      	bhi.n	8005530 <HAL_TIM_ConfigClockSource+0x168>
 8005460:	2b00      	cmp	r3, #0
 8005462:	d05c      	beq.n	800551e <HAL_TIM_ConfigClockSource+0x156>
 8005464:	2b10      	cmp	r3, #16
 8005466:	d05a      	beq.n	800551e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005468:	e062      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6818      	ldr	r0, [r3, #0]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	6899      	ldr	r1, [r3, #8]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685a      	ldr	r2, [r3, #4]
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f000 fb5b 	bl	8005b34 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	689b      	ldr	r3, [r3, #8]
 8005484:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800548c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	68fa      	ldr	r2, [r7, #12]
 8005494:	609a      	str	r2, [r3, #8]
      break;
 8005496:	e04e      	b.n	8005536 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6818      	ldr	r0, [r3, #0]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	6899      	ldr	r1, [r3, #8]
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	685a      	ldr	r2, [r3, #4]
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f000 fb44 	bl	8005b34 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	689a      	ldr	r2, [r3, #8]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054ba:	609a      	str	r2, [r3, #8]
      break;
 80054bc:	e03b      	b.n	8005536 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6818      	ldr	r0, [r3, #0]
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	6859      	ldr	r1, [r3, #4]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	461a      	mov	r2, r3
 80054cc:	f000 fab8 	bl	8005a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	2150      	movs	r1, #80	; 0x50
 80054d6:	4618      	mov	r0, r3
 80054d8:	f000 fb11 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 80054dc:	e02b      	b.n	8005536 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	6818      	ldr	r0, [r3, #0]
 80054e2:	683b      	ldr	r3, [r7, #0]
 80054e4:	6859      	ldr	r1, [r3, #4]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	461a      	mov	r2, r3
 80054ec:	f000 fad7 	bl	8005a9e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	2160      	movs	r1, #96	; 0x60
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 fb01 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 80054fc:	e01b      	b.n	8005536 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	6859      	ldr	r1, [r3, #4]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	461a      	mov	r2, r3
 800550c:	f000 fa98 	bl	8005a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2140      	movs	r1, #64	; 0x40
 8005516:	4618      	mov	r0, r3
 8005518:	f000 faf1 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 800551c:	e00b      	b.n	8005536 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4619      	mov	r1, r3
 8005528:	4610      	mov	r0, r2
 800552a:	f000 fae8 	bl	8005afe <TIM_ITRx_SetConfig>
        break;
 800552e:	e002      	b.n	8005536 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005530:	bf00      	nop
 8005532:	e000      	b.n	8005536 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005534:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005546:	2300      	movs	r3, #0
}
 8005548:	4618      	mov	r0, r3
 800554a:	3710      	adds	r7, #16
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}

08005550 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	4a40      	ldr	r2, [pc, #256]	; (80056b4 <TIM_Base_SetConfig+0x114>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d013      	beq.n	80055e0 <TIM_Base_SetConfig+0x40>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055be:	d00f      	beq.n	80055e0 <TIM_Base_SetConfig+0x40>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	4a3d      	ldr	r2, [pc, #244]	; (80056b8 <TIM_Base_SetConfig+0x118>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00b      	beq.n	80055e0 <TIM_Base_SetConfig+0x40>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	4a3c      	ldr	r2, [pc, #240]	; (80056bc <TIM_Base_SetConfig+0x11c>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d007      	beq.n	80055e0 <TIM_Base_SetConfig+0x40>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a3b      	ldr	r2, [pc, #236]	; (80056c0 <TIM_Base_SetConfig+0x120>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d003      	beq.n	80055e0 <TIM_Base_SetConfig+0x40>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a3a      	ldr	r2, [pc, #232]	; (80056c4 <TIM_Base_SetConfig+0x124>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d108      	bne.n	80055f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	68fa      	ldr	r2, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	4a2f      	ldr	r2, [pc, #188]	; (80056b4 <TIM_Base_SetConfig+0x114>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d02b      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005600:	d027      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	4a2c      	ldr	r2, [pc, #176]	; (80056b8 <TIM_Base_SetConfig+0x118>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d023      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	4a2b      	ldr	r2, [pc, #172]	; (80056bc <TIM_Base_SetConfig+0x11c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d01f      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	4a2a      	ldr	r2, [pc, #168]	; (80056c0 <TIM_Base_SetConfig+0x120>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d01b      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	4a29      	ldr	r2, [pc, #164]	; (80056c4 <TIM_Base_SetConfig+0x124>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d017      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	4a28      	ldr	r2, [pc, #160]	; (80056c8 <TIM_Base_SetConfig+0x128>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d013      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a27      	ldr	r2, [pc, #156]	; (80056cc <TIM_Base_SetConfig+0x12c>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d00f      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a26      	ldr	r2, [pc, #152]	; (80056d0 <TIM_Base_SetConfig+0x130>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d00b      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4a25      	ldr	r2, [pc, #148]	; (80056d4 <TIM_Base_SetConfig+0x134>)
 800563e:	4293      	cmp	r3, r2
 8005640:	d007      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a24      	ldr	r2, [pc, #144]	; (80056d8 <TIM_Base_SetConfig+0x138>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d003      	beq.n	8005652 <TIM_Base_SetConfig+0xb2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a23      	ldr	r2, [pc, #140]	; (80056dc <TIM_Base_SetConfig+0x13c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d108      	bne.n	8005664 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005658:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	4313      	orrs	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	689a      	ldr	r2, [r3, #8]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a0a      	ldr	r2, [pc, #40]	; (80056b4 <TIM_Base_SetConfig+0x114>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <TIM_Base_SetConfig+0xf8>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a0c      	ldr	r2, [pc, #48]	; (80056c4 <TIM_Base_SetConfig+0x124>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d103      	bne.n	80056a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	691a      	ldr	r2, [r3, #16]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	2201      	movs	r2, #1
 80056a4:	615a      	str	r2, [r3, #20]
}
 80056a6:	bf00      	nop
 80056a8:	3714      	adds	r7, #20
 80056aa:	46bd      	mov	sp, r7
 80056ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b0:	4770      	bx	lr
 80056b2:	bf00      	nop
 80056b4:	40010000 	.word	0x40010000
 80056b8:	40000400 	.word	0x40000400
 80056bc:	40000800 	.word	0x40000800
 80056c0:	40000c00 	.word	0x40000c00
 80056c4:	40010400 	.word	0x40010400
 80056c8:	40014000 	.word	0x40014000
 80056cc:	40014400 	.word	0x40014400
 80056d0:	40014800 	.word	0x40014800
 80056d4:	40001800 	.word	0x40001800
 80056d8:	40001c00 	.word	0x40001c00
 80056dc:	40002000 	.word	0x40002000

080056e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	f023 0201 	bic.w	r2, r3, #1
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800570e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f023 0303 	bic.w	r3, r3, #3
 8005716:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68fa      	ldr	r2, [r7, #12]
 800571e:	4313      	orrs	r3, r2
 8005720:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	f023 0302 	bic.w	r3, r3, #2
 8005728:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	4313      	orrs	r3, r2
 8005732:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a20      	ldr	r2, [pc, #128]	; (80057b8 <TIM_OC1_SetConfig+0xd8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_OC1_SetConfig+0x64>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a1f      	ldr	r2, [pc, #124]	; (80057bc <TIM_OC1_SetConfig+0xdc>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d10c      	bne.n	800575e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005744:	697b      	ldr	r3, [r7, #20]
 8005746:	f023 0308 	bic.w	r3, r3, #8
 800574a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	68db      	ldr	r3, [r3, #12]
 8005750:	697a      	ldr	r2, [r7, #20]
 8005752:	4313      	orrs	r3, r2
 8005754:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f023 0304 	bic.w	r3, r3, #4
 800575c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <TIM_OC1_SetConfig+0xd8>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d003      	beq.n	800576e <TIM_OC1_SetConfig+0x8e>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a14      	ldr	r2, [pc, #80]	; (80057bc <TIM_OC1_SetConfig+0xdc>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d111      	bne.n	8005792 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800577c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	695b      	ldr	r3, [r3, #20]
 8005782:	693a      	ldr	r2, [r7, #16]
 8005784:	4313      	orrs	r3, r2
 8005786:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	699b      	ldr	r3, [r3, #24]
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	693a      	ldr	r2, [r7, #16]
 8005796:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68fa      	ldr	r2, [r7, #12]
 800579c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	685a      	ldr	r2, [r3, #4]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	697a      	ldr	r2, [r7, #20]
 80057aa:	621a      	str	r2, [r3, #32]
}
 80057ac:	bf00      	nop
 80057ae:	371c      	adds	r7, #28
 80057b0:	46bd      	mov	sp, r7
 80057b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b6:	4770      	bx	lr
 80057b8:	40010000 	.word	0x40010000
 80057bc:	40010400 	.word	0x40010400

080057c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	f023 0210 	bic.w	r2, r3, #16
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80057ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	021b      	lsls	r3, r3, #8
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4313      	orrs	r3, r2
 8005802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f023 0320 	bic.w	r3, r3, #32
 800580a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	4313      	orrs	r3, r2
 8005816:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	4a22      	ldr	r2, [pc, #136]	; (80058a4 <TIM_OC2_SetConfig+0xe4>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d003      	beq.n	8005828 <TIM_OC2_SetConfig+0x68>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a21      	ldr	r2, [pc, #132]	; (80058a8 <TIM_OC2_SetConfig+0xe8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d10d      	bne.n	8005844 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800582e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	011b      	lsls	r3, r3, #4
 8005836:	697a      	ldr	r2, [r7, #20]
 8005838:	4313      	orrs	r3, r2
 800583a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005842:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a17      	ldr	r2, [pc, #92]	; (80058a4 <TIM_OC2_SetConfig+0xe4>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d003      	beq.n	8005854 <TIM_OC2_SetConfig+0x94>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a16      	ldr	r2, [pc, #88]	; (80058a8 <TIM_OC2_SetConfig+0xe8>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d113      	bne.n	800587c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800585a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005862:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	009b      	lsls	r3, r3, #2
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	621a      	str	r2, [r3, #32]
}
 8005896:	bf00      	nop
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40010000 	.word	0x40010000
 80058a8:	40010400 	.word	0x40010400

080058ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	f023 0303 	bic.w	r3, r3, #3
 80058e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	68fa      	ldr	r2, [r7, #12]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80058f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	4313      	orrs	r3, r2
 8005900:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a21      	ldr	r2, [pc, #132]	; (800598c <TIM_OC3_SetConfig+0xe0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d003      	beq.n	8005912 <TIM_OC3_SetConfig+0x66>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a20      	ldr	r2, [pc, #128]	; (8005990 <TIM_OC3_SetConfig+0xe4>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d10d      	bne.n	800592e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005918:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	021b      	lsls	r3, r3, #8
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800592c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a16      	ldr	r2, [pc, #88]	; (800598c <TIM_OC3_SetConfig+0xe0>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d003      	beq.n	800593e <TIM_OC3_SetConfig+0x92>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a15      	ldr	r2, [pc, #84]	; (8005990 <TIM_OC3_SetConfig+0xe4>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d113      	bne.n	8005966 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800593e:	693b      	ldr	r3, [r7, #16]
 8005940:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005944:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800594c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	011b      	lsls	r3, r3, #4
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	011b      	lsls	r3, r3, #4
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	685a      	ldr	r2, [r3, #4]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	697a      	ldr	r2, [r7, #20]
 800597e:	621a      	str	r2, [r3, #32]
}
 8005980:	bf00      	nop
 8005982:	371c      	adds	r7, #28
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	40010000 	.word	0x40010000
 8005990:	40010400 	.word	0x40010400

08005994 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005994:	b480      	push	{r7}
 8005996:	b087      	sub	sp, #28
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	69db      	ldr	r3, [r3, #28]
 80059ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	021b      	lsls	r3, r3, #8
 80059d2:	68fa      	ldr	r2, [r7, #12]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80059de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	031b      	lsls	r3, r3, #12
 80059e6:	693a      	ldr	r2, [r7, #16]
 80059e8:	4313      	orrs	r3, r2
 80059ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a12      	ldr	r2, [pc, #72]	; (8005a38 <TIM_OC4_SetConfig+0xa4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d003      	beq.n	80059fc <TIM_OC4_SetConfig+0x68>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a11      	ldr	r2, [pc, #68]	; (8005a3c <TIM_OC4_SetConfig+0xa8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d109      	bne.n	8005a10 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	019b      	lsls	r3, r3, #6
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	685a      	ldr	r2, [r3, #4]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	693a      	ldr	r2, [r7, #16]
 8005a28:	621a      	str	r2, [r3, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	371c      	adds	r7, #28
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40010400 	.word	0x40010400

08005a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f023 0201 	bic.w	r2, r3, #1
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f023 030a 	bic.w	r3, r3, #10
 8005a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	621a      	str	r2, [r3, #32]
}
 8005a92:	bf00      	nop
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b087      	sub	sp, #28
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f023 0210 	bic.w	r2, r3, #16
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ac8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	031b      	lsls	r3, r3, #12
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ada:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	621a      	str	r2, [r3, #32]
}
 8005af2:	bf00      	nop
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b14:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b16:	683a      	ldr	r2, [r7, #0]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f043 0307 	orr.w	r3, r3, #7
 8005b20:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	609a      	str	r2, [r3, #8]
}
 8005b28:	bf00      	nop
 8005b2a:	3714      	adds	r7, #20
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b087      	sub	sp, #28
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b4e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	021a      	lsls	r2, r3, #8
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	431a      	orrs	r2, r3
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	697a      	ldr	r2, [r7, #20]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	609a      	str	r2, [r3, #8]
}
 8005b68:	bf00      	nop
 8005b6a:	371c      	adds	r7, #28
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b72:	4770      	bx	lr

08005b74 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b74:	b480      	push	{r7}
 8005b76:	b087      	sub	sp, #28
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	60f8      	str	r0, [r7, #12]
 8005b7c:	60b9      	str	r1, [r7, #8]
 8005b7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f003 031f 	and.w	r3, r3, #31
 8005b86:	2201      	movs	r2, #1
 8005b88:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	6a1a      	ldr	r2, [r3, #32]
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	43db      	mvns	r3, r3
 8005b96:	401a      	ands	r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a1a      	ldr	r2, [r3, #32]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	f003 031f 	and.w	r3, r3, #31
 8005ba6:	6879      	ldr	r1, [r7, #4]
 8005ba8:	fa01 f303 	lsl.w	r3, r1, r3
 8005bac:	431a      	orrs	r2, r3
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	621a      	str	r2, [r3, #32]
}
 8005bb2:	bf00      	nop
 8005bb4:	371c      	adds	r7, #28
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbc:	4770      	bx	lr
	...

08005bc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d101      	bne.n	8005bd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bd4:	2302      	movs	r3, #2
 8005bd6:	e05a      	b.n	8005c8e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2201      	movs	r2, #1
 8005bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2202      	movs	r2, #2
 8005be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	689b      	ldr	r3, [r3, #8]
 8005bf6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bfe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68fa      	ldr	r2, [r7, #12]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a21      	ldr	r2, [pc, #132]	; (8005c9c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d022      	beq.n	8005c62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c24:	d01d      	beq.n	8005c62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a1d      	ldr	r2, [pc, #116]	; (8005ca0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d018      	beq.n	8005c62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a1b      	ldr	r2, [pc, #108]	; (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d013      	beq.n	8005c62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1a      	ldr	r2, [pc, #104]	; (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d00e      	beq.n	8005c62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a18      	ldr	r2, [pc, #96]	; (8005cac <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d009      	beq.n	8005c62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a17      	ldr	r2, [pc, #92]	; (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d004      	beq.n	8005c62 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a15      	ldr	r2, [pc, #84]	; (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d10c      	bne.n	8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c68:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685b      	ldr	r3, [r3, #4]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
 8005c9a:	bf00      	nop
 8005c9c:	40010000 	.word	0x40010000
 8005ca0:	40000400 	.word	0x40000400
 8005ca4:	40000800 	.word	0x40000800
 8005ca8:	40000c00 	.word	0x40000c00
 8005cac:	40010400 	.word	0x40010400
 8005cb0:	40014000 	.word	0x40014000
 8005cb4:	40001800 	.word	0x40001800

08005cb8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
 8005cc0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	d101      	bne.n	8005cd4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e03d      	b.n	8005d50 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	4313      	orrs	r3, r2
 8005ce8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	689b      	ldr	r3, [r3, #8]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685b      	ldr	r3, [r3, #4]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d1a:	683b      	ldr	r3, [r7, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	4313      	orrs	r3, r2
 8005d20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	695b      	ldr	r3, [r3, #20]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	69db      	ldr	r3, [r3, #28]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	68fa      	ldr	r2, [r7, #12]
 8005d44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d4e:	2300      	movs	r3, #0
}
 8005d50:	4618      	mov	r0, r3
 8005d52:	3714      	adds	r7, #20
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b082      	sub	sp, #8
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d101      	bne.n	8005d96 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d92:	2301      	movs	r3, #1
 8005d94:	e03f      	b.n	8005e16 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d106      	bne.n	8005db0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2200      	movs	r2, #0
 8005da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f7fb fcc2 	bl	8001734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2224      	movs	r2, #36	; 0x24
 8005db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68da      	ldr	r2, [r3, #12]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dc6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f000 fb6f 	bl	80064ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	691a      	ldr	r2, [r3, #16]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ddc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695a      	ldr	r2, [r3, #20]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005dec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68da      	ldr	r2, [r3, #12]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005dfc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2220      	movs	r2, #32
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3708      	adds	r7, #8
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b085      	sub	sp, #20
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	60f8      	str	r0, [r7, #12]
 8005e26:	60b9      	str	r1, [r7, #8]
 8005e28:	4613      	mov	r3, r2
 8005e2a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b20      	cmp	r3, #32
 8005e36:	d130      	bne.n	8005e9a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d002      	beq.n	8005e44 <HAL_UART_Transmit_IT+0x26>
 8005e3e:	88fb      	ldrh	r3, [r7, #6]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d101      	bne.n	8005e48 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005e44:	2301      	movs	r3, #1
 8005e46:	e029      	b.n	8005e9c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d101      	bne.n	8005e56 <HAL_UART_Transmit_IT+0x38>
 8005e52:	2302      	movs	r3, #2
 8005e54:	e022      	b.n	8005e9c <HAL_UART_Transmit_IT+0x7e>
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2201      	movs	r2, #1
 8005e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	88fa      	ldrh	r2, [r7, #6]
 8005e68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	88fa      	ldrh	r2, [r7, #6]
 8005e6e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2221      	movs	r2, #33	; 0x21
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	68da      	ldr	r2, [r3, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e94:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005e96:	2300      	movs	r3, #0
 8005e98:	e000      	b.n	8005e9c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005e9a:	2302      	movs	r3, #2
  }
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3714      	adds	r7, #20
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea6:	4770      	bx	lr

08005ea8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b08a      	sub	sp, #40	; 0x28
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005ec8:	2300      	movs	r3, #0
 8005eca:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed2:	f003 030f 	and.w	r3, r3, #15
 8005ed6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005ed8:	69bb      	ldr	r3, [r7, #24]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d10d      	bne.n	8005efa <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee0:	f003 0320 	and.w	r3, r3, #32
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d008      	beq.n	8005efa <HAL_UART_IRQHandler+0x52>
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	f003 0320 	and.w	r3, r3, #32
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fa43 	bl	800637e <UART_Receive_IT>
      return;
 8005ef8:	e17c      	b.n	80061f4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f000 80b1 	beq.w	8006064 <HAL_UART_IRQHandler+0x1bc>
 8005f02:	69fb      	ldr	r3, [r7, #28]
 8005f04:	f003 0301 	and.w	r3, r3, #1
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d105      	bne.n	8005f18 <HAL_UART_IRQHandler+0x70>
 8005f0c:	6a3b      	ldr	r3, [r7, #32]
 8005f0e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 80a6 	beq.w	8006064 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1a:	f003 0301 	and.w	r3, r3, #1
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d00a      	beq.n	8005f38 <HAL_UART_IRQHandler+0x90>
 8005f22:	6a3b      	ldr	r3, [r7, #32]
 8005f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d005      	beq.n	8005f38 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f30:	f043 0201 	orr.w	r2, r3, #1
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3a:	f003 0304 	and.w	r3, r3, #4
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <HAL_UART_IRQHandler+0xb0>
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	f003 0301 	and.w	r3, r3, #1
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d005      	beq.n	8005f58 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f50:	f043 0202 	orr.w	r2, r3, #2
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5a:	f003 0302 	and.w	r3, r3, #2
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00a      	beq.n	8005f78 <HAL_UART_IRQHandler+0xd0>
 8005f62:	69fb      	ldr	r3, [r7, #28]
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d005      	beq.n	8005f78 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f70:	f043 0204 	orr.w	r2, r3, #4
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	f003 0308 	and.w	r3, r3, #8
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00f      	beq.n	8005fa2 <HAL_UART_IRQHandler+0xfa>
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	f003 0320 	and.w	r3, r3, #32
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d104      	bne.n	8005f96 <HAL_UART_IRQHandler+0xee>
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d005      	beq.n	8005fa2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	f043 0208 	orr.w	r2, r3, #8
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 811f 	beq.w	80061ea <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fae:	f003 0320 	and.w	r3, r3, #32
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d007      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x11e>
 8005fb6:	6a3b      	ldr	r3, [r7, #32]
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d002      	beq.n	8005fc6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 f9dc 	bl	800637e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	695b      	ldr	r3, [r3, #20]
 8005fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd0:	2b40      	cmp	r3, #64	; 0x40
 8005fd2:	bf0c      	ite	eq
 8005fd4:	2301      	moveq	r3, #1
 8005fd6:	2300      	movne	r3, #0
 8005fd8:	b2db      	uxtb	r3, r3
 8005fda:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe0:	f003 0308 	and.w	r3, r3, #8
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d102      	bne.n	8005fee <HAL_UART_IRQHandler+0x146>
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d031      	beq.n	8006052 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f000 f91c 	bl	800622c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ffe:	2b40      	cmp	r3, #64	; 0x40
 8006000:	d123      	bne.n	800604a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	695a      	ldr	r2, [r3, #20]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006010:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	2b00      	cmp	r3, #0
 8006018:	d013      	beq.n	8006042 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	4a77      	ldr	r2, [pc, #476]	; (80061fc <HAL_UART_IRQHandler+0x354>)
 8006020:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006026:	4618      	mov	r0, r3
 8006028:	f7fb fec4 	bl	8001db4 <HAL_DMA_Abort_IT>
 800602c:	4603      	mov	r3, r0
 800602e:	2b00      	cmp	r3, #0
 8006030:	d016      	beq.n	8006060 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006036:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800603c:	4610      	mov	r0, r2
 800603e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006040:	e00e      	b.n	8006060 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f000 f8dc 	bl	8006200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006048:	e00a      	b.n	8006060 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 f8d8 	bl	8006200 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006050:	e006      	b.n	8006060 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f8d4 	bl	8006200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800605e:	e0c4      	b.n	80061ea <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006060:	bf00      	nop
    return;
 8006062:	e0c2      	b.n	80061ea <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006068:	2b01      	cmp	r3, #1
 800606a:	f040 80a2 	bne.w	80061b2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800606e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006070:	f003 0310 	and.w	r3, r3, #16
 8006074:	2b00      	cmp	r3, #0
 8006076:	f000 809c 	beq.w	80061b2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800607a:	6a3b      	ldr	r3, [r7, #32]
 800607c:	f003 0310 	and.w	r3, r3, #16
 8006080:	2b00      	cmp	r3, #0
 8006082:	f000 8096 	beq.w	80061b2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006086:	2300      	movs	r3, #0
 8006088:	60fb      	str	r3, [r7, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	60fb      	str	r3, [r7, #12]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685b      	ldr	r3, [r3, #4]
 8006098:	60fb      	str	r3, [r7, #12]
 800609a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	695b      	ldr	r3, [r3, #20]
 80060a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a6:	2b40      	cmp	r3, #64	; 0x40
 80060a8:	d14f      	bne.n	800614a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	685b      	ldr	r3, [r3, #4]
 80060b2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80060b4:	8a3b      	ldrh	r3, [r7, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 8099 	beq.w	80061ee <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80060c0:	8a3a      	ldrh	r2, [r7, #16]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	f080 8093 	bcs.w	80061ee <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	8a3a      	ldrh	r2, [r7, #16]
 80060cc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d2:	69db      	ldr	r3, [r3, #28]
 80060d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060d8:	d02b      	beq.n	8006132 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	68da      	ldr	r2, [r3, #12]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80060e8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	695a      	ldr	r2, [r3, #20]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0201 	bic.w	r2, r2, #1
 80060f8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	695a      	ldr	r2, [r3, #20]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006108:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2220      	movs	r2, #32
 800610e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f022 0210 	bic.w	r2, r2, #16
 8006126:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800612c:	4618      	mov	r0, r3
 800612e:	f7fb fdd1 	bl	8001cd4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800613a:	b29b      	uxth	r3, r3
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	b29b      	uxth	r3, r3
 8006140:	4619      	mov	r1, r3
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f866 	bl	8006214 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006148:	e051      	b.n	80061ee <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006152:	b29b      	uxth	r3, r3
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800615c:	b29b      	uxth	r3, r3
 800615e:	2b00      	cmp	r3, #0
 8006160:	d047      	beq.n	80061f2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006162:	8a7b      	ldrh	r3, [r7, #18]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d044      	beq.n	80061f2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68da      	ldr	r2, [r3, #12]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006176:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	695a      	ldr	r2, [r3, #20]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f022 0201 	bic.w	r2, r2, #1
 8006186:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2200      	movs	r2, #0
 8006194:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68da      	ldr	r2, [r3, #12]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f022 0210 	bic.w	r2, r2, #16
 80061a4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80061a6:	8a7b      	ldrh	r3, [r7, #18]
 80061a8:	4619      	mov	r1, r3
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 f832 	bl	8006214 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80061b0:	e01f      	b.n	80061f2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d008      	beq.n	80061ce <HAL_UART_IRQHandler+0x326>
 80061bc:	6a3b      	ldr	r3, [r7, #32]
 80061be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d003      	beq.n	80061ce <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f871 	bl	80062ae <UART_Transmit_IT>
    return;
 80061cc:	e012      	b.n	80061f4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d00d      	beq.n	80061f4 <HAL_UART_IRQHandler+0x34c>
 80061d8:	6a3b      	ldr	r3, [r7, #32]
 80061da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d008      	beq.n	80061f4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f000 f8b3 	bl	800634e <UART_EndTransmit_IT>
    return;
 80061e8:	e004      	b.n	80061f4 <HAL_UART_IRQHandler+0x34c>
    return;
 80061ea:	bf00      	nop
 80061ec:	e002      	b.n	80061f4 <HAL_UART_IRQHandler+0x34c>
      return;
 80061ee:	bf00      	nop
 80061f0:	e000      	b.n	80061f4 <HAL_UART_IRQHandler+0x34c>
      return;
 80061f2:	bf00      	nop
  }
}
 80061f4:	3728      	adds	r7, #40	; 0x28
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	08006287 	.word	0x08006287

08006200 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	460b      	mov	r3, r1
 800621e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006242:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695a      	ldr	r2, [r3, #20]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0201 	bic.w	r2, r2, #1
 8006252:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006258:	2b01      	cmp	r3, #1
 800625a:	d107      	bne.n	800626c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68da      	ldr	r2, [r3, #12]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0210 	bic.w	r2, r2, #16
 800626a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2220      	movs	r2, #32
 8006270:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	631a      	str	r2, [r3, #48]	; 0x30
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr

08006286 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006286:	b580      	push	{r7, lr}
 8006288:	b084      	sub	sp, #16
 800628a:	af00      	add	r7, sp, #0
 800628c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006292:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	2200      	movs	r2, #0
 800629e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f7ff ffad 	bl	8006200 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062a6:	bf00      	nop
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b085      	sub	sp, #20
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b21      	cmp	r3, #33	; 0x21
 80062c0:	d13e      	bne.n	8006340 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062ca:	d114      	bne.n	80062f6 <UART_Transmit_IT+0x48>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	691b      	ldr	r3, [r3, #16]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d110      	bne.n	80062f6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	881b      	ldrh	r3, [r3, #0]
 80062de:	461a      	mov	r2, r3
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80062e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	1c9a      	adds	r2, r3, #2
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	621a      	str	r2, [r3, #32]
 80062f4:	e008      	b.n	8006308 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	1c59      	adds	r1, r3, #1
 80062fc:	687a      	ldr	r2, [r7, #4]
 80062fe:	6211      	str	r1, [r2, #32]
 8006300:	781a      	ldrb	r2, [r3, #0]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800630c:	b29b      	uxth	r3, r3
 800630e:	3b01      	subs	r3, #1
 8006310:	b29b      	uxth	r3, r3
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	4619      	mov	r1, r3
 8006316:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006318:	2b00      	cmp	r3, #0
 800631a:	d10f      	bne.n	800633c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68da      	ldr	r2, [r3, #12]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800632a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800633a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800633c:	2300      	movs	r3, #0
 800633e:	e000      	b.n	8006342 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006340:	2302      	movs	r3, #2
  }
}
 8006342:	4618      	mov	r0, r3
 8006344:	3714      	adds	r7, #20
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b082      	sub	sp, #8
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68da      	ldr	r2, [r3, #12]
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006364:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2220      	movs	r2, #32
 800636a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fa fc7e 	bl	8000c70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3708      	adds	r7, #8
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800637e:	b580      	push	{r7, lr}
 8006380:	b084      	sub	sp, #16
 8006382:	af00      	add	r7, sp, #0
 8006384:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800638c:	b2db      	uxtb	r3, r3
 800638e:	2b22      	cmp	r3, #34	; 0x22
 8006390:	f040 8087 	bne.w	80064a2 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800639c:	d117      	bne.n	80063ce <UART_Receive_IT+0x50>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d113      	bne.n	80063ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063a6:	2300      	movs	r3, #0
 80063a8:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ae:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	b29b      	uxth	r3, r3
 80063b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063bc:	b29a      	uxth	r2, r3
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c6:	1c9a      	adds	r2, r3, #2
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	629a      	str	r2, [r3, #40]	; 0x28
 80063cc:	e026      	b.n	800641c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80063d4:	2300      	movs	r3, #0
 80063d6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063e0:	d007      	beq.n	80063f2 <UART_Receive_IT+0x74>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10a      	bne.n	8006400 <UART_Receive_IT+0x82>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d106      	bne.n	8006400 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	b2da      	uxtb	r2, r3
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	701a      	strb	r2, [r3, #0]
 80063fe:	e008      	b.n	8006412 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800640c:	b2da      	uxtb	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006416:	1c5a      	adds	r2, r3, #1
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006420:	b29b      	uxth	r3, r3
 8006422:	3b01      	subs	r3, #1
 8006424:	b29b      	uxth	r3, r3
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	4619      	mov	r1, r3
 800642a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800642c:	2b00      	cmp	r3, #0
 800642e:	d136      	bne.n	800649e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	68da      	ldr	r2, [r3, #12]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f022 0220 	bic.w	r2, r2, #32
 800643e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68da      	ldr	r2, [r3, #12]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800644e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	695a      	ldr	r2, [r3, #20]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f022 0201 	bic.w	r2, r2, #1
 800645e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2220      	movs	r2, #32
 8006464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646c:	2b01      	cmp	r3, #1
 800646e:	d10e      	bne.n	800648e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	68da      	ldr	r2, [r3, #12]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f022 0210 	bic.w	r2, r2, #16
 800647e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006484:	4619      	mov	r1, r3
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f7ff fec4 	bl	8006214 <HAL_UARTEx_RxEventCallback>
 800648c:	e002      	b.n	8006494 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7fa fbd0 	bl	8000c34 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2200      	movs	r2, #0
 8006498:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800649a:	2300      	movs	r3, #0
 800649c:	e002      	b.n	80064a4 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800649e:	2300      	movs	r3, #0
 80064a0:	e000      	b.n	80064a4 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80064a2:	2302      	movs	r3, #2
  }
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064b0:	b09f      	sub	sp, #124	; 0x7c
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80064b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80064c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c2:	68d9      	ldr	r1, [r3, #12]
 80064c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064c6:	681a      	ldr	r2, [r3, #0]
 80064c8:	ea40 0301 	orr.w	r3, r0, r1
 80064cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80064ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064d4:	691b      	ldr	r3, [r3, #16]
 80064d6:	431a      	orrs	r2, r3
 80064d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064da:	695b      	ldr	r3, [r3, #20]
 80064dc:	431a      	orrs	r2, r3
 80064de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80064e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80064f0:	f021 010c 	bic.w	r1, r1, #12
 80064f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80064fa:	430b      	orrs	r3, r1
 80064fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80064fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006508:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650a:	6999      	ldr	r1, [r3, #24]
 800650c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	ea40 0301 	orr.w	r3, r0, r1
 8006514:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006518:	681a      	ldr	r2, [r3, #0]
 800651a:	4bc5      	ldr	r3, [pc, #788]	; (8006830 <UART_SetConfig+0x384>)
 800651c:	429a      	cmp	r2, r3
 800651e:	d004      	beq.n	800652a <UART_SetConfig+0x7e>
 8006520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006522:	681a      	ldr	r2, [r3, #0]
 8006524:	4bc3      	ldr	r3, [pc, #780]	; (8006834 <UART_SetConfig+0x388>)
 8006526:	429a      	cmp	r2, r3
 8006528:	d103      	bne.n	8006532 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800652a:	f7fc f9d7 	bl	80028dc <HAL_RCC_GetPCLK2Freq>
 800652e:	6778      	str	r0, [r7, #116]	; 0x74
 8006530:	e002      	b.n	8006538 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006532:	f7fc f9bf 	bl	80028b4 <HAL_RCC_GetPCLK1Freq>
 8006536:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006538:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800653a:	69db      	ldr	r3, [r3, #28]
 800653c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006540:	f040 80b6 	bne.w	80066b0 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006544:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006546:	461c      	mov	r4, r3
 8006548:	f04f 0500 	mov.w	r5, #0
 800654c:	4622      	mov	r2, r4
 800654e:	462b      	mov	r3, r5
 8006550:	1891      	adds	r1, r2, r2
 8006552:	6439      	str	r1, [r7, #64]	; 0x40
 8006554:	415b      	adcs	r3, r3
 8006556:	647b      	str	r3, [r7, #68]	; 0x44
 8006558:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800655c:	1912      	adds	r2, r2, r4
 800655e:	eb45 0303 	adc.w	r3, r5, r3
 8006562:	f04f 0000 	mov.w	r0, #0
 8006566:	f04f 0100 	mov.w	r1, #0
 800656a:	00d9      	lsls	r1, r3, #3
 800656c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006570:	00d0      	lsls	r0, r2, #3
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	1911      	adds	r1, r2, r4
 8006578:	6639      	str	r1, [r7, #96]	; 0x60
 800657a:	416b      	adcs	r3, r5
 800657c:	667b      	str	r3, [r7, #100]	; 0x64
 800657e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	461a      	mov	r2, r3
 8006584:	f04f 0300 	mov.w	r3, #0
 8006588:	1891      	adds	r1, r2, r2
 800658a:	63b9      	str	r1, [r7, #56]	; 0x38
 800658c:	415b      	adcs	r3, r3
 800658e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006590:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006594:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006598:	f7f9 fe34 	bl	8000204 <__aeabi_uldivmod>
 800659c:	4602      	mov	r2, r0
 800659e:	460b      	mov	r3, r1
 80065a0:	4ba5      	ldr	r3, [pc, #660]	; (8006838 <UART_SetConfig+0x38c>)
 80065a2:	fba3 2302 	umull	r2, r3, r3, r2
 80065a6:	095b      	lsrs	r3, r3, #5
 80065a8:	011e      	lsls	r6, r3, #4
 80065aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065ac:	461c      	mov	r4, r3
 80065ae:	f04f 0500 	mov.w	r5, #0
 80065b2:	4622      	mov	r2, r4
 80065b4:	462b      	mov	r3, r5
 80065b6:	1891      	adds	r1, r2, r2
 80065b8:	6339      	str	r1, [r7, #48]	; 0x30
 80065ba:	415b      	adcs	r3, r3
 80065bc:	637b      	str	r3, [r7, #52]	; 0x34
 80065be:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80065c2:	1912      	adds	r2, r2, r4
 80065c4:	eb45 0303 	adc.w	r3, r5, r3
 80065c8:	f04f 0000 	mov.w	r0, #0
 80065cc:	f04f 0100 	mov.w	r1, #0
 80065d0:	00d9      	lsls	r1, r3, #3
 80065d2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065d6:	00d0      	lsls	r0, r2, #3
 80065d8:	4602      	mov	r2, r0
 80065da:	460b      	mov	r3, r1
 80065dc:	1911      	adds	r1, r2, r4
 80065de:	65b9      	str	r1, [r7, #88]	; 0x58
 80065e0:	416b      	adcs	r3, r5
 80065e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	461a      	mov	r2, r3
 80065ea:	f04f 0300 	mov.w	r3, #0
 80065ee:	1891      	adds	r1, r2, r2
 80065f0:	62b9      	str	r1, [r7, #40]	; 0x28
 80065f2:	415b      	adcs	r3, r3
 80065f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80065fa:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80065fe:	f7f9 fe01 	bl	8000204 <__aeabi_uldivmod>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4b8c      	ldr	r3, [pc, #560]	; (8006838 <UART_SetConfig+0x38c>)
 8006608:	fba3 1302 	umull	r1, r3, r3, r2
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	2164      	movs	r1, #100	; 0x64
 8006610:	fb01 f303 	mul.w	r3, r1, r3
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	3332      	adds	r3, #50	; 0x32
 800661a:	4a87      	ldr	r2, [pc, #540]	; (8006838 <UART_SetConfig+0x38c>)
 800661c:	fba2 2303 	umull	r2, r3, r2, r3
 8006620:	095b      	lsrs	r3, r3, #5
 8006622:	005b      	lsls	r3, r3, #1
 8006624:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006628:	441e      	add	r6, r3
 800662a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800662c:	4618      	mov	r0, r3
 800662e:	f04f 0100 	mov.w	r1, #0
 8006632:	4602      	mov	r2, r0
 8006634:	460b      	mov	r3, r1
 8006636:	1894      	adds	r4, r2, r2
 8006638:	623c      	str	r4, [r7, #32]
 800663a:	415b      	adcs	r3, r3
 800663c:	627b      	str	r3, [r7, #36]	; 0x24
 800663e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006642:	1812      	adds	r2, r2, r0
 8006644:	eb41 0303 	adc.w	r3, r1, r3
 8006648:	f04f 0400 	mov.w	r4, #0
 800664c:	f04f 0500 	mov.w	r5, #0
 8006650:	00dd      	lsls	r5, r3, #3
 8006652:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006656:	00d4      	lsls	r4, r2, #3
 8006658:	4622      	mov	r2, r4
 800665a:	462b      	mov	r3, r5
 800665c:	1814      	adds	r4, r2, r0
 800665e:	653c      	str	r4, [r7, #80]	; 0x50
 8006660:	414b      	adcs	r3, r1
 8006662:	657b      	str	r3, [r7, #84]	; 0x54
 8006664:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	461a      	mov	r2, r3
 800666a:	f04f 0300 	mov.w	r3, #0
 800666e:	1891      	adds	r1, r2, r2
 8006670:	61b9      	str	r1, [r7, #24]
 8006672:	415b      	adcs	r3, r3
 8006674:	61fb      	str	r3, [r7, #28]
 8006676:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800667a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800667e:	f7f9 fdc1 	bl	8000204 <__aeabi_uldivmod>
 8006682:	4602      	mov	r2, r0
 8006684:	460b      	mov	r3, r1
 8006686:	4b6c      	ldr	r3, [pc, #432]	; (8006838 <UART_SetConfig+0x38c>)
 8006688:	fba3 1302 	umull	r1, r3, r3, r2
 800668c:	095b      	lsrs	r3, r3, #5
 800668e:	2164      	movs	r1, #100	; 0x64
 8006690:	fb01 f303 	mul.w	r3, r1, r3
 8006694:	1ad3      	subs	r3, r2, r3
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	3332      	adds	r3, #50	; 0x32
 800669a:	4a67      	ldr	r2, [pc, #412]	; (8006838 <UART_SetConfig+0x38c>)
 800669c:	fba2 2303 	umull	r2, r3, r2, r3
 80066a0:	095b      	lsrs	r3, r3, #5
 80066a2:	f003 0207 	and.w	r2, r3, #7
 80066a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	4432      	add	r2, r6
 80066ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80066ae:	e0b9      	b.n	8006824 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80066b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066b2:	461c      	mov	r4, r3
 80066b4:	f04f 0500 	mov.w	r5, #0
 80066b8:	4622      	mov	r2, r4
 80066ba:	462b      	mov	r3, r5
 80066bc:	1891      	adds	r1, r2, r2
 80066be:	6139      	str	r1, [r7, #16]
 80066c0:	415b      	adcs	r3, r3
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80066c8:	1912      	adds	r2, r2, r4
 80066ca:	eb45 0303 	adc.w	r3, r5, r3
 80066ce:	f04f 0000 	mov.w	r0, #0
 80066d2:	f04f 0100 	mov.w	r1, #0
 80066d6:	00d9      	lsls	r1, r3, #3
 80066d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80066dc:	00d0      	lsls	r0, r2, #3
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	eb12 0804 	adds.w	r8, r2, r4
 80066e6:	eb43 0905 	adc.w	r9, r3, r5
 80066ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	4618      	mov	r0, r3
 80066f0:	f04f 0100 	mov.w	r1, #0
 80066f4:	f04f 0200 	mov.w	r2, #0
 80066f8:	f04f 0300 	mov.w	r3, #0
 80066fc:	008b      	lsls	r3, r1, #2
 80066fe:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006702:	0082      	lsls	r2, r0, #2
 8006704:	4640      	mov	r0, r8
 8006706:	4649      	mov	r1, r9
 8006708:	f7f9 fd7c 	bl	8000204 <__aeabi_uldivmod>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4b49      	ldr	r3, [pc, #292]	; (8006838 <UART_SetConfig+0x38c>)
 8006712:	fba3 2302 	umull	r2, r3, r3, r2
 8006716:	095b      	lsrs	r3, r3, #5
 8006718:	011e      	lsls	r6, r3, #4
 800671a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800671c:	4618      	mov	r0, r3
 800671e:	f04f 0100 	mov.w	r1, #0
 8006722:	4602      	mov	r2, r0
 8006724:	460b      	mov	r3, r1
 8006726:	1894      	adds	r4, r2, r2
 8006728:	60bc      	str	r4, [r7, #8]
 800672a:	415b      	adcs	r3, r3
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006732:	1812      	adds	r2, r2, r0
 8006734:	eb41 0303 	adc.w	r3, r1, r3
 8006738:	f04f 0400 	mov.w	r4, #0
 800673c:	f04f 0500 	mov.w	r5, #0
 8006740:	00dd      	lsls	r5, r3, #3
 8006742:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006746:	00d4      	lsls	r4, r2, #3
 8006748:	4622      	mov	r2, r4
 800674a:	462b      	mov	r3, r5
 800674c:	1814      	adds	r4, r2, r0
 800674e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006750:	414b      	adcs	r3, r1
 8006752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006756:	685b      	ldr	r3, [r3, #4]
 8006758:	4618      	mov	r0, r3
 800675a:	f04f 0100 	mov.w	r1, #0
 800675e:	f04f 0200 	mov.w	r2, #0
 8006762:	f04f 0300 	mov.w	r3, #0
 8006766:	008b      	lsls	r3, r1, #2
 8006768:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800676c:	0082      	lsls	r2, r0, #2
 800676e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006772:	f7f9 fd47 	bl	8000204 <__aeabi_uldivmod>
 8006776:	4602      	mov	r2, r0
 8006778:	460b      	mov	r3, r1
 800677a:	4b2f      	ldr	r3, [pc, #188]	; (8006838 <UART_SetConfig+0x38c>)
 800677c:	fba3 1302 	umull	r1, r3, r3, r2
 8006780:	095b      	lsrs	r3, r3, #5
 8006782:	2164      	movs	r1, #100	; 0x64
 8006784:	fb01 f303 	mul.w	r3, r1, r3
 8006788:	1ad3      	subs	r3, r2, r3
 800678a:	011b      	lsls	r3, r3, #4
 800678c:	3332      	adds	r3, #50	; 0x32
 800678e:	4a2a      	ldr	r2, [pc, #168]	; (8006838 <UART_SetConfig+0x38c>)
 8006790:	fba2 2303 	umull	r2, r3, r2, r3
 8006794:	095b      	lsrs	r3, r3, #5
 8006796:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800679a:	441e      	add	r6, r3
 800679c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800679e:	4618      	mov	r0, r3
 80067a0:	f04f 0100 	mov.w	r1, #0
 80067a4:	4602      	mov	r2, r0
 80067a6:	460b      	mov	r3, r1
 80067a8:	1894      	adds	r4, r2, r2
 80067aa:	603c      	str	r4, [r7, #0]
 80067ac:	415b      	adcs	r3, r3
 80067ae:	607b      	str	r3, [r7, #4]
 80067b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80067b4:	1812      	adds	r2, r2, r0
 80067b6:	eb41 0303 	adc.w	r3, r1, r3
 80067ba:	f04f 0400 	mov.w	r4, #0
 80067be:	f04f 0500 	mov.w	r5, #0
 80067c2:	00dd      	lsls	r5, r3, #3
 80067c4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80067c8:	00d4      	lsls	r4, r2, #3
 80067ca:	4622      	mov	r2, r4
 80067cc:	462b      	mov	r3, r5
 80067ce:	eb12 0a00 	adds.w	sl, r2, r0
 80067d2:	eb43 0b01 	adc.w	fp, r3, r1
 80067d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	4618      	mov	r0, r3
 80067dc:	f04f 0100 	mov.w	r1, #0
 80067e0:	f04f 0200 	mov.w	r2, #0
 80067e4:	f04f 0300 	mov.w	r3, #0
 80067e8:	008b      	lsls	r3, r1, #2
 80067ea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80067ee:	0082      	lsls	r2, r0, #2
 80067f0:	4650      	mov	r0, sl
 80067f2:	4659      	mov	r1, fp
 80067f4:	f7f9 fd06 	bl	8000204 <__aeabi_uldivmod>
 80067f8:	4602      	mov	r2, r0
 80067fa:	460b      	mov	r3, r1
 80067fc:	4b0e      	ldr	r3, [pc, #56]	; (8006838 <UART_SetConfig+0x38c>)
 80067fe:	fba3 1302 	umull	r1, r3, r3, r2
 8006802:	095b      	lsrs	r3, r3, #5
 8006804:	2164      	movs	r1, #100	; 0x64
 8006806:	fb01 f303 	mul.w	r3, r1, r3
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	011b      	lsls	r3, r3, #4
 800680e:	3332      	adds	r3, #50	; 0x32
 8006810:	4a09      	ldr	r2, [pc, #36]	; (8006838 <UART_SetConfig+0x38c>)
 8006812:	fba2 2303 	umull	r2, r3, r2, r3
 8006816:	095b      	lsrs	r3, r3, #5
 8006818:	f003 020f 	and.w	r2, r3, #15
 800681c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	4432      	add	r2, r6
 8006822:	609a      	str	r2, [r3, #8]
}
 8006824:	bf00      	nop
 8006826:	377c      	adds	r7, #124	; 0x7c
 8006828:	46bd      	mov	sp, r7
 800682a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800682e:	bf00      	nop
 8006830:	40011000 	.word	0x40011000
 8006834:	40011400 	.word	0x40011400
 8006838:	51eb851f 	.word	0x51eb851f

0800683c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800683c:	b084      	sub	sp, #16
 800683e:	b480      	push	{r7}
 8006840:	b085      	sub	sp, #20
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
 8006846:	f107 001c 	add.w	r0, r7, #28
 800684a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800684e:	2300      	movs	r3, #0
 8006850:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006852:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006854:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006856:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800685a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800685e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006862:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006866:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006868:	68fa      	ldr	r2, [r7, #12]
 800686a:	4313      	orrs	r3, r2
 800686c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006876:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	431a      	orrs	r2, r3
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006882:	2300      	movs	r3, #0
}
 8006884:	4618      	mov	r0, r3
 8006886:	3714      	adds	r7, #20
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	b004      	add	sp, #16
 8006890:	4770      	bx	lr

08006892 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr

080068ac <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80068ac:	b480      	push	{r7}
 80068ae:	b083      	sub	sp, #12
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
 80068b4:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	370c      	adds	r7, #12
 80068c6:	46bd      	mov	sp, r7
 80068c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80068ce:	b580      	push	{r7, lr}
 80068d0:	b082      	sub	sp, #8
 80068d2:	af00      	add	r7, sp, #0
 80068d4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	2203      	movs	r2, #3
 80068da:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80068dc:	2002      	movs	r0, #2
 80068de:	f7fb f815 	bl	800190c <HAL_Delay>
  
  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3708      	adds	r7, #8
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0303 	and.w	r3, r3, #3
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	370c      	adds	r7, #12
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006908:	b480      	push	{r7}
 800690a:	b085      	sub	sp, #20
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006922:	683b      	ldr	r3, [r7, #0]
 8006924:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006926:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800692c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800692e:	683b      	ldr	r3, [r7, #0]
 8006930:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006932:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	4313      	orrs	r3, r2
 8006938:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006942:	f023 030f 	bic.w	r3, r3, #15
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	431a      	orrs	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	b2db      	uxtb	r3, r3
}
 800696a:	4618      	mov	r0, r3
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006976:	b480      	push	{r7}
 8006978:	b085      	sub	sp, #20
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	3314      	adds	r3, #20
 8006984:	461a      	mov	r2, r3
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	4413      	add	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
}  
 8006990:	4618      	mov	r0, r3
 8006992:	3714      	adds	r7, #20
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80069a6:	2300      	movs	r3, #0
 80069a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80069aa:	683b      	ldr	r3, [r7, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	685a      	ldr	r2, [r3, #4]
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80069c2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80069c8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80069ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	431a      	orrs	r2, r3
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0

}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3714      	adds	r7, #20
 80069ec:	46bd      	mov	sp, r7
 80069ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f2:	4770      	bx	lr

080069f4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b088      	sub	sp, #32
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006a02:	2310      	movs	r3, #16
 8006a04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a06:	2340      	movs	r3, #64	; 0x40
 8006a08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a12:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a14:	f107 0308 	add.w	r3, r7, #8
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f7ff ff74 	bl	8006908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006a20:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a24:	2110      	movs	r1, #16
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 fa02 	bl	8006e30 <SDMMC_GetCmdResp1>
 8006a2c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a2e:	69fb      	ldr	r3, [r7, #28]
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	3720      	adds	r7, #32
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b088      	sub	sp, #32
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
 8006a40:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006a46:	2311      	movs	r3, #17
 8006a48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a4a:	2340      	movs	r3, #64	; 0x40
 8006a4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a4e:	2300      	movs	r3, #0
 8006a50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a56:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a58:	f107 0308 	add.w	r3, r7, #8
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	6878      	ldr	r0, [r7, #4]
 8006a60:	f7ff ff52 	bl	8006908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006a64:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a68:	2111      	movs	r1, #17
 8006a6a:	6878      	ldr	r0, [r7, #4]
 8006a6c:	f000 f9e0 	bl	8006e30 <SDMMC_GetCmdResp1>
 8006a70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a72:	69fb      	ldr	r3, [r7, #28]
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3720      	adds	r7, #32
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b088      	sub	sp, #32
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
 8006a84:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006a8a:	2312      	movs	r3, #18
 8006a8c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a8e:	2340      	movs	r3, #64	; 0x40
 8006a90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a92:	2300      	movs	r3, #0
 8006a94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a9a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a9c:	f107 0308 	add.w	r3, r7, #8
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f7ff ff30 	bl	8006908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006aac:	2112      	movs	r1, #18
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 f9be 	bl	8006e30 <SDMMC_GetCmdResp1>
 8006ab4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ab6:	69fb      	ldr	r3, [r7, #28]
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3720      	adds	r7, #32
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}

08006ac0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006ac0:	b580      	push	{r7, lr}
 8006ac2:	b088      	sub	sp, #32
 8006ac4:	af00      	add	r7, sp, #0
 8006ac6:	6078      	str	r0, [r7, #4]
 8006ac8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006ace:	2318      	movs	r3, #24
 8006ad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ad2:	2340      	movs	r3, #64	; 0x40
 8006ad4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ada:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ade:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ae0:	f107 0308 	add.w	r3, r7, #8
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f7ff ff0e 	bl	8006908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006af0:	2118      	movs	r1, #24
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f99c 	bl	8006e30 <SDMMC_GetCmdResp1>
 8006af8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006afa:	69fb      	ldr	r3, [r7, #28]
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3720      	adds	r7, #32
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006b0e:	683b      	ldr	r3, [r7, #0]
 8006b10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006b12:	2319      	movs	r3, #25
 8006b14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b16:	2340      	movs	r3, #64	; 0x40
 8006b18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b22:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b24:	f107 0308 	add.w	r3, r7, #8
 8006b28:	4619      	mov	r1, r3
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f7ff feec 	bl	8006908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b34:	2119      	movs	r1, #25
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f000 f97a 	bl	8006e30 <SDMMC_GetCmdResp1>
 8006b3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b3e:	69fb      	ldr	r3, [r7, #28]
}
 8006b40:	4618      	mov	r0, r3
 8006b42:	3720      	adds	r7, #32
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b088      	sub	sp, #32
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006b50:	2300      	movs	r3, #0
 8006b52:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006b54:	230c      	movs	r3, #12
 8006b56:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b58:	2340      	movs	r3, #64	; 0x40
 8006b5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b64:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b66:	f107 0308 	add.w	r3, r7, #8
 8006b6a:	4619      	mov	r1, r3
 8006b6c:	6878      	ldr	r0, [r7, #4]
 8006b6e:	f7ff fecb 	bl	8006908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006b72:	4a05      	ldr	r2, [pc, #20]	; (8006b88 <SDMMC_CmdStopTransfer+0x40>)
 8006b74:	210c      	movs	r1, #12
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f000 f95a 	bl	8006e30 <SDMMC_GetCmdResp1>
 8006b7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b7e:	69fb      	ldr	r3, [r7, #28]
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	3720      	adds	r7, #32
 8006b84:	46bd      	mov	sp, r7
 8006b86:	bd80      	pop	{r7, pc}
 8006b88:	05f5e100 	.word	0x05f5e100

08006b8c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b08a      	sub	sp, #40	; 0x28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	60f8      	str	r0, [r7, #12]
 8006b94:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006b9c:	2307      	movs	r3, #7
 8006b9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ba0:	2340      	movs	r3, #64	; 0x40
 8006ba2:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bac:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bae:	f107 0310 	add.w	r3, r7, #16
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	68f8      	ldr	r0, [r7, #12]
 8006bb6:	f7ff fea7 	bl	8006908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006bba:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bbe:	2107      	movs	r1, #7
 8006bc0:	68f8      	ldr	r0, [r7, #12]
 8006bc2:	f000 f935 	bl	8006e30 <SDMMC_GetCmdResp1>
 8006bc6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3728      	adds	r7, #40	; 0x28
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b088      	sub	sp, #32
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006bde:	2300      	movs	r3, #0
 8006be0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006be2:	2300      	movs	r3, #0
 8006be4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006be6:	2300      	movs	r3, #0
 8006be8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006bea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bf0:	f107 0308 	add.w	r3, r7, #8
 8006bf4:	4619      	mov	r1, r3
 8006bf6:	6878      	ldr	r0, [r7, #4]
 8006bf8:	f7ff fe86 	bl	8006908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f000 f8eb 	bl	8006dd8 <SDMMC_GetCmdError>
 8006c02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c04:	69fb      	ldr	r3, [r7, #28]
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3720      	adds	r7, #32
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b088      	sub	sp, #32
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006c16:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006c1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006c1c:	2308      	movs	r3, #8
 8006c1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c20:	2340      	movs	r3, #64	; 0x40
 8006c22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c24:	2300      	movs	r3, #0
 8006c26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c2e:	f107 0308 	add.w	r3, r7, #8
 8006c32:	4619      	mov	r1, r3
 8006c34:	6878      	ldr	r0, [r7, #4]
 8006c36:	f7ff fe67 	bl	8006908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f000 fae2 	bl	8007204 <SDMMC_GetCmdResp7>
 8006c40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c42:	69fb      	ldr	r3, [r7, #28]
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	3720      	adds	r7, #32
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b088      	sub	sp, #32
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006c5a:	2337      	movs	r3, #55	; 0x37
 8006c5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c5e:	2340      	movs	r3, #64	; 0x40
 8006c60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c62:	2300      	movs	r3, #0
 8006c64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c6a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c6c:	f107 0308 	add.w	r3, r7, #8
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff fe48 	bl	8006908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c7c:	2137      	movs	r1, #55	; 0x37
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f8d6 	bl	8006e30 <SDMMC_GetCmdResp1>
 8006c84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c86:	69fb      	ldr	r3, [r7, #28]
}
 8006c88:	4618      	mov	r0, r3
 8006c8a:	3720      	adds	r7, #32
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b088      	sub	sp, #32
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ca0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006ca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006ca6:	2329      	movs	r3, #41	; 0x29
 8006ca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006caa:	2340      	movs	r3, #64	; 0x40
 8006cac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cb8:	f107 0308 	add.w	r3, r7, #8
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f7ff fe22 	bl	8006908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f9e9 	bl	800709c <SDMMC_GetCmdResp3>
 8006cca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ccc:	69fb      	ldr	r3, [r7, #28]
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3720      	adds	r7, #32
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b088      	sub	sp, #32
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006ce6:	23c0      	movs	r3, #192	; 0xc0
 8006ce8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006cea:	2300      	movs	r3, #0
 8006cec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cf2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cf4:	f107 0308 	add.w	r3, r7, #8
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f7ff fe04 	bl	8006908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f983 	bl	800700c <SDMMC_GetCmdResp2>
 8006d06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d08:	69fb      	ldr	r3, [r7, #28]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3720      	adds	r7, #32
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b088      	sub	sp, #32
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006d20:	2309      	movs	r3, #9
 8006d22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006d24:	23c0      	movs	r3, #192	; 0xc0
 8006d26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d32:	f107 0308 	add.w	r3, r7, #8
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7ff fde5 	bl	8006908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f964 	bl	800700c <SDMMC_GetCmdResp2>
 8006d44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d46:	69fb      	ldr	r3, [r7, #28]
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3720      	adds	r7, #32
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b088      	sub	sp, #32
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d62:	2340      	movs	r3, #64	; 0x40
 8006d64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d66:	2300      	movs	r3, #0
 8006d68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d70:	f107 0308 	add.w	r3, r7, #8
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff fdc6 	bl	8006908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	2103      	movs	r1, #3
 8006d80:	6878      	ldr	r0, [r7, #4]
 8006d82:	f000 f9c9 	bl	8007118 <SDMMC_GetCmdResp6>
 8006d86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d88:	69fb      	ldr	r3, [r7, #28]
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3720      	adds	r7, #32
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b088      	sub	sp, #32
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
 8006d9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006da0:	230d      	movs	r3, #13
 8006da2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006da4:	2340      	movs	r3, #64	; 0x40
 8006da6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006da8:	2300      	movs	r3, #0
 8006daa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006dac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006db0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006db2:	f107 0308 	add.w	r3, r7, #8
 8006db6:	4619      	mov	r1, r3
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7ff fda5 	bl	8006908 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006dbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dc2:	210d      	movs	r1, #13
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f833 	bl	8006e30 <SDMMC_GetCmdResp1>
 8006dca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006dcc:	69fb      	ldr	r3, [r7, #28]
}
 8006dce:	4618      	mov	r0, r3
 8006dd0:	3720      	adds	r7, #32
 8006dd2:	46bd      	mov	sp, r7
 8006dd4:	bd80      	pop	{r7, pc}
	...

08006dd8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	b085      	sub	sp, #20
 8006ddc:	af00      	add	r7, sp, #0
 8006dde:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006de0:	4b11      	ldr	r3, [pc, #68]	; (8006e28 <SDMMC_GetCmdError+0x50>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a11      	ldr	r2, [pc, #68]	; (8006e2c <SDMMC_GetCmdError+0x54>)
 8006de6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dea:	0a5b      	lsrs	r3, r3, #9
 8006dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df0:	fb02 f303 	mul.w	r3, r2, r3
 8006df4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	1e5a      	subs	r2, r3, #1
 8006dfa:	60fa      	str	r2, [r7, #12]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d102      	bne.n	8006e06 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e04:	e009      	b.n	8006e1a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d0f1      	beq.n	8006df6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	22c5      	movs	r2, #197	; 0xc5
 8006e16:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3714      	adds	r7, #20
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	20000000 	.word	0x20000000
 8006e2c:	10624dd3 	.word	0x10624dd3

08006e30 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	460b      	mov	r3, r1
 8006e3a:	607a      	str	r2, [r7, #4]
 8006e3c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006e3e:	4b70      	ldr	r3, [pc, #448]	; (8007000 <SDMMC_GetCmdResp1+0x1d0>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	4a70      	ldr	r2, [pc, #448]	; (8007004 <SDMMC_GetCmdResp1+0x1d4>)
 8006e44:	fba2 2303 	umull	r2, r3, r2, r3
 8006e48:	0a5a      	lsrs	r2, r3, #9
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	fb02 f303 	mul.w	r3, r2, r3
 8006e50:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	1e5a      	subs	r2, r3, #1
 8006e56:	61fa      	str	r2, [r7, #28]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d102      	bne.n	8006e62 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006e5c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006e60:	e0c9      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e66:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e68:	69bb      	ldr	r3, [r7, #24]
 8006e6a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d0ef      	beq.n	8006e52 <SDMMC_GetCmdResp1+0x22>
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1ea      	bne.n	8006e52 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e80:	f003 0304 	and.w	r3, r3, #4
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d004      	beq.n	8006e92 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	2204      	movs	r2, #4
 8006e8c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e8e:	2304      	movs	r3, #4
 8006e90:	e0b1      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d004      	beq.n	8006ea8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e0a6      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	22c5      	movs	r2, #197	; 0xc5
 8006eac:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006eae:	68f8      	ldr	r0, [r7, #12]
 8006eb0:	f7ff fd54 	bl	800695c <SDIO_GetCommandResponse>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	7afb      	ldrb	r3, [r7, #11]
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d001      	beq.n	8006ec2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ebe:	2301      	movs	r3, #1
 8006ec0:	e099      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006ec2:	2100      	movs	r1, #0
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f7ff fd56 	bl	8006976 <SDIO_GetResponse>
 8006eca:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006ecc:	697a      	ldr	r2, [r7, #20]
 8006ece:	4b4e      	ldr	r3, [pc, #312]	; (8007008 <SDMMC_GetCmdResp1+0x1d8>)
 8006ed0:	4013      	ands	r3, r2
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d101      	bne.n	8006eda <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e08d      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	da02      	bge.n	8006ee6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006ee0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006ee4:	e087      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d001      	beq.n	8006ef4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006ef0:	2340      	movs	r3, #64	; 0x40
 8006ef2:	e080      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d001      	beq.n	8006f02 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006efe:	2380      	movs	r3, #128	; 0x80
 8006f00:	e079      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006f0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006f10:	e071      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006f1c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f20:	e069      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006f2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f30:	e061      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006f3c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006f40:	e059      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006f4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006f50:	e051      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006f5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006f60:	e049      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006f6c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006f70:	e041      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006f72:	697b      	ldr	r3, [r7, #20]
 8006f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d002      	beq.n	8006f82 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006f7c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f80:	e039      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d002      	beq.n	8006f92 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006f8c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f90:	e031      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d002      	beq.n	8006fa2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006f9c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006fa0:	e029      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d002      	beq.n	8006fb2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006fac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006fb0:	e021      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d002      	beq.n	8006fc2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006fbc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006fc0:	e019      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d002      	beq.n	8006fd2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006fcc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006fd0:	e011      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d002      	beq.n	8006fe2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006fdc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006fe0:	e009      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f003 0308 	and.w	r3, r3, #8
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d002      	beq.n	8006ff2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006fec:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006ff0:	e001      	b.n	8006ff6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3720      	adds	r7, #32
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	20000000 	.word	0x20000000
 8007004:	10624dd3 	.word	0x10624dd3
 8007008:	fdffe008 	.word	0xfdffe008

0800700c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007014:	4b1f      	ldr	r3, [pc, #124]	; (8007094 <SDMMC_GetCmdResp2+0x88>)
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a1f      	ldr	r2, [pc, #124]	; (8007098 <SDMMC_GetCmdResp2+0x8c>)
 800701a:	fba2 2303 	umull	r2, r3, r2, r3
 800701e:	0a5b      	lsrs	r3, r3, #9
 8007020:	f241 3288 	movw	r2, #5000	; 0x1388
 8007024:	fb02 f303 	mul.w	r3, r2, r3
 8007028:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	1e5a      	subs	r2, r3, #1
 800702e:	60fa      	str	r2, [r7, #12]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d102      	bne.n	800703a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007034:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007038:	e026      	b.n	8007088 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800703e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007046:	2b00      	cmp	r3, #0
 8007048:	d0ef      	beq.n	800702a <SDMMC_GetCmdResp2+0x1e>
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1ea      	bne.n	800702a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d004      	beq.n	800706a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2204      	movs	r2, #4
 8007064:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007066:	2304      	movs	r3, #4
 8007068:	e00e      	b.n	8007088 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d004      	beq.n	8007080 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800707c:	2301      	movs	r3, #1
 800707e:	e003      	b.n	8007088 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	22c5      	movs	r2, #197	; 0xc5
 8007084:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007086:	2300      	movs	r3, #0
}
 8007088:	4618      	mov	r0, r3
 800708a:	3714      	adds	r7, #20
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr
 8007094:	20000000 	.word	0x20000000
 8007098:	10624dd3 	.word	0x10624dd3

0800709c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800709c:	b480      	push	{r7}
 800709e:	b085      	sub	sp, #20
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070a4:	4b1a      	ldr	r3, [pc, #104]	; (8007110 <SDMMC_GetCmdResp3+0x74>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	4a1a      	ldr	r2, [pc, #104]	; (8007114 <SDMMC_GetCmdResp3+0x78>)
 80070aa:	fba2 2303 	umull	r2, r3, r2, r3
 80070ae:	0a5b      	lsrs	r3, r3, #9
 80070b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b4:	fb02 f303 	mul.w	r3, r2, r3
 80070b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	1e5a      	subs	r2, r3, #1
 80070be:	60fa      	str	r2, [r7, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d102      	bne.n	80070ca <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070c8:	e01b      	b.n	8007102 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ce:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d0ef      	beq.n	80070ba <SDMMC_GetCmdResp3+0x1e>
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d1ea      	bne.n	80070ba <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d004      	beq.n	80070fa <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2204      	movs	r2, #4
 80070f4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070f6:	2304      	movs	r3, #4
 80070f8:	e003      	b.n	8007102 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	22c5      	movs	r2, #197	; 0xc5
 80070fe:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007100:	2300      	movs	r3, #0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3714      	adds	r7, #20
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr
 800710e:	bf00      	nop
 8007110:	20000000 	.word	0x20000000
 8007114:	10624dd3 	.word	0x10624dd3

08007118 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b088      	sub	sp, #32
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	460b      	mov	r3, r1
 8007122:	607a      	str	r2, [r7, #4]
 8007124:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007126:	4b35      	ldr	r3, [pc, #212]	; (80071fc <SDMMC_GetCmdResp6+0xe4>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a35      	ldr	r2, [pc, #212]	; (8007200 <SDMMC_GetCmdResp6+0xe8>)
 800712c:	fba2 2303 	umull	r2, r3, r2, r3
 8007130:	0a5b      	lsrs	r3, r3, #9
 8007132:	f241 3288 	movw	r2, #5000	; 0x1388
 8007136:	fb02 f303 	mul.w	r3, r2, r3
 800713a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800713c:	69fb      	ldr	r3, [r7, #28]
 800713e:	1e5a      	subs	r2, r3, #1
 8007140:	61fa      	str	r2, [r7, #28]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d102      	bne.n	800714c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007146:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800714a:	e052      	b.n	80071f2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007150:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007152:	69bb      	ldr	r3, [r7, #24]
 8007154:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0ef      	beq.n	800713c <SDMMC_GetCmdResp6+0x24>
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007162:	2b00      	cmp	r3, #0
 8007164:	d1ea      	bne.n	800713c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800716a:	f003 0304 	and.w	r3, r3, #4
 800716e:	2b00      	cmp	r3, #0
 8007170:	d004      	beq.n	800717c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	2204      	movs	r2, #4
 8007176:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007178:	2304      	movs	r3, #4
 800717a:	e03a      	b.n	80071f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007180:	f003 0301 	and.w	r3, r3, #1
 8007184:	2b00      	cmp	r3, #0
 8007186:	d004      	beq.n	8007192 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2201      	movs	r2, #1
 800718c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800718e:	2301      	movs	r3, #1
 8007190:	e02f      	b.n	80071f2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f7ff fbe2 	bl	800695c <SDIO_GetCommandResponse>
 8007198:	4603      	mov	r3, r0
 800719a:	461a      	mov	r2, r3
 800719c:	7afb      	ldrb	r3, [r7, #11]
 800719e:	4293      	cmp	r3, r2
 80071a0:	d001      	beq.n	80071a6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e025      	b.n	80071f2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	22c5      	movs	r2, #197	; 0xc5
 80071aa:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80071ac:	2100      	movs	r1, #0
 80071ae:	68f8      	ldr	r0, [r7, #12]
 80071b0:	f7ff fbe1 	bl	8006976 <SDIO_GetResponse>
 80071b4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d106      	bne.n	80071ce <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	0c1b      	lsrs	r3, r3, #16
 80071c4:	b29a      	uxth	r2, r3
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	e011      	b.n	80071f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d002      	beq.n	80071de <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80071d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80071dc:	e009      	b.n	80071f2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d002      	beq.n	80071ee <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80071e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071ec:	e001      	b.n	80071f2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80071ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80071f2:	4618      	mov	r0, r3
 80071f4:	3720      	adds	r7, #32
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	20000000 	.word	0x20000000
 8007200:	10624dd3 	.word	0x10624dd3

08007204 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007204:	b480      	push	{r7}
 8007206:	b085      	sub	sp, #20
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800720c:	4b22      	ldr	r3, [pc, #136]	; (8007298 <SDMMC_GetCmdResp7+0x94>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a22      	ldr	r2, [pc, #136]	; (800729c <SDMMC_GetCmdResp7+0x98>)
 8007212:	fba2 2303 	umull	r2, r3, r2, r3
 8007216:	0a5b      	lsrs	r3, r3, #9
 8007218:	f241 3288 	movw	r2, #5000	; 0x1388
 800721c:	fb02 f303 	mul.w	r3, r2, r3
 8007220:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	1e5a      	subs	r2, r3, #1
 8007226:	60fa      	str	r2, [r7, #12]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d102      	bne.n	8007232 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800722c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007230:	e02c      	b.n	800728c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007236:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800723e:	2b00      	cmp	r3, #0
 8007240:	d0ef      	beq.n	8007222 <SDMMC_GetCmdResp7+0x1e>
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007248:	2b00      	cmp	r3, #0
 800724a:	d1ea      	bne.n	8007222 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007250:	f003 0304 	and.w	r3, r3, #4
 8007254:	2b00      	cmp	r3, #0
 8007256:	d004      	beq.n	8007262 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2204      	movs	r2, #4
 800725c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800725e:	2304      	movs	r3, #4
 8007260:	e014      	b.n	800728c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007266:	f003 0301 	and.w	r3, r3, #1
 800726a:	2b00      	cmp	r3, #0
 800726c:	d004      	beq.n	8007278 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007274:	2301      	movs	r3, #1
 8007276:	e009      	b.n	800728c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800727c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007280:	2b00      	cmp	r3, #0
 8007282:	d002      	beq.n	800728a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2240      	movs	r2, #64	; 0x40
 8007288:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800728a:	2300      	movs	r3, #0
  
}
 800728c:	4618      	mov	r0, r3
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr
 8007298:	20000000 	.word	0x20000000
 800729c:	10624dd3 	.word	0x10624dd3

080072a0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80072a4:	4904      	ldr	r1, [pc, #16]	; (80072b8 <MX_FATFS_Init+0x18>)
 80072a6:	4805      	ldr	r0, [pc, #20]	; (80072bc <MX_FATFS_Init+0x1c>)
 80072a8:	f000 fa0a 	bl	80076c0 <FATFS_LinkDriver>
 80072ac:	4603      	mov	r3, r0
 80072ae:	461a      	mov	r2, r3
 80072b0:	4b03      	ldr	r3, [pc, #12]	; (80072c0 <MX_FATFS_Init+0x20>)
 80072b2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80072b4:	bf00      	nop
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20000c4c 	.word	0x20000c4c
 80072bc:	080077a8 	.word	0x080077a8
 80072c0:	20000c48 	.word	0x20000c48

080072c4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80072ca:	2300      	movs	r3, #0
 80072cc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80072ce:	f000 f89e 	bl	800740e <BSP_SD_IsDetected>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d001      	beq.n	80072dc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e005      	b.n	80072e8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80072dc:	4804      	ldr	r0, [pc, #16]	; (80072f0 <BSP_SD_Init+0x2c>)
 80072de:	f7fc fa35 	bl	800374c <HAL_SD_Init>
 80072e2:	4603      	mov	r3, r0
 80072e4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80072e6:	79fb      	ldrb	r3, [r7, #7]
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3708      	adds	r7, #8
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	20000984 	.word	0x20000984

080072f4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b088      	sub	sp, #32
 80072f8:	af02      	add	r7, sp, #8
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	9300      	str	r3, [sp, #0]
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68ba      	ldr	r2, [r7, #8]
 800730e:	68f9      	ldr	r1, [r7, #12]
 8007310:	4806      	ldr	r0, [pc, #24]	; (800732c <BSP_SD_ReadBlocks+0x38>)
 8007312:	f7fc fac9 	bl	80038a8 <HAL_SD_ReadBlocks>
 8007316:	4603      	mov	r3, r0
 8007318:	2b00      	cmp	r3, #0
 800731a:	d001      	beq.n	8007320 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800731c:	2301      	movs	r3, #1
 800731e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007320:	7dfb      	ldrb	r3, [r7, #23]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3718      	adds	r7, #24
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000984 	.word	0x20000984

08007330 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af02      	add	r7, sp, #8
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800733e:	2300      	movs	r3, #0
 8007340:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	9300      	str	r3, [sp, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	68f9      	ldr	r1, [r7, #12]
 800734c:	4806      	ldr	r0, [pc, #24]	; (8007368 <BSP_SD_WriteBlocks+0x38>)
 800734e:	f7fc fc89 	bl	8003c64 <HAL_SD_WriteBlocks>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d001      	beq.n	800735c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007358:	2301      	movs	r3, #1
 800735a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800735c:	7dfb      	ldrb	r3, [r7, #23]
}
 800735e:	4618      	mov	r0, r3
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20000984 	.word	0x20000984

0800736c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8007370:	4805      	ldr	r0, [pc, #20]	; (8007388 <BSP_SD_GetCardState+0x1c>)
 8007372:	f7fd f94d 	bl	8004610 <HAL_SD_GetCardState>
 8007376:	4603      	mov	r3, r0
 8007378:	2b04      	cmp	r3, #4
 800737a:	bf14      	ite	ne
 800737c:	2301      	movne	r3, #1
 800737e:	2300      	moveq	r3, #0
 8007380:	b2db      	uxtb	r3, r3
}
 8007382:	4618      	mov	r0, r3
 8007384:	bd80      	pop	{r7, pc}
 8007386:	bf00      	nop
 8007388:	20000984 	.word	0x20000984

0800738c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007394:	6879      	ldr	r1, [r7, #4]
 8007396:	4803      	ldr	r0, [pc, #12]	; (80073a4 <BSP_SD_GetCardInfo+0x18>)
 8007398:	f7fd f90e 	bl	80045b8 <HAL_SD_GetCardInfo>
}
 800739c:	bf00      	nop
 800739e:	3708      	adds	r7, #8
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	20000984 	.word	0x20000984

080073a8 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 80073b0:	f000 f818 	bl	80073e4 <BSP_SD_AbortCallback>
}
 80073b4:	bf00      	nop
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80073c4:	f000 f815 	bl	80073f2 <BSP_SD_WriteCpltCallback>
}
 80073c8:	bf00      	nop
 80073ca:	3708      	adds	r7, #8
 80073cc:	46bd      	mov	sp, r7
 80073ce:	bd80      	pop	{r7, pc}

080073d0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80073d8:	f000 f812 	bl	8007400 <BSP_SD_ReadCpltCallback>
}
 80073dc:	bf00      	nop
 80073de:	3708      	adds	r7, #8
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0

}
 80073e8:	bf00      	nop
 80073ea:	46bd      	mov	sp, r7
 80073ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f0:	4770      	bx	lr

080073f2 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 80073f2:	b480      	push	{r7}
 80073f4:	af00      	add	r7, sp, #0

}
 80073f6:	bf00      	nop
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8007400:	b480      	push	{r7}
 8007402:	af00      	add	r7, sp, #0

}
 8007404:	bf00      	nop
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b082      	sub	sp, #8
 8007412:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007414:	2301      	movs	r3, #1
 8007416:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007418:	f000 f80c 	bl	8007434 <BSP_PlatformIsDetected>
 800741c:	4603      	mov	r3, r0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8007422:	2300      	movs	r3, #0
 8007424:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007426:	79fb      	ldrb	r3, [r7, #7]
 8007428:	b2db      	uxtb	r3, r3
}
 800742a:	4618      	mov	r0, r3
 800742c:	3708      	adds	r7, #8
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
	...

08007434 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800743a:	2301      	movs	r3, #1
 800743c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800743e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007442:	4806      	ldr	r0, [pc, #24]	; (800745c <BSP_PlatformIsDetected+0x28>)
 8007444:	f7fb f8a8 	bl	8002598 <HAL_GPIO_ReadPin>
 8007448:	4603      	mov	r3, r0
 800744a:	2b00      	cmp	r3, #0
 800744c:	d001      	beq.n	8007452 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800744e:	2300      	movs	r3, #0
 8007450:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8007452:	79fb      	ldrb	r3, [r7, #7]
}
 8007454:	4618      	mov	r0, r3
 8007456:	3708      	adds	r7, #8
 8007458:	46bd      	mov	sp, r7
 800745a:	bd80      	pop	{r7, pc}
 800745c:	40020800 	.word	0x40020800

08007460 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b082      	sub	sp, #8
 8007464:	af00      	add	r7, sp, #0
 8007466:	4603      	mov	r3, r0
 8007468:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800746a:	4b0b      	ldr	r3, [pc, #44]	; (8007498 <SD_CheckStatus+0x38>)
 800746c:	2201      	movs	r2, #1
 800746e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8007470:	f7ff ff7c 	bl	800736c <BSP_SD_GetCardState>
 8007474:	4603      	mov	r3, r0
 8007476:	2b00      	cmp	r3, #0
 8007478:	d107      	bne.n	800748a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800747a:	4b07      	ldr	r3, [pc, #28]	; (8007498 <SD_CheckStatus+0x38>)
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	b2db      	uxtb	r3, r3
 8007480:	f023 0301 	bic.w	r3, r3, #1
 8007484:	b2da      	uxtb	r2, r3
 8007486:	4b04      	ldr	r3, [pc, #16]	; (8007498 <SD_CheckStatus+0x38>)
 8007488:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800748a:	4b03      	ldr	r3, [pc, #12]	; (8007498 <SD_CheckStatus+0x38>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	b2db      	uxtb	r3, r3
}
 8007490:	4618      	mov	r0, r3
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	20000009 	.word	0x20000009

0800749c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b082      	sub	sp, #8
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	4603      	mov	r3, r0
 80074a4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80074a6:	4b0b      	ldr	r3, [pc, #44]	; (80074d4 <SD_initialize+0x38>)
 80074a8:	2201      	movs	r2, #1
 80074aa:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80074ac:	f7ff ff0a 	bl	80072c4 <BSP_SD_Init>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d107      	bne.n	80074c6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80074b6:	79fb      	ldrb	r3, [r7, #7]
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff ffd1 	bl	8007460 <SD_CheckStatus>
 80074be:	4603      	mov	r3, r0
 80074c0:	461a      	mov	r2, r3
 80074c2:	4b04      	ldr	r3, [pc, #16]	; (80074d4 <SD_initialize+0x38>)
 80074c4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80074c6:	4b03      	ldr	r3, [pc, #12]	; (80074d4 <SD_initialize+0x38>)
 80074c8:	781b      	ldrb	r3, [r3, #0]
 80074ca:	b2db      	uxtb	r3, r3
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}
 80074d4:	20000009 	.word	0x20000009

080074d8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b082      	sub	sp, #8
 80074dc:	af00      	add	r7, sp, #0
 80074de:	4603      	mov	r3, r0
 80074e0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80074e2:	79fb      	ldrb	r3, [r7, #7]
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7ff ffbb 	bl	8007460 <SD_CheckStatus>
 80074ea:	4603      	mov	r3, r0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3708      	adds	r7, #8
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	60b9      	str	r1, [r7, #8]
 80074fc:	607a      	str	r2, [r7, #4]
 80074fe:	603b      	str	r3, [r7, #0]
 8007500:	4603      	mov	r3, r0
 8007502:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007508:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800750c:	683a      	ldr	r2, [r7, #0]
 800750e:	6879      	ldr	r1, [r7, #4]
 8007510:	68b8      	ldr	r0, [r7, #8]
 8007512:	f7ff feef 	bl	80072f4 <BSP_SD_ReadBlocks>
 8007516:	4603      	mov	r3, r0
 8007518:	2b00      	cmp	r3, #0
 800751a:	d107      	bne.n	800752c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800751c:	bf00      	nop
 800751e:	f7ff ff25 	bl	800736c <BSP_SD_GetCardState>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d1fa      	bne.n	800751e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8007528:	2300      	movs	r3, #0
 800752a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800752c:	7dfb      	ldrb	r3, [r7, #23]
}
 800752e:	4618      	mov	r0, r3
 8007530:	3718      	adds	r7, #24
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b086      	sub	sp, #24
 800753a:	af00      	add	r7, sp, #0
 800753c:	60b9      	str	r1, [r7, #8]
 800753e:	607a      	str	r2, [r7, #4]
 8007540:	603b      	str	r3, [r7, #0]
 8007542:	4603      	mov	r3, r0
 8007544:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007546:	2301      	movs	r3, #1
 8007548:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800754a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800754e:	683a      	ldr	r2, [r7, #0]
 8007550:	6879      	ldr	r1, [r7, #4]
 8007552:	68b8      	ldr	r0, [r7, #8]
 8007554:	f7ff feec 	bl	8007330 <BSP_SD_WriteBlocks>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d107      	bne.n	800756e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800755e:	bf00      	nop
 8007560:	f7ff ff04 	bl	800736c <BSP_SD_GetCardState>
 8007564:	4603      	mov	r3, r0
 8007566:	2b00      	cmp	r3, #0
 8007568:	d1fa      	bne.n	8007560 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800756a:	2300      	movs	r3, #0
 800756c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800756e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007570:	4618      	mov	r0, r3
 8007572:	3718      	adds	r7, #24
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}

08007578 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	b08c      	sub	sp, #48	; 0x30
 800757c:	af00      	add	r7, sp, #0
 800757e:	4603      	mov	r3, r0
 8007580:	603a      	str	r2, [r7, #0]
 8007582:	71fb      	strb	r3, [r7, #7]
 8007584:	460b      	mov	r3, r1
 8007586:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800758e:	4b25      	ldr	r3, [pc, #148]	; (8007624 <SD_ioctl+0xac>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	2b00      	cmp	r3, #0
 800759a:	d001      	beq.n	80075a0 <SD_ioctl+0x28>
 800759c:	2303      	movs	r3, #3
 800759e:	e03c      	b.n	800761a <SD_ioctl+0xa2>

  switch (cmd)
 80075a0:	79bb      	ldrb	r3, [r7, #6]
 80075a2:	2b03      	cmp	r3, #3
 80075a4:	d834      	bhi.n	8007610 <SD_ioctl+0x98>
 80075a6:	a201      	add	r2, pc, #4	; (adr r2, 80075ac <SD_ioctl+0x34>)
 80075a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075ac:	080075bd 	.word	0x080075bd
 80075b0:	080075c5 	.word	0x080075c5
 80075b4:	080075dd 	.word	0x080075dd
 80075b8:	080075f7 	.word	0x080075f7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80075bc:	2300      	movs	r3, #0
 80075be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80075c2:	e028      	b.n	8007616 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80075c4:	f107 030c 	add.w	r3, r7, #12
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7ff fedf 	bl	800738c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80075ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075d0:	683b      	ldr	r3, [r7, #0]
 80075d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80075da:	e01c      	b.n	8007616 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80075dc:	f107 030c 	add.w	r3, r7, #12
 80075e0:	4618      	mov	r0, r3
 80075e2:	f7ff fed3 	bl	800738c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80075e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80075ee:	2300      	movs	r3, #0
 80075f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80075f4:	e00f      	b.n	8007616 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80075f6:	f107 030c 	add.w	r3, r7, #12
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7ff fec6 	bl	800738c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	0a5a      	lsrs	r2, r3, #9
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007608:	2300      	movs	r3, #0
 800760a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800760e:	e002      	b.n	8007616 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007610:	2304      	movs	r3, #4
 8007612:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007616:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800761a:	4618      	mov	r0, r3
 800761c:	3730      	adds	r7, #48	; 0x30
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	20000009 	.word	0x20000009

08007628 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	4613      	mov	r3, r2
 8007634:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007636:	2301      	movs	r3, #1
 8007638:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800763a:	2300      	movs	r3, #0
 800763c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800763e:	4b1f      	ldr	r3, [pc, #124]	; (80076bc <FATFS_LinkDriverEx+0x94>)
 8007640:	7a5b      	ldrb	r3, [r3, #9]
 8007642:	b2db      	uxtb	r3, r3
 8007644:	2b00      	cmp	r3, #0
 8007646:	d131      	bne.n	80076ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007648:	4b1c      	ldr	r3, [pc, #112]	; (80076bc <FATFS_LinkDriverEx+0x94>)
 800764a:	7a5b      	ldrb	r3, [r3, #9]
 800764c:	b2db      	uxtb	r3, r3
 800764e:	461a      	mov	r2, r3
 8007650:	4b1a      	ldr	r3, [pc, #104]	; (80076bc <FATFS_LinkDriverEx+0x94>)
 8007652:	2100      	movs	r1, #0
 8007654:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007656:	4b19      	ldr	r3, [pc, #100]	; (80076bc <FATFS_LinkDriverEx+0x94>)
 8007658:	7a5b      	ldrb	r3, [r3, #9]
 800765a:	b2db      	uxtb	r3, r3
 800765c:	4a17      	ldr	r2, [pc, #92]	; (80076bc <FATFS_LinkDriverEx+0x94>)
 800765e:	009b      	lsls	r3, r3, #2
 8007660:	4413      	add	r3, r2
 8007662:	68fa      	ldr	r2, [r7, #12]
 8007664:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007666:	4b15      	ldr	r3, [pc, #84]	; (80076bc <FATFS_LinkDriverEx+0x94>)
 8007668:	7a5b      	ldrb	r3, [r3, #9]
 800766a:	b2db      	uxtb	r3, r3
 800766c:	461a      	mov	r2, r3
 800766e:	4b13      	ldr	r3, [pc, #76]	; (80076bc <FATFS_LinkDriverEx+0x94>)
 8007670:	4413      	add	r3, r2
 8007672:	79fa      	ldrb	r2, [r7, #7]
 8007674:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007676:	4b11      	ldr	r3, [pc, #68]	; (80076bc <FATFS_LinkDriverEx+0x94>)
 8007678:	7a5b      	ldrb	r3, [r3, #9]
 800767a:	b2db      	uxtb	r3, r3
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	b2d1      	uxtb	r1, r2
 8007680:	4a0e      	ldr	r2, [pc, #56]	; (80076bc <FATFS_LinkDriverEx+0x94>)
 8007682:	7251      	strb	r1, [r2, #9]
 8007684:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007686:	7dbb      	ldrb	r3, [r7, #22]
 8007688:	3330      	adds	r3, #48	; 0x30
 800768a:	b2da      	uxtb	r2, r3
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007690:	68bb      	ldr	r3, [r7, #8]
 8007692:	3301      	adds	r3, #1
 8007694:	223a      	movs	r2, #58	; 0x3a
 8007696:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	3302      	adds	r3, #2
 800769c:	222f      	movs	r2, #47	; 0x2f
 800769e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	3303      	adds	r3, #3
 80076a4:	2200      	movs	r2, #0
 80076a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80076a8:	2300      	movs	r3, #0
 80076aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80076ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	371c      	adds	r7, #28
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	200008b8 	.word	0x200008b8

080076c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b082      	sub	sp, #8
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
 80076c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80076ca:	2200      	movs	r2, #0
 80076cc:	6839      	ldr	r1, [r7, #0]
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7ff ffaa 	bl	8007628 <FATFS_LinkDriverEx>
 80076d4:	4603      	mov	r3, r0
}
 80076d6:	4618      	mov	r0, r3
 80076d8:	3708      	adds	r7, #8
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
	...

080076e0 <__libc_init_array>:
 80076e0:	b570      	push	{r4, r5, r6, lr}
 80076e2:	4d0d      	ldr	r5, [pc, #52]	; (8007718 <__libc_init_array+0x38>)
 80076e4:	4c0d      	ldr	r4, [pc, #52]	; (800771c <__libc_init_array+0x3c>)
 80076e6:	1b64      	subs	r4, r4, r5
 80076e8:	10a4      	asrs	r4, r4, #2
 80076ea:	2600      	movs	r6, #0
 80076ec:	42a6      	cmp	r6, r4
 80076ee:	d109      	bne.n	8007704 <__libc_init_array+0x24>
 80076f0:	4d0b      	ldr	r5, [pc, #44]	; (8007720 <__libc_init_array+0x40>)
 80076f2:	4c0c      	ldr	r4, [pc, #48]	; (8007724 <__libc_init_array+0x44>)
 80076f4:	f000 f82e 	bl	8007754 <_init>
 80076f8:	1b64      	subs	r4, r4, r5
 80076fa:	10a4      	asrs	r4, r4, #2
 80076fc:	2600      	movs	r6, #0
 80076fe:	42a6      	cmp	r6, r4
 8007700:	d105      	bne.n	800770e <__libc_init_array+0x2e>
 8007702:	bd70      	pop	{r4, r5, r6, pc}
 8007704:	f855 3b04 	ldr.w	r3, [r5], #4
 8007708:	4798      	blx	r3
 800770a:	3601      	adds	r6, #1
 800770c:	e7ee      	b.n	80076ec <__libc_init_array+0xc>
 800770e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007712:	4798      	blx	r3
 8007714:	3601      	adds	r6, #1
 8007716:	e7f2      	b.n	80076fe <__libc_init_array+0x1e>
 8007718:	080077c4 	.word	0x080077c4
 800771c:	080077c4 	.word	0x080077c4
 8007720:	080077c4 	.word	0x080077c4
 8007724:	080077c8 	.word	0x080077c8

08007728 <memcpy>:
 8007728:	440a      	add	r2, r1
 800772a:	4291      	cmp	r1, r2
 800772c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007730:	d100      	bne.n	8007734 <memcpy+0xc>
 8007732:	4770      	bx	lr
 8007734:	b510      	push	{r4, lr}
 8007736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800773a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800773e:	4291      	cmp	r1, r2
 8007740:	d1f9      	bne.n	8007736 <memcpy+0xe>
 8007742:	bd10      	pop	{r4, pc}

08007744 <memset>:
 8007744:	4402      	add	r2, r0
 8007746:	4603      	mov	r3, r0
 8007748:	4293      	cmp	r3, r2
 800774a:	d100      	bne.n	800774e <memset+0xa>
 800774c:	4770      	bx	lr
 800774e:	f803 1b01 	strb.w	r1, [r3], #1
 8007752:	e7f9      	b.n	8007748 <memset+0x4>

08007754 <_init>:
 8007754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007756:	bf00      	nop
 8007758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800775a:	bc08      	pop	{r3}
 800775c:	469e      	mov	lr, r3
 800775e:	4770      	bx	lr

08007760 <_fini>:
 8007760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007762:	bf00      	nop
 8007764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007766:	bc08      	pop	{r3}
 8007768:	469e      	mov	lr, r3
 800776a:	4770      	bx	lr
