
BA_F446ZE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005dc0  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005f84  08005f84  00015f84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005fb0  08005fb0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005fb0  08005fb0  00015fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005fb8  08005fb8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005fb8  08005fb8  00015fb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005fbc  08005fbc  00015fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005fc0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000634  2000000c  08005fcc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000640  08005fcc  00020640  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015d67  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003310  00000000  00000000  00035da3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  000390b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001058  00000000  00000000  0003a278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002438a  00000000  00000000  0003b2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000163e8  00000000  00000000  0005f65a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5b85  00000000  00000000  00075a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014b5c7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004880  00000000  00000000  0014b61c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08005f6c 	.word	0x08005f6c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08005f6c 	.word	0x08005f6c

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b08e      	sub	sp, #56	; 0x38
 8000500:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000506:	2200      	movs	r2, #0
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	605a      	str	r2, [r3, #4]
 800050c:	609a      	str	r2, [r3, #8]
 800050e:	60da      	str	r2, [r3, #12]
 8000510:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000512:	2300      	movs	r3, #0
 8000514:	623b      	str	r3, [r7, #32]
 8000516:	4ba0      	ldr	r3, [pc, #640]	; (8000798 <MX_GPIO_Init+0x29c>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	4a9f      	ldr	r2, [pc, #636]	; (8000798 <MX_GPIO_Init+0x29c>)
 800051c:	f043 0310 	orr.w	r3, r3, #16
 8000520:	6313      	str	r3, [r2, #48]	; 0x30
 8000522:	4b9d      	ldr	r3, [pc, #628]	; (8000798 <MX_GPIO_Init+0x29c>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	f003 0310 	and.w	r3, r3, #16
 800052a:	623b      	str	r3, [r7, #32]
 800052c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800052e:	2300      	movs	r3, #0
 8000530:	61fb      	str	r3, [r7, #28]
 8000532:	4b99      	ldr	r3, [pc, #612]	; (8000798 <MX_GPIO_Init+0x29c>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	4a98      	ldr	r2, [pc, #608]	; (8000798 <MX_GPIO_Init+0x29c>)
 8000538:	f043 0304 	orr.w	r3, r3, #4
 800053c:	6313      	str	r3, [r2, #48]	; 0x30
 800053e:	4b96      	ldr	r3, [pc, #600]	; (8000798 <MX_GPIO_Init+0x29c>)
 8000540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000542:	f003 0304 	and.w	r3, r3, #4
 8000546:	61fb      	str	r3, [r7, #28]
 8000548:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
 800054e:	4b92      	ldr	r3, [pc, #584]	; (8000798 <MX_GPIO_Init+0x29c>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	4a91      	ldr	r2, [pc, #580]	; (8000798 <MX_GPIO_Init+0x29c>)
 8000554:	f043 0320 	orr.w	r3, r3, #32
 8000558:	6313      	str	r3, [r2, #48]	; 0x30
 800055a:	4b8f      	ldr	r3, [pc, #572]	; (8000798 <MX_GPIO_Init+0x29c>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055e:	f003 0320 	and.w	r3, r3, #32
 8000562:	61bb      	str	r3, [r7, #24]
 8000564:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000566:	2300      	movs	r3, #0
 8000568:	617b      	str	r3, [r7, #20]
 800056a:	4b8b      	ldr	r3, [pc, #556]	; (8000798 <MX_GPIO_Init+0x29c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a8a      	ldr	r2, [pc, #552]	; (8000798 <MX_GPIO_Init+0x29c>)
 8000570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b88      	ldr	r3, [pc, #544]	; (8000798 <MX_GPIO_Init+0x29c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800057e:	617b      	str	r3, [r7, #20]
 8000580:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	4b84      	ldr	r3, [pc, #528]	; (8000798 <MX_GPIO_Init+0x29c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a83      	ldr	r2, [pc, #524]	; (8000798 <MX_GPIO_Init+0x29c>)
 800058c:	f043 0301 	orr.w	r3, r3, #1
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b81      	ldr	r3, [pc, #516]	; (8000798 <MX_GPIO_Init+0x29c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	4b7d      	ldr	r3, [pc, #500]	; (8000798 <MX_GPIO_Init+0x29c>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a7c      	ldr	r2, [pc, #496]	; (8000798 <MX_GPIO_Init+0x29c>)
 80005a8:	f043 0302 	orr.w	r3, r3, #2
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b7a      	ldr	r3, [pc, #488]	; (8000798 <MX_GPIO_Init+0x29c>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0302 	and.w	r3, r3, #2
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	4b76      	ldr	r3, [pc, #472]	; (8000798 <MX_GPIO_Init+0x29c>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a75      	ldr	r2, [pc, #468]	; (8000798 <MX_GPIO_Init+0x29c>)
 80005c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b73      	ldr	r3, [pc, #460]	; (8000798 <MX_GPIO_Init+0x29c>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b6f      	ldr	r3, [pc, #444]	; (8000798 <MX_GPIO_Init+0x29c>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a6e      	ldr	r2, [pc, #440]	; (8000798 <MX_GPIO_Init+0x29c>)
 80005e0:	f043 0308 	orr.w	r3, r3, #8
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b6c      	ldr	r3, [pc, #432]	; (8000798 <MX_GPIO_Init+0x29c>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0308 	and.w	r3, r3, #8
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_SD_Pin|LED_STATE_Pin|LED_RX_Pin|LED_TX_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	213c      	movs	r1, #60	; 0x3c
 80005f6:	4869      	ldr	r0, [pc, #420]	; (800079c <MX_GPIO_Init+0x2a0>)
 80005f8:	f001 f8ee 	bl	80017d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DMX_DE_GPIO_Port, DMX_DE_Pin, GPIO_PIN_RESET);
 80005fc:	2200      	movs	r2, #0
 80005fe:	2104      	movs	r1, #4
 8000600:	4867      	ldr	r0, [pc, #412]	; (80007a0 <MX_GPIO_Init+0x2a4>)
 8000602:	f001 f8e9 	bl	80017d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin|LCD_E_Pin|LCD_D0_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	21f0      	movs	r1, #240	; 0xf0
 800060a:	4866      	ldr	r0, [pc, #408]	; (80007a4 <MX_GPIO_Init+0x2a8>)
 800060c:	f001 f8e4 	bl	80017d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000610:	2200      	movs	r2, #0
 8000612:	f44f 41fc 	mov.w	r1, #32256	; 0x7e00
 8000616:	4864      	ldr	r0, [pc, #400]	; (80007a8 <MX_GPIO_Init+0x2ac>)
 8000618:	f001 f8de 	bl	80017d8 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED_SD_Pin|LED_STATE_Pin|LED_RX_Pin|LED_TX_Pin;
 800061c:	233c      	movs	r3, #60	; 0x3c
 800061e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800062c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000630:	4619      	mov	r1, r3
 8000632:	485a      	ldr	r0, [pc, #360]	; (800079c <MX_GPIO_Init+0x2a0>)
 8000634:	f000 ff24 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC5
                           PC6 PC7 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000638:	f24f 43ef 	movw	r3, #62703	; 0xf4ef
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800063e:	2303      	movs	r3, #3
 8000640:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064a:	4619      	mov	r1, r3
 800064c:	4857      	ldr	r0, [pc, #348]	; (80007ac <MX_GPIO_Init+0x2b0>)
 800064e:	f000 ff17 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000656:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000658:	2303      	movs	r3, #3
 800065a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000660:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000664:	4619      	mov	r1, r3
 8000666:	4852      	ldr	r0, [pc, #328]	; (80007b0 <MX_GPIO_Init+0x2b4>)
 8000668:	f000 ff0a 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DMX_DE_Pin;
 800066c:	2304      	movs	r3, #4
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DMX_DE_GPIO_Port, &GPIO_InitStruct);
 800067c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000680:	4619      	mov	r1, r3
 8000682:	4847      	ldr	r0, [pc, #284]	; (80007a0 <MX_GPIO_Init+0x2a4>)
 8000684:	f000 fefc 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA8 PA9
                           PA10 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 8000688:	f249 7318 	movw	r3, #38680	; 0x9718
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068e:	2303      	movs	r3, #3
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069a:	4619      	mov	r1, r3
 800069c:	4840      	ldr	r0, [pc, #256]	; (80007a0 <MX_GPIO_Init+0x2a4>)
 800069e:	f000 feef 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_BACK_Pin|BTN_ENTER_Pin|BTN_DOWN_Pin;
 80006a2:	23e0      	movs	r3, #224	; 0xe0
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006aa:	2301      	movs	r3, #1
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b2:	4619      	mov	r1, r3
 80006b4:	483a      	ldr	r0, [pc, #232]	; (80007a0 <MX_GPIO_Init+0x2a4>)
 80006b6:	f000 fee3 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|SDIO_DETECT_Pin;
 80006ba:	f44f 7304 	mov.w	r3, #528	; 0x210
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c0:	2300      	movs	r3, #0
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006cc:	4619      	mov	r1, r3
 80006ce:	4837      	ldr	r0, [pc, #220]	; (80007ac <MX_GPIO_Init+0x2b0>)
 80006d0:	f000 fed6 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80006d4:	f248 13ff 	movw	r3, #33279	; 0x81ff
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006da:	2303      	movs	r3, #3
 80006dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e6:	4619      	mov	r1, r3
 80006e8:	482f      	ldr	r0, [pc, #188]	; (80007a8 <MX_GPIO_Init+0x2ac>)
 80006ea:	f000 fec9 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80006ee:	f64f 7383 	movw	r3, #65411	; 0xff83
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f4:	2303      	movs	r3, #3
 80006f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000700:	4619      	mov	r1, r3
 8000702:	4826      	ldr	r0, [pc, #152]	; (800079c <MX_GPIO_Init+0x2a0>)
 8000704:	f000 febc 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB14 PB15
                           PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_15
 8000708:	f64c 73f8 	movw	r3, #53240	; 0xcff8
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800070e:	2303      	movs	r3, #3
 8000710:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000712:	2300      	movs	r3, #0
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	4619      	mov	r1, r3
 800071c:	4825      	ldr	r0, [pc, #148]	; (80007b4 <MX_GPIO_Init+0x2b8>)
 800071e:	f000 feaf 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ENB_B_Pin|ENC_A_Pin;
 8000722:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800072c:	2300      	movs	r3, #0
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000734:	4619      	mov	r1, r3
 8000736:	481f      	ldr	r0, [pc, #124]	; (80007b4 <MX_GPIO_Init+0x2b8>)
 8000738:	f000 fea2 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800073c:	f64f 730b 	movw	r3, #65291	; 0xff0b
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000742:	2303      	movs	r3, #3
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800074a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074e:	4619      	mov	r1, r3
 8000750:	4814      	ldr	r0, [pc, #80]	; (80007a4 <MX_GPIO_Init+0x2a8>)
 8000752:	f000 fe95 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D0_Pin|LCD_D1_Pin;
 8000756:	23f0      	movs	r3, #240	; 0xf0
 8000758:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000766:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800076a:	4619      	mov	r1, r3
 800076c:	480d      	ldr	r0, [pc, #52]	; (80007a4 <MX_GPIO_Init+0x2a8>)
 800076e:	f000 fe87 	bl	8001480 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000772:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000778:	2301      	movs	r3, #1
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077c:	2300      	movs	r3, #0
 800077e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000780:	2300      	movs	r3, #0
 8000782:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000784:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000788:	4619      	mov	r1, r3
 800078a:	4807      	ldr	r0, [pc, #28]	; (80007a8 <MX_GPIO_Init+0x2ac>)
 800078c:	f000 fe78 	bl	8001480 <HAL_GPIO_Init>

}
 8000790:	bf00      	nop
 8000792:	3738      	adds	r7, #56	; 0x38
 8000794:	46bd      	mov	sp, r7
 8000796:	bd80      	pop	{r7, pc}
 8000798:	40023800 	.word	0x40023800
 800079c:	40021000 	.word	0x40021000
 80007a0:	40020000 	.word	0x40020000
 80007a4:	40020c00 	.word	0x40020c00
 80007a8:	40021800 	.word	0x40021800
 80007ac:	40020800 	.word	0x40020800
 80007b0:	40021400 	.word	0x40021400
 80007b4:	40020400 	.word	0x40020400

080007b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007bc:	f000 fc26 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c0:	f000 f810 	bl	80007e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c4:	f7ff fe9a 	bl	80004fc <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 80007c8:	f000 f8a4 	bl	8000914 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 80007cc:	f005 f9a8 	bl	8005b20 <MX_FATFS_Init>
  MX_TIM1_Init();
 80007d0:	f000 f9c6 	bl	8000b60 <MX_TIM1_Init>
  MX_TIM10_Init();
 80007d4:	f000 fa8c 	bl	8000cf0 <MX_TIM10_Init>
  MX_UART4_Init();
 80007d8:	f000 fb72 	bl	8000ec0 <MX_UART4_Init>
  MX_TIM9_Init();
 80007dc:	f000 fa42 	bl	8000c64 <MX_TIM9_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <main+0x28>
	...

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b0ac      	sub	sp, #176	; 0xb0
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007ee:	2234      	movs	r2, #52	; 0x34
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f005 fbb2 	bl	8005f5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80007fc:	2200      	movs	r2, #0
 80007fe:	601a      	str	r2, [r3, #0]
 8000800:	605a      	str	r2, [r3, #4]
 8000802:	609a      	str	r2, [r3, #8]
 8000804:	60da      	str	r2, [r3, #12]
 8000806:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000808:	f107 030c 	add.w	r3, r7, #12
 800080c:	225c      	movs	r2, #92	; 0x5c
 800080e:	2100      	movs	r1, #0
 8000810:	4618      	mov	r0, r3
 8000812:	f005 fba3 	bl	8005f5c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	60bb      	str	r3, [r7, #8]
 800081a:	4b39      	ldr	r3, [pc, #228]	; (8000900 <SystemClock_Config+0x11c>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a38      	ldr	r2, [pc, #224]	; (8000900 <SystemClock_Config+0x11c>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b36      	ldr	r3, [pc, #216]	; (8000900 <SystemClock_Config+0x11c>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	60bb      	str	r3, [r7, #8]
 8000830:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000832:	2300      	movs	r3, #0
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	4b33      	ldr	r3, [pc, #204]	; (8000904 <SystemClock_Config+0x120>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a32      	ldr	r2, [pc, #200]	; (8000904 <SystemClock_Config+0x120>)
 800083c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000840:	6013      	str	r3, [r2, #0]
 8000842:	4b30      	ldr	r3, [pc, #192]	; (8000904 <SystemClock_Config+0x120>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084e:	2301      	movs	r3, #1
 8000850:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000852:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000856:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800085a:	2302      	movs	r3, #2
 800085c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000860:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000864:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000868:	230f      	movs	r3, #15
 800086a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800086e:	23d8      	movs	r3, #216	; 0xd8
 8000870:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000874:	2302      	movs	r3, #2
 8000876:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 800087a:	2308      	movs	r3, #8
 800087c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000880:	2302      	movs	r3, #2
 8000882:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000886:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800088a:	4618      	mov	r0, r3
 800088c:	f001 fdae 	bl	80023ec <HAL_RCC_OscConfig>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000896:	f000 f837 	bl	8000908 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800089a:	f000 ffb7 	bl	800180c <HAL_PWREx_EnableOverDrive>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008a4:	f000 f830 	bl	8000908 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a8:	230f      	movs	r3, #15
 80008aa:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008ac:	2302      	movs	r3, #2
 80008ae:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b0:	2300      	movs	r3, #0
 80008b2:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008b4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008b8:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008be:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80008c4:	2105      	movs	r1, #5
 80008c6:	4618      	mov	r0, r3
 80008c8:	f000 fff0 	bl	80018ac <HAL_RCC_ClockConfig>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80008d2:	f000 f819 	bl	8000908 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80008d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008da:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 80008dc:	2300      	movs	r3, #0
 80008de:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 80008e0:	2300      	movs	r3, #0
 80008e2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4618      	mov	r0, r3
 80008ea:	f001 f8f9 	bl	8001ae0 <HAL_RCCEx_PeriphCLKConfig>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <SystemClock_Config+0x114>
  {
    Error_Handler();
 80008f4:	f000 f808 	bl	8000908 <Error_Handler>
  }
}
 80008f8:	bf00      	nop
 80008fa:	37b0      	adds	r7, #176	; 0xb0
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40023800 	.word	0x40023800
 8000904:	40007000 	.word	0x40007000

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800090c:	b672      	cpsid	i
}
 800090e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000910:	e7fe      	b.n	8000910 <Error_Handler+0x8>
	...

08000914 <MX_SDIO_SD_Init>:
SD_HandleTypeDef hsd;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000918:	4b0c      	ldr	r3, [pc, #48]	; (800094c <MX_SDIO_SD_Init+0x38>)
 800091a:	4a0d      	ldr	r2, [pc, #52]	; (8000950 <MX_SDIO_SD_Init+0x3c>)
 800091c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800091e:	4b0b      	ldr	r3, [pc, #44]	; (800094c <MX_SDIO_SD_Init+0x38>)
 8000920:	2200      	movs	r2, #0
 8000922:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000924:	4b09      	ldr	r3, [pc, #36]	; (800094c <MX_SDIO_SD_Init+0x38>)
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800092a:	4b08      	ldr	r3, [pc, #32]	; (800094c <MX_SDIO_SD_Init+0x38>)
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000930:	4b06      	ldr	r3, [pc, #24]	; (800094c <MX_SDIO_SD_Init+0x38>)
 8000932:	2200      	movs	r2, #0
 8000934:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <MX_SDIO_SD_Init+0x38>)
 8000938:	2200      	movs	r2, #0
 800093a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800093c:	4b03      	ldr	r3, [pc, #12]	; (800094c <MX_SDIO_SD_Init+0x38>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	20000034 	.word	0x20000034
 8000950:	40012c00 	.word	0x40012c00

08000954 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b08c      	sub	sp, #48	; 0x30
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800095c:	f107 031c 	add.w	r3, r7, #28
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a3f      	ldr	r2, [pc, #252]	; (8000a70 <HAL_SD_MspInit+0x11c>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d178      	bne.n	8000a68 <HAL_SD_MspInit+0x114>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
 800097a:	4b3e      	ldr	r3, [pc, #248]	; (8000a74 <HAL_SD_MspInit+0x120>)
 800097c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097e:	4a3d      	ldr	r2, [pc, #244]	; (8000a74 <HAL_SD_MspInit+0x120>)
 8000980:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000984:	6453      	str	r3, [r2, #68]	; 0x44
 8000986:	4b3b      	ldr	r3, [pc, #236]	; (8000a74 <HAL_SD_MspInit+0x120>)
 8000988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800098a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800098e:	61bb      	str	r3, [r7, #24]
 8000990:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	617b      	str	r3, [r7, #20]
 8000996:	4b37      	ldr	r3, [pc, #220]	; (8000a74 <HAL_SD_MspInit+0x120>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a36      	ldr	r2, [pc, #216]	; (8000a74 <HAL_SD_MspInit+0x120>)
 800099c:	f043 0302 	orr.w	r3, r3, #2
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <HAL_SD_MspInit+0x120>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0302 	and.w	r3, r3, #2
 80009aa:	617b      	str	r3, [r7, #20]
 80009ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	613b      	str	r3, [r7, #16]
 80009b2:	4b30      	ldr	r3, [pc, #192]	; (8000a74 <HAL_SD_MspInit+0x120>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a2f      	ldr	r2, [pc, #188]	; (8000a74 <HAL_SD_MspInit+0x120>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b2d      	ldr	r3, [pc, #180]	; (8000a74 <HAL_SD_MspInit+0x120>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	4b29      	ldr	r3, [pc, #164]	; (8000a74 <HAL_SD_MspInit+0x120>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a28      	ldr	r2, [pc, #160]	; (8000a74 <HAL_SD_MspInit+0x120>)
 80009d4:	f043 0308 	orr.w	r3, r3, #8
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b26      	ldr	r3, [pc, #152]	; (8000a74 <HAL_SD_MspInit+0x120>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0308 	and.w	r3, r3, #8
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PC11     ------> SDIO_D3
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80009e6:	2303      	movs	r3, #3
 80009e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ea:	2302      	movs	r3, #2
 80009ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ee:	2301      	movs	r3, #1
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f2:	2303      	movs	r3, #3
 80009f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80009f6:	230c      	movs	r3, #12
 80009f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009fa:	f107 031c 	add.w	r3, r7, #28
 80009fe:	4619      	mov	r1, r3
 8000a00:	481d      	ldr	r0, [pc, #116]	; (8000a78 <HAL_SD_MspInit+0x124>)
 8000a02:	f000 fd3d 	bl	8001480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a06:	2304      	movs	r3, #4
 8000a08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a12:	2303      	movs	r3, #3
 8000a14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a16:	230c      	movs	r3, #12
 8000a18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4815      	ldr	r0, [pc, #84]	; (8000a78 <HAL_SD_MspInit+0x124>)
 8000a22:	f000 fd2d 	bl	8001480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11;
 8000a26:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8000a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a34:	2303      	movs	r3, #3
 8000a36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a38:	230c      	movs	r3, #12
 8000a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	480e      	ldr	r0, [pc, #56]	; (8000a7c <HAL_SD_MspInit+0x128>)
 8000a44:	f000 fd1c 	bl	8001480 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4c:	2302      	movs	r3, #2
 8000a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a50:	2301      	movs	r3, #1
 8000a52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000a58:	230c      	movs	r3, #12
 8000a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4619      	mov	r1, r3
 8000a62:	4807      	ldr	r0, [pc, #28]	; (8000a80 <HAL_SD_MspInit+0x12c>)
 8000a64:	f000 fd0c 	bl	8001480 <HAL_GPIO_Init>

  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3730      	adds	r7, #48	; 0x30
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}
 8000a70:	40012c00 	.word	0x40012c00
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	40020c00 	.word	0x40020c00

08000a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <HAL_MspInit+0x4c>)
 8000a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a92:	4a0f      	ldr	r2, [pc, #60]	; (8000ad0 <HAL_MspInit+0x4c>)
 8000a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a98:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <HAL_MspInit+0x4c>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa2:	607b      	str	r3, [r7, #4]
 8000aa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	603b      	str	r3, [r7, #0]
 8000aaa:	4b09      	ldr	r3, [pc, #36]	; (8000ad0 <HAL_MspInit+0x4c>)
 8000aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aae:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <HAL_MspInit+0x4c>)
 8000ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000abe:	603b      	str	r3, [r7, #0]
 8000ac0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f000 fac6 	bl	80010b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <UART4_IRQHandler+0x10>)
 8000b2e:	f003 fda5 	bl	800467c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000190 	.word	0x20000190

08000b3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <MX_TIM1_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b092      	sub	sp, #72	; 0x48
 8000b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b66:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
 8000b80:	615a      	str	r2, [r3, #20]
 8000b82:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2220      	movs	r2, #32
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f005 f9e6 	bl	8005f5c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b90:	4b32      	ldr	r3, [pc, #200]	; (8000c5c <MX_TIM1_Init+0xfc>)
 8000b92:	4a33      	ldr	r2, [pc, #204]	; (8000c60 <MX_TIM1_Init+0x100>)
 8000b94:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180;
 8000b96:	4b31      	ldr	r3, [pc, #196]	; (8000c5c <MX_TIM1_Init+0xfc>)
 8000b98:	22b4      	movs	r2, #180	; 0xb4
 8000b9a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b9c:	4b2f      	ldr	r3, [pc, #188]	; (8000c5c <MX_TIM1_Init+0xfc>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000ba2:	4b2e      	ldr	r3, [pc, #184]	; (8000c5c <MX_TIM1_Init+0xfc>)
 8000ba4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000ba8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000baa:	4b2c      	ldr	r3, [pc, #176]	; (8000c5c <MX_TIM1_Init+0xfc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bb0:	4b2a      	ldr	r3, [pc, #168]	; (8000c5c <MX_TIM1_Init+0xfc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000bb6:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <MX_TIM1_Init+0xfc>)
 8000bb8:	2280      	movs	r2, #128	; 0x80
 8000bba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bbc:	4827      	ldr	r0, [pc, #156]	; (8000c5c <MX_TIM1_Init+0xfc>)
 8000bbe:	f003 f889 	bl	8003cd4 <HAL_TIM_PWM_Init>
 8000bc2:	4603      	mov	r3, r0
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d001      	beq.n	8000bcc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000bc8:	f7ff fe9e 	bl	8000908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bd4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bd8:	4619      	mov	r1, r3
 8000bda:	4820      	ldr	r0, [pc, #128]	; (8000c5c <MX_TIM1_Init+0xfc>)
 8000bdc:	f003 fc32 	bl	8004444 <HAL_TIMEx_MasterConfigSynchronization>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d001      	beq.n	8000bea <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000be6:	f7ff fe8f 	bl	8000908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bea:	2360      	movs	r3, #96	; 0x60
 8000bec:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c06:	220c      	movs	r2, #12
 8000c08:	4619      	mov	r1, r3
 8000c0a:	4814      	ldr	r0, [pc, #80]	; (8000c5c <MX_TIM1_Init+0xfc>)
 8000c0c:	f003 f90c 	bl	8003e28 <HAL_TIM_PWM_ConfigChannel>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000c16:	f7ff fe77 	bl	8000908 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c34:	2300      	movs	r3, #0
 8000c36:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4807      	ldr	r0, [pc, #28]	; (8000c5c <MX_TIM1_Init+0xfc>)
 8000c3e:	f003 fc7d 	bl	800453c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000c48:	f7ff fe5e 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c4c:	4803      	ldr	r0, [pc, #12]	; (8000c5c <MX_TIM1_Init+0xfc>)
 8000c4e:	f000 f8d5 	bl	8000dfc <HAL_TIM_MspPostInit>

}
 8000c52:	bf00      	nop
 8000c54:	3748      	adds	r7, #72	; 0x48
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20000100 	.word	0x20000100
 8000c60:	40010000 	.word	0x40010000

08000c64 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c6a:	1d3b      	adds	r3, r7, #4
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
 8000c76:	611a      	str	r2, [r3, #16]
 8000c78:	615a      	str	r2, [r3, #20]
 8000c7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <MX_TIM9_Init+0x84>)
 8000c7e:	4a1b      	ldr	r2, [pc, #108]	; (8000cec <MX_TIM9_Init+0x88>)
 8000c80:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 180;
 8000c82:	4b19      	ldr	r3, [pc, #100]	; (8000ce8 <MX_TIM9_Init+0x84>)
 8000c84:	22b4      	movs	r2, #180	; 0xb4
 8000c86:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c88:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <MX_TIM9_Init+0x84>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1000;
 8000c8e:	4b16      	ldr	r3, [pc, #88]	; (8000ce8 <MX_TIM9_Init+0x84>)
 8000c90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000c94:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c96:	4b14      	ldr	r3, [pc, #80]	; (8000ce8 <MX_TIM9_Init+0x84>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	; (8000ce8 <MX_TIM9_Init+0x84>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000ca2:	4811      	ldr	r0, [pc, #68]	; (8000ce8 <MX_TIM9_Init+0x84>)
 8000ca4:	f003 f816 	bl	8003cd4 <HAL_TIM_PWM_Init>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8000cae:	f7ff fe2b 	bl	8000908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cb2:	2360      	movs	r3, #96	; 0x60
 8000cb4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	2204      	movs	r2, #4
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4807      	ldr	r0, [pc, #28]	; (8000ce8 <MX_TIM9_Init+0x84>)
 8000cca:	f003 f8ad 	bl	8003e28 <HAL_TIM_PWM_ConfigChannel>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8000cd4:	f7ff fe18 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000cd8:	4803      	ldr	r0, [pc, #12]	; (8000ce8 <MX_TIM9_Init+0x84>)
 8000cda:	f000 f88f 	bl	8000dfc <HAL_TIM_MspPostInit>

}
 8000cde:	bf00      	nop
 8000ce0:	3720      	adds	r7, #32
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000148 	.word	0x20000148
 8000cec:	40014000 	.word	0x40014000

08000cf0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000cf4:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <MX_TIM10_Init+0x50>)
 8000cf6:	4a13      	ldr	r2, [pc, #76]	; (8000d44 <MX_TIM10_Init+0x54>)
 8000cf8:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	; (8000d40 <MX_TIM10_Init+0x50>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d00:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <MX_TIM10_Init+0x50>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000d06:	4b0e      	ldr	r3, [pc, #56]	; (8000d40 <MX_TIM10_Init+0x50>)
 8000d08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d0c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <MX_TIM10_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d14:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <MX_TIM10_Init+0x50>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000d1a:	4809      	ldr	r0, [pc, #36]	; (8000d40 <MX_TIM10_Init+0x50>)
 8000d1c:	f002 ff8b 	bl	8003c36 <HAL_TIM_Base_Init>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000d26:	f7ff fdef 	bl	8000908 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim10, TIM_OPMODE_SINGLE) != HAL_OK)
 8000d2a:	2108      	movs	r1, #8
 8000d2c:	4804      	ldr	r0, [pc, #16]	; (8000d40 <MX_TIM10_Init+0x50>)
 8000d2e:	f003 f820 	bl	8003d72 <HAL_TIM_OnePulse_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8000d38:	f7ff fde6 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000d3c:	bf00      	nop
 8000d3e:	bd80      	pop	{r7, pc}
 8000d40:	200000b8 	.word	0x200000b8
 8000d44:	40014400 	.word	0x40014400

08000d48 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b085      	sub	sp, #20
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	4a15      	ldr	r2, [pc, #84]	; (8000dac <HAL_TIM_PWM_MspInit+0x64>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d10e      	bne.n	8000d78 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b14      	ldr	r3, [pc, #80]	; (8000db0 <HAL_TIM_PWM_MspInit+0x68>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a13      	ldr	r2, [pc, #76]	; (8000db0 <HAL_TIM_PWM_MspInit+0x68>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <HAL_TIM_PWM_MspInit+0x68>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM9_CLK_ENABLE();
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8000d76:	e012      	b.n	8000d9e <HAL_TIM_PWM_MspInit+0x56>
  else if(tim_pwmHandle->Instance==TIM9)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a0d      	ldr	r2, [pc, #52]	; (8000db4 <HAL_TIM_PWM_MspInit+0x6c>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d10d      	bne.n	8000d9e <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60bb      	str	r3, [r7, #8]
 8000d86:	4b0a      	ldr	r3, [pc, #40]	; (8000db0 <HAL_TIM_PWM_MspInit+0x68>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	4a09      	ldr	r2, [pc, #36]	; (8000db0 <HAL_TIM_PWM_MspInit+0x68>)
 8000d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d90:	6453      	str	r3, [r2, #68]	; 0x44
 8000d92:	4b07      	ldr	r3, [pc, #28]	; (8000db0 <HAL_TIM_PWM_MspInit+0x68>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d9a:	60bb      	str	r3, [r7, #8]
 8000d9c:	68bb      	ldr	r3, [r7, #8]
}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop
 8000dac:	40010000 	.word	0x40010000
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40014000 	.word	0x40014000

08000db8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM10)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <HAL_TIM_Base_MspInit+0x3c>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d10d      	bne.n	8000de6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM10_MspInit 0 */

  /* USER CODE END TIM10_MspInit 0 */
    /* TIM10 clock enable */
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000dca:	2300      	movs	r3, #0
 8000dcc:	60fb      	str	r3, [r7, #12]
 8000dce:	4b0a      	ldr	r3, [pc, #40]	; (8000df8 <HAL_TIM_Base_MspInit+0x40>)
 8000dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dd2:	4a09      	ldr	r2, [pc, #36]	; (8000df8 <HAL_TIM_Base_MspInit+0x40>)
 8000dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dda:	4b07      	ldr	r3, [pc, #28]	; (8000df8 <HAL_TIM_Base_MspInit+0x40>)
 8000ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8000de6:	bf00      	nop
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40014400 	.word	0x40014400
 8000df8:	40023800 	.word	0x40023800

08000dfc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	; 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a24      	ldr	r2, [pc, #144]	; (8000eac <HAL_TIM_MspPostInit+0xb0>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d11f      	bne.n	8000e5e <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <HAL_TIM_MspPostInit+0xb4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a22      	ldr	r2, [pc, #136]	; (8000eb0 <HAL_TIM_MspPostInit+0xb4>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <HAL_TIM_MspPostInit+0xb4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 8000e3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	2302      	movs	r3, #2
 8000e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	4619      	mov	r1, r3
 8000e56:	4817      	ldr	r0, [pc, #92]	; (8000eb4 <HAL_TIM_MspPostInit+0xb8>)
 8000e58:	f000 fb12 	bl	8001480 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8000e5c:	e022      	b.n	8000ea4 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM9)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4a15      	ldr	r2, [pc, #84]	; (8000eb8 <HAL_TIM_MspPostInit+0xbc>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d11d      	bne.n	8000ea4 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	4b10      	ldr	r3, [pc, #64]	; (8000eb0 <HAL_TIM_MspPostInit+0xb4>)
 8000e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e70:	4a0f      	ldr	r2, [pc, #60]	; (8000eb0 <HAL_TIM_MspPostInit+0xb4>)
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	6313      	str	r3, [r2, #48]	; 0x30
 8000e78:	4b0d      	ldr	r3, [pc, #52]	; (8000eb0 <HAL_TIM_MspPostInit+0xb4>)
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f003 0310 	and.w	r3, r3, #16
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 8000e84:	2340      	movs	r3, #64	; 0x40
 8000e86:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8000e94:	2303      	movs	r3, #3
 8000e96:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8000e98:	f107 0314 	add.w	r3, r7, #20
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4807      	ldr	r0, [pc, #28]	; (8000ebc <HAL_TIM_MspPostInit+0xc0>)
 8000ea0:	f000 faee 	bl	8001480 <HAL_GPIO_Init>
}
 8000ea4:	bf00      	nop
 8000ea6:	3728      	adds	r7, #40	; 0x28
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}
 8000eac:	40010000 	.word	0x40010000
 8000eb0:	40023800 	.word	0x40023800
 8000eb4:	40020000 	.word	0x40020000
 8000eb8:	40014000 	.word	0x40014000
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	; (8000f0c <MX_UART4_Init+0x4c>)
 8000ec6:	4a12      	ldr	r2, [pc, #72]	; (8000f10 <MX_UART4_Init+0x50>)
 8000ec8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 250000;
 8000eca:	4b10      	ldr	r3, [pc, #64]	; (8000f0c <MX_UART4_Init+0x4c>)
 8000ecc:	4a11      	ldr	r2, [pc, #68]	; (8000f14 <MX_UART4_Init+0x54>)
 8000ece:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ed0:	4b0e      	ldr	r3, [pc, #56]	; (8000f0c <MX_UART4_Init+0x4c>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8000ed6:	4b0d      	ldr	r3, [pc, #52]	; (8000f0c <MX_UART4_Init+0x4c>)
 8000ed8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000edc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	; (8000f0c <MX_UART4_Init+0x4c>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <MX_UART4_Init+0x4c>)
 8000ee6:	220c      	movs	r2, #12
 8000ee8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	; (8000f0c <MX_UART4_Init+0x4c>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <MX_UART4_Init+0x4c>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_UART4_Init+0x4c>)
 8000ef8:	f003 fb72 	bl	80045e0 <HAL_UART_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000f02:	f7ff fd01 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000190 	.word	0x20000190
 8000f10:	40004c00 	.word	0x40004c00
 8000f14:	0003d090 	.word	0x0003d090

08000f18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08a      	sub	sp, #40	; 0x28
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0314 	add.w	r3, r7, #20
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a1d      	ldr	r2, [pc, #116]	; (8000fac <HAL_UART_MspInit+0x94>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d133      	bne.n	8000fa2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	613b      	str	r3, [r7, #16]
 8000f3e:	4b1c      	ldr	r3, [pc, #112]	; (8000fb0 <HAL_UART_MspInit+0x98>)
 8000f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f42:	4a1b      	ldr	r2, [pc, #108]	; (8000fb0 <HAL_UART_MspInit+0x98>)
 8000f44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f48:	6413      	str	r3, [r2, #64]	; 0x40
 8000f4a:	4b19      	ldr	r3, [pc, #100]	; (8000fb0 <HAL_UART_MspInit+0x98>)
 8000f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000f52:	613b      	str	r3, [r7, #16]
 8000f54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_UART_MspInit+0x98>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <HAL_UART_MspInit+0x98>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	; 0x30
 8000f66:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <HAL_UART_MspInit+0x98>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	60fb      	str	r3, [r7, #12]
 8000f70:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = DMX_TX_Pin|DMX_RX_Pin;
 8000f72:	2303      	movs	r3, #3
 8000f74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f76:	2302      	movs	r3, #2
 8000f78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000f82:	2308      	movs	r3, #8
 8000f84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4809      	ldr	r0, [pc, #36]	; (8000fb4 <HAL_UART_MspInit+0x9c>)
 8000f8e:	f000 fa77 	bl	8001480 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000f92:	2200      	movs	r2, #0
 8000f94:	2100      	movs	r1, #0
 8000f96:	2034      	movs	r0, #52	; 0x34
 8000f98:	f000 f9a9 	bl	80012ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000f9c:	2034      	movs	r0, #52	; 0x34
 8000f9e:	f000 f9c2 	bl	8001326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40004c00 	.word	0x40004c00
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40020000 	.word	0x40020000

08000fb8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fb8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fbc:	480d      	ldr	r0, [pc, #52]	; (8000ff4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fbe:	490e      	ldr	r1, [pc, #56]	; (8000ff8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fc0:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc4:	e002      	b.n	8000fcc <LoopCopyDataInit>

08000fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fca:	3304      	adds	r3, #4

08000fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd0:	d3f9      	bcc.n	8000fc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd2:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd4:	4c0b      	ldr	r4, [pc, #44]	; (8001004 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fd8:	e001      	b.n	8000fde <LoopFillZerobss>

08000fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fdc:	3204      	adds	r2, #4

08000fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe0:	d3fb      	bcc.n	8000fda <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fe2:	f7ff fdab 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fe6:	f004 ff95 	bl	8005f14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fea:	f7ff fbe5 	bl	80007b8 <main>
  bx  lr    
 8000fee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ff0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ffc:	08005fc0 	.word	0x08005fc0
  ldr r2, =_sbss
 8001000:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001004:	20000640 	.word	0x20000640

08001008 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC_IRQHandler>
	...

0800100c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001010:	4b0e      	ldr	r3, [pc, #56]	; (800104c <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0d      	ldr	r2, [pc, #52]	; (800104c <HAL_Init+0x40>)
 8001016:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800101c:	4b0b      	ldr	r3, [pc, #44]	; (800104c <HAL_Init+0x40>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a0a      	ldr	r2, [pc, #40]	; (800104c <HAL_Init+0x40>)
 8001022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001026:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <HAL_Init+0x40>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a07      	ldr	r2, [pc, #28]	; (800104c <HAL_Init+0x40>)
 800102e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001032:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001034:	2003      	movs	r0, #3
 8001036:	f000 f94f 	bl	80012d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103a:	2000      	movs	r0, #0
 800103c:	f000 f808 	bl	8001050 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001040:	f7ff fd20 	bl	8000a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	40023c00 	.word	0x40023c00

08001050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_InitTick+0x54>)
 800105a:	681a      	ldr	r2, [r3, #0]
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x58>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	4619      	mov	r1, r3
 8001062:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001066:	fbb3 f3f1 	udiv	r3, r3, r1
 800106a:	fbb2 f3f3 	udiv	r3, r2, r3
 800106e:	4618      	mov	r0, r3
 8001070:	f000 f967 	bl	8001342 <HAL_SYSTICK_Config>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e00e      	b.n	800109c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2b0f      	cmp	r3, #15
 8001082:	d80a      	bhi.n	800109a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001084:	2200      	movs	r2, #0
 8001086:	6879      	ldr	r1, [r7, #4]
 8001088:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800108c:	f000 f92f 	bl	80012ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001090:	4a06      	ldr	r2, [pc, #24]	; (80010ac <HAL_InitTick+0x5c>)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001096:	2300      	movs	r3, #0
 8001098:	e000      	b.n	800109c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109a:	2301      	movs	r3, #1
}
 800109c:	4618      	mov	r0, r3
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000000 	.word	0x20000000
 80010a8:	20000008 	.word	0x20000008
 80010ac:	20000004 	.word	0x20000004

080010b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b4:	4b06      	ldr	r3, [pc, #24]	; (80010d0 <HAL_IncTick+0x20>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	461a      	mov	r2, r3
 80010ba:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x24>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	4413      	add	r3, r2
 80010c0:	4a04      	ldr	r2, [pc, #16]	; (80010d4 <HAL_IncTick+0x24>)
 80010c2:	6013      	str	r3, [r2, #0]
}
 80010c4:	bf00      	nop
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	20000008 	.word	0x20000008
 80010d4:	200001d4 	.word	0x200001d4

080010d8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  return uwTick;
 80010dc:	4b03      	ldr	r3, [pc, #12]	; (80010ec <HAL_GetTick+0x14>)
 80010de:	681b      	ldr	r3, [r3, #0]
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	200001d4 	.word	0x200001d4

080010f0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f8:	f7ff ffee 	bl	80010d8 <HAL_GetTick>
 80010fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001108:	d005      	beq.n	8001116 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110a:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <HAL_Delay+0x44>)
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001116:	bf00      	nop
 8001118:	f7ff ffde 	bl	80010d8 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	68bb      	ldr	r3, [r7, #8]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	429a      	cmp	r2, r3
 8001126:	d8f7      	bhi.n	8001118 <HAL_Delay+0x28>
  {
  }
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000008 	.word	0x20000008

08001138 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001154:	4013      	ands	r3, r2
 8001156:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001160:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001164:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116a:	4a04      	ldr	r2, [pc, #16]	; (800117c <__NVIC_SetPriorityGrouping+0x44>)
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	60d3      	str	r3, [r2, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000ed00 	.word	0xe000ed00

08001180 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <__NVIC_GetPriorityGrouping+0x18>)
 8001186:	68db      	ldr	r3, [r3, #12]
 8001188:	0a1b      	lsrs	r3, r3, #8
 800118a:	f003 0307 	and.w	r3, r3, #7
}
 800118e:	4618      	mov	r0, r3
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr
 8001198:	e000ed00 	.word	0xe000ed00

0800119c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	db0b      	blt.n	80011c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	f003 021f 	and.w	r2, r3, #31
 80011b4:	4907      	ldr	r1, [pc, #28]	; (80011d4 <__NVIC_EnableIRQ+0x38>)
 80011b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ba:	095b      	lsrs	r3, r3, #5
 80011bc:	2001      	movs	r0, #1
 80011be:	fa00 f202 	lsl.w	r2, r0, r2
 80011c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000e100 	.word	0xe000e100

080011d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	4603      	mov	r3, r0
 80011e0:	6039      	str	r1, [r7, #0]
 80011e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	db0a      	blt.n	8001202 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	b2da      	uxtb	r2, r3
 80011f0:	490c      	ldr	r1, [pc, #48]	; (8001224 <__NVIC_SetPriority+0x4c>)
 80011f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011f6:	0112      	lsls	r2, r2, #4
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	440b      	add	r3, r1
 80011fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001200:	e00a      	b.n	8001218 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	b2da      	uxtb	r2, r3
 8001206:	4908      	ldr	r1, [pc, #32]	; (8001228 <__NVIC_SetPriority+0x50>)
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	f003 030f 	and.w	r3, r3, #15
 800120e:	3b04      	subs	r3, #4
 8001210:	0112      	lsls	r2, r2, #4
 8001212:	b2d2      	uxtb	r2, r2
 8001214:	440b      	add	r3, r1
 8001216:	761a      	strb	r2, [r3, #24]
}
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000e100 	.word	0xe000e100
 8001228:	e000ed00 	.word	0xe000ed00

0800122c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800122c:	b480      	push	{r7}
 800122e:	b089      	sub	sp, #36	; 0x24
 8001230:	af00      	add	r7, sp, #0
 8001232:	60f8      	str	r0, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	f1c3 0307 	rsb	r3, r3, #7
 8001246:	2b04      	cmp	r3, #4
 8001248:	bf28      	it	cs
 800124a:	2304      	movcs	r3, #4
 800124c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3304      	adds	r3, #4
 8001252:	2b06      	cmp	r3, #6
 8001254:	d902      	bls.n	800125c <NVIC_EncodePriority+0x30>
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	3b03      	subs	r3, #3
 800125a:	e000      	b.n	800125e <NVIC_EncodePriority+0x32>
 800125c:	2300      	movs	r3, #0
 800125e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001260:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43da      	mvns	r2, r3
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	401a      	ands	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001274:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	fa01 f303 	lsl.w	r3, r1, r3
 800127e:	43d9      	mvns	r1, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001284:	4313      	orrs	r3, r2
         );
}
 8001286:	4618      	mov	r0, r3
 8001288:	3724      	adds	r7, #36	; 0x24
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
	...

08001294 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3b01      	subs	r3, #1
 80012a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a4:	d301      	bcc.n	80012aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012a6:	2301      	movs	r3, #1
 80012a8:	e00f      	b.n	80012ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012aa:	4a0a      	ldr	r2, [pc, #40]	; (80012d4 <SysTick_Config+0x40>)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b2:	210f      	movs	r1, #15
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012b8:	f7ff ff8e 	bl	80011d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <SysTick_Config+0x40>)
 80012be:	2200      	movs	r2, #0
 80012c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c2:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <SysTick_Config+0x40>)
 80012c4:	2207      	movs	r2, #7
 80012c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	e000e010 	.word	0xe000e010

080012d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f7ff ff29 	bl	8001138 <__NVIC_SetPriorityGrouping>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	4603      	mov	r3, r0
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
 80012fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001300:	f7ff ff3e 	bl	8001180 <__NVIC_GetPriorityGrouping>
 8001304:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001306:	687a      	ldr	r2, [r7, #4]
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	6978      	ldr	r0, [r7, #20]
 800130c:	f7ff ff8e 	bl	800122c <NVIC_EncodePriority>
 8001310:	4602      	mov	r2, r0
 8001312:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f7ff ff5d 	bl	80011d8 <__NVIC_SetPriority>
}
 800131e:	bf00      	nop
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ff31 	bl	800119c <__NVIC_EnableIRQ>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}

08001342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b082      	sub	sp, #8
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f7ff ffa2 	bl	8001294 <SysTick_Config>
 8001350:	4603      	mov	r3, r0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b084      	sub	sp, #16
 800135e:	af00      	add	r7, sp, #0
 8001360:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001366:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001368:	f7ff feb6 	bl	80010d8 <HAL_GetTick>
 800136c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b02      	cmp	r3, #2
 8001378:	d008      	beq.n	800138c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2280      	movs	r2, #128	; 0x80
 800137e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2200      	movs	r2, #0
 8001384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e052      	b.n	8001432 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0216 	bic.w	r2, r2, #22
 800139a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	695a      	ldr	r2, [r3, #20]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013aa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d103      	bne.n	80013bc <HAL_DMA_Abort+0x62>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d007      	beq.n	80013cc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f022 0208 	bic.w	r2, r2, #8
 80013ca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f022 0201 	bic.w	r2, r2, #1
 80013da:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013dc:	e013      	b.n	8001406 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80013de:	f7ff fe7b 	bl	80010d8 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b05      	cmp	r3, #5
 80013ea:	d90c      	bls.n	8001406 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2220      	movs	r2, #32
 80013f0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2203      	movs	r2, #3
 80013fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001402:	2303      	movs	r3, #3
 8001404:	e015      	b.n	8001432 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1e4      	bne.n	80013de <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001418:	223f      	movs	r2, #63	; 0x3f
 800141a:	409a      	lsls	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2201      	movs	r2, #1
 800142c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b02      	cmp	r3, #2
 800144c:	d004      	beq.n	8001458 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2280      	movs	r2, #128	; 0x80
 8001452:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e00c      	b.n	8001472 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	2205      	movs	r2, #5
 800145c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f022 0201 	bic.w	r2, r2, #1
 800146e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001470:	2300      	movs	r3, #0
}
 8001472:	4618      	mov	r0, r3
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
	...

08001480 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	; 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800148e:	2300      	movs	r3, #0
 8001490:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
 800149a:	e165      	b.n	8001768 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800149c:	2201      	movs	r2, #1
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	fa02 f303 	lsl.w	r3, r2, r3
 80014a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	f040 8154 	bne.w	8001762 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	f003 0303 	and.w	r3, r3, #3
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d005      	beq.n	80014d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d130      	bne.n	8001534 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014d8:	69fb      	ldr	r3, [r7, #28]
 80014da:	005b      	lsls	r3, r3, #1
 80014dc:	2203      	movs	r2, #3
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	68da      	ldr	r2, [r3, #12]
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	fa02 f303 	lsl.w	r3, r2, r3
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	4313      	orrs	r3, r2
 80014fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001508:	2201      	movs	r2, #1
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	091b      	lsrs	r3, r3, #4
 800151e:	f003 0201 	and.w	r2, r3, #1
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	4313      	orrs	r3, r2
 800152c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	f003 0303 	and.w	r3, r3, #3
 800153c:	2b03      	cmp	r3, #3
 800153e:	d017      	beq.n	8001570 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	2203      	movs	r2, #3
 800154c:	fa02 f303 	lsl.w	r3, r2, r3
 8001550:	43db      	mvns	r3, r3
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	4013      	ands	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	69fb      	ldr	r3, [r7, #28]
 800155e:	005b      	lsls	r3, r3, #1
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	69ba      	ldr	r2, [r7, #24]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f003 0303 	and.w	r3, r3, #3
 8001578:	2b02      	cmp	r3, #2
 800157a:	d123      	bne.n	80015c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	08da      	lsrs	r2, r3, #3
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	3208      	adds	r2, #8
 8001584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001588:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	f003 0307 	and.w	r3, r3, #7
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	220f      	movs	r2, #15
 8001594:	fa02 f303 	lsl.w	r3, r2, r3
 8001598:	43db      	mvns	r3, r3
 800159a:	69ba      	ldr	r2, [r7, #24]
 800159c:	4013      	ands	r3, r2
 800159e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	691a      	ldr	r2, [r3, #16]
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	fa02 f303 	lsl.w	r3, r2, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	08da      	lsrs	r2, r3, #3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3208      	adds	r2, #8
 80015be:	69b9      	ldr	r1, [r7, #24]
 80015c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	2203      	movs	r2, #3
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0203 	and.w	r2, r3, #3
 80015e4:	69fb      	ldr	r3, [r7, #28]
 80015e6:	005b      	lsls	r3, r3, #1
 80015e8:	fa02 f303 	lsl.w	r3, r2, r3
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	4313      	orrs	r3, r2
 80015f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	69ba      	ldr	r2, [r7, #24]
 80015f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001600:	2b00      	cmp	r3, #0
 8001602:	f000 80ae 	beq.w	8001762 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b5d      	ldr	r3, [pc, #372]	; (8001780 <HAL_GPIO_Init+0x300>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	4a5c      	ldr	r2, [pc, #368]	; (8001780 <HAL_GPIO_Init+0x300>)
 8001610:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001614:	6453      	str	r3, [r2, #68]	; 0x44
 8001616:	4b5a      	ldr	r3, [pc, #360]	; (8001780 <HAL_GPIO_Init+0x300>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001622:	4a58      	ldr	r2, [pc, #352]	; (8001784 <HAL_GPIO_Init+0x304>)
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	089b      	lsrs	r3, r3, #2
 8001628:	3302      	adds	r3, #2
 800162a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	220f      	movs	r2, #15
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a4f      	ldr	r2, [pc, #316]	; (8001788 <HAL_GPIO_Init+0x308>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d025      	beq.n	800169a <HAL_GPIO_Init+0x21a>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a4e      	ldr	r2, [pc, #312]	; (800178c <HAL_GPIO_Init+0x30c>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d01f      	beq.n	8001696 <HAL_GPIO_Init+0x216>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a4d      	ldr	r2, [pc, #308]	; (8001790 <HAL_GPIO_Init+0x310>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d019      	beq.n	8001692 <HAL_GPIO_Init+0x212>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a4c      	ldr	r2, [pc, #304]	; (8001794 <HAL_GPIO_Init+0x314>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d013      	beq.n	800168e <HAL_GPIO_Init+0x20e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4b      	ldr	r2, [pc, #300]	; (8001798 <HAL_GPIO_Init+0x318>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d00d      	beq.n	800168a <HAL_GPIO_Init+0x20a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a4a      	ldr	r2, [pc, #296]	; (800179c <HAL_GPIO_Init+0x31c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d007      	beq.n	8001686 <HAL_GPIO_Init+0x206>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a49      	ldr	r2, [pc, #292]	; (80017a0 <HAL_GPIO_Init+0x320>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d101      	bne.n	8001682 <HAL_GPIO_Init+0x202>
 800167e:	2306      	movs	r3, #6
 8001680:	e00c      	b.n	800169c <HAL_GPIO_Init+0x21c>
 8001682:	2307      	movs	r3, #7
 8001684:	e00a      	b.n	800169c <HAL_GPIO_Init+0x21c>
 8001686:	2305      	movs	r3, #5
 8001688:	e008      	b.n	800169c <HAL_GPIO_Init+0x21c>
 800168a:	2304      	movs	r3, #4
 800168c:	e006      	b.n	800169c <HAL_GPIO_Init+0x21c>
 800168e:	2303      	movs	r3, #3
 8001690:	e004      	b.n	800169c <HAL_GPIO_Init+0x21c>
 8001692:	2302      	movs	r3, #2
 8001694:	e002      	b.n	800169c <HAL_GPIO_Init+0x21c>
 8001696:	2301      	movs	r3, #1
 8001698:	e000      	b.n	800169c <HAL_GPIO_Init+0x21c>
 800169a:	2300      	movs	r3, #0
 800169c:	69fa      	ldr	r2, [r7, #28]
 800169e:	f002 0203 	and.w	r2, r2, #3
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	4093      	lsls	r3, r2
 80016a6:	69ba      	ldr	r2, [r7, #24]
 80016a8:	4313      	orrs	r3, r2
 80016aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016ac:	4935      	ldr	r1, [pc, #212]	; (8001784 <HAL_GPIO_Init+0x304>)
 80016ae:	69fb      	ldr	r3, [r7, #28]
 80016b0:	089b      	lsrs	r3, r3, #2
 80016b2:	3302      	adds	r3, #2
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016ba:	4b3a      	ldr	r3, [pc, #232]	; (80017a4 <HAL_GPIO_Init+0x324>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	43db      	mvns	r3, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4013      	ands	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016ca:	683b      	ldr	r3, [r7, #0]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d003      	beq.n	80016de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80016de:	4a31      	ldr	r2, [pc, #196]	; (80017a4 <HAL_GPIO_Init+0x324>)
 80016e0:	69bb      	ldr	r3, [r7, #24]
 80016e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80016e4:	4b2f      	ldr	r3, [pc, #188]	; (80017a4 <HAL_GPIO_Init+0x324>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	43db      	mvns	r3, r3
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	4013      	ands	r3, r2
 80016f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d003      	beq.n	8001708 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001708:	4a26      	ldr	r2, [pc, #152]	; (80017a4 <HAL_GPIO_Init+0x324>)
 800170a:	69bb      	ldr	r3, [r7, #24]
 800170c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800170e:	4b25      	ldr	r3, [pc, #148]	; (80017a4 <HAL_GPIO_Init+0x324>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d003      	beq.n	8001732 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001732:	4a1c      	ldr	r2, [pc, #112]	; (80017a4 <HAL_GPIO_Init+0x324>)
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001738:	4b1a      	ldr	r3, [pc, #104]	; (80017a4 <HAL_GPIO_Init+0x324>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d003      	beq.n	800175c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	4313      	orrs	r3, r2
 800175a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800175c:	4a11      	ldr	r2, [pc, #68]	; (80017a4 <HAL_GPIO_Init+0x324>)
 800175e:	69bb      	ldr	r3, [r7, #24]
 8001760:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	3301      	adds	r3, #1
 8001766:	61fb      	str	r3, [r7, #28]
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	2b0f      	cmp	r3, #15
 800176c:	f67f ae96 	bls.w	800149c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	3724      	adds	r7, #36	; 0x24
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	40023800 	.word	0x40023800
 8001784:	40013800 	.word	0x40013800
 8001788:	40020000 	.word	0x40020000
 800178c:	40020400 	.word	0x40020400
 8001790:	40020800 	.word	0x40020800
 8001794:	40020c00 	.word	0x40020c00
 8001798:	40021000 	.word	0x40021000
 800179c:	40021400 	.word	0x40021400
 80017a0:	40021800 	.word	0x40021800
 80017a4:	40013c00 	.word	0x40013c00

080017a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691a      	ldr	r2, [r3, #16]
 80017b8:	887b      	ldrh	r3, [r7, #2]
 80017ba:	4013      	ands	r3, r2
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d002      	beq.n	80017c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80017c0:	2301      	movs	r3, #1
 80017c2:	73fb      	strb	r3, [r7, #15]
 80017c4:	e001      	b.n	80017ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80017c6:	2300      	movs	r3, #0
 80017c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80017ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	3714      	adds	r7, #20
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	807b      	strh	r3, [r7, #2]
 80017e4:	4613      	mov	r3, r2
 80017e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017e8:	787b      	ldrb	r3, [r7, #1]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d003      	beq.n	80017f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ee:	887a      	ldrh	r2, [r7, #2]
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017f4:	e003      	b.n	80017fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017f6:	887b      	ldrh	r3, [r7, #2]
 80017f8:	041a      	lsls	r2, r3, #16
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	619a      	str	r2, [r3, #24]
}
 80017fe:	bf00      	nop
 8001800:	370c      	adds	r7, #12
 8001802:	46bd      	mov	sp, r7
 8001804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001808:	4770      	bx	lr
	...

0800180c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b082      	sub	sp, #8
 8001810:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	4b20      	ldr	r3, [pc, #128]	; (800189c <HAL_PWREx_EnableOverDrive+0x90>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	4a1f      	ldr	r2, [pc, #124]	; (800189c <HAL_PWREx_EnableOverDrive+0x90>)
 8001820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001824:	6413      	str	r3, [r2, #64]	; 0x40
 8001826:	4b1d      	ldr	r3, [pc, #116]	; (800189c <HAL_PWREx_EnableOverDrive+0x90>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800182e:	603b      	str	r3, [r7, #0]
 8001830:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001832:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001834:	2201      	movs	r2, #1
 8001836:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001838:	f7ff fc4e 	bl	80010d8 <HAL_GetTick>
 800183c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800183e:	e009      	b.n	8001854 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001840:	f7ff fc4a 	bl	80010d8 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800184e:	d901      	bls.n	8001854 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e01f      	b.n	8001894 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001854:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800185c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001860:	d1ee      	bne.n	8001840 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001862:	4b11      	ldr	r3, [pc, #68]	; (80018a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001864:	2201      	movs	r2, #1
 8001866:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001868:	f7ff fc36 	bl	80010d8 <HAL_GetTick>
 800186c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800186e:	e009      	b.n	8001884 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001870:	f7ff fc32 	bl	80010d8 <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800187e:	d901      	bls.n	8001884 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e007      	b.n	8001894 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001884:	4b07      	ldr	r3, [pc, #28]	; (80018a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001890:	d1ee      	bne.n	8001870 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001892:	2300      	movs	r3, #0
}
 8001894:	4618      	mov	r0, r3
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}
 800189c:	40023800 	.word	0x40023800
 80018a0:	420e0040 	.word	0x420e0040
 80018a4:	40007000 	.word	0x40007000
 80018a8:	420e0044 	.word	0x420e0044

080018ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e0cc      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018c0:	4b68      	ldr	r3, [pc, #416]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f003 030f 	and.w	r3, r3, #15
 80018c8:	683a      	ldr	r2, [r7, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d90c      	bls.n	80018e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ce:	4b65      	ldr	r3, [pc, #404]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80018d0:	683a      	ldr	r2, [r7, #0]
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018d6:	4b63      	ldr	r3, [pc, #396]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 030f 	and.w	r3, r3, #15
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d001      	beq.n	80018e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e0b8      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0302 	and.w	r3, r3, #2
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d020      	beq.n	8001936 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d005      	beq.n	800190c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001900:	4b59      	ldr	r3, [pc, #356]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	4a58      	ldr	r2, [pc, #352]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800190a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f003 0308 	and.w	r3, r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001918:	4b53      	ldr	r3, [pc, #332]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	4a52      	ldr	r2, [pc, #328]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001922:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001924:	4b50      	ldr	r3, [pc, #320]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	494d      	ldr	r1, [pc, #308]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001932:	4313      	orrs	r3, r2
 8001934:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d044      	beq.n	80019cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d107      	bne.n	800195a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194a:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d119      	bne.n	800198a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e07f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	2b02      	cmp	r3, #2
 8001960:	d003      	beq.n	800196a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001966:	2b03      	cmp	r3, #3
 8001968:	d107      	bne.n	800197a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196a:	4b3f      	ldr	r3, [pc, #252]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e06f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197a:	4b3b      	ldr	r3, [pc, #236]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f003 0302 	and.w	r3, r3, #2
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e067      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800198a:	4b37      	ldr	r3, [pc, #220]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f023 0203 	bic.w	r2, r3, #3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	4934      	ldr	r1, [pc, #208]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001998:	4313      	orrs	r3, r2
 800199a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800199c:	f7ff fb9c 	bl	80010d8 <HAL_GetTick>
 80019a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a2:	e00a      	b.n	80019ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a4:	f7ff fb98 	bl	80010d8 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e04f      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019ba:	4b2b      	ldr	r3, [pc, #172]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f003 020c 	and.w	r2, r3, #12
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d1eb      	bne.n	80019a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f003 030f 	and.w	r3, r3, #15
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d20c      	bcs.n	80019f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019da:	4b22      	ldr	r3, [pc, #136]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80019dc:	683a      	ldr	r2, [r7, #0]
 80019de:	b2d2      	uxtb	r2, r2
 80019e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e2:	4b20      	ldr	r3, [pc, #128]	; (8001a64 <HAL_RCC_ClockConfig+0x1b8>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d001      	beq.n	80019f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e032      	b.n	8001a5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d008      	beq.n	8001a12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a00:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
 8001a0c:	4916      	ldr	r1, [pc, #88]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f003 0308 	and.w	r3, r3, #8
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a1e:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	691b      	ldr	r3, [r3, #16]
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	490e      	ldr	r1, [pc, #56]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a32:	f000 fb7f 	bl	8002134 <HAL_RCC_GetSysClockFreq>
 8001a36:	4602      	mov	r2, r0
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_ClockConfig+0x1bc>)
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	091b      	lsrs	r3, r3, #4
 8001a3e:	f003 030f 	and.w	r3, r3, #15
 8001a42:	490a      	ldr	r1, [pc, #40]	; (8001a6c <HAL_RCC_ClockConfig+0x1c0>)
 8001a44:	5ccb      	ldrb	r3, [r1, r3]
 8001a46:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4a:	4a09      	ldr	r2, [pc, #36]	; (8001a70 <HAL_RCC_ClockConfig+0x1c4>)
 8001a4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_RCC_ClockConfig+0x1c8>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7ff fafc 	bl	8001050 <HAL_InitTick>

  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	40023c00 	.word	0x40023c00
 8001a68:	40023800 	.word	0x40023800
 8001a6c:	08005f84 	.word	0x08005f84
 8001a70:	20000000 	.word	0x20000000
 8001a74:	20000004 	.word	0x20000004

08001a78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	; (8001a8c <HAL_RCC_GetHCLKFreq+0x14>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr
 8001a8a:	bf00      	nop
 8001a8c:	20000000 	.word	0x20000000

08001a90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001a94:	f7ff fff0 	bl	8001a78 <HAL_RCC_GetHCLKFreq>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	0a9b      	lsrs	r3, r3, #10
 8001aa0:	f003 0307 	and.w	r3, r3, #7
 8001aa4:	4903      	ldr	r1, [pc, #12]	; (8001ab4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa6:	5ccb      	ldrb	r3, [r1, r3]
 8001aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	bd80      	pop	{r7, pc}
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	08005f94 	.word	0x08005f94

08001ab8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001abc:	f7ff ffdc 	bl	8001a78 <HAL_RCC_GetHCLKFreq>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	0b5b      	lsrs	r3, r3, #13
 8001ac8:	f003 0307 	and.w	r3, r3, #7
 8001acc:	4903      	ldr	r1, [pc, #12]	; (8001adc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ace:	5ccb      	ldrb	r3, [r1, r3]
 8001ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	bd80      	pop	{r7, pc}
 8001ad8:	40023800 	.word	0x40023800
 8001adc:	08005f94 	.word	0x08005f94

08001ae0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b08c      	sub	sp, #48	; 0x30
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8001af0:	2300      	movs	r3, #0
 8001af2:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d010      	beq.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8001b18:	4b6f      	ldr	r3, [pc, #444]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b1e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b26:	496c      	ldr	r1, [pc, #432]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d101      	bne.n	8001b3a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8001b36:	2301      	movs	r3, #1
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0302 	and.w	r3, r3, #2
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d010      	beq.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8001b46:	4b64      	ldr	r3, [pc, #400]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b4c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b54:	4960      	ldr	r1, [pc, #384]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b56:	4313      	orrs	r3, r2
 8001b58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d101      	bne.n	8001b68 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8001b64:	2301      	movs	r3, #1
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	f003 0304 	and.w	r3, r3, #4
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d017      	beq.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b74:	4b58      	ldr	r3, [pc, #352]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	4955      	ldr	r1, [pc, #340]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b92:	d101      	bne.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8001b94:	2301      	movs	r3, #1
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d101      	bne.n	8001ba4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0308 	and.w	r3, r3, #8
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d017      	beq.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001bb0:	4b49      	ldr	r3, [pc, #292]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bb6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bbe:	4946      	ldr	r1, [pc, #280]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0320 	and.w	r3, r3, #32
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 808a 	beq.w	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	4b39      	ldr	r3, [pc, #228]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	4a38      	ldr	r2, [pc, #224]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	6413      	str	r3, [r2, #64]	; 0x40
 8001bfe:	4b36      	ldr	r3, [pc, #216]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001c0a:	4b34      	ldr	r3, [pc, #208]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a33      	ldr	r2, [pc, #204]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c14:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c16:	f7ff fa5f 	bl	80010d8 <HAL_GetTick>
 8001c1a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8001c1e:	f7ff fa5b 	bl	80010d8 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e278      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c3c:	4b26      	ldr	r3, [pc, #152]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c44:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c46:	6a3b      	ldr	r3, [r7, #32]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d02f      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c54:	6a3a      	ldr	r2, [r7, #32]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d028      	beq.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c62:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c66:	2201      	movs	r2, #1
 8001c68:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c6a:	4b1d      	ldr	r3, [pc, #116]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001c70:	4a19      	ldr	r2, [pc, #100]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c72:	6a3b      	ldr	r3, [r7, #32]
 8001c74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c76:	4b18      	ldr	r3, [pc, #96]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7a:	f003 0301 	and.w	r3, r3, #1
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d114      	bne.n	8001cac <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001c82:	f7ff fa29 	bl	80010d8 <HAL_GetTick>
 8001c86:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c88:	e00a      	b.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c8a:	f7ff fa25 	bl	80010d8 <HAL_GetTick>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d901      	bls.n	8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8001c9c:	2303      	movs	r3, #3
 8001c9e:	e240      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca0:	4b0d      	ldr	r3, [pc, #52]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca4:	f003 0302 	and.w	r3, r3, #2
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d0ee      	beq.n	8001c8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001cb8:	d114      	bne.n	8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cbc:	689b      	ldr	r3, [r3, #8]
 8001cbe:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8001cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cce:	4902      	ldr	r1, [pc, #8]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	608b      	str	r3, [r1, #8]
 8001cd4:	e00c      	b.n	8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8001cd6:	bf00      	nop
 8001cd8:	40023800 	.word	0x40023800
 8001cdc:	40007000 	.word	0x40007000
 8001ce0:	42470e40 	.word	0x42470e40
 8001ce4:	4b4a      	ldr	r3, [pc, #296]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	4a49      	ldr	r2, [pc, #292]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001cee:	6093      	str	r3, [r2, #8]
 8001cf0:	4b47      	ldr	r3, [pc, #284]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cfc:	4944      	ldr	r1, [pc, #272]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0310 	and.w	r3, r3, #16
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d004      	beq.n	8001d18 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8001d14:	4b3f      	ldr	r3, [pc, #252]	; (8001e14 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8001d16:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00a      	beq.n	8001d3a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8001d24:	4b3a      	ldr	r3, [pc, #232]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d2a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d32:	4937      	ldr	r1, [pc, #220]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d34:	4313      	orrs	r3, r2
 8001d36:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d00a      	beq.n	8001d5c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d46:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d4c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d54:	492e      	ldr	r1, [pc, #184]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d011      	beq.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d68:	4b29      	ldr	r3, [pc, #164]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d6e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d76:	4926      	ldr	r1, [pc, #152]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d86:	d101      	bne.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d00a      	beq.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8001d98:	4b1d      	ldr	r3, [pc, #116]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d9e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001da6:	491a      	ldr	r1, [pc, #104]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d011      	beq.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8001dba:	4b15      	ldr	r3, [pc, #84]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001dbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dc0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dc8:	4911      	ldr	r1, [pc, #68]	; (8001e10 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001dd8:	d101      	bne.n	8001dde <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8001dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d005      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001dec:	f040 80ff 	bne.w	8001fee <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001df6:	f7ff f96f 	bl	80010d8 <HAL_GetTick>
 8001dfa:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001dfc:	e00e      	b.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001dfe:	f7ff f96b 	bl	80010d8 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d907      	bls.n	8001e1c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e188      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8001e10:	40023800 	.word	0x40023800
 8001e14:	424711e0 	.word	0x424711e0
 8001e18:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001e1c:	4b7e      	ldr	r3, [pc, #504]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1ea      	bne.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0301 	and.w	r3, r3, #1
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d003      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d009      	beq.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d028      	beq.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d124      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001e50:	4b71      	ldr	r3, [pc, #452]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e56:	0c1b      	lsrs	r3, r3, #16
 8001e58:	f003 0303 	and.w	r3, r3, #3
 8001e5c:	3301      	adds	r3, #1
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001e62:	4b6d      	ldr	r3, [pc, #436]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e68:	0e1b      	lsrs	r3, r3, #24
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	019b      	lsls	r3, r3, #6
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	69fb      	ldr	r3, [r7, #28]
 8001e7e:	085b      	lsrs	r3, r3, #1
 8001e80:	3b01      	subs	r3, #1
 8001e82:	041b      	lsls	r3, r3, #16
 8001e84:	431a      	orrs	r2, r3
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	061b      	lsls	r3, r3, #24
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	695b      	ldr	r3, [r3, #20]
 8001e90:	071b      	lsls	r3, r3, #28
 8001e92:	4961      	ldr	r1, [pc, #388]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001e94:	4313      	orrs	r3, r2
 8001e96:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0304 	and.w	r3, r3, #4
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d004      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001eae:	d00a      	beq.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d035      	beq.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ec4:	d130      	bne.n	8001f28 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001ec6:	4b54      	ldr	r3, [pc, #336]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001ec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ecc:	0c1b      	lsrs	r3, r3, #16
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	3301      	adds	r3, #1
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ed8:	4b4f      	ldr	r3, [pc, #316]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001eda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ede:	0f1b      	lsrs	r3, r3, #28
 8001ee0:	f003 0307 	and.w	r3, r3, #7
 8001ee4:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685a      	ldr	r2, [r3, #4]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	019b      	lsls	r3, r3, #6
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	085b      	lsrs	r3, r3, #1
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	041b      	lsls	r3, r3, #16
 8001efa:	431a      	orrs	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	691b      	ldr	r3, [r3, #16]
 8001f00:	061b      	lsls	r3, r3, #24
 8001f02:	431a      	orrs	r2, r3
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	071b      	lsls	r3, r3, #28
 8001f08:	4943      	ldr	r1, [pc, #268]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8001f10:	4b41      	ldr	r3, [pc, #260]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f16:	f023 021f 	bic.w	r2, r3, #31
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f1e:	3b01      	subs	r3, #1
 8001f20:	493d      	ldr	r1, [pc, #244]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f22:	4313      	orrs	r3, r2
 8001f24:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d029      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f38:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001f3c:	d124      	bne.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8001f3e:	4b36      	ldr	r3, [pc, #216]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f44:	0c1b      	lsrs	r3, r3, #16
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001f50:	4b31      	ldr	r3, [pc, #196]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f56:	0f1b      	lsrs	r3, r3, #28
 8001f58:	f003 0307 	and.w	r3, r3, #7
 8001f5c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685a      	ldr	r2, [r3, #4]
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	019b      	lsls	r3, r3, #6
 8001f68:	431a      	orrs	r2, r3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	68db      	ldr	r3, [r3, #12]
 8001f6e:	085b      	lsrs	r3, r3, #1
 8001f70:	3b01      	subs	r3, #1
 8001f72:	041b      	lsls	r3, r3, #16
 8001f74:	431a      	orrs	r2, r3
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	061b      	lsls	r3, r3, #24
 8001f7a:	431a      	orrs	r2, r3
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	071b      	lsls	r3, r3, #28
 8001f80:	4925      	ldr	r1, [pc, #148]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d016      	beq.n	8001fc2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	019b      	lsls	r3, r3, #6
 8001f9e:	431a      	orrs	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	085b      	lsrs	r3, r3, #1
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	041b      	lsls	r3, r3, #16
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	061b      	lsls	r3, r3, #24
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	695b      	ldr	r3, [r3, #20]
 8001fb8:	071b      	lsls	r3, r3, #28
 8001fba:	4917      	ldr	r1, [pc, #92]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001fc8:	f7ff f886 	bl	80010d8 <HAL_GetTick>
 8001fcc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8001fd0:	f7ff f882 	bl	80010d8 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e09f      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8001fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	f040 8095 	bne.w	8002120 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001ffc:	f7ff f86c 	bl	80010d8 <HAL_GetTick>
 8002000:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002002:	e00f      	b.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002004:	f7ff f868 	bl	80010d8 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d908      	bls.n	8002024 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e085      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002016:	bf00      	nop
 8002018:	40023800 	.word	0x40023800
 800201c:	42470068 	.word	0x42470068
 8002020:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002024:	4b41      	ldr	r3, [pc, #260]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800202c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002030:	d0e8      	beq.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	2b00      	cmp	r3, #0
 8002044:	d009      	beq.n	800205a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800204e:	2b00      	cmp	r3, #0
 8002050:	d02b      	beq.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002056:	2b00      	cmp	r3, #0
 8002058:	d127      	bne.n	80020aa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800205a:	4b34      	ldr	r3, [pc, #208]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800205c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002060:	0c1b      	lsrs	r3, r3, #16
 8002062:	f003 0303 	and.w	r3, r3, #3
 8002066:	3301      	adds	r3, #1
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	699a      	ldr	r2, [r3, #24]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69db      	ldr	r3, [r3, #28]
 8002074:	019b      	lsls	r3, r3, #6
 8002076:	431a      	orrs	r2, r3
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	085b      	lsrs	r3, r3, #1
 800207c:	3b01      	subs	r3, #1
 800207e:	041b      	lsls	r3, r3, #16
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002086:	061b      	lsls	r3, r3, #24
 8002088:	4928      	ldr	r1, [pc, #160]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800208a:	4313      	orrs	r3, r2
 800208c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002090:	4b26      	ldr	r3, [pc, #152]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002092:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002096:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	3b01      	subs	r3, #1
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	4922      	ldr	r1, [pc, #136]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020a4:	4313      	orrs	r3, r2
 80020a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d01d      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80020be:	d118      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80020c0:	4b1a      	ldr	r3, [pc, #104]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c6:	0e1b      	lsrs	r3, r3, #24
 80020c8:	f003 030f 	and.w	r3, r3, #15
 80020cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	699a      	ldr	r2, [r3, #24]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	019b      	lsls	r3, r3, #6
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	085b      	lsrs	r3, r3, #1
 80020e0:	3b01      	subs	r3, #1
 80020e2:	041b      	lsls	r3, r3, #16
 80020e4:	431a      	orrs	r2, r3
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	061b      	lsls	r3, r3, #24
 80020ea:	4910      	ldr	r1, [pc, #64]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80020f2:	4b0f      	ldr	r3, [pc, #60]	; (8002130 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 80020f4:	2201      	movs	r2, #1
 80020f6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80020f8:	f7fe ffee 	bl	80010d8 <HAL_GetTick>
 80020fc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002100:	f7fe ffea 	bl	80010d8 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b02      	cmp	r3, #2
 800210c:	d901      	bls.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e007      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002112:	4b06      	ldr	r3, [pc, #24]	; (800212c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800211a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800211e:	d1ef      	bne.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3730      	adds	r7, #48	; 0x30
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800
 8002130:	42470070 	.word	0x42470070

08002134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002134:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002138:	b087      	sub	sp, #28
 800213a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800213c:	2600      	movs	r6, #0
 800213e:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8002140:	2600      	movs	r6, #0
 8002142:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8002144:	2600      	movs	r6, #0
 8002146:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8002148:	2600      	movs	r6, #0
 800214a:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800214c:	2600      	movs	r6, #0
 800214e:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002150:	4ea3      	ldr	r6, [pc, #652]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002152:	68b6      	ldr	r6, [r6, #8]
 8002154:	f006 060c 	and.w	r6, r6, #12
 8002158:	2e0c      	cmp	r6, #12
 800215a:	f200 8137 	bhi.w	80023cc <HAL_RCC_GetSysClockFreq+0x298>
 800215e:	f20f 0c08 	addw	ip, pc, #8
 8002162:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8002166:	bf00      	nop
 8002168:	0800219d 	.word	0x0800219d
 800216c:	080023cd 	.word	0x080023cd
 8002170:	080023cd 	.word	0x080023cd
 8002174:	080023cd 	.word	0x080023cd
 8002178:	080021a3 	.word	0x080021a3
 800217c:	080023cd 	.word	0x080023cd
 8002180:	080023cd 	.word	0x080023cd
 8002184:	080023cd 	.word	0x080023cd
 8002188:	080021a9 	.word	0x080021a9
 800218c:	080023cd 	.word	0x080023cd
 8002190:	080023cd 	.word	0x080023cd
 8002194:	080023cd 	.word	0x080023cd
 8002198:	080022bf 	.word	0x080022bf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800219c:	4b91      	ldr	r3, [pc, #580]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 800219e:	613b      	str	r3, [r7, #16]
       break;
 80021a0:	e117      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021a2:	4b91      	ldr	r3, [pc, #580]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80021a4:	613b      	str	r3, [r7, #16]
      break;
 80021a6:	e114      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021a8:	4b8d      	ldr	r3, [pc, #564]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021b0:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021b2:	4b8b      	ldr	r3, [pc, #556]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d024      	beq.n	8002208 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021be:	4b88      	ldr	r3, [pc, #544]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	099b      	lsrs	r3, r3, #6
 80021c4:	461a      	mov	r2, r3
 80021c6:	f04f 0300 	mov.w	r3, #0
 80021ca:	f240 14ff 	movw	r4, #511	; 0x1ff
 80021ce:	f04f 0500 	mov.w	r5, #0
 80021d2:	ea02 0004 	and.w	r0, r2, r4
 80021d6:	ea03 0105 	and.w	r1, r3, r5
 80021da:	4b83      	ldr	r3, [pc, #524]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80021dc:	fb03 f201 	mul.w	r2, r3, r1
 80021e0:	2300      	movs	r3, #0
 80021e2:	fb03 f300 	mul.w	r3, r3, r0
 80021e6:	4413      	add	r3, r2
 80021e8:	4a7f      	ldr	r2, [pc, #508]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80021ea:	fba0 0102 	umull	r0, r1, r0, r2
 80021ee:	440b      	add	r3, r1
 80021f0:	4619      	mov	r1, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	461a      	mov	r2, r3
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	f7fe f803 	bl	8000204 <__aeabi_uldivmod>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4613      	mov	r3, r2
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	e04c      	b.n	80022a2 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002208:	4b75      	ldr	r3, [pc, #468]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	099b      	lsrs	r3, r3, #6
 800220e:	461a      	mov	r2, r3
 8002210:	f04f 0300 	mov.w	r3, #0
 8002214:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002218:	f04f 0100 	mov.w	r1, #0
 800221c:	ea02 0800 	and.w	r8, r2, r0
 8002220:	ea03 0901 	and.w	r9, r3, r1
 8002224:	4640      	mov	r0, r8
 8002226:	4649      	mov	r1, r9
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	014b      	lsls	r3, r1, #5
 8002232:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002236:	0142      	lsls	r2, r0, #5
 8002238:	4610      	mov	r0, r2
 800223a:	4619      	mov	r1, r3
 800223c:	ebb0 0008 	subs.w	r0, r0, r8
 8002240:	eb61 0109 	sbc.w	r1, r1, r9
 8002244:	f04f 0200 	mov.w	r2, #0
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	018b      	lsls	r3, r1, #6
 800224e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002252:	0182      	lsls	r2, r0, #6
 8002254:	1a12      	subs	r2, r2, r0
 8002256:	eb63 0301 	sbc.w	r3, r3, r1
 800225a:	f04f 0000 	mov.w	r0, #0
 800225e:	f04f 0100 	mov.w	r1, #0
 8002262:	00d9      	lsls	r1, r3, #3
 8002264:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002268:	00d0      	lsls	r0, r2, #3
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	eb12 0208 	adds.w	r2, r2, r8
 8002272:	eb43 0309 	adc.w	r3, r3, r9
 8002276:	f04f 0000 	mov.w	r0, #0
 800227a:	f04f 0100 	mov.w	r1, #0
 800227e:	0299      	lsls	r1, r3, #10
 8002280:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002284:	0290      	lsls	r0, r2, #10
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	461a      	mov	r2, r3
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	f7fd ffb5 	bl	8000204 <__aeabi_uldivmod>
 800229a:	4602      	mov	r2, r0
 800229c:	460b      	mov	r3, r1
 800229e:	4613      	mov	r3, r2
 80022a0:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80022a2:	4b4f      	ldr	r3, [pc, #316]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	0c1b      	lsrs	r3, r3, #16
 80022a8:	f003 0303 	and.w	r3, r3, #3
 80022ac:	3301      	adds	r3, #1
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ba:	613b      	str	r3, [r7, #16]
      break;
 80022bc:	e089      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80022be:	4948      	ldr	r1, [pc, #288]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80022c0:	6849      	ldr	r1, [r1, #4]
 80022c2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80022c6:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c8:	4945      	ldr	r1, [pc, #276]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80022ca:	6849      	ldr	r1, [r1, #4]
 80022cc:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80022d0:	2900      	cmp	r1, #0
 80022d2:	d024      	beq.n	800231e <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022d4:	4942      	ldr	r1, [pc, #264]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80022d6:	6849      	ldr	r1, [r1, #4]
 80022d8:	0989      	lsrs	r1, r1, #6
 80022da:	4608      	mov	r0, r1
 80022dc:	f04f 0100 	mov.w	r1, #0
 80022e0:	f240 14ff 	movw	r4, #511	; 0x1ff
 80022e4:	f04f 0500 	mov.w	r5, #0
 80022e8:	ea00 0204 	and.w	r2, r0, r4
 80022ec:	ea01 0305 	and.w	r3, r1, r5
 80022f0:	493d      	ldr	r1, [pc, #244]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 80022f2:	fb01 f003 	mul.w	r0, r1, r3
 80022f6:	2100      	movs	r1, #0
 80022f8:	fb01 f102 	mul.w	r1, r1, r2
 80022fc:	1844      	adds	r4, r0, r1
 80022fe:	493a      	ldr	r1, [pc, #232]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002300:	fba2 0101 	umull	r0, r1, r2, r1
 8002304:	1863      	adds	r3, r4, r1
 8002306:	4619      	mov	r1, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	461a      	mov	r2, r3
 800230c:	f04f 0300 	mov.w	r3, #0
 8002310:	f7fd ff78 	bl	8000204 <__aeabi_uldivmod>
 8002314:	4602      	mov	r2, r0
 8002316:	460b      	mov	r3, r1
 8002318:	4613      	mov	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
 800231c:	e04a      	b.n	80023b4 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800231e:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	099b      	lsrs	r3, r3, #6
 8002324:	461a      	mov	r2, r3
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800232e:	f04f 0100 	mov.w	r1, #0
 8002332:	ea02 0400 	and.w	r4, r2, r0
 8002336:	ea03 0501 	and.w	r5, r3, r1
 800233a:	4620      	mov	r0, r4
 800233c:	4629      	mov	r1, r5
 800233e:	f04f 0200 	mov.w	r2, #0
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	014b      	lsls	r3, r1, #5
 8002348:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800234c:	0142      	lsls	r2, r0, #5
 800234e:	4610      	mov	r0, r2
 8002350:	4619      	mov	r1, r3
 8002352:	1b00      	subs	r0, r0, r4
 8002354:	eb61 0105 	sbc.w	r1, r1, r5
 8002358:	f04f 0200 	mov.w	r2, #0
 800235c:	f04f 0300 	mov.w	r3, #0
 8002360:	018b      	lsls	r3, r1, #6
 8002362:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002366:	0182      	lsls	r2, r0, #6
 8002368:	1a12      	subs	r2, r2, r0
 800236a:	eb63 0301 	sbc.w	r3, r3, r1
 800236e:	f04f 0000 	mov.w	r0, #0
 8002372:	f04f 0100 	mov.w	r1, #0
 8002376:	00d9      	lsls	r1, r3, #3
 8002378:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800237c:	00d0      	lsls	r0, r2, #3
 800237e:	4602      	mov	r2, r0
 8002380:	460b      	mov	r3, r1
 8002382:	1912      	adds	r2, r2, r4
 8002384:	eb45 0303 	adc.w	r3, r5, r3
 8002388:	f04f 0000 	mov.w	r0, #0
 800238c:	f04f 0100 	mov.w	r1, #0
 8002390:	0299      	lsls	r1, r3, #10
 8002392:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002396:	0290      	lsls	r0, r2, #10
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4610      	mov	r0, r2
 800239e:	4619      	mov	r1, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	461a      	mov	r2, r3
 80023a4:	f04f 0300 	mov.w	r3, #0
 80023a8:	f7fd ff2c 	bl	8000204 <__aeabi_uldivmod>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4613      	mov	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80023b4:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	0f1b      	lsrs	r3, r3, #28
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 80023c0:	697a      	ldr	r2, [r7, #20]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023c8:	613b      	str	r3, [r7, #16]
      break;
 80023ca:	e002      	b.n	80023d2 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80023cc:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x2b0>)
 80023ce:	613b      	str	r3, [r7, #16]
      break;
 80023d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80023d2:	693b      	ldr	r3, [r7, #16]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	371c      	adds	r7, #28
 80023d8:	46bd      	mov	sp, r7
 80023da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800
 80023e4:	00f42400 	.word	0x00f42400
 80023e8:	017d7840 	.word	0x017d7840

080023ec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e28d      	b.n	800291a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0301 	and.w	r3, r3, #1
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8083 	beq.w	8002512 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800240c:	4b94      	ldr	r3, [pc, #592]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 030c 	and.w	r3, r3, #12
 8002414:	2b04      	cmp	r3, #4
 8002416:	d019      	beq.n	800244c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002418:	4b91      	ldr	r3, [pc, #580]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002420:	2b08      	cmp	r3, #8
 8002422:	d106      	bne.n	8002432 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002424:	4b8e      	ldr	r3, [pc, #568]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800242c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002430:	d00c      	beq.n	800244c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002432:	4b8b      	ldr	r3, [pc, #556]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800243a:	2b0c      	cmp	r3, #12
 800243c:	d112      	bne.n	8002464 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800243e:	4b88      	ldr	r3, [pc, #544]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002446:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800244a:	d10b      	bne.n	8002464 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800244c:	4b84      	ldr	r3, [pc, #528]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002454:	2b00      	cmp	r3, #0
 8002456:	d05b      	beq.n	8002510 <HAL_RCC_OscConfig+0x124>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d157      	bne.n	8002510 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e25a      	b.n	800291a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800246c:	d106      	bne.n	800247c <HAL_RCC_OscConfig+0x90>
 800246e:	4b7c      	ldr	r3, [pc, #496]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a7b      	ldr	r2, [pc, #492]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002478:	6013      	str	r3, [r2, #0]
 800247a:	e01d      	b.n	80024b8 <HAL_RCC_OscConfig+0xcc>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002484:	d10c      	bne.n	80024a0 <HAL_RCC_OscConfig+0xb4>
 8002486:	4b76      	ldr	r3, [pc, #472]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a75      	ldr	r2, [pc, #468]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 800248c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	4b73      	ldr	r3, [pc, #460]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a72      	ldr	r2, [pc, #456]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800249c:	6013      	str	r3, [r2, #0]
 800249e:	e00b      	b.n	80024b8 <HAL_RCC_OscConfig+0xcc>
 80024a0:	4b6f      	ldr	r3, [pc, #444]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a6e      	ldr	r2, [pc, #440]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 80024a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80024aa:	6013      	str	r3, [r2, #0]
 80024ac:	4b6c      	ldr	r3, [pc, #432]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a6b      	ldr	r2, [pc, #428]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 80024b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d013      	beq.n	80024e8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c0:	f7fe fe0a 	bl	80010d8 <HAL_GetTick>
 80024c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	e008      	b.n	80024da <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024c8:	f7fe fe06 	bl	80010d8 <HAL_GetTick>
 80024cc:	4602      	mov	r2, r0
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	2b64      	cmp	r3, #100	; 0x64
 80024d4:	d901      	bls.n	80024da <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 80024d6:	2303      	movs	r3, #3
 80024d8:	e21f      	b.n	800291a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b61      	ldr	r3, [pc, #388]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d0f0      	beq.n	80024c8 <HAL_RCC_OscConfig+0xdc>
 80024e6:	e014      	b.n	8002512 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e8:	f7fe fdf6 	bl	80010d8 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ee:	e008      	b.n	8002502 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024f0:	f7fe fdf2 	bl	80010d8 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b64      	cmp	r3, #100	; 0x64
 80024fc:	d901      	bls.n	8002502 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e20b      	b.n	800291a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002502:	4b57      	ldr	r3, [pc, #348]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d1f0      	bne.n	80024f0 <HAL_RCC_OscConfig+0x104>
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002510:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b00      	cmp	r3, #0
 800251c:	d06f      	beq.n	80025fe <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800251e:	4b50      	ldr	r3, [pc, #320]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
 8002526:	2b00      	cmp	r3, #0
 8002528:	d017      	beq.n	800255a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800252a:	4b4d      	ldr	r3, [pc, #308]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002532:	2b08      	cmp	r3, #8
 8002534:	d105      	bne.n	8002542 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002536:	4b4a      	ldr	r3, [pc, #296]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00b      	beq.n	800255a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002542:	4b47      	ldr	r3, [pc, #284]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800254a:	2b0c      	cmp	r3, #12
 800254c:	d11c      	bne.n	8002588 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800254e:	4b44      	ldr	r3, [pc, #272]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002556:	2b00      	cmp	r3, #0
 8002558:	d116      	bne.n	8002588 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255a:	4b41      	ldr	r3, [pc, #260]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0302 	and.w	r3, r3, #2
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_RCC_OscConfig+0x186>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	68db      	ldr	r3, [r3, #12]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d001      	beq.n	8002572 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e1d3      	b.n	800291a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002572:	4b3b      	ldr	r3, [pc, #236]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	691b      	ldr	r3, [r3, #16]
 800257e:	00db      	lsls	r3, r3, #3
 8002580:	4937      	ldr	r1, [pc, #220]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002582:	4313      	orrs	r3, r2
 8002584:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002586:	e03a      	b.n	80025fe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	68db      	ldr	r3, [r3, #12]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d020      	beq.n	80025d2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002590:	4b34      	ldr	r3, [pc, #208]	; (8002664 <HAL_RCC_OscConfig+0x278>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002596:	f7fe fd9f 	bl	80010d8 <HAL_GetTick>
 800259a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800259e:	f7fe fd9b 	bl	80010d8 <HAL_GetTick>
 80025a2:	4602      	mov	r2, r0
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b02      	cmp	r3, #2
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e1b4      	b.n	800291a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025b0:	4b2b      	ldr	r3, [pc, #172]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025bc:	4b28      	ldr	r3, [pc, #160]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	00db      	lsls	r3, r3, #3
 80025ca:	4925      	ldr	r1, [pc, #148]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	600b      	str	r3, [r1, #0]
 80025d0:	e015      	b.n	80025fe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025d2:	4b24      	ldr	r3, [pc, #144]	; (8002664 <HAL_RCC_OscConfig+0x278>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe fd7e 	bl	80010d8 <HAL_GetTick>
 80025dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025de:	e008      	b.n	80025f2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025e0:	f7fe fd7a 	bl	80010d8 <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e193      	b.n	800291a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025f2:	4b1b      	ldr	r3, [pc, #108]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0302 	and.w	r3, r3, #2
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d1f0      	bne.n	80025e0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d036      	beq.n	8002678 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d016      	beq.n	8002640 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002612:	4b15      	ldr	r3, [pc, #84]	; (8002668 <HAL_RCC_OscConfig+0x27c>)
 8002614:	2201      	movs	r2, #1
 8002616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7fe fd5e 	bl	80010d8 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002620:	f7fe fd5a 	bl	80010d8 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e173      	b.n	800291a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002632:	4b0b      	ldr	r3, [pc, #44]	; (8002660 <HAL_RCC_OscConfig+0x274>)
 8002634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0x234>
 800263e:	e01b      	b.n	8002678 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002640:	4b09      	ldr	r3, [pc, #36]	; (8002668 <HAL_RCC_OscConfig+0x27c>)
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002646:	f7fe fd47 	bl	80010d8 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800264c:	e00e      	b.n	800266c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800264e:	f7fe fd43 	bl	80010d8 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d907      	bls.n	800266c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e15c      	b.n	800291a <HAL_RCC_OscConfig+0x52e>
 8002660:	40023800 	.word	0x40023800
 8002664:	42470000 	.word	0x42470000
 8002668:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800266c:	4b8a      	ldr	r3, [pc, #552]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 800266e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1ea      	bne.n	800264e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 8097 	beq.w	80027b4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002686:	2300      	movs	r3, #0
 8002688:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800268a:	4b83      	ldr	r3, [pc, #524]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10f      	bne.n	80026b6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60bb      	str	r3, [r7, #8]
 800269a:	4b7f      	ldr	r3, [pc, #508]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	4a7e      	ldr	r2, [pc, #504]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 80026a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026a4:	6413      	str	r3, [r2, #64]	; 0x40
 80026a6:	4b7c      	ldr	r3, [pc, #496]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ae:	60bb      	str	r3, [r7, #8]
 80026b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026b2:	2301      	movs	r3, #1
 80026b4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b6:	4b79      	ldr	r3, [pc, #484]	; (800289c <HAL_RCC_OscConfig+0x4b0>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d118      	bne.n	80026f4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026c2:	4b76      	ldr	r3, [pc, #472]	; (800289c <HAL_RCC_OscConfig+0x4b0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a75      	ldr	r2, [pc, #468]	; (800289c <HAL_RCC_OscConfig+0x4b0>)
 80026c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026ce:	f7fe fd03 	bl	80010d8 <HAL_GetTick>
 80026d2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026d4:	e008      	b.n	80026e8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026d6:	f7fe fcff 	bl	80010d8 <HAL_GetTick>
 80026da:	4602      	mov	r2, r0
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	1ad3      	subs	r3, r2, r3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d901      	bls.n	80026e8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e118      	b.n	800291a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026e8:	4b6c      	ldr	r3, [pc, #432]	; (800289c <HAL_RCC_OscConfig+0x4b0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d0f0      	beq.n	80026d6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d106      	bne.n	800270a <HAL_RCC_OscConfig+0x31e>
 80026fc:	4b66      	ldr	r3, [pc, #408]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 80026fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002700:	4a65      	ldr	r2, [pc, #404]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 8002702:	f043 0301 	orr.w	r3, r3, #1
 8002706:	6713      	str	r3, [r2, #112]	; 0x70
 8002708:	e01c      	b.n	8002744 <HAL_RCC_OscConfig+0x358>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b05      	cmp	r3, #5
 8002710:	d10c      	bne.n	800272c <HAL_RCC_OscConfig+0x340>
 8002712:	4b61      	ldr	r3, [pc, #388]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 8002714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002716:	4a60      	ldr	r2, [pc, #384]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 8002718:	f043 0304 	orr.w	r3, r3, #4
 800271c:	6713      	str	r3, [r2, #112]	; 0x70
 800271e:	4b5e      	ldr	r3, [pc, #376]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 8002720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002722:	4a5d      	ldr	r2, [pc, #372]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 8002724:	f043 0301 	orr.w	r3, r3, #1
 8002728:	6713      	str	r3, [r2, #112]	; 0x70
 800272a:	e00b      	b.n	8002744 <HAL_RCC_OscConfig+0x358>
 800272c:	4b5a      	ldr	r3, [pc, #360]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 800272e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002730:	4a59      	ldr	r2, [pc, #356]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 8002732:	f023 0301 	bic.w	r3, r3, #1
 8002736:	6713      	str	r3, [r2, #112]	; 0x70
 8002738:	4b57      	ldr	r3, [pc, #348]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800273c:	4a56      	ldr	r2, [pc, #344]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 800273e:	f023 0304 	bic.w	r3, r3, #4
 8002742:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d015      	beq.n	8002778 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7fe fcc4 	bl	80010d8 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002752:	e00a      	b.n	800276a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002754:	f7fe fcc0 	bl	80010d8 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002762:	4293      	cmp	r3, r2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e0d7      	b.n	800291a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800276a:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 800276c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d0ee      	beq.n	8002754 <HAL_RCC_OscConfig+0x368>
 8002776:	e014      	b.n	80027a2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002778:	f7fe fcae 	bl	80010d8 <HAL_GetTick>
 800277c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800277e:	e00a      	b.n	8002796 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002780:	f7fe fcaa 	bl	80010d8 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	; 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e0c1      	b.n	800291a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002796:	4b40      	ldr	r3, [pc, #256]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 8002798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d1ee      	bne.n	8002780 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027a2:	7dfb      	ldrb	r3, [r7, #23]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d105      	bne.n	80027b4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a8:	4b3b      	ldr	r3, [pc, #236]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 80027aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ac:	4a3a      	ldr	r2, [pc, #232]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 80027ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027b2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	f000 80ad 	beq.w	8002918 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027be:	4b36      	ldr	r3, [pc, #216]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b08      	cmp	r3, #8
 80027c8:	d060      	beq.n	800288c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d145      	bne.n	800285e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027d2:	4b33      	ldr	r3, [pc, #204]	; (80028a0 <HAL_RCC_OscConfig+0x4b4>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe fc7e 	bl	80010d8 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe fc7a 	bl	80010d8 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e093      	b.n	800291a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027f2:	4b29      	ldr	r3, [pc, #164]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69da      	ldr	r2, [r3, #28]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280c:	019b      	lsls	r3, r3, #6
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	085b      	lsrs	r3, r3, #1
 8002816:	3b01      	subs	r3, #1
 8002818:	041b      	lsls	r3, r3, #16
 800281a:	431a      	orrs	r2, r3
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002820:	061b      	lsls	r3, r3, #24
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002828:	071b      	lsls	r3, r3, #28
 800282a:	491b      	ldr	r1, [pc, #108]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 800282c:	4313      	orrs	r3, r2
 800282e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002830:	4b1b      	ldr	r3, [pc, #108]	; (80028a0 <HAL_RCC_OscConfig+0x4b4>)
 8002832:	2201      	movs	r2, #1
 8002834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002836:	f7fe fc4f 	bl	80010d8 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800283c:	e008      	b.n	8002850 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800283e:	f7fe fc4b 	bl	80010d8 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d901      	bls.n	8002850 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e064      	b.n	800291a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002850:	4b11      	ldr	r3, [pc, #68]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d0f0      	beq.n	800283e <HAL_RCC_OscConfig+0x452>
 800285c:	e05c      	b.n	8002918 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800285e:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <HAL_RCC_OscConfig+0x4b4>)
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002864:	f7fe fc38 	bl	80010d8 <HAL_GetTick>
 8002868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800286a:	e008      	b.n	800287e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800286c:	f7fe fc34 	bl	80010d8 <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	2b02      	cmp	r3, #2
 8002878:	d901      	bls.n	800287e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800287a:	2303      	movs	r3, #3
 800287c:	e04d      	b.n	800291a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <HAL_RCC_OscConfig+0x4ac>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f0      	bne.n	800286c <HAL_RCC_OscConfig+0x480>
 800288a:	e045      	b.n	8002918 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	2b01      	cmp	r3, #1
 8002892:	d107      	bne.n	80028a4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e040      	b.n	800291a <HAL_RCC_OscConfig+0x52e>
 8002898:	40023800 	.word	0x40023800
 800289c:	40007000 	.word	0x40007000
 80028a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028a4:	4b1f      	ldr	r3, [pc, #124]	; (8002924 <HAL_RCC_OscConfig+0x538>)
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d030      	beq.n	8002914 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028bc:	429a      	cmp	r2, r3
 80028be:	d129      	bne.n	8002914 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d122      	bne.n	8002914 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028d4:	4013      	ands	r3, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028dc:	4293      	cmp	r3, r2
 80028de:	d119      	bne.n	8002914 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ea:	085b      	lsrs	r3, r3, #1
 80028ec:	3b01      	subs	r3, #1
 80028ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028f0:	429a      	cmp	r2, r3
 80028f2:	d10f      	bne.n	8002914 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002900:	429a      	cmp	r2, r3
 8002902:	d107      	bne.n	8002914 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800290e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	3718      	adds	r7, #24
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40023800 	.word	0x40023800

08002928 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e022      	b.n	8002980 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d105      	bne.n	8002952 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f7fe f801 	bl	8000954 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2203      	movs	r2, #3
 8002956:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f814 	bl	8002988 <HAL_SD_InitCard>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e00a      	b.n	8002980 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2201      	movs	r2, #1
 800297a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800297e:	2300      	movs	r3, #0
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002988:	b5b0      	push	{r4, r5, r7, lr}
 800298a:	b08e      	sub	sp, #56	; 0x38
 800298c:	af04      	add	r7, sp, #16
 800298e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8002990:	2300      	movs	r3, #0
 8002992:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8002994:	2300      	movs	r3, #0
 8002996:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8002998:	2300      	movs	r3, #0
 800299a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800299c:	2300      	movs	r3, #0
 800299e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80029a4:	2376      	movs	r3, #118	; 0x76
 80029a6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681d      	ldr	r5, [r3, #0]
 80029ac:	466c      	mov	r4, sp
 80029ae:	f107 0314 	add.w	r3, r7, #20
 80029b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80029b6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80029ba:	f107 0308 	add.w	r3, r7, #8
 80029be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029c0:	4628      	mov	r0, r5
 80029c2:	f002 fb39 	bl	8005038 <SDIO_Init>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80029cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e04c      	b.n	8002a72 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80029d8:	4b28      	ldr	r3, [pc, #160]	; (8002a7c <HAL_SD_InitCard+0xf4>)
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f002 fb71 	bl	80050ca <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80029e8:	4b24      	ldr	r3, [pc, #144]	; (8002a7c <HAL_SD_InitCard+0xf4>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f000 ff02 	bl	80037f8 <SD_PowerON>
 80029f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d00b      	beq.n	8002a14 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a08:	6a3b      	ldr	r3, [r7, #32]
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e02e      	b.n	8002a72 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f000 fe23 	bl	8003660 <SD_InitCard>
 8002a1a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a1c:	6a3b      	ldr	r3, [r7, #32]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00b      	beq.n	8002a3a <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	431a      	orrs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002a36:	2301      	movs	r3, #1
 8002a38:	e01b      	b.n	8002a72 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a42:	4618      	mov	r0, r3
 8002a44:	f002 fbd4 	bl	80051f0 <SDMMC_CmdBlockLength>
 8002a48:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002a4a:	6a3b      	ldr	r3, [r7, #32]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00f      	beq.n	8002a70 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0a      	ldr	r2, [pc, #40]	; (8002a80 <HAL_SD_InitCard+0xf8>)
 8002a56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	431a      	orrs	r2, r3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e000      	b.n	8002a72 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3728      	adds	r7, #40	; 0x28
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bdb0      	pop	{r4, r5, r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	422580a0 	.word	0x422580a0
 8002a80:	004005ff 	.word	0x004005ff

08002a84 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b092      	sub	sp, #72	; 0x48
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	607a      	str	r2, [r7, #4]
 8002a90:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002a92:	f7fe fb21 	bl	80010d8 <HAL_GetTick>
 8002a96:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d107      	bne.n	8002ab6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aaa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e1bd      	b.n	8002e32 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	f040 81b0 	bne.w	8002e24 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002aca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	441a      	add	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d907      	bls.n	8002ae8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002adc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e1a4      	b.n	8002e32 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2203      	movs	r2, #3
 8002aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2200      	movs	r2, #0
 8002af6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d002      	beq.n	8002b06 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8002b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b02:	025b      	lsls	r3, r3, #9
 8002b04:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002b06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002b0a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	025b      	lsls	r3, r3, #9
 8002b10:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002b12:	2390      	movs	r3, #144	; 0x90
 8002b14:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8002b16:	2302      	movs	r3, #2
 8002b18:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f107 0214 	add.w	r2, r7, #20
 8002b2a:	4611      	mov	r1, r2
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f002 fb33 	bl	8005198 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d90a      	bls.n	8002b4e <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b44:	4618      	mov	r0, r3
 8002b46:	f002 fb97 	bl	8005278 <SDMMC_CmdReadMultiBlock>
 8002b4a:	6478      	str	r0, [r7, #68]	; 0x44
 8002b4c:	e009      	b.n	8002b62 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2201      	movs	r2, #1
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f002 fb6a 	bl	8005234 <SDMMC_CmdReadSingleBlock>
 8002b60:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002b62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d012      	beq.n	8002b8e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a7a      	ldr	r2, [pc, #488]	; (8002d58 <HAL_SD_ReadBlocks+0x2d4>)
 8002b6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b76:	431a      	orrs	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e151      	b.n	8002e32 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8002b8e:	69bb      	ldr	r3, [r7, #24]
 8002b90:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002b92:	e061      	b.n	8002c58 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d03c      	beq.n	8002c1c <HAL_SD_ReadBlocks+0x198>
 8002ba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d039      	beq.n	8002c1c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8002ba8:	2300      	movs	r3, #0
 8002baa:	643b      	str	r3, [r7, #64]	; 0x40
 8002bac:	e033      	b.n	8002c16 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f002 fa6b 	bl	800508e <SDIO_ReadFIFO>
 8002bb8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8002bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bc4:	3301      	adds	r3, #1
 8002bc6:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002bc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bca:	3b01      	subs	r3, #1
 8002bcc:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd0:	0a1b      	lsrs	r3, r3, #8
 8002bd2:	b2da      	uxtb	r2, r3
 8002bd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bda:	3301      	adds	r3, #1
 8002bdc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002be0:	3b01      	subs	r3, #1
 8002be2:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002be6:	0c1b      	lsrs	r3, r3, #16
 8002be8:	b2da      	uxtb	r2, r3
 8002bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002bf6:	3b01      	subs	r3, #1
 8002bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	0e1b      	lsrs	r3, r3, #24
 8002bfe:	b2da      	uxtb	r2, r3
 8002c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c02:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8002c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c06:	3301      	adds	r3, #1
 8002c08:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002c0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8002c10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c12:	3301      	adds	r3, #1
 8002c14:	643b      	str	r3, [r7, #64]	; 0x40
 8002c16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c18:	2b07      	cmp	r3, #7
 8002c1a:	d9c8      	bls.n	8002bae <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002c1c:	f7fe fa5c 	bl	80010d8 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d902      	bls.n	8002c32 <HAL_SD_ReadBlocks+0x1ae>
 8002c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d112      	bne.n	8002c58 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a48      	ldr	r2, [pc, #288]	; (8002d58 <HAL_SD_ReadBlocks+0x2d4>)
 8002c38:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2200      	movs	r2, #0
 8002c52:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8002c54:	2303      	movs	r3, #3
 8002c56:	e0ec      	b.n	8002e32 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c5e:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d096      	beq.n	8002b94 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d022      	beq.n	8002cba <HAL_SD_ReadBlocks+0x236>
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d91f      	bls.n	8002cba <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d01b      	beq.n	8002cba <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f002 fb5c 	bl	8005344 <SDMMC_CmdStopTransfer>
 8002c8c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8002c8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d012      	beq.n	8002cba <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a2f      	ldr	r2, [pc, #188]	; (8002d58 <HAL_SD_ReadBlocks+0x2d4>)
 8002c9a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ca2:	431a      	orrs	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e0bb      	b.n	8002e32 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d012      	beq.n	8002cee <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a22      	ldr	r2, [pc, #136]	; (8002d58 <HAL_SD_ReadBlocks+0x2d4>)
 8002cce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	f043 0208 	orr.w	r2, r3, #8
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e0a1      	b.n	8002e32 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d012      	beq.n	8002d22 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a15      	ldr	r2, [pc, #84]	; (8002d58 <HAL_SD_ReadBlocks+0x2d4>)
 8002d02:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d08:	f043 0202 	orr.w	r2, r3, #2
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e087      	b.n	8002e32 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d28:	f003 0320 	and.w	r3, r3, #32
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d064      	beq.n	8002dfa <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <HAL_SD_ReadBlocks+0x2d4>)
 8002d36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d3c:	f043 0220 	orr.w	r2, r3, #32
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002d52:	2301      	movs	r3, #1
 8002d54:	e06d      	b.n	8002e32 <HAL_SD_ReadBlocks+0x3ae>
 8002d56:	bf00      	nop
 8002d58:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f002 f994 	bl	800508e <SDIO_ReadFIFO>
 8002d66:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8002d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d72:	3301      	adds	r3, #1
 8002d74:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002d76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d78:	3b01      	subs	r3, #1
 8002d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8002d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d7e:	0a1b      	lsrs	r3, r3, #8
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d84:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d88:	3301      	adds	r3, #1
 8002d8a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002d8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8002d92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002d9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d9e:	3301      	adds	r3, #1
 8002da0:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002da2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002da4:	3b01      	subs	r3, #1
 8002da6:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8002da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002daa:	0e1b      	lsrs	r3, r3, #24
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db0:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8002db2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db4:	3301      	adds	r3, #1
 8002db6:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8002db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002dbe:	f7fe f98b 	bl	80010d8 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d902      	bls.n	8002dd4 <HAL_SD_ReadBlocks+0x350>
 8002dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d112      	bne.n	8002dfa <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a18      	ldr	r2, [pc, #96]	; (8002e3c <HAL_SD_ReadBlocks+0x3b8>)
 8002dda:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2200      	movs	r2, #0
 8002df4:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002df6:	2301      	movs	r3, #1
 8002df8:	e01b      	b.n	8002e32 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d002      	beq.n	8002e0e <HAL_SD_ReadBlocks+0x38a>
 8002e08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1a6      	bne.n	8002d5c <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f240 523a 	movw	r2, #1338	; 0x53a
 8002e16:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8002e20:	2300      	movs	r3, #0
 8002e22:	e006      	b.n	8002e32 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
  }
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3748      	adds	r7, #72	; 0x48
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	004005ff 	.word	0x004005ff

08002e40 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b092      	sub	sp, #72	; 0x48
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
 8002e4c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8002e4e:	f7fe f943 	bl	80010d8 <HAL_GetTick>
 8002e52:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8002e58:	68bb      	ldr	r3, [r7, #8]
 8002e5a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d107      	bne.n	8002e72 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e66:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e165      	b.n	800313e <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	f040 8158 	bne.w	8003130 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002e86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	441a      	add	r2, r3
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d907      	bls.n	8002ea4 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e14c      	b.n	800313e <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2203      	movs	r2, #3
 8002ea8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d002      	beq.n	8002ec2 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8002ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ebe:	025b      	lsls	r3, r3, #9
 8002ec0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002ec2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002ec6:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	025b      	lsls	r3, r3, #9
 8002ecc:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8002ece:	2390      	movs	r3, #144	; 0x90
 8002ed0:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8002eda:	2301      	movs	r3, #1
 8002edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f107 0218 	add.w	r2, r7, #24
 8002ee6:	4611      	mov	r1, r2
 8002ee8:	4618      	mov	r0, r3
 8002eea:	f002 f955 	bl	8005198 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d90a      	bls.n	8002f0a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2220      	movs	r2, #32
 8002ef8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f00:	4618      	mov	r0, r3
 8002f02:	f002 f9fd 	bl	8005300 <SDMMC_CmdWriteMultiBlock>
 8002f06:	6478      	str	r0, [r7, #68]	; 0x44
 8002f08:	e009      	b.n	8002f1e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	2210      	movs	r2, #16
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f16:	4618      	mov	r0, r3
 8002f18:	f002 f9d0 	bl	80052bc <SDMMC_CmdWriteSingleBlock>
 8002f1c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002f1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d012      	beq.n	8002f4a <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a87      	ldr	r2, [pc, #540]	; (8003148 <HAL_SD_WriteBlocks+0x308>)
 8002f2a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f32:	431a      	orrs	r2, r3
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e0f9      	b.n	800313e <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8002f4e:	e065      	b.n	800301c <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d040      	beq.n	8002fe0 <HAL_SD_WriteBlocks+0x1a0>
 8002f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d03d      	beq.n	8002fe0 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8002f64:	2300      	movs	r3, #0
 8002f66:	643b      	str	r3, [r7, #64]	; 0x40
 8002f68:	e037      	b.n	8002fda <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8002f6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002f70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f72:	3301      	adds	r3, #1
 8002f74:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002f76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8002f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	021a      	lsls	r2, r3, #8
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	4313      	orrs	r3, r2
 8002f86:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f8a:	3301      	adds	r3, #1
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f90:	3b01      	subs	r3, #1
 8002f92:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8002f94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	041a      	lsls	r2, r3, #16
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fa2:	3301      	adds	r3, #1
 8002fa4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fa8:	3b01      	subs	r3, #1
 8002faa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8002fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	061a      	lsls	r2, r3, #24
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8002fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fba:	3301      	adds	r3, #1
 8002fbc:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8002fbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002fc0:	3b01      	subs	r3, #1
 8002fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f107 0214 	add.w	r2, r7, #20
 8002fcc:	4611      	mov	r1, r2
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f002 f86a 	bl	80050a8 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8002fd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	643b      	str	r3, [r7, #64]	; 0x40
 8002fda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fdc:	2b07      	cmp	r3, #7
 8002fde:	d9c4      	bls.n	8002f6a <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8002fe0:	f7fe f87a 	bl	80010d8 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002fec:	429a      	cmp	r2, r3
 8002fee:	d902      	bls.n	8002ff6 <HAL_SD_WriteBlocks+0x1b6>
 8002ff0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d112      	bne.n	800301c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a53      	ldr	r2, [pc, #332]	; (8003148 <HAL_SD_WriteBlocks+0x308>)
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003002:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003004:	431a      	orrs	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2200      	movs	r2, #0
 8003016:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e090      	b.n	800313e <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003022:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003026:	2b00      	cmp	r3, #0
 8003028:	d092      	beq.n	8002f50 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003030:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003034:	2b00      	cmp	r3, #0
 8003036:	d022      	beq.n	800307e <HAL_SD_WriteBlocks+0x23e>
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	2b01      	cmp	r3, #1
 800303c:	d91f      	bls.n	800307e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003042:	2b03      	cmp	r3, #3
 8003044:	d01b      	beq.n	800307e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f002 f97a 	bl	8005344 <SDMMC_CmdStopTransfer>
 8003050:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003052:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003054:	2b00      	cmp	r3, #0
 8003056:	d012      	beq.n	800307e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a3a      	ldr	r2, [pc, #232]	; (8003148 <HAL_SD_WriteBlocks+0x308>)
 800305e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003064:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003066:	431a      	orrs	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2200      	movs	r2, #0
 8003078:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e05f      	b.n	800313e <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003084:	f003 0308 	and.w	r3, r3, #8
 8003088:	2b00      	cmp	r3, #0
 800308a:	d012      	beq.n	80030b2 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a2d      	ldr	r2, [pc, #180]	; (8003148 <HAL_SD_WriteBlocks+0x308>)
 8003092:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003098:	f043 0208 	orr.w	r2, r3, #8
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e045      	b.n	800313e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d012      	beq.n	80030e6 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a20      	ldr	r2, [pc, #128]	; (8003148 <HAL_SD_WriteBlocks+0x308>)
 80030c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030cc:	f043 0202 	orr.w	r2, r3, #2
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2200      	movs	r2, #0
 80030e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e02b      	b.n	800313e <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030ec:	f003 0310 	and.w	r3, r3, #16
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d012      	beq.n	800311a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a13      	ldr	r2, [pc, #76]	; (8003148 <HAL_SD_WriteBlocks+0x308>)
 80030fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003100:	f043 0210 	orr.w	r2, r3, #16
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	2200      	movs	r2, #0
 8003114:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e011      	b.n	800313e <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003122:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800312c:	2300      	movs	r3, #0
 800312e:	e006      	b.n	800313e <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003134:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
  }
}
 800313e:	4618      	mov	r0, r3
 8003140:	3748      	adds	r7, #72	; 0x48
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	004005ff 	.word	0x004005ff

0800314c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800315a:	0f9b      	lsrs	r3, r3, #30
 800315c:	b2da      	uxtb	r2, r3
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003166:	0e9b      	lsrs	r3, r3, #26
 8003168:	b2db      	uxtb	r3, r3
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	b2da      	uxtb	r2, r3
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003178:	0e1b      	lsrs	r3, r3, #24
 800317a:	b2db      	uxtb	r3, r3
 800317c:	f003 0303 	and.w	r3, r3, #3
 8003180:	b2da      	uxtb	r2, r3
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800318a:	0c1b      	lsrs	r3, r3, #16
 800318c:	b2da      	uxtb	r2, r3
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	b2da      	uxtb	r2, r3
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ac:	0d1b      	lsrs	r3, r3, #20
 80031ae:	b29a      	uxth	r2, r3
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031b8:	0c1b      	lsrs	r3, r3, #16
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f003 030f 	and.w	r3, r3, #15
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ca:	0bdb      	lsrs	r3, r3, #15
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031dc:	0b9b      	lsrs	r3, r3, #14
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ee:	0b5b      	lsrs	r3, r3, #13
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003200:	0b1b      	lsrs	r3, r3, #12
 8003202:	b2db      	uxtb	r3, r3
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	b2da      	uxtb	r2, r3
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	2200      	movs	r2, #0
 8003212:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003218:	2b00      	cmp	r3, #0
 800321a:	d163      	bne.n	80032e4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003220:	009a      	lsls	r2, r3, #2
 8003222:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003226:	4013      	ands	r3, r2
 8003228:	687a      	ldr	r2, [r7, #4]
 800322a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800322c:	0f92      	lsrs	r2, r2, #30
 800322e:	431a      	orrs	r2, r3
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003238:	0edb      	lsrs	r3, r3, #27
 800323a:	b2db      	uxtb	r3, r3
 800323c:	f003 0307 	and.w	r3, r3, #7
 8003240:	b2da      	uxtb	r2, r3
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800324a:	0e1b      	lsrs	r3, r3, #24
 800324c:	b2db      	uxtb	r3, r3
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	b2da      	uxtb	r2, r3
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800325c:	0d5b      	lsrs	r3, r3, #21
 800325e:	b2db      	uxtb	r3, r3
 8003260:	f003 0307 	and.w	r3, r3, #7
 8003264:	b2da      	uxtb	r2, r3
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800326e:	0c9b      	lsrs	r3, r3, #18
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	b2da      	uxtb	r2, r3
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003280:	0bdb      	lsrs	r3, r3, #15
 8003282:	b2db      	uxtb	r3, r3
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	b2da      	uxtb	r2, r3
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	7e1b      	ldrb	r3, [r3, #24]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	f003 0307 	and.w	r3, r3, #7
 80032a2:	3302      	adds	r3, #2
 80032a4:	2201      	movs	r2, #1
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80032ae:	fb02 f203 	mul.w	r2, r2, r3
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	7a1b      	ldrb	r3, [r3, #8]
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	2201      	movs	r2, #1
 80032c2:	409a      	lsls	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80032d0:	0a52      	lsrs	r2, r2, #9
 80032d2:	fb02 f203 	mul.w	r2, r2, r3
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e0:	661a      	str	r2, [r3, #96]	; 0x60
 80032e2:	e031      	b.n	8003348 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d11d      	bne.n	8003328 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032f0:	041b      	lsls	r3, r3, #16
 80032f2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032fa:	0c1b      	lsrs	r3, r3, #16
 80032fc:	431a      	orrs	r2, r3
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	691b      	ldr	r3, [r3, #16]
 8003306:	3301      	adds	r3, #1
 8003308:	029a      	lsls	r2, r3, #10
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800331c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	661a      	str	r2, [r3, #96]	; 0x60
 8003326:	e00f      	b.n	8003348 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a58      	ldr	r2, [pc, #352]	; (8003490 <HAL_SD_GetCardCSD+0x344>)
 800332e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003334:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e09d      	b.n	8003484 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800334c:	0b9b      	lsrs	r3, r3, #14
 800334e:	b2db      	uxtb	r3, r3
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	b2da      	uxtb	r2, r3
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800335e:	09db      	lsrs	r3, r3, #7
 8003360:	b2db      	uxtb	r3, r3
 8003362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003366:	b2da      	uxtb	r2, r3
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003370:	b2db      	uxtb	r3, r3
 8003372:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003376:	b2da      	uxtb	r2, r3
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003380:	0fdb      	lsrs	r3, r3, #31
 8003382:	b2da      	uxtb	r2, r3
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	0f5b      	lsrs	r3, r3, #29
 800338e:	b2db      	uxtb	r3, r3
 8003390:	f003 0303 	and.w	r3, r3, #3
 8003394:	b2da      	uxtb	r2, r3
 8003396:	683b      	ldr	r3, [r7, #0]
 8003398:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	0e9b      	lsrs	r3, r3, #26
 80033a0:	b2db      	uxtb	r3, r3
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	0d9b      	lsrs	r3, r3, #22
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	f003 030f 	and.w	r3, r3, #15
 80033b8:	b2da      	uxtb	r2, r3
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c2:	0d5b      	lsrs	r3, r3, #21
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	0c1b      	lsrs	r3, r3, #16
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	b2da      	uxtb	r2, r3
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f2:	0bdb      	lsrs	r3, r3, #15
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	f003 0301 	and.w	r3, r3, #1
 80033fa:	b2da      	uxtb	r2, r3
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	0b9b      	lsrs	r3, r3, #14
 8003408:	b2db      	uxtb	r3, r3
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	b2da      	uxtb	r2, r3
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341a:	0b5b      	lsrs	r3, r3, #13
 800341c:	b2db      	uxtb	r3, r3
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	b2da      	uxtb	r2, r3
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800342e:	0b1b      	lsrs	r3, r3, #12
 8003430:	b2db      	uxtb	r3, r3
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	b2da      	uxtb	r2, r3
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003442:	0a9b      	lsrs	r3, r3, #10
 8003444:	b2db      	uxtb	r3, r3
 8003446:	f003 0303 	and.w	r3, r3, #3
 800344a:	b2da      	uxtb	r2, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003456:	0a1b      	lsrs	r3, r3, #8
 8003458:	b2db      	uxtb	r3, r3
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	b2da      	uxtb	r2, r3
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800346a:	085b      	lsrs	r3, r3, #1
 800346c:	b2db      	uxtb	r3, r3
 800346e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003472:	b2da      	uxtb	r2, r3
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8003482:	2300      	movs	r3, #0
}
 8003484:	4618      	mov	r0, r3
 8003486:	370c      	adds	r7, #12
 8003488:	46bd      	mov	sp, r7
 800348a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348e:	4770      	bx	lr
 8003490:	004005ff 	.word	0x004005ff

08003494 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80034b2:	683b      	ldr	r3, [r7, #0]
 80034b4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80034ec:	b5b0      	push	{r4, r5, r7, lr}
 80034ee:	b08e      	sub	sp, #56	; 0x38
 80034f0:	af04      	add	r7, sp, #16
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2203      	movs	r2, #3
 8003500:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003508:	2b03      	cmp	r3, #3
 800350a:	d02e      	beq.n	800356a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003512:	d106      	bne.n	8003522 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003518:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	639a      	str	r2, [r3, #56]	; 0x38
 8003520:	e029      	b.n	8003576 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003528:	d10a      	bne.n	8003540 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 fa1a 	bl	8003964 <SD_WideBus_Enable>
 8003530:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003536:	6a3b      	ldr	r3, [r7, #32]
 8003538:	431a      	orrs	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	639a      	str	r2, [r3, #56]	; 0x38
 800353e:	e01a      	b.n	8003576 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10a      	bne.n	800355c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 fa57 	bl	80039fa <SD_WideBus_Disable>
 800354c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003552:	6a3b      	ldr	r3, [r7, #32]
 8003554:	431a      	orrs	r2, r3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	639a      	str	r2, [r3, #56]	; 0x38
 800355a:	e00c      	b.n	8003576 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003560:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	639a      	str	r2, [r3, #56]	; 0x38
 8003568:	e005      	b.n	8003576 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00b      	beq.n	8003596 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a26      	ldr	r2, [pc, #152]	; (800361c <HAL_SD_ConfigWideBusOperation+0x130>)
 8003584:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003594:	e01f      	b.n	80035d6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	695b      	ldr	r3, [r3, #20]
 80035b0:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	699b      	ldr	r3, [r3, #24]
 80035b6:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681d      	ldr	r5, [r3, #0]
 80035bc:	466c      	mov	r4, sp
 80035be:	f107 0314 	add.w	r3, r7, #20
 80035c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80035c6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80035ca:	f107 0308 	add.w	r3, r7, #8
 80035ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80035d0:	4628      	mov	r0, r5
 80035d2:	f001 fd31 	bl	8005038 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035de:	4618      	mov	r0, r3
 80035e0:	f001 fe06 	bl	80051f0 <SDMMC_CmdBlockLength>
 80035e4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80035e6:	6a3b      	ldr	r3, [r7, #32]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d00c      	beq.n	8003606 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0a      	ldr	r2, [pc, #40]	; (800361c <HAL_SD_ConfigWideBusOperation+0x130>)
 80035f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035f8:	6a3b      	ldr	r3, [r7, #32]
 80035fa:	431a      	orrs	r2, r3
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800360e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003612:	4618      	mov	r0, r3
 8003614:	3728      	adds	r7, #40	; 0x28
 8003616:	46bd      	mov	sp, r7
 8003618:	bdb0      	pop	{r4, r5, r7, pc}
 800361a:	bf00      	nop
 800361c:	004005ff 	.word	0x004005ff

08003620 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8003628:	2300      	movs	r3, #0
 800362a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800362c:	f107 030c 	add.w	r3, r7, #12
 8003630:	4619      	mov	r1, r3
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 f96e 	bl	8003914 <SD_SendStatus>
 8003638:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800363a:	697b      	ldr	r3, [r7, #20]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d005      	beq.n	800364c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	0a5b      	lsrs	r3, r3, #9
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8003656:	693b      	ldr	r3, [r7, #16]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3718      	adds	r7, #24
 800365c:	46bd      	mov	sp, r7
 800365e:	bd80      	pop	{r7, pc}

08003660 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003660:	b5b0      	push	{r4, r5, r7, lr}
 8003662:	b094      	sub	sp, #80	; 0x50
 8003664:	af04      	add	r7, sp, #16
 8003666:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003668:	2301      	movs	r3, #1
 800366a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f001 fd39 	bl	80050e8 <SDIO_GetPowerState>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d102      	bne.n	8003682 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800367c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003680:	e0b6      	b.n	80037f0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	2b03      	cmp	r3, #3
 8003688:	d02f      	beq.n	80036ea <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4618      	mov	r0, r3
 8003690:	f001 ff62 	bl	8005558 <SDMMC_CmdSendCID>
 8003694:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003696:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <SD_InitCard+0x40>
    {
      return errorstate;
 800369c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369e:	e0a7      	b.n	80037f0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f001 fd63 	bl	8005172 <SDIO_GetResponse>
 80036ac:	4602      	mov	r2, r0
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2104      	movs	r1, #4
 80036b8:	4618      	mov	r0, r3
 80036ba:	f001 fd5a 	bl	8005172 <SDIO_GetResponse>
 80036be:	4602      	mov	r2, r0
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2108      	movs	r1, #8
 80036ca:	4618      	mov	r0, r3
 80036cc:	f001 fd51 	bl	8005172 <SDIO_GetResponse>
 80036d0:	4602      	mov	r2, r0
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	210c      	movs	r1, #12
 80036dc:	4618      	mov	r0, r3
 80036de:	f001 fd48 	bl	8005172 <SDIO_GetResponse>
 80036e2:	4602      	mov	r2, r0
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d00d      	beq.n	800370e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f107 020e 	add.w	r2, r7, #14
 80036fa:	4611      	mov	r1, r2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f001 ff68 	bl	80055d2 <SDMMC_CmdSetRelAdd>
 8003702:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003704:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <SD_InitCard+0xae>
    {
      return errorstate;
 800370a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800370c:	e070      	b.n	80037f0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	2b03      	cmp	r3, #3
 8003714:	d036      	beq.n	8003784 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003716:	89fb      	ldrh	r3, [r7, #14]
 8003718:	461a      	mov	r2, r3
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003726:	041b      	lsls	r3, r3, #16
 8003728:	4619      	mov	r1, r3
 800372a:	4610      	mov	r0, r2
 800372c:	f001 ff32 	bl	8005594 <SDMMC_CmdSendCSD>
 8003730:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <SD_InitCard+0xdc>
    {
      return errorstate;
 8003738:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373a:	e059      	b.n	80037f0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2100      	movs	r1, #0
 8003742:	4618      	mov	r0, r3
 8003744:	f001 fd15 	bl	8005172 <SDIO_GetResponse>
 8003748:	4602      	mov	r2, r0
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2104      	movs	r1, #4
 8003754:	4618      	mov	r0, r3
 8003756:	f001 fd0c 	bl	8005172 <SDIO_GetResponse>
 800375a:	4602      	mov	r2, r0
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2108      	movs	r1, #8
 8003766:	4618      	mov	r0, r3
 8003768:	f001 fd03 	bl	8005172 <SDIO_GetResponse>
 800376c:	4602      	mov	r2, r0
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	210c      	movs	r1, #12
 8003778:	4618      	mov	r0, r3
 800377a:	f001 fcfa 	bl	8005172 <SDIO_GetResponse>
 800377e:	4602      	mov	r2, r0
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	2104      	movs	r1, #4
 800378a:	4618      	mov	r0, r3
 800378c:	f001 fcf1 	bl	8005172 <SDIO_GetResponse>
 8003790:	4603      	mov	r3, r0
 8003792:	0d1a      	lsrs	r2, r3, #20
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003798:	f107 0310 	add.w	r3, r7, #16
 800379c:	4619      	mov	r1, r3
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff fcd4 	bl	800314c <HAL_SD_GetCardCSD>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d002      	beq.n	80037b0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80037ae:	e01f      	b.n	80037f0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6819      	ldr	r1, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037b8:	041b      	lsls	r3, r3, #16
 80037ba:	461a      	mov	r2, r3
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	4608      	mov	r0, r1
 80037c2:	f001 fde1 	bl	8005388 <SDMMC_CmdSelDesel>
 80037c6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80037c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d001      	beq.n	80037d2 <SD_InitCard+0x172>
  {
    return errorstate;
 80037ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037d0:	e00e      	b.n	80037f0 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681d      	ldr	r5, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	466c      	mov	r4, sp
 80037da:	f103 0210 	add.w	r2, r3, #16
 80037de:	ca07      	ldmia	r2, {r0, r1, r2}
 80037e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80037e4:	3304      	adds	r3, #4
 80037e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037e8:	4628      	mov	r0, r5
 80037ea:	f001 fc25 	bl	8005038 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3740      	adds	r7, #64	; 0x40
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bdb0      	pop	{r4, r5, r7, pc}

080037f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003800:	2300      	movs	r3, #0
 8003802:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003804:	2300      	movs	r3, #0
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f001 fddc 	bl	80053ce <SDMMC_CmdGoIdleState>
 8003816:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <SD_PowerON+0x2a>
  {
    return errorstate;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	e072      	b.n	8003908 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4618      	mov	r0, r3
 8003828:	f001 fdef 	bl	800540a <SDMMC_CmdOperCond>
 800382c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00d      	beq.n	8003850 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4618      	mov	r0, r3
 8003840:	f001 fdc5 	bl	80053ce <SDMMC_CmdGoIdleState>
 8003844:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d004      	beq.n	8003856 <SD_PowerON+0x5e>
    {
      return errorstate;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	e05b      	b.n	8003908 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2201      	movs	r2, #1
 8003854:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800385a:	2b01      	cmp	r3, #1
 800385c:	d137      	bne.n	80038ce <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2100      	movs	r1, #0
 8003864:	4618      	mov	r0, r3
 8003866:	f001 fdef 	bl	8005448 <SDMMC_CmdAppCommand>
 800386a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d02d      	beq.n	80038ce <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003872:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003876:	e047      	b.n	8003908 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	2100      	movs	r1, #0
 800387e:	4618      	mov	r0, r3
 8003880:	f001 fde2 	bl	8005448 <SDMMC_CmdAppCommand>
 8003884:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <SD_PowerON+0x98>
    {
      return errorstate;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	e03b      	b.n	8003908 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	491e      	ldr	r1, [pc, #120]	; (8003910 <SD_PowerON+0x118>)
 8003896:	4618      	mov	r0, r3
 8003898:	f001 fdf8 	bl	800548c <SDMMC_CmdAppOperCommand>
 800389c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d002      	beq.n	80038aa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80038a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80038a8:	e02e      	b.n	8003908 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2100      	movs	r1, #0
 80038b0:	4618      	mov	r0, r3
 80038b2:	f001 fc5e 	bl	8005172 <SDIO_GetResponse>
 80038b6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	0fdb      	lsrs	r3, r3, #31
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <SD_PowerON+0xcc>
 80038c0:	2301      	movs	r3, #1
 80038c2:	e000      	b.n	80038c6 <SD_PowerON+0xce>
 80038c4:	2300      	movs	r3, #0
 80038c6:	613b      	str	r3, [r7, #16]

    count++;
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	3301      	adds	r3, #1
 80038cc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d802      	bhi.n	80038de <SD_PowerON+0xe6>
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0cc      	beq.n	8003878 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80038de:	68bb      	ldr	r3, [r7, #8]
 80038e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d902      	bls.n	80038ee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80038e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038ec:	e00c      	b.n	8003908 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d003      	beq.n	8003900 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44
 80038fe:	e002      	b.n	8003906 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2200      	movs	r2, #0
 8003904:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003906:	2300      	movs	r3, #0
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	c1100000 	.word	0xc1100000

08003914 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d102      	bne.n	800392a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003924:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003928:	e018      	b.n	800395c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003932:	041b      	lsls	r3, r3, #16
 8003934:	4619      	mov	r1, r3
 8003936:	4610      	mov	r0, r2
 8003938:	f001 fe6c 	bl	8005614 <SDMMC_CmdSendStatus>
 800393c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d001      	beq.n	8003948 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	e009      	b.n	800395c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	2100      	movs	r1, #0
 800394e:	4618      	mov	r0, r3
 8003950:	f001 fc0f 	bl	8005172 <SDIO_GetResponse>
 8003954:	4602      	mov	r2, r0
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	2300      	movs	r3, #0
 8003972:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2100      	movs	r1, #0
 800397a:	4618      	mov	r0, r3
 800397c:	f001 fbf9 	bl	8005172 <SDIO_GetResponse>
 8003980:	4603      	mov	r3, r0
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800398a:	d102      	bne.n	8003992 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800398c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003990:	e02f      	b.n	80039f2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003992:	f107 030c 	add.w	r3, r7, #12
 8003996:	4619      	mov	r1, r3
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f000 f879 	bl	8003a90 <SD_FindSCR>
 800399e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80039a0:	697b      	ldr	r3, [r7, #20]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	e023      	b.n	80039f2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d01c      	beq.n	80039ee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681a      	ldr	r2, [r3, #0]
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039bc:	041b      	lsls	r3, r3, #16
 80039be:	4619      	mov	r1, r3
 80039c0:	4610      	mov	r0, r2
 80039c2:	f001 fd41 	bl	8005448 <SDMMC_CmdAppCommand>
 80039c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d001      	beq.n	80039d2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	e00f      	b.n	80039f2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	2102      	movs	r1, #2
 80039d8:	4618      	mov	r0, r3
 80039da:	f001 fd7a 	bl	80054d2 <SDMMC_CmdBusWidth>
 80039de:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	e003      	b.n	80039f2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e001      	b.n	80039f2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80039ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3718      	adds	r7, #24
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}

080039fa <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b086      	sub	sp, #24
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003a02:	2300      	movs	r3, #0
 8003a04:	60fb      	str	r3, [r7, #12]
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2100      	movs	r1, #0
 8003a10:	4618      	mov	r0, r3
 8003a12:	f001 fbae 	bl	8005172 <SDIO_GetResponse>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003a20:	d102      	bne.n	8003a28 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003a22:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003a26:	e02f      	b.n	8003a88 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003a28:	f107 030c 	add.w	r3, r7, #12
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f82e 	bl	8003a90 <SD_FindSCR>
 8003a34:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	e023      	b.n	8003a88 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d01c      	beq.n	8003a84 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a52:	041b      	lsls	r3, r3, #16
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f001 fcf6 	bl	8005448 <SDMMC_CmdAppCommand>
 8003a5c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d001      	beq.n	8003a68 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	e00f      	b.n	8003a88 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2100      	movs	r1, #0
 8003a6e:	4618      	mov	r0, r3
 8003a70:	f001 fd2f 	bl	80054d2 <SDMMC_CmdBusWidth>
 8003a74:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d001      	beq.n	8003a80 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	e003      	b.n	8003a88 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003a80:	2300      	movs	r3, #0
 8003a82:	e001      	b.n	8003a88 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003a84:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3718      	adds	r7, #24
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003a90:	b590      	push	{r4, r7, lr}
 8003a92:	b08f      	sub	sp, #60	; 0x3c
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003a9a:	f7fd fb1d 	bl	80010d8 <HAL_GetTick>
 8003a9e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	60bb      	str	r3, [r7, #8]
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2108      	movs	r1, #8
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f001 fb9a 	bl	80051f0 <SDMMC_CmdBlockLength>
 8003abc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac6:	e0b2      	b.n	8003c2e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ad0:	041b      	lsls	r3, r3, #16
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	4610      	mov	r0, r2
 8003ad6:	f001 fcb7 	bl	8005448 <SDMMC_CmdAppCommand>
 8003ada:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d001      	beq.n	8003ae6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	e0a3      	b.n	8003c2e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003ae6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003aea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003aec:	2308      	movs	r3, #8
 8003aee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 8003af0:	2330      	movs	r3, #48	; 0x30
 8003af2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 8003af4:	2302      	movs	r3, #2
 8003af6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003af8:	2300      	movs	r3, #0
 8003afa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 8003afc:	2301      	movs	r3, #1
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f107 0210 	add.w	r2, r7, #16
 8003b08:	4611      	mov	r1, r2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f001 fb44 	bl	8005198 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4618      	mov	r0, r3
 8003b16:	f001 fcfe 	bl	8005516 <SDMMC_CmdSendSCR>
 8003b1a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003b1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d02a      	beq.n	8003b78 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b24:	e083      	b.n	8003c2e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d00f      	beq.n	8003b54 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6819      	ldr	r1, [r3, #0]
 8003b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	f107 0208 	add.w	r2, r7, #8
 8003b40:	18d4      	adds	r4, r2, r3
 8003b42:	4608      	mov	r0, r1
 8003b44:	f001 faa3 	bl	800508e <SDIO_ReadFIFO>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	6023      	str	r3, [r4, #0]
      index++;
 8003b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b4e:	3301      	adds	r3, #1
 8003b50:	637b      	str	r3, [r7, #52]	; 0x34
 8003b52:	e006      	b.n	8003b62 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d012      	beq.n	8003b88 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8003b62:	f7fd fab9 	bl	80010d8 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b70:	d102      	bne.n	8003b78 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8003b72:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003b76:	e05a      	b.n	8003c2e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b7e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d0cf      	beq.n	8003b26 <SD_FindSCR+0x96>
 8003b86:	e000      	b.n	8003b8a <SD_FindSCR+0xfa>
      break;
 8003b88:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b90:	f003 0308 	and.w	r3, r3, #8
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d005      	beq.n	8003ba4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2208      	movs	r2, #8
 8003b9e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	e044      	b.n	8003c2e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2202      	movs	r2, #2
 8003bb8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e037      	b.n	8003c2e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc4:	f003 0320 	and.w	r3, r3, #32
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d005      	beq.n	8003bd8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2220      	movs	r2, #32
 8003bd2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8003bd4:	2320      	movs	r3, #32
 8003bd6:	e02a      	b.n	8003c2e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f240 523a 	movw	r2, #1338	; 0x53a
 8003be0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	061a      	lsls	r2, r3, #24
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	021b      	lsls	r3, r3, #8
 8003bea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	0a1b      	lsrs	r3, r3, #8
 8003bf4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003bf8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	0e1b      	lsrs	r3, r3, #24
 8003bfe:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8003c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c02:	601a      	str	r2, [r3, #0]
    scr++;
 8003c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c06:	3304      	adds	r3, #4
 8003c08:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	061a      	lsls	r2, r3, #24
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	021b      	lsls	r3, r3, #8
 8003c12:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003c16:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	0a1b      	lsrs	r3, r3, #8
 8003c1c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003c20:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	0e1b      	lsrs	r3, r3, #24
 8003c26:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8003c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c2a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	373c      	adds	r7, #60	; 0x3c
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd90      	pop	{r4, r7, pc}

08003c36 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c36:	b580      	push	{r7, lr}
 8003c38:	b082      	sub	sp, #8
 8003c3a:	af00      	add	r7, sp, #0
 8003c3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d101      	bne.n	8003c48 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e041      	b.n	8003ccc <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d106      	bne.n	8003c62 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7fd f8ab 	bl	8000db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2202      	movs	r2, #2
 8003c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3304      	adds	r3, #4
 8003c72:	4619      	mov	r1, r3
 8003c74:	4610      	mov	r0, r2
 8003c76:	f000 f995 	bl	8003fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2201      	movs	r2, #1
 8003cae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b082      	sub	sp, #8
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e041      	b.n	8003d6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d106      	bne.n	8003d00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f7fd f824 	bl	8000d48 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2202      	movs	r2, #2
 8003d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	3304      	adds	r3, #4
 8003d10:	4619      	mov	r1, r3
 8003d12:	4610      	mov	r0, r2
 8003d14:	f000 f946 	bl	8003fa4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}

08003d72 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003d72:	b580      	push	{r7, lr}
 8003d74:	b082      	sub	sp, #8
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e041      	b.n	8003e0a <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d106      	bne.n	8003da0 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f000 f839 	bl	8003e12 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2202      	movs	r2, #2
 8003da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4619      	mov	r1, r3
 8003db2:	4610      	mov	r0, r2
 8003db4:	f000 f8f6 	bl	8003fa4 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f022 0208 	bic.w	r2, r2, #8
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6819      	ldr	r1, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	683a      	ldr	r2, [r7, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2201      	movs	r2, #1
 8003ddc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2201      	movs	r2, #1
 8003de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2201      	movs	r2, #1
 8003dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2201      	movs	r2, #1
 8003df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e08:	2300      	movs	r3, #0
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3708      	adds	r7, #8
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	bd80      	pop	{r7, pc}

08003e12 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003e12:	b480      	push	{r7}
 8003e14:	b083      	sub	sp, #12
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
	...

08003e28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d101      	bne.n	8003e42 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	e0ac      	b.n	8003f9c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2201      	movs	r2, #1
 8003e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b0c      	cmp	r3, #12
 8003e4e:	f200 809f 	bhi.w	8003f90 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003e52:	a201      	add	r2, pc, #4	; (adr r2, 8003e58 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e58:	08003e8d 	.word	0x08003e8d
 8003e5c:	08003f91 	.word	0x08003f91
 8003e60:	08003f91 	.word	0x08003f91
 8003e64:	08003f91 	.word	0x08003f91
 8003e68:	08003ecd 	.word	0x08003ecd
 8003e6c:	08003f91 	.word	0x08003f91
 8003e70:	08003f91 	.word	0x08003f91
 8003e74:	08003f91 	.word	0x08003f91
 8003e78:	08003f0f 	.word	0x08003f0f
 8003e7c:	08003f91 	.word	0x08003f91
 8003e80:	08003f91 	.word	0x08003f91
 8003e84:	08003f91 	.word	0x08003f91
 8003e88:	08003f4f 	.word	0x08003f4f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68b9      	ldr	r1, [r7, #8]
 8003e92:	4618      	mov	r0, r3
 8003e94:	f000 f926 	bl	80040e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f042 0208 	orr.w	r2, r2, #8
 8003ea6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	699a      	ldr	r2, [r3, #24]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f022 0204 	bic.w	r2, r2, #4
 8003eb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	6999      	ldr	r1, [r3, #24]
 8003ebe:	68bb      	ldr	r3, [r7, #8]
 8003ec0:	691a      	ldr	r2, [r3, #16]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	619a      	str	r2, [r3, #24]
      break;
 8003eca:	e062      	b.n	8003f92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	68b9      	ldr	r1, [r7, #8]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f976 	bl	80041c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	699a      	ldr	r2, [r3, #24]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ee6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	699a      	ldr	r2, [r3, #24]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ef6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6999      	ldr	r1, [r3, #24]
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	021a      	lsls	r2, r3, #8
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	430a      	orrs	r2, r1
 8003f0a:	619a      	str	r2, [r3, #24]
      break;
 8003f0c:	e041      	b.n	8003f92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	68b9      	ldr	r1, [r7, #8]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f000 f9cb 	bl	80042b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69da      	ldr	r2, [r3, #28]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f042 0208 	orr.w	r2, r2, #8
 8003f28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69da      	ldr	r2, [r3, #28]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f022 0204 	bic.w	r2, r2, #4
 8003f38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69d9      	ldr	r1, [r3, #28]
 8003f40:	68bb      	ldr	r3, [r7, #8]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	430a      	orrs	r2, r1
 8003f4a:	61da      	str	r2, [r3, #28]
      break;
 8003f4c:	e021      	b.n	8003f92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	68b9      	ldr	r1, [r7, #8]
 8003f54:	4618      	mov	r0, r3
 8003f56:	f000 fa1f 	bl	8004398 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	69da      	ldr	r2, [r3, #28]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	69d9      	ldr	r1, [r3, #28]
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	691b      	ldr	r3, [r3, #16]
 8003f84:	021a      	lsls	r2, r3, #8
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	61da      	str	r2, [r3, #28]
      break;
 8003f8e:	e000      	b.n	8003f92 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003f90:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	4a40      	ldr	r2, [pc, #256]	; (80040b8 <TIM_Base_SetConfig+0x114>)
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d013      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fc2:	d00f      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	4a3d      	ldr	r2, [pc, #244]	; (80040bc <TIM_Base_SetConfig+0x118>)
 8003fc8:	4293      	cmp	r3, r2
 8003fca:	d00b      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	4a3c      	ldr	r2, [pc, #240]	; (80040c0 <TIM_Base_SetConfig+0x11c>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d007      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a3b      	ldr	r2, [pc, #236]	; (80040c4 <TIM_Base_SetConfig+0x120>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d003      	beq.n	8003fe4 <TIM_Base_SetConfig+0x40>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	4a3a      	ldr	r2, [pc, #232]	; (80040c8 <TIM_Base_SetConfig+0x124>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d108      	bne.n	8003ff6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	68fa      	ldr	r2, [r7, #12]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a2f      	ldr	r2, [pc, #188]	; (80040b8 <TIM_Base_SetConfig+0x114>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d02b      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004004:	d027      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a2c      	ldr	r2, [pc, #176]	; (80040bc <TIM_Base_SetConfig+0x118>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d023      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a2b      	ldr	r2, [pc, #172]	; (80040c0 <TIM_Base_SetConfig+0x11c>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d01f      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	4a2a      	ldr	r2, [pc, #168]	; (80040c4 <TIM_Base_SetConfig+0x120>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d01b      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	4a29      	ldr	r2, [pc, #164]	; (80040c8 <TIM_Base_SetConfig+0x124>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d017      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a28      	ldr	r2, [pc, #160]	; (80040cc <TIM_Base_SetConfig+0x128>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d013      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a27      	ldr	r2, [pc, #156]	; (80040d0 <TIM_Base_SetConfig+0x12c>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d00f      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a26      	ldr	r2, [pc, #152]	; (80040d4 <TIM_Base_SetConfig+0x130>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d00b      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a25      	ldr	r2, [pc, #148]	; (80040d8 <TIM_Base_SetConfig+0x134>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d007      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a24      	ldr	r2, [pc, #144]	; (80040dc <TIM_Base_SetConfig+0x138>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d003      	beq.n	8004056 <TIM_Base_SetConfig+0xb2>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a23      	ldr	r2, [pc, #140]	; (80040e0 <TIM_Base_SetConfig+0x13c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d108      	bne.n	8004068 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	68db      	ldr	r3, [r3, #12]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	4313      	orrs	r3, r2
 8004066:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800407c:	683b      	ldr	r3, [r7, #0]
 800407e:	689a      	ldr	r2, [r3, #8]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	4a0a      	ldr	r2, [pc, #40]	; (80040b8 <TIM_Base_SetConfig+0x114>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d003      	beq.n	800409c <TIM_Base_SetConfig+0xf8>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a0c      	ldr	r2, [pc, #48]	; (80040c8 <TIM_Base_SetConfig+0x124>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d103      	bne.n	80040a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	691a      	ldr	r2, [r3, #16]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	615a      	str	r2, [r3, #20]
}
 80040aa:	bf00      	nop
 80040ac:	3714      	adds	r7, #20
 80040ae:	46bd      	mov	sp, r7
 80040b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b4:	4770      	bx	lr
 80040b6:	bf00      	nop
 80040b8:	40010000 	.word	0x40010000
 80040bc:	40000400 	.word	0x40000400
 80040c0:	40000800 	.word	0x40000800
 80040c4:	40000c00 	.word	0x40000c00
 80040c8:	40010400 	.word	0x40010400
 80040cc:	40014000 	.word	0x40014000
 80040d0:	40014400 	.word	0x40014400
 80040d4:	40014800 	.word	0x40014800
 80040d8:	40001800 	.word	0x40001800
 80040dc:	40001c00 	.word	0x40001c00
 80040e0:	40002000 	.word	0x40002000

080040e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b087      	sub	sp, #28
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
 80040ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	f023 0201 	bic.w	r2, r3, #1
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a1b      	ldr	r3, [r3, #32]
 80040fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	699b      	ldr	r3, [r3, #24]
 800410a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004112:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f023 0303 	bic.w	r3, r3, #3
 800411a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f023 0302 	bic.w	r3, r3, #2
 800412c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	689b      	ldr	r3, [r3, #8]
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a20      	ldr	r2, [pc, #128]	; (80041bc <TIM_OC1_SetConfig+0xd8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_OC1_SetConfig+0x64>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a1f      	ldr	r2, [pc, #124]	; (80041c0 <TIM_OC1_SetConfig+0xdc>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d10c      	bne.n	8004162 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004148:	697b      	ldr	r3, [r7, #20]
 800414a:	f023 0308 	bic.w	r3, r3, #8
 800414e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	697a      	ldr	r2, [r7, #20]
 8004156:	4313      	orrs	r3, r2
 8004158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	f023 0304 	bic.w	r3, r3, #4
 8004160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	4a15      	ldr	r2, [pc, #84]	; (80041bc <TIM_OC1_SetConfig+0xd8>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d003      	beq.n	8004172 <TIM_OC1_SetConfig+0x8e>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	4a14      	ldr	r2, [pc, #80]	; (80041c0 <TIM_OC1_SetConfig+0xdc>)
 800416e:	4293      	cmp	r3, r2
 8004170:	d111      	bne.n	8004196 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004178:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004180:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	695b      	ldr	r3, [r3, #20]
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	693a      	ldr	r2, [r7, #16]
 8004192:	4313      	orrs	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	685a      	ldr	r2, [r3, #4]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	621a      	str	r2, [r3, #32]
}
 80041b0:	bf00      	nop
 80041b2:	371c      	adds	r7, #28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	40010000 	.word	0x40010000
 80041c0:	40010400 	.word	0x40010400

080041c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f023 0210 	bic.w	r2, r3, #16
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	021b      	lsls	r3, r3, #8
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4313      	orrs	r3, r2
 8004206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f023 0320 	bic.w	r3, r3, #32
 800420e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	011b      	lsls	r3, r3, #4
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	4313      	orrs	r3, r2
 800421a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a22      	ldr	r2, [pc, #136]	; (80042a8 <TIM_OC2_SetConfig+0xe4>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d003      	beq.n	800422c <TIM_OC2_SetConfig+0x68>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	4a21      	ldr	r2, [pc, #132]	; (80042ac <TIM_OC2_SetConfig+0xe8>)
 8004228:	4293      	cmp	r3, r2
 800422a:	d10d      	bne.n	8004248 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004246:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	4a17      	ldr	r2, [pc, #92]	; (80042a8 <TIM_OC2_SetConfig+0xe4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d003      	beq.n	8004258 <TIM_OC2_SetConfig+0x94>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a16      	ldr	r2, [pc, #88]	; (80042ac <TIM_OC2_SetConfig+0xe8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d113      	bne.n	8004280 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800425e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004266:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	693a      	ldr	r2, [r7, #16]
 8004270:	4313      	orrs	r3, r2
 8004272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	4313      	orrs	r3, r2
 800427e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	685a      	ldr	r2, [r3, #4]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	621a      	str	r2, [r3, #32]
}
 800429a:	bf00      	nop
 800429c:	371c      	adds	r7, #28
 800429e:	46bd      	mov	sp, r7
 80042a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a4:	4770      	bx	lr
 80042a6:	bf00      	nop
 80042a8:	40010000 	.word	0x40010000
 80042ac:	40010400 	.word	0x40010400

080042b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b087      	sub	sp, #28
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	69db      	ldr	r3, [r3, #28]
 80042d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	f023 0303 	bic.w	r3, r3, #3
 80042e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	021b      	lsls	r3, r3, #8
 8004300:	697a      	ldr	r2, [r7, #20]
 8004302:	4313      	orrs	r3, r2
 8004304:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a21      	ldr	r2, [pc, #132]	; (8004390 <TIM_OC3_SetConfig+0xe0>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d003      	beq.n	8004316 <TIM_OC3_SetConfig+0x66>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a20      	ldr	r2, [pc, #128]	; (8004394 <TIM_OC3_SetConfig+0xe4>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d10d      	bne.n	8004332 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800431c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004330:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a16      	ldr	r2, [pc, #88]	; (8004390 <TIM_OC3_SetConfig+0xe0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d003      	beq.n	8004342 <TIM_OC3_SetConfig+0x92>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	4a15      	ldr	r2, [pc, #84]	; (8004394 <TIM_OC3_SetConfig+0xe4>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d113      	bne.n	800436a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004348:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004350:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	011b      	lsls	r3, r3, #4
 8004358:	693a      	ldr	r2, [r7, #16]
 800435a:	4313      	orrs	r3, r2
 800435c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	693a      	ldr	r2, [r7, #16]
 8004366:	4313      	orrs	r3, r2
 8004368:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685a      	ldr	r2, [r3, #4]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	697a      	ldr	r2, [r7, #20]
 8004382:	621a      	str	r2, [r3, #32]
}
 8004384:	bf00      	nop
 8004386:	371c      	adds	r7, #28
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	40010000 	.word	0x40010000
 8004394:	40010400 	.word	0x40010400

08004398 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004398:	b480      	push	{r7}
 800439a:	b087      	sub	sp, #28
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6a1b      	ldr	r3, [r3, #32]
 80043a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a1b      	ldr	r3, [r3, #32]
 80043b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	021b      	lsls	r3, r3, #8
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	4313      	orrs	r3, r2
 80043da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	031b      	lsls	r3, r3, #12
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a12      	ldr	r2, [pc, #72]	; (800443c <TIM_OC4_SetConfig+0xa4>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d003      	beq.n	8004400 <TIM_OC4_SetConfig+0x68>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a11      	ldr	r2, [pc, #68]	; (8004440 <TIM_OC4_SetConfig+0xa8>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d109      	bne.n	8004414 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004406:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	695b      	ldr	r3, [r3, #20]
 800440c:	019b      	lsls	r3, r3, #6
 800440e:	697a      	ldr	r2, [r7, #20]
 8004410:	4313      	orrs	r3, r2
 8004412:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	697a      	ldr	r2, [r7, #20]
 8004418:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	68fa      	ldr	r2, [r7, #12]
 800441e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	693a      	ldr	r2, [r7, #16]
 800442c:	621a      	str	r2, [r3, #32]
}
 800442e:	bf00      	nop
 8004430:	371c      	adds	r7, #28
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40010000 	.word	0x40010000
 8004440:	40010400 	.word	0x40010400

08004444 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004454:	2b01      	cmp	r3, #1
 8004456:	d101      	bne.n	800445c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004458:	2302      	movs	r3, #2
 800445a:	e05a      	b.n	8004512 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2201      	movs	r2, #1
 8004460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2202      	movs	r2, #2
 8004468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004482:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68fa      	ldr	r2, [r7, #12]
 800448a:	4313      	orrs	r3, r2
 800448c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a21      	ldr	r2, [pc, #132]	; (8004520 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d022      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a8:	d01d      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a1d      	ldr	r2, [pc, #116]	; (8004524 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d018      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a1b      	ldr	r2, [pc, #108]	; (8004528 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d013      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	4a1a      	ldr	r2, [pc, #104]	; (800452c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d00e      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a18      	ldr	r2, [pc, #96]	; (8004530 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d009      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a17      	ldr	r2, [pc, #92]	; (8004534 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d004      	beq.n	80044e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	4a15      	ldr	r2, [pc, #84]	; (8004538 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d10c      	bne.n	8004500 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80044ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	4313      	orrs	r3, r2
 80044f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004510:	2300      	movs	r3, #0
}
 8004512:	4618      	mov	r0, r3
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	40010000 	.word	0x40010000
 8004524:	40000400 	.word	0x40000400
 8004528:	40000800 	.word	0x40000800
 800452c:	40000c00 	.word	0x40000c00
 8004530:	40010400 	.word	0x40010400
 8004534:	40014000 	.word	0x40014000
 8004538:	40001800 	.word	0x40001800

0800453c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800453c:	b480      	push	{r7}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
 8004544:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004554:	2302      	movs	r3, #2
 8004556:	e03d      	b.n	80045d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4313      	orrs	r3, r2
 8004596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	4313      	orrs	r3, r2
 80045a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	4313      	orrs	r3, r2
 80045b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	69db      	ldr	r3, [r3, #28]
 80045be:	4313      	orrs	r3, r2
 80045c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68fa      	ldr	r2, [r7, #12]
 80045c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d101      	bne.n	80045f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e03f      	b.n	8004672 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fc fc86 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2224      	movs	r2, #36	; 0x24
 8004610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004622:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fb3f 	bl	8004ca8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	691a      	ldr	r2, [r3, #16]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004638:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	695a      	ldr	r2, [r3, #20]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004648:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	68da      	ldr	r2, [r3, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004658:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004670:	2300      	movs	r3, #0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b08a      	sub	sp, #40	; 0x28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800469c:	2300      	movs	r3, #0
 800469e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80046a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a6:	f003 030f 	and.w	r3, r3, #15
 80046aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80046ac:	69bb      	ldr	r3, [r7, #24]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d10d      	bne.n	80046ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b4:	f003 0320 	and.w	r3, r3, #32
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d008      	beq.n	80046ce <HAL_UART_IRQHandler+0x52>
 80046bc:	6a3b      	ldr	r3, [r7, #32]
 80046be:	f003 0320 	and.w	r3, r3, #32
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fa57 	bl	8004b7a <UART_Receive_IT>
      return;
 80046cc:	e17c      	b.n	80049c8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f000 80b1 	beq.w	8004838 <HAL_UART_IRQHandler+0x1bc>
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d105      	bne.n	80046ec <HAL_UART_IRQHandler+0x70>
 80046e0:	6a3b      	ldr	r3, [r7, #32]
 80046e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	f000 80a6 	beq.w	8004838 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80046ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00a      	beq.n	800470c <HAL_UART_IRQHandler+0x90>
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	f043 0201 	orr.w	r2, r3, #1
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800470e:	f003 0304 	and.w	r3, r3, #4
 8004712:	2b00      	cmp	r3, #0
 8004714:	d00a      	beq.n	800472c <HAL_UART_IRQHandler+0xb0>
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004724:	f043 0202 	orr.w	r2, r3, #2
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800472c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_UART_IRQHandler+0xd0>
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	2b00      	cmp	r3, #0
 800473e:	d005      	beq.n	800474c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	f043 0204 	orr.w	r2, r3, #4
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	f003 0308 	and.w	r3, r3, #8
 8004752:	2b00      	cmp	r3, #0
 8004754:	d00f      	beq.n	8004776 <HAL_UART_IRQHandler+0xfa>
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	f003 0320 	and.w	r3, r3, #32
 800475c:	2b00      	cmp	r3, #0
 800475e:	d104      	bne.n	800476a <HAL_UART_IRQHandler+0xee>
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	f003 0301 	and.w	r3, r3, #1
 8004766:	2b00      	cmp	r3, #0
 8004768:	d005      	beq.n	8004776 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	f043 0208 	orr.w	r2, r3, #8
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	f000 811f 	beq.w	80049be <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b00      	cmp	r3, #0
 8004788:	d007      	beq.n	800479a <HAL_UART_IRQHandler+0x11e>
 800478a:	6a3b      	ldr	r3, [r7, #32]
 800478c:	f003 0320 	and.w	r3, r3, #32
 8004790:	2b00      	cmp	r3, #0
 8004792:	d002      	beq.n	800479a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 f9f0 	bl	8004b7a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	695b      	ldr	r3, [r3, #20]
 80047a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a4:	2b40      	cmp	r3, #64	; 0x40
 80047a6:	bf0c      	ite	eq
 80047a8:	2301      	moveq	r3, #1
 80047aa:	2300      	movne	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	f003 0308 	and.w	r3, r3, #8
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d102      	bne.n	80047c2 <HAL_UART_IRQHandler+0x146>
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d031      	beq.n	8004826 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f930 	bl	8004a28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d2:	2b40      	cmp	r3, #64	; 0x40
 80047d4:	d123      	bne.n	800481e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	695a      	ldr	r2, [r3, #20]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d013      	beq.n	8004816 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047f2:	4a77      	ldr	r2, [pc, #476]	; (80049d0 <HAL_UART_IRQHandler+0x354>)
 80047f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fc fe1d 	bl	800143a <HAL_DMA_Abort_IT>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d016      	beq.n	8004834 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800480c:	687a      	ldr	r2, [r7, #4]
 800480e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004810:	4610      	mov	r0, r2
 8004812:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004814:	e00e      	b.n	8004834 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 f8f0 	bl	80049fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800481c:	e00a      	b.n	8004834 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 f8ec 	bl	80049fc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004824:	e006      	b.n	8004834 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 f8e8 	bl	80049fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004832:	e0c4      	b.n	80049be <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004834:	bf00      	nop
    return;
 8004836:	e0c2      	b.n	80049be <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483c:	2b01      	cmp	r3, #1
 800483e:	f040 80a2 	bne.w	8004986 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004844:	f003 0310 	and.w	r3, r3, #16
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 809c 	beq.w	8004986 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800484e:	6a3b      	ldr	r3, [r7, #32]
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b00      	cmp	r3, #0
 8004856:	f000 8096 	beq.w	8004986 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	60fb      	str	r3, [r7, #12]
 800486e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800487a:	2b40      	cmp	r3, #64	; 0x40
 800487c:	d14f      	bne.n	800491e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004888:	8a3b      	ldrh	r3, [r7, #16]
 800488a:	2b00      	cmp	r3, #0
 800488c:	f000 8099 	beq.w	80049c2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004894:	8a3a      	ldrh	r2, [r7, #16]
 8004896:	429a      	cmp	r2, r3
 8004898:	f080 8093 	bcs.w	80049c2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	8a3a      	ldrh	r2, [r7, #16]
 80048a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048ac:	d02b      	beq.n	8004906 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	68da      	ldr	r2, [r3, #12]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048bc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695a      	ldr	r2, [r3, #20]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 0201 	bic.w	r2, r2, #1
 80048cc:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695a      	ldr	r2, [r3, #20]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048dc:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2220      	movs	r2, #32
 80048e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	68da      	ldr	r2, [r3, #12]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f022 0210 	bic.w	r2, r2, #16
 80048fa:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004900:	4618      	mov	r0, r3
 8004902:	f7fc fd2a 	bl	800135a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800490e:	b29b      	uxth	r3, r3
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	b29b      	uxth	r3, r3
 8004914:	4619      	mov	r1, r3
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 f87a 	bl	8004a10 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800491c:	e051      	b.n	80049c2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004926:	b29b      	uxth	r3, r3
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004930:	b29b      	uxth	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d047      	beq.n	80049c6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8004936:	8a7b      	ldrh	r3, [r7, #18]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d044      	beq.n	80049c6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68da      	ldr	r2, [r3, #12]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800494a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	695a      	ldr	r2, [r3, #20]
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f022 0201 	bic.w	r2, r2, #1
 800495a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0210 	bic.w	r2, r2, #16
 8004978:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800497a:	8a7b      	ldrh	r3, [r7, #18]
 800497c:	4619      	mov	r1, r3
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 f846 	bl	8004a10 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004984:	e01f      	b.n	80049c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004988:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_UART_IRQHandler+0x326>
 8004990:	6a3b      	ldr	r3, [r7, #32]
 8004992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f000 f885 	bl	8004aaa <UART_Transmit_IT>
    return;
 80049a0:	e012      	b.n	80049c8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80049a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d00d      	beq.n	80049c8 <HAL_UART_IRQHandler+0x34c>
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d008      	beq.n	80049c8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f8c7 	bl	8004b4a <UART_EndTransmit_IT>
    return;
 80049bc:	e004      	b.n	80049c8 <HAL_UART_IRQHandler+0x34c>
    return;
 80049be:	bf00      	nop
 80049c0:	e002      	b.n	80049c8 <HAL_UART_IRQHandler+0x34c>
      return;
 80049c2:	bf00      	nop
 80049c4:	e000      	b.n	80049c8 <HAL_UART_IRQHandler+0x34c>
      return;
 80049c6:	bf00      	nop
  }
}
 80049c8:	3728      	adds	r7, #40	; 0x28
 80049ca:	46bd      	mov	sp, r7
 80049cc:	bd80      	pop	{r7, pc}
 80049ce:	bf00      	nop
 80049d0:	08004a83 	.word	0x08004a83

080049d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b083      	sub	sp, #12
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80049dc:	bf00      	nop
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b083      	sub	sp, #12
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80049f0:	bf00      	nop
 80049f2:	370c      	adds	r7, #12
 80049f4:	46bd      	mov	sp, r7
 80049f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fa:	4770      	bx	lr

080049fc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a04:	bf00      	nop
 8004a06:	370c      	adds	r7, #12
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0e:	4770      	bx	lr

08004a10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	460b      	mov	r3, r1
 8004a1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a1c:	bf00      	nop
 8004a1e:	370c      	adds	r7, #12
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004a3e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	695a      	ldr	r2, [r3, #20]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d107      	bne.n	8004a68 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	68da      	ldr	r2, [r3, #12]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f022 0210 	bic.w	r2, r2, #16
 8004a66:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2220      	movs	r2, #32
 8004a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004a76:	bf00      	nop
 8004a78:	370c      	adds	r7, #12
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2200      	movs	r2, #0
 8004a94:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004a9c:	68f8      	ldr	r0, [r7, #12]
 8004a9e:	f7ff ffad 	bl	80049fc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004aa2:	bf00      	nop
 8004aa4:	3710      	adds	r7, #16
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b085      	sub	sp, #20
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b21      	cmp	r3, #33	; 0x21
 8004abc:	d13e      	bne.n	8004b3c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ac6:	d114      	bne.n	8004af2 <UART_Transmit_IT+0x48>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d110      	bne.n	8004af2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6a1b      	ldr	r3, [r3, #32]
 8004ad4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	881b      	ldrh	r3, [r3, #0]
 8004ada:	461a      	mov	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ae4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	1c9a      	adds	r2, r3, #2
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	621a      	str	r2, [r3, #32]
 8004af0:	e008      	b.n	8004b04 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	1c59      	adds	r1, r3, #1
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6211      	str	r1, [r2, #32]
 8004afc:	781a      	ldrb	r2, [r3, #0]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	3b01      	subs	r3, #1
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	4619      	mov	r1, r3
 8004b12:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d10f      	bne.n	8004b38 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	68da      	ldr	r2, [r3, #12]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b26:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68da      	ldr	r2, [r3, #12]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b36:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	e000      	b.n	8004b3e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b3c:	2302      	movs	r3, #2
  }
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b082      	sub	sp, #8
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68da      	ldr	r2, [r3, #12]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b60:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2220      	movs	r2, #32
 8004b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff ff32 	bl	80049d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b22      	cmp	r3, #34	; 0x22
 8004b8c:	f040 8087 	bne.w	8004c9e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b98:	d117      	bne.n	8004bca <UART_Receive_IT+0x50>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d113      	bne.n	8004bca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004baa:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	b29b      	uxth	r3, r3
 8004bb4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bc2:	1c9a      	adds	r2, r3, #2
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	629a      	str	r2, [r3, #40]	; 0x28
 8004bc8:	e026      	b.n	8004c18 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bce:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bdc:	d007      	beq.n	8004bee <UART_Receive_IT+0x74>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d10a      	bne.n	8004bfc <UART_Receive_IT+0x82>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	691b      	ldr	r3, [r3, #16]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d106      	bne.n	8004bfc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	b2da      	uxtb	r2, r3
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	701a      	strb	r2, [r3, #0]
 8004bfa:	e008      	b.n	8004c0e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	b2db      	uxtb	r3, r3
 8004c04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c08:	b2da      	uxtb	r2, r3
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	1c5a      	adds	r2, r3, #1
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	3b01      	subs	r3, #1
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	687a      	ldr	r2, [r7, #4]
 8004c24:	4619      	mov	r1, r3
 8004c26:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d136      	bne.n	8004c9a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f022 0220 	bic.w	r2, r2, #32
 8004c3a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c4a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	695a      	ldr	r2, [r3, #20]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f022 0201 	bic.w	r2, r2, #1
 8004c5a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2220      	movs	r2, #32
 8004c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d10e      	bne.n	8004c8a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68da      	ldr	r2, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f022 0210 	bic.w	r2, r2, #16
 8004c7a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c80:	4619      	mov	r1, r3
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f7ff fec4 	bl	8004a10 <HAL_UARTEx_RxEventCallback>
 8004c88:	e002      	b.n	8004c90 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff feac 	bl	80049e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	e002      	b.n	8004ca0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	e000      	b.n	8004ca0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8004c9e:	2302      	movs	r3, #2
  }
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ca8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cac:	b09f      	sub	sp, #124	; 0x7c
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	691b      	ldr	r3, [r3, #16]
 8004cb8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004cbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cbe:	68d9      	ldr	r1, [r3, #12]
 8004cc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	ea40 0301 	orr.w	r3, r0, r1
 8004cc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004cca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ccc:	689a      	ldr	r2, [r3, #8]
 8004cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd0:	691b      	ldr	r3, [r3, #16]
 8004cd2:	431a      	orrs	r2, r3
 8004cd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd6:	695b      	ldr	r3, [r3, #20]
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004ce2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004cec:	f021 010c 	bic.w	r1, r1, #12
 8004cf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cf2:	681a      	ldr	r2, [r3, #0]
 8004cf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004cf6:	430b      	orrs	r3, r1
 8004cf8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004cfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d06:	6999      	ldr	r1, [r3, #24]
 8004d08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	ea40 0301 	orr.w	r3, r0, r1
 8004d10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	4bc5      	ldr	r3, [pc, #788]	; (800502c <UART_SetConfig+0x384>)
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d004      	beq.n	8004d26 <UART_SetConfig+0x7e>
 8004d1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	4bc3      	ldr	r3, [pc, #780]	; (8005030 <UART_SetConfig+0x388>)
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d103      	bne.n	8004d2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d26:	f7fc fec7 	bl	8001ab8 <HAL_RCC_GetPCLK2Freq>
 8004d2a:	6778      	str	r0, [r7, #116]	; 0x74
 8004d2c:	e002      	b.n	8004d34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004d2e:	f7fc feaf 	bl	8001a90 <HAL_RCC_GetPCLK1Freq>
 8004d32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d3c:	f040 80b6 	bne.w	8004eac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004d40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d42:	461c      	mov	r4, r3
 8004d44:	f04f 0500 	mov.w	r5, #0
 8004d48:	4622      	mov	r2, r4
 8004d4a:	462b      	mov	r3, r5
 8004d4c:	1891      	adds	r1, r2, r2
 8004d4e:	6439      	str	r1, [r7, #64]	; 0x40
 8004d50:	415b      	adcs	r3, r3
 8004d52:	647b      	str	r3, [r7, #68]	; 0x44
 8004d54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d58:	1912      	adds	r2, r2, r4
 8004d5a:	eb45 0303 	adc.w	r3, r5, r3
 8004d5e:	f04f 0000 	mov.w	r0, #0
 8004d62:	f04f 0100 	mov.w	r1, #0
 8004d66:	00d9      	lsls	r1, r3, #3
 8004d68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d6c:	00d0      	lsls	r0, r2, #3
 8004d6e:	4602      	mov	r2, r0
 8004d70:	460b      	mov	r3, r1
 8004d72:	1911      	adds	r1, r2, r4
 8004d74:	6639      	str	r1, [r7, #96]	; 0x60
 8004d76:	416b      	adcs	r3, r5
 8004d78:	667b      	str	r3, [r7, #100]	; 0x64
 8004d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	1891      	adds	r1, r2, r2
 8004d86:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d88:	415b      	adcs	r3, r3
 8004d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004d94:	f7fb fa36 	bl	8000204 <__aeabi_uldivmod>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	460b      	mov	r3, r1
 8004d9c:	4ba5      	ldr	r3, [pc, #660]	; (8005034 <UART_SetConfig+0x38c>)
 8004d9e:	fba3 2302 	umull	r2, r3, r3, r2
 8004da2:	095b      	lsrs	r3, r3, #5
 8004da4:	011e      	lsls	r6, r3, #4
 8004da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004da8:	461c      	mov	r4, r3
 8004daa:	f04f 0500 	mov.w	r5, #0
 8004dae:	4622      	mov	r2, r4
 8004db0:	462b      	mov	r3, r5
 8004db2:	1891      	adds	r1, r2, r2
 8004db4:	6339      	str	r1, [r7, #48]	; 0x30
 8004db6:	415b      	adcs	r3, r3
 8004db8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004dbe:	1912      	adds	r2, r2, r4
 8004dc0:	eb45 0303 	adc.w	r3, r5, r3
 8004dc4:	f04f 0000 	mov.w	r0, #0
 8004dc8:	f04f 0100 	mov.w	r1, #0
 8004dcc:	00d9      	lsls	r1, r3, #3
 8004dce:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004dd2:	00d0      	lsls	r0, r2, #3
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	460b      	mov	r3, r1
 8004dd8:	1911      	adds	r1, r2, r4
 8004dda:	65b9      	str	r1, [r7, #88]	; 0x58
 8004ddc:	416b      	adcs	r3, r5
 8004dde:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004de0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	461a      	mov	r2, r3
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	1891      	adds	r1, r2, r2
 8004dec:	62b9      	str	r1, [r7, #40]	; 0x28
 8004dee:	415b      	adcs	r3, r3
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004df6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004dfa:	f7fb fa03 	bl	8000204 <__aeabi_uldivmod>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4b8c      	ldr	r3, [pc, #560]	; (8005034 <UART_SetConfig+0x38c>)
 8004e04:	fba3 1302 	umull	r1, r3, r3, r2
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	2164      	movs	r1, #100	; 0x64
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	3332      	adds	r3, #50	; 0x32
 8004e16:	4a87      	ldr	r2, [pc, #540]	; (8005034 <UART_SetConfig+0x38c>)
 8004e18:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	005b      	lsls	r3, r3, #1
 8004e20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004e24:	441e      	add	r6, r3
 8004e26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f04f 0100 	mov.w	r1, #0
 8004e2e:	4602      	mov	r2, r0
 8004e30:	460b      	mov	r3, r1
 8004e32:	1894      	adds	r4, r2, r2
 8004e34:	623c      	str	r4, [r7, #32]
 8004e36:	415b      	adcs	r3, r3
 8004e38:	627b      	str	r3, [r7, #36]	; 0x24
 8004e3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e3e:	1812      	adds	r2, r2, r0
 8004e40:	eb41 0303 	adc.w	r3, r1, r3
 8004e44:	f04f 0400 	mov.w	r4, #0
 8004e48:	f04f 0500 	mov.w	r5, #0
 8004e4c:	00dd      	lsls	r5, r3, #3
 8004e4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e52:	00d4      	lsls	r4, r2, #3
 8004e54:	4622      	mov	r2, r4
 8004e56:	462b      	mov	r3, r5
 8004e58:	1814      	adds	r4, r2, r0
 8004e5a:	653c      	str	r4, [r7, #80]	; 0x50
 8004e5c:	414b      	adcs	r3, r1
 8004e5e:	657b      	str	r3, [r7, #84]	; 0x54
 8004e60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	461a      	mov	r2, r3
 8004e66:	f04f 0300 	mov.w	r3, #0
 8004e6a:	1891      	adds	r1, r2, r2
 8004e6c:	61b9      	str	r1, [r7, #24]
 8004e6e:	415b      	adcs	r3, r3
 8004e70:	61fb      	str	r3, [r7, #28]
 8004e72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004e7a:	f7fb f9c3 	bl	8000204 <__aeabi_uldivmod>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4b6c      	ldr	r3, [pc, #432]	; (8005034 <UART_SetConfig+0x38c>)
 8004e84:	fba3 1302 	umull	r1, r3, r3, r2
 8004e88:	095b      	lsrs	r3, r3, #5
 8004e8a:	2164      	movs	r1, #100	; 0x64
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	00db      	lsls	r3, r3, #3
 8004e94:	3332      	adds	r3, #50	; 0x32
 8004e96:	4a67      	ldr	r2, [pc, #412]	; (8005034 <UART_SetConfig+0x38c>)
 8004e98:	fba2 2303 	umull	r2, r3, r2, r3
 8004e9c:	095b      	lsrs	r3, r3, #5
 8004e9e:	f003 0207 	and.w	r2, r3, #7
 8004ea2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4432      	add	r2, r6
 8004ea8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004eaa:	e0b9      	b.n	8005020 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004eae:	461c      	mov	r4, r3
 8004eb0:	f04f 0500 	mov.w	r5, #0
 8004eb4:	4622      	mov	r2, r4
 8004eb6:	462b      	mov	r3, r5
 8004eb8:	1891      	adds	r1, r2, r2
 8004eba:	6139      	str	r1, [r7, #16]
 8004ebc:	415b      	adcs	r3, r3
 8004ebe:	617b      	str	r3, [r7, #20]
 8004ec0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ec4:	1912      	adds	r2, r2, r4
 8004ec6:	eb45 0303 	adc.w	r3, r5, r3
 8004eca:	f04f 0000 	mov.w	r0, #0
 8004ece:	f04f 0100 	mov.w	r1, #0
 8004ed2:	00d9      	lsls	r1, r3, #3
 8004ed4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ed8:	00d0      	lsls	r0, r2, #3
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	eb12 0804 	adds.w	r8, r2, r4
 8004ee2:	eb43 0905 	adc.w	r9, r3, r5
 8004ee6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f04f 0100 	mov.w	r1, #0
 8004ef0:	f04f 0200 	mov.w	r2, #0
 8004ef4:	f04f 0300 	mov.w	r3, #0
 8004ef8:	008b      	lsls	r3, r1, #2
 8004efa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004efe:	0082      	lsls	r2, r0, #2
 8004f00:	4640      	mov	r0, r8
 8004f02:	4649      	mov	r1, r9
 8004f04:	f7fb f97e 	bl	8000204 <__aeabi_uldivmod>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4b49      	ldr	r3, [pc, #292]	; (8005034 <UART_SetConfig+0x38c>)
 8004f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	011e      	lsls	r6, r3, #4
 8004f16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f18:	4618      	mov	r0, r3
 8004f1a:	f04f 0100 	mov.w	r1, #0
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	1894      	adds	r4, r2, r2
 8004f24:	60bc      	str	r4, [r7, #8]
 8004f26:	415b      	adcs	r3, r3
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f2e:	1812      	adds	r2, r2, r0
 8004f30:	eb41 0303 	adc.w	r3, r1, r3
 8004f34:	f04f 0400 	mov.w	r4, #0
 8004f38:	f04f 0500 	mov.w	r5, #0
 8004f3c:	00dd      	lsls	r5, r3, #3
 8004f3e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f42:	00d4      	lsls	r4, r2, #3
 8004f44:	4622      	mov	r2, r4
 8004f46:	462b      	mov	r3, r5
 8004f48:	1814      	adds	r4, r2, r0
 8004f4a:	64bc      	str	r4, [r7, #72]	; 0x48
 8004f4c:	414b      	adcs	r3, r1
 8004f4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f04f 0100 	mov.w	r1, #0
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	f04f 0300 	mov.w	r3, #0
 8004f62:	008b      	lsls	r3, r1, #2
 8004f64:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f68:	0082      	lsls	r2, r0, #2
 8004f6a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004f6e:	f7fb f949 	bl	8000204 <__aeabi_uldivmod>
 8004f72:	4602      	mov	r2, r0
 8004f74:	460b      	mov	r3, r1
 8004f76:	4b2f      	ldr	r3, [pc, #188]	; (8005034 <UART_SetConfig+0x38c>)
 8004f78:	fba3 1302 	umull	r1, r3, r3, r2
 8004f7c:	095b      	lsrs	r3, r3, #5
 8004f7e:	2164      	movs	r1, #100	; 0x64
 8004f80:	fb01 f303 	mul.w	r3, r1, r3
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	3332      	adds	r3, #50	; 0x32
 8004f8a:	4a2a      	ldr	r2, [pc, #168]	; (8005034 <UART_SetConfig+0x38c>)
 8004f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8004f90:	095b      	lsrs	r3, r3, #5
 8004f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f96:	441e      	add	r6, r3
 8004f98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f04f 0100 	mov.w	r1, #0
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	1894      	adds	r4, r2, r2
 8004fa6:	603c      	str	r4, [r7, #0]
 8004fa8:	415b      	adcs	r3, r3
 8004faa:	607b      	str	r3, [r7, #4]
 8004fac:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fb0:	1812      	adds	r2, r2, r0
 8004fb2:	eb41 0303 	adc.w	r3, r1, r3
 8004fb6:	f04f 0400 	mov.w	r4, #0
 8004fba:	f04f 0500 	mov.w	r5, #0
 8004fbe:	00dd      	lsls	r5, r3, #3
 8004fc0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fc4:	00d4      	lsls	r4, r2, #3
 8004fc6:	4622      	mov	r2, r4
 8004fc8:	462b      	mov	r3, r5
 8004fca:	eb12 0a00 	adds.w	sl, r2, r0
 8004fce:	eb43 0b01 	adc.w	fp, r3, r1
 8004fd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f04f 0100 	mov.w	r1, #0
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	008b      	lsls	r3, r1, #2
 8004fe6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004fea:	0082      	lsls	r2, r0, #2
 8004fec:	4650      	mov	r0, sl
 8004fee:	4659      	mov	r1, fp
 8004ff0:	f7fb f908 	bl	8000204 <__aeabi_uldivmod>
 8004ff4:	4602      	mov	r2, r0
 8004ff6:	460b      	mov	r3, r1
 8004ff8:	4b0e      	ldr	r3, [pc, #56]	; (8005034 <UART_SetConfig+0x38c>)
 8004ffa:	fba3 1302 	umull	r1, r3, r3, r2
 8004ffe:	095b      	lsrs	r3, r3, #5
 8005000:	2164      	movs	r1, #100	; 0x64
 8005002:	fb01 f303 	mul.w	r3, r1, r3
 8005006:	1ad3      	subs	r3, r2, r3
 8005008:	011b      	lsls	r3, r3, #4
 800500a:	3332      	adds	r3, #50	; 0x32
 800500c:	4a09      	ldr	r2, [pc, #36]	; (8005034 <UART_SetConfig+0x38c>)
 800500e:	fba2 2303 	umull	r2, r3, r2, r3
 8005012:	095b      	lsrs	r3, r3, #5
 8005014:	f003 020f 	and.w	r2, r3, #15
 8005018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4432      	add	r2, r6
 800501e:	609a      	str	r2, [r3, #8]
}
 8005020:	bf00      	nop
 8005022:	377c      	adds	r7, #124	; 0x7c
 8005024:	46bd      	mov	sp, r7
 8005026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800502a:	bf00      	nop
 800502c:	40011000 	.word	0x40011000
 8005030:	40011400 	.word	0x40011400
 8005034:	51eb851f 	.word	0x51eb851f

08005038 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8005038:	b084      	sub	sp, #16
 800503a:	b480      	push	{r7}
 800503c:	b085      	sub	sp, #20
 800503e:	af00      	add	r7, sp, #0
 8005040:	6078      	str	r0, [r7, #4]
 8005042:	f107 001c 	add.w	r0, r7, #28
 8005046:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800504a:	2300      	movs	r3, #0
 800504c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800504e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8005050:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8005052:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8005054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8005056:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800505a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800505c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800505e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8005062:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	4313      	orrs	r3, r2
 8005068:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8005072:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005076:	68fa      	ldr	r2, [r7, #12]
 8005078:	431a      	orrs	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	b004      	add	sp, #16
 800508c:	4770      	bx	lr

0800508e <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 800508e:	b480      	push	{r7}
 8005090:	b083      	sub	sp, #12
 8005092:	af00      	add	r7, sp, #0
 8005094:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800509c:	4618      	mov	r0, r3
 800509e:	370c      	adds	r7, #12
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr

080050a8 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80050bc:	2300      	movs	r3, #0
}
 80050be:	4618      	mov	r0, r3
 80050c0:	370c      	adds	r7, #12
 80050c2:	46bd      	mov	sp, r7
 80050c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c8:	4770      	bx	lr

080050ca <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80050ca:	b580      	push	{r7, lr}
 80050cc:	b082      	sub	sp, #8
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2203      	movs	r2, #3
 80050d6:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80050d8:	2002      	movs	r0, #2
 80050da:	f7fc f809 	bl	80010f0 <HAL_Delay>
  
  return HAL_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3708      	adds	r7, #8
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f003 0303 	and.w	r3, r3, #3
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	370c      	adds	r7, #12
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800510e:	2300      	movs	r3, #0
 8005110:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	681a      	ldr	r2, [r3, #0]
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005122:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8005128:	431a      	orrs	r2, r3
                       Command->CPSM);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800512e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800513e:	f023 030f 	bic.w	r3, r3, #15
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	431a      	orrs	r2, r3
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	691b      	ldr	r3, [r3, #16]
 8005164:	b2db      	uxtb	r3, r3
}
 8005166:	4618      	mov	r0, r3
 8005168:	370c      	adds	r7, #12
 800516a:	46bd      	mov	sp, r7
 800516c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005170:	4770      	bx	lr

08005172 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8005172:	b480      	push	{r7}
 8005174:	b085      	sub	sp, #20
 8005176:	af00      	add	r7, sp, #0
 8005178:	6078      	str	r0, [r7, #4]
 800517a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	3314      	adds	r3, #20
 8005180:	461a      	mov	r2, r3
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	4413      	add	r3, r2
 8005186:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
}  
 800518c:	4618      	mov	r0, r3
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8005198:	b480      	push	{r7}
 800519a:	b085      	sub	sp, #20
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685a      	ldr	r2, [r3, #4]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80051be:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80051c4:	431a      	orrs	r2, r3
                       Data->DPSM);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80051ca:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051d6:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	431a      	orrs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80051e2:	2300      	movs	r3, #0

}
 80051e4:	4618      	mov	r0, r3
 80051e6:	3714      	adds	r7, #20
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b088      	sub	sp, #32
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80051fe:	2310      	movs	r3, #16
 8005200:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005202:	2340      	movs	r3, #64	; 0x40
 8005204:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005206:	2300      	movs	r3, #0
 8005208:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800520a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800520e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005210:	f107 0308 	add.w	r3, r7, #8
 8005214:	4619      	mov	r1, r3
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f7ff ff74 	bl	8005104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 800521c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005220:	2110      	movs	r1, #16
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fa44 	bl	80056b0 <SDMMC_GetCmdResp1>
 8005228:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800522a:	69fb      	ldr	r3, [r7, #28]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3720      	adds	r7, #32
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}

08005234 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b088      	sub	sp, #32
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8005242:	2311      	movs	r3, #17
 8005244:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005246:	2340      	movs	r3, #64	; 0x40
 8005248:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800524e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005252:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005254:	f107 0308 	add.w	r3, r7, #8
 8005258:	4619      	mov	r1, r3
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7ff ff52 	bl	8005104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8005260:	f241 3288 	movw	r2, #5000	; 0x1388
 8005264:	2111      	movs	r1, #17
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fa22 	bl	80056b0 <SDMMC_GetCmdResp1>
 800526c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800526e:	69fb      	ldr	r3, [r7, #28]
}
 8005270:	4618      	mov	r0, r3
 8005272:	3720      	adds	r7, #32
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b088      	sub	sp, #32
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8005286:	2312      	movs	r3, #18
 8005288:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800528a:	2340      	movs	r3, #64	; 0x40
 800528c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800528e:	2300      	movs	r3, #0
 8005290:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005296:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005298:	f107 0308 	add.w	r3, r7, #8
 800529c:	4619      	mov	r1, r3
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f7ff ff30 	bl	8005104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80052a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a8:	2112      	movs	r1, #18
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f000 fa00 	bl	80056b0 <SDMMC_GetCmdResp1>
 80052b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052b2:	69fb      	ldr	r3, [r7, #28]
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3720      	adds	r7, #32
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}

080052bc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b088      	sub	sp, #32
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
 80052c4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80052ca:	2318      	movs	r3, #24
 80052cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80052ce:	2340      	movs	r3, #64	; 0x40
 80052d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80052d2:	2300      	movs	r3, #0
 80052d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80052d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80052da:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80052dc:	f107 0308 	add.w	r3, r7, #8
 80052e0:	4619      	mov	r1, r3
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f7ff ff0e 	bl	8005104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80052e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80052ec:	2118      	movs	r1, #24
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f000 f9de 	bl	80056b0 <SDMMC_GetCmdResp1>
 80052f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80052f6:	69fb      	ldr	r3, [r7, #28]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3720      	adds	r7, #32
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b088      	sub	sp, #32
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800530e:	2319      	movs	r3, #25
 8005310:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005312:	2340      	movs	r3, #64	; 0x40
 8005314:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005316:	2300      	movs	r3, #0
 8005318:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800531a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800531e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005320:	f107 0308 	add.w	r3, r7, #8
 8005324:	4619      	mov	r1, r3
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f7ff feec 	bl	8005104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800532c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005330:	2119      	movs	r1, #25
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f9bc 	bl	80056b0 <SDMMC_GetCmdResp1>
 8005338:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800533a:	69fb      	ldr	r3, [r7, #28]
}
 800533c:	4618      	mov	r0, r3
 800533e:	3720      	adds	r7, #32
 8005340:	46bd      	mov	sp, r7
 8005342:	bd80      	pop	{r7, pc}

08005344 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b088      	sub	sp, #32
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8005350:	230c      	movs	r3, #12
 8005352:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005354:	2340      	movs	r3, #64	; 0x40
 8005356:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800535c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005360:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005362:	f107 0308 	add.w	r3, r7, #8
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff fecb 	bl	8005104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 800536e:	4a05      	ldr	r2, [pc, #20]	; (8005384 <SDMMC_CmdStopTransfer+0x40>)
 8005370:	210c      	movs	r1, #12
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f99c 	bl	80056b0 <SDMMC_GetCmdResp1>
 8005378:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800537a:	69fb      	ldr	r3, [r7, #28]
}
 800537c:	4618      	mov	r0, r3
 800537e:	3720      	adds	r7, #32
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	05f5e100 	.word	0x05f5e100

08005388 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b08a      	sub	sp, #40	; 0x28
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8005398:	2307      	movs	r3, #7
 800539a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800539c:	2340      	movs	r3, #64	; 0x40
 800539e:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053a0:	2300      	movs	r3, #0
 80053a2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053a8:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053aa:	f107 0310 	add.w	r3, r7, #16
 80053ae:	4619      	mov	r1, r3
 80053b0:	68f8      	ldr	r0, [r7, #12]
 80053b2:	f7ff fea7 	bl	8005104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80053b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ba:	2107      	movs	r1, #7
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 f977 	bl	80056b0 <SDMMC_GetCmdResp1>
 80053c2:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80053c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3728      	adds	r7, #40	; 0x28
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}

080053ce <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80053ce:	b580      	push	{r7, lr}
 80053d0:	b088      	sub	sp, #32
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80053da:	2300      	movs	r3, #0
 80053dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80053de:	2300      	movs	r3, #0
 80053e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80053e2:	2300      	movs	r3, #0
 80053e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80053e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80053ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80053ec:	f107 0308 	add.w	r3, r7, #8
 80053f0:	4619      	mov	r1, r3
 80053f2:	6878      	ldr	r0, [r7, #4]
 80053f4:	f7ff fe86 	bl	8005104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f000 f92d 	bl	8005658 <SDMMC_GetCmdError>
 80053fe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005400:	69fb      	ldr	r3, [r7, #28]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3720      	adds	r7, #32
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}

0800540a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 800540a:	b580      	push	{r7, lr}
 800540c:	b088      	sub	sp, #32
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8005412:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8005416:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8005418:	2308      	movs	r3, #8
 800541a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800541c:	2340      	movs	r3, #64	; 0x40
 800541e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8005420:	2300      	movs	r3, #0
 8005422:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005428:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800542a:	f107 0308 	add.w	r3, r7, #8
 800542e:	4619      	mov	r1, r3
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f7ff fe67 	bl	8005104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 fb24 	bl	8005a84 <SDMMC_GetCmdResp7>
 800543c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800543e:	69fb      	ldr	r3, [r7, #28]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3720      	adds	r7, #32
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8005456:	2337      	movs	r3, #55	; 0x37
 8005458:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800545a:	2340      	movs	r3, #64	; 0x40
 800545c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005462:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005466:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005468:	f107 0308 	add.w	r3, r7, #8
 800546c:	4619      	mov	r1, r3
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7ff fe48 	bl	8005104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8005474:	f241 3288 	movw	r2, #5000	; 0x1388
 8005478:	2137      	movs	r1, #55	; 0x37
 800547a:	6878      	ldr	r0, [r7, #4]
 800547c:	f000 f918 	bl	80056b0 <SDMMC_GetCmdResp1>
 8005480:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8005482:	69fb      	ldr	r3, [r7, #28]
}
 8005484:	4618      	mov	r0, r3
 8005486:	3720      	adds	r7, #32
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b088      	sub	sp, #32
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800549c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80054a2:	2329      	movs	r3, #41	; 0x29
 80054a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054a6:	2340      	movs	r3, #64	; 0x40
 80054a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054aa:	2300      	movs	r3, #0
 80054ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054b4:	f107 0308 	add.w	r3, r7, #8
 80054b8:	4619      	mov	r1, r3
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff fe22 	bl	8005104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fa2b 	bl	800591c <SDMMC_GetCmdResp3>
 80054c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80054c8:	69fb      	ldr	r3, [r7, #28]
}
 80054ca:	4618      	mov	r0, r3
 80054cc:	3720      	adds	r7, #32
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}

080054d2 <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 80054d2:	b580      	push	{r7, lr}
 80054d4:	b088      	sub	sp, #32
 80054d6:	af00      	add	r7, sp, #0
 80054d8:	6078      	str	r0, [r7, #4]
 80054da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80054e0:	2306      	movs	r3, #6
 80054e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80054e4:	2340      	movs	r3, #64	; 0x40
 80054e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80054e8:	2300      	movs	r3, #0
 80054ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80054ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80054f2:	f107 0308 	add.w	r3, r7, #8
 80054f6:	4619      	mov	r1, r3
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f7ff fe03 	bl	8005104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80054fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8005502:	2106      	movs	r1, #6
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f000 f8d3 	bl	80056b0 <SDMMC_GetCmdResp1>
 800550a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800550c:	69fb      	ldr	r3, [r7, #28]
}
 800550e:	4618      	mov	r0, r3
 8005510:	3720      	adds	r7, #32
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}

08005516 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b088      	sub	sp, #32
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800551e:	2300      	movs	r3, #0
 8005520:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8005522:	2333      	movs	r3, #51	; 0x33
 8005524:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005526:	2340      	movs	r3, #64	; 0x40
 8005528:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800552a:	2300      	movs	r3, #0
 800552c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800552e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005532:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005534:	f107 0308 	add.w	r3, r7, #8
 8005538:	4619      	mov	r1, r3
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f7ff fde2 	bl	8005104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8005540:	f241 3288 	movw	r2, #5000	; 0x1388
 8005544:	2133      	movs	r1, #51	; 0x33
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f8b2 	bl	80056b0 <SDMMC_GetCmdResp1>
 800554c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800554e:	69fb      	ldr	r3, [r7, #28]
}
 8005550:	4618      	mov	r0, r3
 8005552:	3720      	adds	r7, #32
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b088      	sub	sp, #32
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8005564:	2302      	movs	r3, #2
 8005566:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8005568:	23c0      	movs	r3, #192	; 0xc0
 800556a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800556c:	2300      	movs	r3, #0
 800556e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8005570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005574:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005576:	f107 0308 	add.w	r3, r7, #8
 800557a:	4619      	mov	r1, r3
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f7ff fdc1 	bl	8005104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f982 	bl	800588c <SDMMC_GetCmdResp2>
 8005588:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800558a:	69fb      	ldr	r3, [r7, #28]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3720      	adds	r7, #32
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800559e:	683b      	ldr	r3, [r7, #0]
 80055a0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80055a2:	2309      	movs	r3, #9
 80055a4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80055a6:	23c0      	movs	r3, #192	; 0xc0
 80055a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055aa:	2300      	movs	r3, #0
 80055ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055b2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055b4:	f107 0308 	add.w	r3, r7, #8
 80055b8:	4619      	mov	r1, r3
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f7ff fda2 	bl	8005104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 f963 	bl	800588c <SDMMC_GetCmdResp2>
 80055c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80055c8:	69fb      	ldr	r3, [r7, #28]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3720      	adds	r7, #32
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}

080055d2 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b088      	sub	sp, #32
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80055dc:	2300      	movs	r3, #0
 80055de:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80055e0:	2303      	movs	r3, #3
 80055e2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80055e4:	2340      	movs	r3, #64	; 0x40
 80055e6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80055e8:	2300      	movs	r3, #0
 80055ea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80055ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80055f0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80055f2:	f107 0308 	add.w	r3, r7, #8
 80055f6:	4619      	mov	r1, r3
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f7ff fd83 	bl	8005104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	2103      	movs	r1, #3
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f000 f9c8 	bl	8005998 <SDMMC_GetCmdResp6>
 8005608:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800560a:	69fb      	ldr	r3, [r7, #28]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3720      	adds	r7, #32
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
 800561c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8005622:	230d      	movs	r3, #13
 8005624:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8005626:	2340      	movs	r3, #64	; 0x40
 8005628:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800562a:	2300      	movs	r3, #0
 800562c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800562e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005632:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8005634:	f107 0308 	add.w	r3, r7, #8
 8005638:	4619      	mov	r1, r3
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7ff fd62 	bl	8005104 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8005640:	f241 3288 	movw	r2, #5000	; 0x1388
 8005644:	210d      	movs	r1, #13
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f832 	bl	80056b0 <SDMMC_GetCmdResp1>
 800564c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800564e:	69fb      	ldr	r3, [r7, #28]
}
 8005650:	4618      	mov	r0, r3
 8005652:	3720      	adds	r7, #32
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005660:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <SDMMC_GetCmdError+0x50>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a11      	ldr	r2, [pc, #68]	; (80056ac <SDMMC_GetCmdError+0x54>)
 8005666:	fba2 2303 	umull	r2, r3, r2, r3
 800566a:	0a5b      	lsrs	r3, r3, #9
 800566c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005670:	fb02 f303 	mul.w	r3, r2, r3
 8005674:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	1e5a      	subs	r2, r3, #1
 800567a:	60fa      	str	r2, [r7, #12]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d102      	bne.n	8005686 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005680:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005684:	e009      	b.n	800569a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800568a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800568e:	2b00      	cmp	r3, #0
 8005690:	d0f1      	beq.n	8005676 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	22c5      	movs	r2, #197	; 0xc5
 8005696:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8005698:	2300      	movs	r3, #0
}
 800569a:	4618      	mov	r0, r3
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop
 80056a8:	20000000 	.word	0x20000000
 80056ac:	10624dd3 	.word	0x10624dd3

080056b0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b088      	sub	sp, #32
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	60f8      	str	r0, [r7, #12]
 80056b8:	460b      	mov	r3, r1
 80056ba:	607a      	str	r2, [r7, #4]
 80056bc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80056be:	4b70      	ldr	r3, [pc, #448]	; (8005880 <SDMMC_GetCmdResp1+0x1d0>)
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a70      	ldr	r2, [pc, #448]	; (8005884 <SDMMC_GetCmdResp1+0x1d4>)
 80056c4:	fba2 2303 	umull	r2, r3, r2, r3
 80056c8:	0a5a      	lsrs	r2, r3, #9
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	fb02 f303 	mul.w	r3, r2, r3
 80056d0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	1e5a      	subs	r2, r3, #1
 80056d6:	61fa      	str	r2, [r7, #28]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d102      	bne.n	80056e2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80056dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80056e0:	e0c9      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d0ef      	beq.n	80056d2 <SDMMC_GetCmdResp1+0x22>
 80056f2:	69bb      	ldr	r3, [r7, #24]
 80056f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d1ea      	bne.n	80056d2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005700:	f003 0304 	and.w	r3, r3, #4
 8005704:	2b00      	cmp	r3, #0
 8005706:	d004      	beq.n	8005712 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	2204      	movs	r2, #4
 800570c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800570e:	2304      	movs	r3, #4
 8005710:	e0b1      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005716:	f003 0301 	and.w	r3, r3, #1
 800571a:	2b00      	cmp	r3, #0
 800571c:	d004      	beq.n	8005728 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2201      	movs	r2, #1
 8005722:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005724:	2301      	movs	r3, #1
 8005726:	e0a6      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	22c5      	movs	r2, #197	; 0xc5
 800572c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800572e:	68f8      	ldr	r0, [r7, #12]
 8005730:	f7ff fd12 	bl	8005158 <SDIO_GetCommandResponse>
 8005734:	4603      	mov	r3, r0
 8005736:	461a      	mov	r2, r3
 8005738:	7afb      	ldrb	r3, [r7, #11]
 800573a:	4293      	cmp	r3, r2
 800573c:	d001      	beq.n	8005742 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800573e:	2301      	movs	r3, #1
 8005740:	e099      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005742:	2100      	movs	r1, #0
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f7ff fd14 	bl	8005172 <SDIO_GetResponse>
 800574a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	4b4e      	ldr	r3, [pc, #312]	; (8005888 <SDMMC_GetCmdResp1+0x1d8>)
 8005750:	4013      	ands	r3, r2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8005756:	2300      	movs	r3, #0
 8005758:	e08d      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	2b00      	cmp	r3, #0
 800575e:	da02      	bge.n	8005766 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8005760:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005764:	e087      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d001      	beq.n	8005774 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8005770:	2340      	movs	r3, #64	; 0x40
 8005772:	e080      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8005774:	697b      	ldr	r3, [r7, #20]
 8005776:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800577e:	2380      	movs	r3, #128	; 0x80
 8005780:	e079      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8005782:	697b      	ldr	r3, [r7, #20]
 8005784:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d002      	beq.n	8005792 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800578c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005790:	e071      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800579c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80057a0:	e069      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80057ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80057b0:	e061      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80057bc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80057c0:	e059      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d002      	beq.n	80057d2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80057cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057d0:	e051      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d002      	beq.n	80057e2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80057dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057e0:	e049      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d002      	beq.n	80057f2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80057ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80057f0:	e041      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d002      	beq.n	8005802 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80057fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005800:	e039      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800580c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005810:	e031      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d002      	beq.n	8005822 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800581c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005820:	e029      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005828:	2b00      	cmp	r3, #0
 800582a:	d002      	beq.n	8005832 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800582c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8005830:	e021      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d002      	beq.n	8005842 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800583c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8005840:	e019      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d002      	beq.n	8005852 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800584c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005850:	e011      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800585c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005860:	e009      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f003 0308 	and.w	r3, r3, #8
 8005868:	2b00      	cmp	r3, #0
 800586a:	d002      	beq.n	8005872 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800586c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005870:	e001      	b.n	8005876 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005872:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005876:	4618      	mov	r0, r3
 8005878:	3720      	adds	r7, #32
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	20000000 	.word	0x20000000
 8005884:	10624dd3 	.word	0x10624dd3
 8005888:	fdffe008 	.word	0xfdffe008

0800588c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005894:	4b1f      	ldr	r3, [pc, #124]	; (8005914 <SDMMC_GetCmdResp2+0x88>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a1f      	ldr	r2, [pc, #124]	; (8005918 <SDMMC_GetCmdResp2+0x8c>)
 800589a:	fba2 2303 	umull	r2, r3, r2, r3
 800589e:	0a5b      	lsrs	r3, r3, #9
 80058a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a4:	fb02 f303 	mul.w	r3, r2, r3
 80058a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	1e5a      	subs	r2, r3, #1
 80058ae:	60fa      	str	r2, [r7, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d102      	bne.n	80058ba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80058b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80058b8:	e026      	b.n	8005908 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0ef      	beq.n	80058aa <SDMMC_GetCmdResp2+0x1e>
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1ea      	bne.n	80058aa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d8:	f003 0304 	and.w	r3, r3, #4
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d004      	beq.n	80058ea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2204      	movs	r2, #4
 80058e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80058e6:	2304      	movs	r3, #4
 80058e8:	e00e      	b.n	8005908 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058ee:	f003 0301 	and.w	r3, r3, #1
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d004      	beq.n	8005900 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2201      	movs	r2, #1
 80058fa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e003      	b.n	8005908 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	22c5      	movs	r2, #197	; 0xc5
 8005904:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005906:	2300      	movs	r3, #0
}
 8005908:	4618      	mov	r0, r3
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	20000000 	.word	0x20000000
 8005918:	10624dd3 	.word	0x10624dd3

0800591c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800591c:	b480      	push	{r7}
 800591e:	b085      	sub	sp, #20
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005924:	4b1a      	ldr	r3, [pc, #104]	; (8005990 <SDMMC_GetCmdResp3+0x74>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a1a      	ldr	r2, [pc, #104]	; (8005994 <SDMMC_GetCmdResp3+0x78>)
 800592a:	fba2 2303 	umull	r2, r3, r2, r3
 800592e:	0a5b      	lsrs	r3, r3, #9
 8005930:	f241 3288 	movw	r2, #5000	; 0x1388
 8005934:	fb02 f303 	mul.w	r3, r2, r3
 8005938:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	1e5a      	subs	r2, r3, #1
 800593e:	60fa      	str	r2, [r7, #12]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d102      	bne.n	800594a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005944:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005948:	e01b      	b.n	8005982 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800594e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005956:	2b00      	cmp	r3, #0
 8005958:	d0ef      	beq.n	800593a <SDMMC_GetCmdResp3+0x1e>
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005960:	2b00      	cmp	r3, #0
 8005962:	d1ea      	bne.n	800593a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d004      	beq.n	800597a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2204      	movs	r2, #4
 8005974:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005976:	2304      	movs	r3, #4
 8005978:	e003      	b.n	8005982 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	22c5      	movs	r2, #197	; 0xc5
 800597e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005980:	2300      	movs	r3, #0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr
 800598e:	bf00      	nop
 8005990:	20000000 	.word	0x20000000
 8005994:	10624dd3 	.word	0x10624dd3

08005998 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	460b      	mov	r3, r1
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80059a6:	4b35      	ldr	r3, [pc, #212]	; (8005a7c <SDMMC_GetCmdResp6+0xe4>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	4a35      	ldr	r2, [pc, #212]	; (8005a80 <SDMMC_GetCmdResp6+0xe8>)
 80059ac:	fba2 2303 	umull	r2, r3, r2, r3
 80059b0:	0a5b      	lsrs	r3, r3, #9
 80059b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059b6:	fb02 f303 	mul.w	r3, r2, r3
 80059ba:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	1e5a      	subs	r2, r3, #1
 80059c0:	61fa      	str	r2, [r7, #28]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d102      	bne.n	80059cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80059c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80059ca:	e052      	b.n	8005a72 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059d2:	69bb      	ldr	r3, [r7, #24]
 80059d4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d0ef      	beq.n	80059bc <SDMMC_GetCmdResp6+0x24>
 80059dc:	69bb      	ldr	r3, [r7, #24]
 80059de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d1ea      	bne.n	80059bc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059ea:	f003 0304 	and.w	r3, r3, #4
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d004      	beq.n	80059fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2204      	movs	r2, #4
 80059f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80059f8:	2304      	movs	r3, #4
 80059fa:	e03a      	b.n	8005a72 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a00:	f003 0301 	and.w	r3, r3, #1
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d004      	beq.n	8005a12 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2201      	movs	r2, #1
 8005a0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e02f      	b.n	8005a72 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f7ff fba0 	bl	8005158 <SDIO_GetCommandResponse>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	7afb      	ldrb	r3, [r7, #11]
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d001      	beq.n	8005a26 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005a22:	2301      	movs	r3, #1
 8005a24:	e025      	b.n	8005a72 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	22c5      	movs	r2, #197	; 0xc5
 8005a2a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8005a2c:	2100      	movs	r1, #0
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f7ff fb9f 	bl	8005172 <SDIO_GetResponse>
 8005a34:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d106      	bne.n	8005a4e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	0c1b      	lsrs	r3, r3, #16
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	e011      	b.n	8005a72 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d002      	beq.n	8005a5e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8005a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a5c:	e009      	b.n	8005a72 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8005a68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a6c:	e001      	b.n	8005a72 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8005a6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8005a72:	4618      	mov	r0, r3
 8005a74:	3720      	adds	r7, #32
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000000 	.word	0x20000000
 8005a80:	10624dd3 	.word	0x10624dd3

08005a84 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b085      	sub	sp, #20
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005a8c:	4b22      	ldr	r3, [pc, #136]	; (8005b18 <SDMMC_GetCmdResp7+0x94>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a22      	ldr	r2, [pc, #136]	; (8005b1c <SDMMC_GetCmdResp7+0x98>)
 8005a92:	fba2 2303 	umull	r2, r3, r2, r3
 8005a96:	0a5b      	lsrs	r3, r3, #9
 8005a98:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a9c:	fb02 f303 	mul.w	r3, r2, r3
 8005aa0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	1e5a      	subs	r2, r3, #1
 8005aa6:	60fa      	str	r2, [r7, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d102      	bne.n	8005ab2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005aac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005ab0:	e02c      	b.n	8005b0c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0ef      	beq.n	8005aa2 <SDMMC_GetCmdResp7+0x1e>
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1ea      	bne.n	8005aa2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ad0:	f003 0304 	and.w	r3, r3, #4
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d004      	beq.n	8005ae2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2204      	movs	r2, #4
 8005adc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005ade:	2304      	movs	r3, #4
 8005ae0:	e014      	b.n	8005b0c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d004      	beq.n	8005af8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2201      	movs	r2, #1
 8005af2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e009      	b.n	8005b0c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005afc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d002      	beq.n	8005b0a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2240      	movs	r2, #64	; 0x40
 8005b08:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8005b0a:	2300      	movs	r3, #0
  
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	20000000 	.word	0x20000000
 8005b1c:	10624dd3 	.word	0x10624dd3

08005b20 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8005b24:	4904      	ldr	r1, [pc, #16]	; (8005b38 <MX_FATFS_Init+0x18>)
 8005b26:	4805      	ldr	r0, [pc, #20]	; (8005b3c <MX_FATFS_Init+0x1c>)
 8005b28:	f000 f9e4 	bl	8005ef4 <FATFS_LinkDriver>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	461a      	mov	r2, r3
 8005b30:	4b03      	ldr	r3, [pc, #12]	; (8005b40 <MX_FATFS_Init+0x20>)
 8005b32:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005b34:	bf00      	nop
 8005b36:	bd80      	pop	{r7, pc}
 8005b38:	200001dc 	.word	0x200001dc
 8005b3c:	08005f9c 	.word	0x08005f9c
 8005b40:	200001d8 	.word	0x200001d8

08005b44 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005b4e:	f000 f879 	bl	8005c44 <BSP_SD_IsDetected>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d001      	beq.n	8005b5c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e012      	b.n	8005b82 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8005b5c:	480b      	ldr	r0, [pc, #44]	; (8005b8c <BSP_SD_Init+0x48>)
 8005b5e:	f7fc fee3 	bl	8002928 <HAL_SD_Init>
 8005b62:	4603      	mov	r3, r0
 8005b64:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8005b66:	79fb      	ldrb	r3, [r7, #7]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d109      	bne.n	8005b80 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8005b6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005b70:	4806      	ldr	r0, [pc, #24]	; (8005b8c <BSP_SD_Init+0x48>)
 8005b72:	f7fd fcbb 	bl	80034ec <HAL_SD_ConfigWideBusOperation>
 8005b76:	4603      	mov	r3, r0
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005b80:	79fb      	ldrb	r3, [r7, #7]
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3708      	adds	r7, #8
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}
 8005b8a:	bf00      	nop
 8005b8c:	20000034 	.word	0x20000034

08005b90 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b088      	sub	sp, #32
 8005b94:	af02      	add	r7, sp, #8
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	68ba      	ldr	r2, [r7, #8]
 8005baa:	68f9      	ldr	r1, [r7, #12]
 8005bac:	4806      	ldr	r0, [pc, #24]	; (8005bc8 <BSP_SD_ReadBlocks+0x38>)
 8005bae:	f7fc ff69 	bl	8002a84 <HAL_SD_ReadBlocks>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d001      	beq.n	8005bbc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	3718      	adds	r7, #24
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	bd80      	pop	{r7, pc}
 8005bc6:	bf00      	nop
 8005bc8:	20000034 	.word	0x20000034

08005bcc <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	60b9      	str	r1, [r7, #8]
 8005bd6:	607a      	str	r2, [r7, #4]
 8005bd8:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	9300      	str	r3, [sp, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	68f9      	ldr	r1, [r7, #12]
 8005be8:	4806      	ldr	r0, [pc, #24]	; (8005c04 <BSP_SD_WriteBlocks+0x38>)
 8005bea:	f7fd f929 	bl	8002e40 <HAL_SD_WriteBlocks>
 8005bee:	4603      	mov	r3, r0
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8005bf4:	2301      	movs	r3, #1
 8005bf6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8005bf8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
 8005c02:	bf00      	nop
 8005c04:	20000034 	.word	0x20000034

08005c08 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8005c0c:	4805      	ldr	r0, [pc, #20]	; (8005c24 <BSP_SD_GetCardState+0x1c>)
 8005c0e:	f7fd fd07 	bl	8003620 <HAL_SD_GetCardState>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b04      	cmp	r3, #4
 8005c16:	bf14      	ite	ne
 8005c18:	2301      	movne	r3, #1
 8005c1a:	2300      	moveq	r3, #0
 8005c1c:	b2db      	uxtb	r3, r3
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	bd80      	pop	{r7, pc}
 8005c22:	bf00      	nop
 8005c24:	20000034 	.word	0x20000034

08005c28 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b082      	sub	sp, #8
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	4803      	ldr	r0, [pc, #12]	; (8005c40 <BSP_SD_GetCardInfo+0x18>)
 8005c34:	f7fd fc2e 	bl	8003494 <HAL_SD_GetCardInfo>
}
 8005c38:	bf00      	nop
 8005c3a:	3708      	adds	r7, #8
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	bd80      	pop	{r7, pc}
 8005c40:	20000034 	.word	0x20000034

08005c44 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b082      	sub	sp, #8
 8005c48:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005c4e:	f000 f80b 	bl	8005c68 <BSP_PlatformIsDetected>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d101      	bne.n	8005c5c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8005c5c:	79fb      	ldrb	r3, [r7, #7]
 8005c5e:	b2db      	uxtb	r3, r3
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3708      	adds	r7, #8
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005c6e:	2301      	movs	r3, #1
 8005c70:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005c72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c76:	4806      	ldr	r0, [pc, #24]	; (8005c90 <BSP_PlatformIsDetected+0x28>)
 8005c78:	f7fb fd96 	bl	80017a8 <HAL_GPIO_ReadPin>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d001      	beq.n	8005c86 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8005c82:	2300      	movs	r3, #0
 8005c84:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005c86:	79fb      	ldrb	r3, [r7, #7]
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3708      	adds	r7, #8
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}
 8005c90:	40020800 	.word	0x40020800

08005c94 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8005c9e:	4b0b      	ldr	r3, [pc, #44]	; (8005ccc <SD_CheckStatus+0x38>)
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8005ca4:	f7ff ffb0 	bl	8005c08 <BSP_SD_GetCardState>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d107      	bne.n	8005cbe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8005cae:	4b07      	ldr	r3, [pc, #28]	; (8005ccc <SD_CheckStatus+0x38>)
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	f023 0301 	bic.w	r3, r3, #1
 8005cb8:	b2da      	uxtb	r2, r3
 8005cba:	4b04      	ldr	r3, [pc, #16]	; (8005ccc <SD_CheckStatus+0x38>)
 8005cbc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8005cbe:	4b03      	ldr	r3, [pc, #12]	; (8005ccc <SD_CheckStatus+0x38>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	b2db      	uxtb	r3, r3
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}
 8005ccc:	20000009 	.word	0x20000009

08005cd0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b082      	sub	sp, #8
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8005cda:	4b0b      	ldr	r3, [pc, #44]	; (8005d08 <SD_initialize+0x38>)
 8005cdc:	2201      	movs	r2, #1
 8005cde:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8005ce0:	f7ff ff30 	bl	8005b44 <BSP_SD_Init>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d107      	bne.n	8005cfa <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8005cea:	79fb      	ldrb	r3, [r7, #7]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7ff ffd1 	bl	8005c94 <SD_CheckStatus>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	4b04      	ldr	r3, [pc, #16]	; (8005d08 <SD_initialize+0x38>)
 8005cf8:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005cfa:	4b03      	ldr	r3, [pc, #12]	; (8005d08 <SD_initialize+0x38>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	b2db      	uxtb	r3, r3
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3708      	adds	r7, #8
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}
 8005d08:	20000009 	.word	0x20000009

08005d0c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b082      	sub	sp, #8
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	4603      	mov	r3, r0
 8005d14:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005d16:	79fb      	ldrb	r3, [r7, #7]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff ffbb 	bl	8005c94 <SD_CheckStatus>
 8005d1e:	4603      	mov	r3, r0
}
 8005d20:	4618      	mov	r0, r3
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60b9      	str	r1, [r7, #8]
 8005d30:	607a      	str	r2, [r7, #4]
 8005d32:	603b      	str	r3, [r7, #0]
 8005d34:	4603      	mov	r3, r0
 8005d36:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8005d3c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d40:	683a      	ldr	r2, [r7, #0]
 8005d42:	6879      	ldr	r1, [r7, #4]
 8005d44:	68b8      	ldr	r0, [r7, #8]
 8005d46:	f7ff ff23 	bl	8005b90 <BSP_SD_ReadBlocks>
 8005d4a:	4603      	mov	r3, r0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d107      	bne.n	8005d60 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8005d50:	bf00      	nop
 8005d52:	f7ff ff59 	bl	8005c08 <BSP_SD_GetCardState>
 8005d56:	4603      	mov	r3, r0
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1fa      	bne.n	8005d52 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3718      	adds	r7, #24
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}

08005d6a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005d6a:	b580      	push	{r7, lr}
 8005d6c:	b086      	sub	sp, #24
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	603b      	str	r3, [r7, #0]
 8005d76:	4603      	mov	r3, r0
 8005d78:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8005d7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d82:	683a      	ldr	r2, [r7, #0]
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	68b8      	ldr	r0, [r7, #8]
 8005d88:	f7ff ff20 	bl	8005bcc <BSP_SD_WriteBlocks>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d107      	bne.n	8005da2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8005d92:	bf00      	nop
 8005d94:	f7ff ff38 	bl	8005c08 <BSP_SD_GetCardState>
 8005d98:	4603      	mov	r3, r0
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1fa      	bne.n	8005d94 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8005d9e:	2300      	movs	r3, #0
 8005da0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8005da2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da4:	4618      	mov	r0, r3
 8005da6:	3718      	adds	r7, #24
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b08c      	sub	sp, #48	; 0x30
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	603a      	str	r2, [r7, #0]
 8005db6:	71fb      	strb	r3, [r7, #7]
 8005db8:	460b      	mov	r3, r1
 8005dba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8005dc2:	4b25      	ldr	r3, [pc, #148]	; (8005e58 <SD_ioctl+0xac>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <SD_ioctl+0x28>
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e03c      	b.n	8005e4e <SD_ioctl+0xa2>

  switch (cmd)
 8005dd4:	79bb      	ldrb	r3, [r7, #6]
 8005dd6:	2b03      	cmp	r3, #3
 8005dd8:	d834      	bhi.n	8005e44 <SD_ioctl+0x98>
 8005dda:	a201      	add	r2, pc, #4	; (adr r2, 8005de0 <SD_ioctl+0x34>)
 8005ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de0:	08005df1 	.word	0x08005df1
 8005de4:	08005df9 	.word	0x08005df9
 8005de8:	08005e11 	.word	0x08005e11
 8005dec:	08005e2b 	.word	0x08005e2b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005df0:	2300      	movs	r3, #0
 8005df2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005df6:	e028      	b.n	8005e4a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005df8:	f107 030c 	add.w	r3, r7, #12
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7ff ff13 	bl	8005c28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005e0e:	e01c      	b.n	8005e4a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005e10:	f107 030c 	add.w	r3, r7, #12
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7ff ff07 	bl	8005c28 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8005e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005e22:	2300      	movs	r3, #0
 8005e24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005e28:	e00f      	b.n	8005e4a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005e2a:	f107 030c 	add.w	r3, r7, #12
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f7ff fefa 	bl	8005c28 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e36:	0a5a      	lsrs	r2, r3, #9
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005e42:	e002      	b.n	8005e4a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005e44:	2304      	movs	r3, #4
 8005e46:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8005e4a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3730      	adds	r7, #48	; 0x30
 8005e52:	46bd      	mov	sp, r7
 8005e54:	bd80      	pop	{r7, pc}
 8005e56:	bf00      	nop
 8005e58:	20000009 	.word	0x20000009

08005e5c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b087      	sub	sp, #28
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	4613      	mov	r3, r2
 8005e68:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005e72:	4b1f      	ldr	r3, [pc, #124]	; (8005ef0 <FATFS_LinkDriverEx+0x94>)
 8005e74:	7a5b      	ldrb	r3, [r3, #9]
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d131      	bne.n	8005ee0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005e7c:	4b1c      	ldr	r3, [pc, #112]	; (8005ef0 <FATFS_LinkDriverEx+0x94>)
 8005e7e:	7a5b      	ldrb	r3, [r3, #9]
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	461a      	mov	r2, r3
 8005e84:	4b1a      	ldr	r3, [pc, #104]	; (8005ef0 <FATFS_LinkDriverEx+0x94>)
 8005e86:	2100      	movs	r1, #0
 8005e88:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8005e8a:	4b19      	ldr	r3, [pc, #100]	; (8005ef0 <FATFS_LinkDriverEx+0x94>)
 8005e8c:	7a5b      	ldrb	r3, [r3, #9]
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	4a17      	ldr	r2, [pc, #92]	; (8005ef0 <FATFS_LinkDriverEx+0x94>)
 8005e92:	009b      	lsls	r3, r3, #2
 8005e94:	4413      	add	r3, r2
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8005e9a:	4b15      	ldr	r3, [pc, #84]	; (8005ef0 <FATFS_LinkDriverEx+0x94>)
 8005e9c:	7a5b      	ldrb	r3, [r3, #9]
 8005e9e:	b2db      	uxtb	r3, r3
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	4b13      	ldr	r3, [pc, #76]	; (8005ef0 <FATFS_LinkDriverEx+0x94>)
 8005ea4:	4413      	add	r3, r2
 8005ea6:	79fa      	ldrb	r2, [r7, #7]
 8005ea8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005eaa:	4b11      	ldr	r3, [pc, #68]	; (8005ef0 <FATFS_LinkDriverEx+0x94>)
 8005eac:	7a5b      	ldrb	r3, [r3, #9]
 8005eae:	b2db      	uxtb	r3, r3
 8005eb0:	1c5a      	adds	r2, r3, #1
 8005eb2:	b2d1      	uxtb	r1, r2
 8005eb4:	4a0e      	ldr	r2, [pc, #56]	; (8005ef0 <FATFS_LinkDriverEx+0x94>)
 8005eb6:	7251      	strb	r1, [r2, #9]
 8005eb8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005eba:	7dbb      	ldrb	r3, [r7, #22]
 8005ebc:	3330      	adds	r3, #48	; 0x30
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	223a      	movs	r2, #58	; 0x3a
 8005eca:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	3302      	adds	r3, #2
 8005ed0:	222f      	movs	r2, #47	; 0x2f
 8005ed2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	3303      	adds	r3, #3
 8005ed8:	2200      	movs	r2, #0
 8005eda:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005edc:	2300      	movs	r3, #0
 8005ede:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8005ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	371c      	adds	r7, #28
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eec:	4770      	bx	lr
 8005eee:	bf00      	nop
 8005ef0:	20000028 	.word	0x20000028

08005ef4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8005efe:	2200      	movs	r2, #0
 8005f00:	6839      	ldr	r1, [r7, #0]
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7ff ffaa 	bl	8005e5c <FATFS_LinkDriverEx>
 8005f08:	4603      	mov	r3, r0
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3708      	adds	r7, #8
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
	...

08005f14 <__libc_init_array>:
 8005f14:	b570      	push	{r4, r5, r6, lr}
 8005f16:	4d0d      	ldr	r5, [pc, #52]	; (8005f4c <__libc_init_array+0x38>)
 8005f18:	4c0d      	ldr	r4, [pc, #52]	; (8005f50 <__libc_init_array+0x3c>)
 8005f1a:	1b64      	subs	r4, r4, r5
 8005f1c:	10a4      	asrs	r4, r4, #2
 8005f1e:	2600      	movs	r6, #0
 8005f20:	42a6      	cmp	r6, r4
 8005f22:	d109      	bne.n	8005f38 <__libc_init_array+0x24>
 8005f24:	4d0b      	ldr	r5, [pc, #44]	; (8005f54 <__libc_init_array+0x40>)
 8005f26:	4c0c      	ldr	r4, [pc, #48]	; (8005f58 <__libc_init_array+0x44>)
 8005f28:	f000 f820 	bl	8005f6c <_init>
 8005f2c:	1b64      	subs	r4, r4, r5
 8005f2e:	10a4      	asrs	r4, r4, #2
 8005f30:	2600      	movs	r6, #0
 8005f32:	42a6      	cmp	r6, r4
 8005f34:	d105      	bne.n	8005f42 <__libc_init_array+0x2e>
 8005f36:	bd70      	pop	{r4, r5, r6, pc}
 8005f38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f3c:	4798      	blx	r3
 8005f3e:	3601      	adds	r6, #1
 8005f40:	e7ee      	b.n	8005f20 <__libc_init_array+0xc>
 8005f42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f46:	4798      	blx	r3
 8005f48:	3601      	adds	r6, #1
 8005f4a:	e7f2      	b.n	8005f32 <__libc_init_array+0x1e>
 8005f4c:	08005fb8 	.word	0x08005fb8
 8005f50:	08005fb8 	.word	0x08005fb8
 8005f54:	08005fb8 	.word	0x08005fb8
 8005f58:	08005fbc 	.word	0x08005fbc

08005f5c <memset>:
 8005f5c:	4402      	add	r2, r0
 8005f5e:	4603      	mov	r3, r0
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d100      	bne.n	8005f66 <memset+0xa>
 8005f64:	4770      	bx	lr
 8005f66:	f803 1b01 	strb.w	r1, [r3], #1
 8005f6a:	e7f9      	b.n	8005f60 <memset+0x4>

08005f6c <_init>:
 8005f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f6e:	bf00      	nop
 8005f70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f72:	bc08      	pop	{r3}
 8005f74:	469e      	mov	lr, r3
 8005f76:	4770      	bx	lr

08005f78 <_fini>:
 8005f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f7a:	bf00      	nop
 8005f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f7e:	bc08      	pop	{r3}
 8005f80:	469e      	mov	lr, r3
 8005f82:	4770      	bx	lr
