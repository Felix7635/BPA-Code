
BA_F446ZE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000913c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  08009300  08009300  00019300  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009410  08009410  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08009410  08009410  00019410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009418  08009418  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009418  08009418  00019418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800941c  0800941c  0001941c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08009420  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bd0  2000000c  0800942c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000bdc  0800942c  00020bdc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001a6b0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000038b1  00000000  00000000  0003a6ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001408  00000000  00000000  0003dfa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001280  00000000  00000000  0003f3a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004b81  00000000  00000000  00040628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a203  00000000  00000000  000451a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6dce  00000000  00000000  0005f3ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0013617a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005284  00000000  00000000  001361d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080092e8 	.word	0x080092e8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	080092e8 	.word	0x080092e8

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000214:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <MX_DMA_Init+0x4c>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a0f      	ldr	r2, [pc, #60]	; (8000548 <MX_DMA_Init+0x4c>)
 800050c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <MX_DMA_Init+0x4c>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	203b      	movs	r0, #59	; 0x3b
 8000524:	f001 f891 	bl	800164a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000528:	203b      	movs	r0, #59	; 0x3b
 800052a:	f001 f8aa 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	2045      	movs	r0, #69	; 0x45
 8000534:	f001 f889 	bl	800164a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000538:	2045      	movs	r0, #69	; 0x45
 800053a:	f001 f8a2 	bl	8001682 <HAL_NVIC_EnableIRQ>

}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40023800 	.word	0x40023800

0800054c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08e      	sub	sp, #56	; 0x38
 8000550:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	623b      	str	r3, [r7, #32]
 8000566:	4ba6      	ldr	r3, [pc, #664]	; (8000800 <MX_GPIO_Init+0x2b4>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4aa5      	ldr	r2, [pc, #660]	; (8000800 <MX_GPIO_Init+0x2b4>)
 800056c:	f043 0310 	orr.w	r3, r3, #16
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4ba3      	ldr	r3, [pc, #652]	; (8000800 <MX_GPIO_Init+0x2b4>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0310 	and.w	r3, r3, #16
 800057a:	623b      	str	r3, [r7, #32]
 800057c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	61fb      	str	r3, [r7, #28]
 8000582:	4b9f      	ldr	r3, [pc, #636]	; (8000800 <MX_GPIO_Init+0x2b4>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a9e      	ldr	r2, [pc, #632]	; (8000800 <MX_GPIO_Init+0x2b4>)
 8000588:	f043 0304 	orr.w	r3, r3, #4
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b9c      	ldr	r3, [pc, #624]	; (8000800 <MX_GPIO_Init+0x2b4>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0304 	and.w	r3, r3, #4
 8000596:	61fb      	str	r3, [r7, #28]
 8000598:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	61bb      	str	r3, [r7, #24]
 800059e:	4b98      	ldr	r3, [pc, #608]	; (8000800 <MX_GPIO_Init+0x2b4>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a97      	ldr	r2, [pc, #604]	; (8000800 <MX_GPIO_Init+0x2b4>)
 80005a4:	f043 0320 	orr.w	r3, r3, #32
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b95      	ldr	r3, [pc, #596]	; (8000800 <MX_GPIO_Init+0x2b4>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0320 	and.w	r3, r3, #32
 80005b2:	61bb      	str	r3, [r7, #24]
 80005b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	4b91      	ldr	r3, [pc, #580]	; (8000800 <MX_GPIO_Init+0x2b4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a90      	ldr	r2, [pc, #576]	; (8000800 <MX_GPIO_Init+0x2b4>)
 80005c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b8e      	ldr	r3, [pc, #568]	; (8000800 <MX_GPIO_Init+0x2b4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ce:	617b      	str	r3, [r7, #20]
 80005d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	4b8a      	ldr	r3, [pc, #552]	; (8000800 <MX_GPIO_Init+0x2b4>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a89      	ldr	r2, [pc, #548]	; (8000800 <MX_GPIO_Init+0x2b4>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b87      	ldr	r3, [pc, #540]	; (8000800 <MX_GPIO_Init+0x2b4>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	4b83      	ldr	r3, [pc, #524]	; (8000800 <MX_GPIO_Init+0x2b4>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a82      	ldr	r2, [pc, #520]	; (8000800 <MX_GPIO_Init+0x2b4>)
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b80      	ldr	r3, [pc, #512]	; (8000800 <MX_GPIO_Init+0x2b4>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	4b7c      	ldr	r3, [pc, #496]	; (8000800 <MX_GPIO_Init+0x2b4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a7b      	ldr	r2, [pc, #492]	; (8000800 <MX_GPIO_Init+0x2b4>)
 8000614:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b79      	ldr	r3, [pc, #484]	; (8000800 <MX_GPIO_Init+0x2b4>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b75      	ldr	r3, [pc, #468]	; (8000800 <MX_GPIO_Init+0x2b4>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a74      	ldr	r2, [pc, #464]	; (8000800 <MX_GPIO_Init+0x2b4>)
 8000630:	f043 0308 	orr.w	r3, r3, #8
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b72      	ldr	r3, [pc, #456]	; (8000800 <MX_GPIO_Init+0x2b4>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_SD_Pin|LED_STATE_Pin|LED_RX_Pin|LED_TX_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	213c      	movs	r1, #60	; 0x3c
 8000646:	486f      	ldr	r0, [pc, #444]	; (8000804 <MX_GPIO_Init+0x2b8>)
 8000648:	f001 fd5e 	bl	8002108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DMX_DE_GPIO_Port, DMX_DE_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2104      	movs	r1, #4
 8000650:	486d      	ldr	r0, [pc, #436]	; (8000808 <MX_GPIO_Init+0x2bc>)
 8000652:	f001 fd59 	bl	8002108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin|LCD_E_Pin|LCD_D0_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	21f0      	movs	r1, #240	; 0xf0
 800065a:	486c      	ldr	r0, [pc, #432]	; (800080c <MX_GPIO_Init+0x2c0>)
 800065c:	f001 fd54 	bl	8002108 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 41fc 	mov.w	r1, #32256	; 0x7e00
 8000666:	486a      	ldr	r0, [pc, #424]	; (8000810 <MX_GPIO_Init+0x2c4>)
 8000668:	f001 fd4e 	bl	8002108 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED_SD_Pin|LED_STATE_Pin|LED_RX_Pin|LED_TX_Pin;
 800066c:	233c      	movs	r3, #60	; 0x3c
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000670:	2301      	movs	r3, #1
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000678:	2300      	movs	r3, #0
 800067a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800067c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000680:	4619      	mov	r1, r3
 8000682:	4860      	ldr	r0, [pc, #384]	; (8000804 <MX_GPIO_Init+0x2b8>)
 8000684:	f001 fb94 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC5
                           PC6 PC7 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000688:	f64f 43ef 	movw	r3, #64751	; 0xfcef
 800068c:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800068e:	2303      	movs	r3, #3
 8000690:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000696:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800069a:	4619      	mov	r1, r3
 800069c:	485d      	ldr	r0, [pc, #372]	; (8000814 <MX_GPIO_Init+0x2c8>)
 800069e:	f001 fb87 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80006a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006a6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006a8:	2303      	movs	r3, #3
 80006aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ac:	2300      	movs	r3, #0
 80006ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80006b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b4:	4619      	mov	r1, r3
 80006b6:	4858      	ldr	r0, [pc, #352]	; (8000818 <MX_GPIO_Init+0x2cc>)
 80006b8:	f001 fb7a 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80006bc:	2303      	movs	r3, #3
 80006be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006c0:	2303      	movs	r3, #3
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80006c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006cc:	4619      	mov	r1, r3
 80006ce:	4853      	ldr	r0, [pc, #332]	; (800081c <MX_GPIO_Init+0x2d0>)
 80006d0:	f001 fb6e 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DMX_DE_Pin;
 80006d4:	2304      	movs	r3, #4
 80006d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DMX_DE_GPIO_Port, &GPIO_InitStruct);
 80006e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006e8:	4619      	mov	r1, r3
 80006ea:	4847      	ldr	r0, [pc, #284]	; (8000808 <MX_GPIO_Init+0x2bc>)
 80006ec:	f001 fb60 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA8 PA9
                           PA10 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 80006f0:	f249 7318 	movw	r3, #38680	; 0x9718
 80006f4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f6:	2303      	movs	r3, #3
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fa:	2300      	movs	r3, #0
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000702:	4619      	mov	r1, r3
 8000704:	4840      	ldr	r0, [pc, #256]	; (8000808 <MX_GPIO_Init+0x2bc>)
 8000706:	f001 fb53 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_BACK_Pin|BTN_ENTER_Pin|BTN_DOWN_Pin;
 800070a:	23e0      	movs	r3, #224	; 0xe0
 800070c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070e:	2300      	movs	r3, #0
 8000710:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000712:	2301      	movs	r3, #1
 8000714:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000716:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800071a:	4619      	mov	r1, r3
 800071c:	483a      	ldr	r0, [pc, #232]	; (8000808 <MX_GPIO_Init+0x2bc>)
 800071e:	f001 fb47 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|SDIO_DETECT_Pin;
 8000722:	f44f 7304 	mov.w	r3, #528	; 0x210
 8000726:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000728:	2300      	movs	r3, #0
 800072a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800072c:	2301      	movs	r3, #1
 800072e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000730:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000734:	4619      	mov	r1, r3
 8000736:	4837      	ldr	r0, [pc, #220]	; (8000814 <MX_GPIO_Init+0x2c8>)
 8000738:	f001 fb3a 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB14 PB15 PB3 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 800073c:	f64c 73fb 	movw	r3, #53243	; 0xcffb
 8000740:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000742:	2303      	movs	r3, #3
 8000744:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800074e:	4619      	mov	r1, r3
 8000750:	4833      	ldr	r0, [pc, #204]	; (8000820 <MX_GPIO_Init+0x2d4>)
 8000752:	f001 fb2d 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8000756:	f248 13ff 	movw	r3, #33279	; 0x81ff
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800075c:	2303      	movs	r3, #3
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000768:	4619      	mov	r1, r3
 800076a:	4829      	ldr	r0, [pc, #164]	; (8000810 <MX_GPIO_Init+0x2c4>)
 800076c:	f001 fb20 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000770:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000774:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000776:	2303      	movs	r3, #3
 8000778:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800077e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000782:	4619      	mov	r1, r3
 8000784:	481f      	ldr	r0, [pc, #124]	; (8000804 <MX_GPIO_Init+0x2b8>)
 8000786:	f001 fb13 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ENB_B_Pin|ENC_A_Pin;
 800078a:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800078e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000790:	2300      	movs	r3, #0
 8000792:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079c:	4619      	mov	r1, r3
 800079e:	4820      	ldr	r0, [pc, #128]	; (8000820 <MX_GPIO_Init+0x2d4>)
 80007a0:	f001 fb06 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80007a4:	f64f 730b 	movw	r3, #65291	; 0xff0b
 80007a8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007aa:	2303      	movs	r3, #3
 80007ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b6:	4619      	mov	r1, r3
 80007b8:	4814      	ldr	r0, [pc, #80]	; (800080c <MX_GPIO_Init+0x2c0>)
 80007ba:	f001 faf9 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D0_Pin|LCD_D1_Pin;
 80007be:	23f0      	movs	r3, #240	; 0xf0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c2:	2301      	movs	r3, #1
 80007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c6:	2300      	movs	r3, #0
 80007c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ca:	2300      	movs	r3, #0
 80007cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d2:	4619      	mov	r1, r3
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <MX_GPIO_Init+0x2c0>)
 80007d6:	f001 faeb 	bl	8001db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
 80007da:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e0:	2301      	movs	r3, #1
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e8:	2300      	movs	r3, #0
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f0:	4619      	mov	r1, r3
 80007f2:	4807      	ldr	r0, [pc, #28]	; (8000810 <MX_GPIO_Init+0x2c4>)
 80007f4:	f001 fadc 	bl	8001db0 <HAL_GPIO_Init>

}
 80007f8:	bf00      	nop
 80007fa:	3738      	adds	r7, #56	; 0x38
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40023800 	.word	0x40023800
 8000804:	40021000 	.word	0x40021000
 8000808:	40020000 	.word	0x40020000
 800080c:	40020c00 	.word	0x40020c00
 8000810:	40021800 	.word	0x40021800
 8000814:	40020800 	.word	0x40020800
 8000818:	40021400 	.word	0x40021400
 800081c:	40021c00 	.word	0x40021c00
 8000820:	40020400 	.word	0x40020400

08000824 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082a:	f000 fd9d 	bl	8001368 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082e:	f000 f871 	bl	8000914 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000832:	f7ff fe8b 	bl	800054c <MX_GPIO_Init>
  MX_DMA_Init();
 8000836:	f7ff fe61 	bl	80004fc <MX_DMA_Init>
  MX_SDIO_SD_Init();
 800083a:	f000 f901 	bl	8000a40 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 800083e:	f006 f99f 	bl	8006b80 <MX_FATFS_Init>
  MX_TIM1_Init();
 8000842:	f000 facd 	bl	8000de0 <MX_TIM1_Init>
  MX_TIM10_Init();
 8000846:	f000 fbb9 	bl	8000fbc <MX_TIM10_Init>
  MX_UART4_Init();
 800084a:	f000 fce7 	bl	800121c <MX_UART4_Init>
  MX_TIM9_Init();
 800084e:	f000 fb49 	bl	8000ee4 <MX_TIM9_Init>
  MX_TIM14_Init();
 8000852:	f000 fbdf 	bl	8001014 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000856:	210c      	movs	r1, #12
 8000858:	4825      	ldr	r0, [pc, #148]	; (80008f0 <main+0xcc>)
 800085a:	f003 ff63 	bl	8004724 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 800085e:	2104      	movs	r1, #4
 8000860:	4824      	ldr	r0, [pc, #144]	; (80008f4 <main+0xd0>)
 8000862:	f003 ff5f 	bl	8004724 <HAL_TIM_PWM_Start>
//  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(LED_SD_GPIO_Port, LED_SD_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(LED_STATE_GPIO_Port, LED_STATE_Pin, GPIO_PIN_SET);

  htim1.Instance->CCR4 = 1000;
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <main+0xcc>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800086e:	641a      	str	r2, [r3, #64]	; 0x40

  FRESULT fresult;

//	DMX_Init(&Univers, &huart1, "DMX1.txt", "DMX1Info.txt");
  while(fresult = f_mount(&filesystem, "", 0) != FR_OK);
 8000870:	bf00      	nop
 8000872:	2200      	movs	r2, #0
 8000874:	4920      	ldr	r1, [pc, #128]	; (80008f8 <main+0xd4>)
 8000876:	4821      	ldr	r0, [pc, #132]	; (80008fc <main+0xd8>)
 8000878:	f008 f88c 	bl	8008994 <f_mount>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	bf14      	ite	ne
 8000882:	2301      	movne	r3, #1
 8000884:	2300      	moveq	r3, #0
 8000886:	b2db      	uxtb	r3, r3
 8000888:	71fb      	strb	r3, [r7, #7]
 800088a:	79fb      	ldrb	r3, [r7, #7]
 800088c:	2b00      	cmp	r3, #0
 800088e:	d1f0      	bne.n	8000872 <main+0x4e>
  while(fresult = f_open(&testfil, "1bit.txt", FA_CREATE_ALWAYS | FA_WRITE) != FR_OK);
 8000890:	bf00      	nop
 8000892:	220a      	movs	r2, #10
 8000894:	491a      	ldr	r1, [pc, #104]	; (8000900 <main+0xdc>)
 8000896:	481b      	ldr	r0, [pc, #108]	; (8000904 <main+0xe0>)
 8000898:	f008 f8c2 	bl	8008a20 <f_open>
 800089c:	4603      	mov	r3, r0
 800089e:	2b00      	cmp	r3, #0
 80008a0:	bf14      	ite	ne
 80008a2:	2301      	movne	r3, #1
 80008a4:	2300      	moveq	r3, #0
 80008a6:	b2db      	uxtb	r3, r3
 80008a8:	71fb      	strb	r3, [r7, #7]
 80008aa:	79fb      	ldrb	r3, [r7, #7]
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d1f0      	bne.n	8000892 <main+0x6e>
  UINT bw;
  f_write(&testfil, "test", 4, &bw);
 80008b0:	463b      	mov	r3, r7
 80008b2:	2204      	movs	r2, #4
 80008b4:	4914      	ldr	r1, [pc, #80]	; (8000908 <main+0xe4>)
 80008b6:	4813      	ldr	r0, [pc, #76]	; (8000904 <main+0xe0>)
 80008b8:	f008 fa70 	bl	8008d9c <f_write>
  f_sync(&testfil);
 80008bc:	4811      	ldr	r0, [pc, #68]	; (8000904 <main+0xe0>)
 80008be:	f008 fbe2 	bl	8009086 <f_sync>
  f_close(&testfil);
 80008c2:	4810      	ldr	r0, [pc, #64]	; (8000904 <main+0xe0>)
 80008c4:	f008 fc5d 	bl	8009182 <f_close>
//		  HAL_GPIO_WritePin(LED_STATE_GPIO_Port, LED_STATE_Pin, GPIO_PIN_RESET);
//		  HAL_GPIO_WritePin(LED_SD_GPIO_Port, LED_SD_Pin, GPIO_PIN_RESET);
//		  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
//	  }

	  if(HAL_GPIO_ReadPin(SDIO_DETECT_GPIO_Port, SDIO_DETECT_Pin) == GPIO_PIN_RESET)
 80008c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008cc:	480f      	ldr	r0, [pc, #60]	; (800090c <main+0xe8>)
 80008ce:	f001 fc03 	bl	80020d8 <HAL_GPIO_ReadPin>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d105      	bne.n	80008e4 <main+0xc0>
		  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);
 80008d8:	2201      	movs	r2, #1
 80008da:	2110      	movs	r1, #16
 80008dc:	480c      	ldr	r0, [pc, #48]	; (8000910 <main+0xec>)
 80008de:	f001 fc13 	bl	8002108 <HAL_GPIO_WritePin>
 80008e2:	e7f1      	b.n	80008c8 <main+0xa4>
	  else
		  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);
 80008e4:	2200      	movs	r2, #0
 80008e6:	2110      	movs	r1, #16
 80008e8:	4809      	ldr	r0, [pc, #36]	; (8000910 <main+0xec>)
 80008ea:	f001 fc0d 	bl	8002108 <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(SDIO_DETECT_GPIO_Port, SDIO_DETECT_Pin) == GPIO_PIN_RESET)
 80008ee:	e7eb      	b.n	80008c8 <main+0xa4>
 80008f0:	20000654 	.word	0x20000654
 80008f4:	2000069c 	.word	0x2000069c
 80008f8:	08009300 	.word	0x08009300
 80008fc:	20000064 	.word	0x20000064
 8000900:	08009304 	.word	0x08009304
 8000904:	20000294 	.word	0x20000294
 8000908:	08009310 	.word	0x08009310
 800090c:	40020800 	.word	0x40020800
 8000910:	40021000 	.word	0x40021000

08000914 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b0ac      	sub	sp, #176	; 0xb0
 8000918:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800091e:	2234      	movs	r2, #52	; 0x34
 8000920:	2100      	movs	r1, #0
 8000922:	4618      	mov	r0, r3
 8000924:	f008 fcd8 	bl	80092d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000928:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	225c      	movs	r2, #92	; 0x5c
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f008 fcc9 	bl	80092d8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	4b37      	ldr	r3, [pc, #220]	; (8000a28 <SystemClock_Config+0x114>)
 800094c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094e:	4a36      	ldr	r2, [pc, #216]	; (8000a28 <SystemClock_Config+0x114>)
 8000950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000954:	6413      	str	r3, [r2, #64]	; 0x40
 8000956:	4b34      	ldr	r3, [pc, #208]	; (8000a28 <SystemClock_Config+0x114>)
 8000958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095e:	60bb      	str	r3, [r7, #8]
 8000960:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000962:	2300      	movs	r3, #0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	4b31      	ldr	r3, [pc, #196]	; (8000a2c <SystemClock_Config+0x118>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800096e:	4a2f      	ldr	r2, [pc, #188]	; (8000a2c <SystemClock_Config+0x118>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	6013      	str	r3, [r2, #0]
 8000976:	4b2d      	ldr	r3, [pc, #180]	; (8000a2c <SystemClock_Config+0x118>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000982:	2302      	movs	r3, #2
 8000984:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000986:	2301      	movs	r3, #1
 8000988:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800098c:	2310      	movs	r3, #16
 800098e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	2302      	movs	r3, #2
 8000994:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000998:	2300      	movs	r3, #0
 800099a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 15;
 800099e:	230f      	movs	r3, #15
 80009a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80009a4:	23d8      	movs	r3, #216	; 0xd8
 80009a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80009b0:	2308      	movs	r3, #8
 80009b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b6:	2302      	movs	r3, #2
 80009b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009bc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80009c0:	4618      	mov	r0, r3
 80009c2:	f002 f95b 	bl	8002c7c <HAL_RCC_OscConfig>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80009cc:	f000 f830 	bl	8000a30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d0:	230f      	movs	r3, #15
 80009d2:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009d4:	2302      	movs	r3, #2
 80009d6:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009d8:	2300      	movs	r3, #0
 80009da:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009e0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009e6:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80009e8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80009ec:	2103      	movs	r1, #3
 80009ee:	4618      	mov	r0, r3
 80009f0:	f001 fba4 	bl	800213c <HAL_RCC_ClockConfig>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d001      	beq.n	80009fe <SystemClock_Config+0xea>
  {
    Error_Handler();
 80009fa:	f000 f819 	bl	8000a30 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 80009fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a02:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000a04:	2300      	movs	r3, #0
 8000a06:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	4618      	mov	r0, r3
 8000a12:	f001 fcad 	bl	8002370 <HAL_RCCEx_PeriphCLKConfig>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d001      	beq.n	8000a20 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8000a1c:	f000 f808 	bl	8000a30 <Error_Handler>
  }
}
 8000a20:	bf00      	nop
 8000a22:	37b0      	adds	r7, #176	; 0xb0
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40007000 	.word	0x40007000

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_SDIO_SD_Init+0x38>)
 8000a46:	4a0d      	ldr	r2, [pc, #52]	; (8000a7c <MX_SDIO_SD_Init+0x3c>)
 8000a48:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000a4a:	4b0b      	ldr	r3, [pc, #44]	; (8000a78 <MX_SDIO_SD_Init+0x38>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000a50:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_SDIO_SD_Init+0x38>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000a56:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <MX_SDIO_SD_Init+0x38>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_SDIO_SD_Init+0x38>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <MX_SDIO_SD_Init+0x38>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000a68:	4b03      	ldr	r3, [pc, #12]	; (8000a78 <MX_SDIO_SD_Init+0x38>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000a6e:	bf00      	nop
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	20000588 	.word	0x20000588
 8000a7c:	40012c00 	.word	0x40012c00

08000a80 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b08c      	sub	sp, #48	; 0x30
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a77      	ldr	r2, [pc, #476]	; (8000c7c <HAL_SD_MspInit+0x1fc>)
 8000a9e:	4293      	cmp	r3, r2
 8000aa0:	f040 80e7 	bne.w	8000c72 <HAL_SD_MspInit+0x1f2>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
 8000aa8:	4b75      	ldr	r3, [pc, #468]	; (8000c80 <HAL_SD_MspInit+0x200>)
 8000aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aac:	4a74      	ldr	r2, [pc, #464]	; (8000c80 <HAL_SD_MspInit+0x200>)
 8000aae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000ab2:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab4:	4b72      	ldr	r3, [pc, #456]	; (8000c80 <HAL_SD_MspInit+0x200>)
 8000ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000abc:	61bb      	str	r3, [r7, #24]
 8000abe:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	4b6e      	ldr	r3, [pc, #440]	; (8000c80 <HAL_SD_MspInit+0x200>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	4a6d      	ldr	r2, [pc, #436]	; (8000c80 <HAL_SD_MspInit+0x200>)
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad0:	4b6b      	ldr	r3, [pc, #428]	; (8000c80 <HAL_SD_MspInit+0x200>)
 8000ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad4:	f003 0302 	and.w	r3, r3, #2
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000adc:	2300      	movs	r3, #0
 8000ade:	613b      	str	r3, [r7, #16]
 8000ae0:	4b67      	ldr	r3, [pc, #412]	; (8000c80 <HAL_SD_MspInit+0x200>)
 8000ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae4:	4a66      	ldr	r2, [pc, #408]	; (8000c80 <HAL_SD_MspInit+0x200>)
 8000ae6:	f043 0304 	orr.w	r3, r3, #4
 8000aea:	6313      	str	r3, [r2, #48]	; 0x30
 8000aec:	4b64      	ldr	r3, [pc, #400]	; (8000c80 <HAL_SD_MspInit+0x200>)
 8000aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af0:	f003 0304 	and.w	r3, r3, #4
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af8:	2300      	movs	r3, #0
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	4b60      	ldr	r3, [pc, #384]	; (8000c80 <HAL_SD_MspInit+0x200>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	4a5f      	ldr	r2, [pc, #380]	; (8000c80 <HAL_SD_MspInit+0x200>)
 8000b02:	f043 0308 	orr.w	r3, r3, #8
 8000b06:	6313      	str	r3, [r2, #48]	; 0x30
 8000b08:	4b5d      	ldr	r3, [pc, #372]	; (8000c80 <HAL_SD_MspInit+0x200>)
 8000b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0c:	f003 0308 	and.w	r3, r3, #8
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b14:	2304      	movs	r3, #4
 8000b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b20:	2303      	movs	r3, #3
 8000b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b24:	230c      	movs	r3, #12
 8000b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4855      	ldr	r0, [pc, #340]	; (8000c84 <HAL_SD_MspInit+0x204>)
 8000b30:	f001 f93e 	bl	8001db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3a:	2302      	movs	r3, #2
 8000b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b3e:	2301      	movs	r3, #1
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b42:	2303      	movs	r3, #3
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b46:	230c      	movs	r3, #12
 8000b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	484d      	ldr	r0, [pc, #308]	; (8000c88 <HAL_SD_MspInit+0x208>)
 8000b52:	f001 f92d 	bl	8001db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b56:	2304      	movs	r3, #4
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b5e:	2301      	movs	r3, #1
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000b66:	230c      	movs	r3, #12
 8000b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6a:	f107 031c 	add.w	r3, r7, #28
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4846      	ldr	r0, [pc, #280]	; (8000c8c <HAL_SD_MspInit+0x20c>)
 8000b72:	f001 f91d 	bl	8001db0 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000b76:	4b46      	ldr	r3, [pc, #280]	; (8000c90 <HAL_SD_MspInit+0x210>)
 8000b78:	4a46      	ldr	r2, [pc, #280]	; (8000c94 <HAL_SD_MspInit+0x214>)
 8000b7a:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000b7c:	4b44      	ldr	r3, [pc, #272]	; (8000c90 <HAL_SD_MspInit+0x210>)
 8000b7e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000b82:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b84:	4b42      	ldr	r3, [pc, #264]	; (8000c90 <HAL_SD_MspInit+0x210>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b8a:	4b41      	ldr	r3, [pc, #260]	; (8000c90 <HAL_SD_MspInit+0x210>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000b90:	4b3f      	ldr	r3, [pc, #252]	; (8000c90 <HAL_SD_MspInit+0x210>)
 8000b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b96:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b98:	4b3d      	ldr	r3, [pc, #244]	; (8000c90 <HAL_SD_MspInit+0x210>)
 8000b9a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b9e:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ba0:	4b3b      	ldr	r3, [pc, #236]	; (8000c90 <HAL_SD_MspInit+0x210>)
 8000ba2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba6:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000ba8:	4b39      	ldr	r3, [pc, #228]	; (8000c90 <HAL_SD_MspInit+0x210>)
 8000baa:	2220      	movs	r2, #32
 8000bac:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000bae:	4b38      	ldr	r3, [pc, #224]	; (8000c90 <HAL_SD_MspInit+0x210>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000bb4:	4b36      	ldr	r3, [pc, #216]	; (8000c90 <HAL_SD_MspInit+0x210>)
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000bba:	4b35      	ldr	r3, [pc, #212]	; (8000c90 <HAL_SD_MspInit+0x210>)
 8000bbc:	2203      	movs	r2, #3
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000bc0:	4b33      	ldr	r3, [pc, #204]	; (8000c90 <HAL_SD_MspInit+0x210>)
 8000bc2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000bc6:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000bc8:	4b31      	ldr	r3, [pc, #196]	; (8000c90 <HAL_SD_MspInit+0x210>)
 8000bca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000bce:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000bd0:	482f      	ldr	r0, [pc, #188]	; (8000c90 <HAL_SD_MspInit+0x210>)
 8000bd2:	f000 fd71 	bl	80016b8 <HAL_DMA_Init>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d001      	beq.n	8000be0 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8000bdc:	f7ff ff28 	bl	8000a30 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a2b      	ldr	r2, [pc, #172]	; (8000c90 <HAL_SD_MspInit+0x210>)
 8000be4:	641a      	str	r2, [r3, #64]	; 0x40
 8000be6:	4a2a      	ldr	r2, [pc, #168]	; (8000c90 <HAL_SD_MspInit+0x210>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000bec:	4b2a      	ldr	r3, [pc, #168]	; (8000c98 <HAL_SD_MspInit+0x218>)
 8000bee:	4a2b      	ldr	r2, [pc, #172]	; (8000c9c <HAL_SD_MspInit+0x21c>)
 8000bf0:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000bf2:	4b29      	ldr	r3, [pc, #164]	; (8000c98 <HAL_SD_MspInit+0x218>)
 8000bf4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000bf8:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000bfa:	4b27      	ldr	r3, [pc, #156]	; (8000c98 <HAL_SD_MspInit+0x218>)
 8000bfc:	2240      	movs	r2, #64	; 0x40
 8000bfe:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c00:	4b25      	ldr	r3, [pc, #148]	; (8000c98 <HAL_SD_MspInit+0x218>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c06:	4b24      	ldr	r3, [pc, #144]	; (8000c98 <HAL_SD_MspInit+0x218>)
 8000c08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c0c:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c0e:	4b22      	ldr	r3, [pc, #136]	; (8000c98 <HAL_SD_MspInit+0x218>)
 8000c10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c14:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000c16:	4b20      	ldr	r3, [pc, #128]	; (8000c98 <HAL_SD_MspInit+0x218>)
 8000c18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c1c:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000c1e:	4b1e      	ldr	r3, [pc, #120]	; (8000c98 <HAL_SD_MspInit+0x218>)
 8000c20:	2220      	movs	r2, #32
 8000c22:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c24:	4b1c      	ldr	r3, [pc, #112]	; (8000c98 <HAL_SD_MspInit+0x218>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000c2a:	4b1b      	ldr	r3, [pc, #108]	; (8000c98 <HAL_SD_MspInit+0x218>)
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000c30:	4b19      	ldr	r3, [pc, #100]	; (8000c98 <HAL_SD_MspInit+0x218>)
 8000c32:	2203      	movs	r2, #3
 8000c34:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000c36:	4b18      	ldr	r3, [pc, #96]	; (8000c98 <HAL_SD_MspInit+0x218>)
 8000c38:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000c3c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000c3e:	4b16      	ldr	r3, [pc, #88]	; (8000c98 <HAL_SD_MspInit+0x218>)
 8000c40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000c44:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000c46:	4814      	ldr	r0, [pc, #80]	; (8000c98 <HAL_SD_MspInit+0x218>)
 8000c48:	f000 fd36 	bl	80016b8 <HAL_DMA_Init>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8000c52:	f7ff feed 	bl	8000a30 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <HAL_SD_MspInit+0x218>)
 8000c5a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c5c:	4a0e      	ldr	r2, [pc, #56]	; (8000c98 <HAL_SD_MspInit+0x218>)
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	2031      	movs	r0, #49	; 0x31
 8000c68:	f000 fcef 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000c6c:	2031      	movs	r0, #49	; 0x31
 8000c6e:	f000 fd08 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000c72:	bf00      	nop
 8000c74:	3730      	adds	r7, #48	; 0x30
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40012c00 	.word	0x40012c00
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40020400 	.word	0x40020400
 8000c88:	40020800 	.word	0x40020800
 8000c8c:	40020c00 	.word	0x40020c00
 8000c90:	200004c8 	.word	0x200004c8
 8000c94:	40026458 	.word	0x40026458
 8000c98:	20000528 	.word	0x20000528
 8000c9c:	400264a0 	.word	0x400264a0

08000ca0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	607b      	str	r3, [r7, #4]
 8000caa:	4b10      	ldr	r3, [pc, #64]	; (8000cec <HAL_MspInit+0x4c>)
 8000cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cae:	4a0f      	ldr	r2, [pc, #60]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cb6:	4b0d      	ldr	r3, [pc, #52]	; (8000cec <HAL_MspInit+0x4c>)
 8000cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cbe:	607b      	str	r3, [r7, #4]
 8000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	4b09      	ldr	r3, [pc, #36]	; (8000cec <HAL_MspInit+0x4c>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cca:	4a08      	ldr	r2, [pc, #32]	; (8000cec <HAL_MspInit+0x4c>)
 8000ccc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cd2:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_MspInit+0x4c>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cde:	bf00      	nop
 8000ce0:	370c      	adds	r7, #12
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	40023800 	.word	0x40023800

08000cf0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <HardFault_Handler+0x4>

08000d04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <MemManage_Handler+0x4>

08000d0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <BusFault_Handler+0x4>

08000d10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <UsageFault_Handler+0x4>

08000d16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d1a:	bf00      	nop
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr

08000d32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IncTick();
 8000d44:	f000 fb62 	bl	800140c <HAL_IncTick>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d48:	f000 fb60 	bl	800140c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	bd80      	pop	{r7, pc}

08000d50 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000d54:	4802      	ldr	r0, [pc, #8]	; (8000d60 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000d56:	f003 fe07 	bl	8004968 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200006e4 	.word	0x200006e4

08000d64 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <SDIO_IRQHandler+0x10>)
 8000d6a:	f002 fe37 	bl	80039dc <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000588 	.word	0x20000588

08000d78 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <UART4_IRQHandler+0x10>)
 8000d7e:	f004 fcef 	bl	8005760 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	2000072c 	.word	0x2000072c

08000d8c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8000d90:	4802      	ldr	r0, [pc, #8]	; (8000d9c <DMA2_Stream3_IRQHandler+0x10>)
 8000d92:	f000 fdd1 	bl	8001938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	200004c8 	.word	0x200004c8

08000da0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8000da4:	4802      	ldr	r0, [pc, #8]	; (8000db0 <DMA2_Stream6_IRQHandler+0x10>)
 8000da6:	f000 fdc7 	bl	8001938 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	20000528 	.word	0x20000528

08000db4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000db8:	4b08      	ldr	r3, [pc, #32]	; (8000ddc <SystemInit+0x28>)
 8000dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dbe:	4a07      	ldr	r2, [pc, #28]	; (8000ddc <SystemInit+0x28>)
 8000dc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000dc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000dc8:	4b04      	ldr	r3, [pc, #16]	; (8000ddc <SystemInit+0x28>)
 8000dca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000dce:	609a      	str	r2, [r3, #8]
#endif
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr
 8000dda:	bf00      	nop
 8000ddc:	e000ed00 	.word	0xe000ed00

08000de0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim10;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b092      	sub	sp, #72	; 0x48
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]
 8000dfe:	611a      	str	r2, [r3, #16]
 8000e00:	615a      	str	r2, [r3, #20]
 8000e02:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2220      	movs	r2, #32
 8000e08:	2100      	movs	r1, #0
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f008 fa64 	bl	80092d8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e10:	4b32      	ldr	r3, [pc, #200]	; (8000edc <MX_TIM1_Init+0xfc>)
 8000e12:	4a33      	ldr	r2, [pc, #204]	; (8000ee0 <MX_TIM1_Init+0x100>)
 8000e14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180;
 8000e16:	4b31      	ldr	r3, [pc, #196]	; (8000edc <MX_TIM1_Init+0xfc>)
 8000e18:	22b4      	movs	r2, #180	; 0xb4
 8000e1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1c:	4b2f      	ldr	r3, [pc, #188]	; (8000edc <MX_TIM1_Init+0xfc>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8000e22:	4b2e      	ldr	r3, [pc, #184]	; (8000edc <MX_TIM1_Init+0xfc>)
 8000e24:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2a:	4b2c      	ldr	r3, [pc, #176]	; (8000edc <MX_TIM1_Init+0xfc>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e30:	4b2a      	ldr	r3, [pc, #168]	; (8000edc <MX_TIM1_Init+0xfc>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e36:	4b29      	ldr	r3, [pc, #164]	; (8000edc <MX_TIM1_Init+0xfc>)
 8000e38:	2280      	movs	r2, #128	; 0x80
 8000e3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <MX_TIM1_Init+0xfc>)
 8000e3e:	f003 fc22 	bl	8004686 <HAL_TIM_PWM_Init>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8000e48:	f7ff fdf2 	bl	8000a30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e50:	2300      	movs	r3, #0
 8000e52:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e54:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000e58:	4619      	mov	r1, r3
 8000e5a:	4820      	ldr	r0, [pc, #128]	; (8000edc <MX_TIM1_Init+0xfc>)
 8000e5c:	f004 fb50 	bl	8005500 <HAL_TIMEx_MasterConfigSynchronization>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000e66:	f7ff fde3 	bl	8000a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e6a:	2360      	movs	r3, #96	; 0x60
 8000e6c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e72:	2300      	movs	r3, #0
 8000e74:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e86:	220c      	movs	r2, #12
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4814      	ldr	r0, [pc, #80]	; (8000edc <MX_TIM1_Init+0xfc>)
 8000e8c:	f003 fe74 	bl	8004b78 <HAL_TIM_PWM_ConfigChannel>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 8000e96:	f7ff fdcb 	bl	8000a30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000eae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000eb2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4807      	ldr	r0, [pc, #28]	; (8000edc <MX_TIM1_Init+0xfc>)
 8000ebe:	f004 fb9b 	bl	80055f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000ec8:	f7ff fdb2 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <MX_TIM1_Init+0xfc>)
 8000ece:	f000 f943 	bl	8001158 <HAL_TIM_MspPostInit>

}
 8000ed2:	bf00      	nop
 8000ed4:	3748      	adds	r7, #72	; 0x48
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000654 	.word	0x20000654
 8000ee0:	40010000 	.word	0x40010000

08000ee4 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08c      	sub	sp, #48	; 0x30
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eea:	f107 0320 	add.w	r3, r7, #32
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]
 8000f06:	615a      	str	r2, [r3, #20]
 8000f08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8000f0a:	4b2a      	ldr	r3, [pc, #168]	; (8000fb4 <MX_TIM9_Init+0xd0>)
 8000f0c:	4a2a      	ldr	r2, [pc, #168]	; (8000fb8 <MX_TIM9_Init+0xd4>)
 8000f0e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 180;
 8000f10:	4b28      	ldr	r3, [pc, #160]	; (8000fb4 <MX_TIM9_Init+0xd0>)
 8000f12:	22b4      	movs	r2, #180	; 0xb4
 8000f14:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <MX_TIM9_Init+0xd0>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100;
 8000f1c:	4b25      	ldr	r3, [pc, #148]	; (8000fb4 <MX_TIM9_Init+0xd0>)
 8000f1e:	2264      	movs	r2, #100	; 0x64
 8000f20:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000f22:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <MX_TIM9_Init+0xd0>)
 8000f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f28:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f2a:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <MX_TIM9_Init+0xd0>)
 8000f2c:	2280      	movs	r2, #128	; 0x80
 8000f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8000f30:	4820      	ldr	r0, [pc, #128]	; (8000fb4 <MX_TIM9_Init+0xd0>)
 8000f32:	f003 fb59 	bl	80045e8 <HAL_TIM_Base_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8000f3c:	f7ff fd78 	bl	8000a30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f44:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8000f46:	f107 0320 	add.w	r3, r7, #32
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4819      	ldr	r0, [pc, #100]	; (8000fb4 <MX_TIM9_Init+0xd0>)
 8000f4e:	f003 fed1 	bl	8004cf4 <HAL_TIM_ConfigClockSource>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8000f58:	f7ff fd6a 	bl	8000a30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8000f5c:	4815      	ldr	r0, [pc, #84]	; (8000fb4 <MX_TIM9_Init+0xd0>)
 8000f5e:	f003 fb92 	bl	8004686 <HAL_TIM_PWM_Init>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8000f68:	f7ff fd62 	bl	8000a30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f6c:	2360      	movs	r3, #96	; 0x60
 8000f6e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8000f70:	f242 7310 	movw	r3, #10000	; 0x2710
 8000f74:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f76:	2300      	movs	r3, #0
 8000f78:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f7e:	1d3b      	adds	r3, r7, #4
 8000f80:	2204      	movs	r2, #4
 8000f82:	4619      	mov	r1, r3
 8000f84:	480b      	ldr	r0, [pc, #44]	; (8000fb4 <MX_TIM9_Init+0xd0>)
 8000f86:	f003 fdf7 	bl	8004b78 <HAL_TIM_PWM_ConfigChannel>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8000f90:	f7ff fd4e 	bl	8000a30 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim9, TIM_CHANNEL_2);
 8000f94:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <MX_TIM9_Init+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	699a      	ldr	r2, [r3, #24]
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_TIM9_Init+0xd0>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fa2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8000fa4:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <MX_TIM9_Init+0xd0>)
 8000fa6:	f000 f8d7 	bl	8001158 <HAL_TIM_MspPostInit>

}
 8000faa:	bf00      	nop
 8000fac:	3730      	adds	r7, #48	; 0x30
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	2000069c 	.word	0x2000069c
 8000fb8:	40014000 	.word	0x40014000

08000fbc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000fc0:	4b12      	ldr	r3, [pc, #72]	; (800100c <MX_TIM10_Init+0x50>)
 8000fc2:	4a13      	ldr	r2, [pc, #76]	; (8001010 <MX_TIM10_Init+0x54>)
 8000fc4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8000fc6:	4b11      	ldr	r3, [pc, #68]	; (800100c <MX_TIM10_Init+0x50>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fcc:	4b0f      	ldr	r3, [pc, #60]	; (800100c <MX_TIM10_Init+0x50>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 8000fd2:	4b0e      	ldr	r3, [pc, #56]	; (800100c <MX_TIM10_Init+0x50>)
 8000fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fd8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fda:	4b0c      	ldr	r3, [pc, #48]	; (800100c <MX_TIM10_Init+0x50>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <MX_TIM10_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000fe6:	4809      	ldr	r0, [pc, #36]	; (800100c <MX_TIM10_Init+0x50>)
 8000fe8:	f003 fafe 	bl	80045e8 <HAL_TIM_Base_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8000ff2:	f7ff fd1d 	bl	8000a30 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim10, TIM_OPMODE_SINGLE) != HAL_OK)
 8000ff6:	2108      	movs	r1, #8
 8000ff8:	4804      	ldr	r0, [pc, #16]	; (800100c <MX_TIM10_Init+0x50>)
 8000ffa:	f003 fc5b 	bl	80048b4 <HAL_TIM_OnePulse_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8001004:	f7ff fd14 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}
 800100c:	2000060c 	.word	0x2000060c
 8001010:	40014400 	.word	0x40014400

08001014 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_TIM14_Init+0x50>)
 800101a:	4a13      	ldr	r2, [pc, #76]	; (8001068 <MX_TIM14_Init+0x54>)
 800101c:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 180-1;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_TIM14_Init+0x50>)
 8001020:	22b3      	movs	r2, #179	; 0xb3
 8001022:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_TIM14_Init+0x50>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10-1;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_TIM14_Init+0x50>)
 800102c:	2209      	movs	r2, #9
 800102e:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_TIM14_Init+0x50>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <MX_TIM14_Init+0x50>)
 8001038:	2280      	movs	r2, #128	; 0x80
 800103a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 800103c:	4809      	ldr	r0, [pc, #36]	; (8001064 <MX_TIM14_Init+0x50>)
 800103e:	f003 fad3 	bl	80045e8 <HAL_TIM_Base_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8001048:	f7ff fcf2 	bl	8000a30 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim14, TIM_OPMODE_SINGLE) != HAL_OK)
 800104c:	2108      	movs	r1, #8
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_TIM14_Init+0x50>)
 8001050:	f003 fc30 	bl	80048b4 <HAL_TIM_OnePulse_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 800105a:	f7ff fce9 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200006e4 	.word	0x200006e4
 8001068:	40002000 	.word	0x40002000

0800106c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0b      	ldr	r2, [pc, #44]	; (80010a8 <HAL_TIM_PWM_MspInit+0x3c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d10d      	bne.n	800109a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <HAL_TIM_PWM_MspInit+0x40>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a09      	ldr	r2, [pc, #36]	; (80010ac <HAL_TIM_PWM_MspInit+0x40>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b07      	ldr	r3, [pc, #28]	; (80010ac <HAL_TIM_PWM_MspInit+0x40>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800109a:	bf00      	nop
 800109c:	3714      	adds	r7, #20
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40010000 	.word	0x40010000
 80010ac:	40023800 	.word	0x40023800

080010b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a22      	ldr	r2, [pc, #136]	; (8001148 <HAL_TIM_Base_MspInit+0x98>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d10e      	bne.n	80010e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	4a20      	ldr	r2, [pc, #128]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 80010cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010d0:	6453      	str	r3, [r2, #68]	; 0x44
 80010d2:	4b1e      	ldr	r3, [pc, #120]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 80010d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010da:	617b      	str	r3, [r7, #20]
 80010dc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 80010de:	e02e      	b.n	800113e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM10)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a1a      	ldr	r2, [pc, #104]	; (8001150 <HAL_TIM_Base_MspInit+0xa0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d10e      	bne.n	8001108 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a16      	ldr	r2, [pc, #88]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 80010f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b14      	ldr	r3, [pc, #80]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]
}
 8001106:	e01a      	b.n	800113e <HAL_TIM_Base_MspInit+0x8e>
  else if(tim_baseHandle->Instance==TIM14)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a11      	ldr	r2, [pc, #68]	; (8001154 <HAL_TIM_Base_MspInit+0xa4>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d115      	bne.n	800113e <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	4a0c      	ldr	r2, [pc, #48]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 800111c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001120:	6413      	str	r3, [r2, #64]	; 0x40
 8001122:	4b0a      	ldr	r3, [pc, #40]	; (800114c <HAL_TIM_Base_MspInit+0x9c>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	202d      	movs	r0, #45	; 0x2d
 8001134:	f000 fa89 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001138:	202d      	movs	r0, #45	; 0x2d
 800113a:	f000 faa2 	bl	8001682 <HAL_NVIC_EnableIRQ>
}
 800113e:	bf00      	nop
 8001140:	3718      	adds	r7, #24
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40014000 	.word	0x40014000
 800114c:	40023800 	.word	0x40023800
 8001150:	40014400 	.word	0x40014400
 8001154:	40002000 	.word	0x40002000

08001158 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b08a      	sub	sp, #40	; 0x28
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001160:	f107 0314 	add.w	r3, r7, #20
 8001164:	2200      	movs	r2, #0
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	605a      	str	r2, [r3, #4]
 800116a:	609a      	str	r2, [r3, #8]
 800116c:	60da      	str	r2, [r3, #12]
 800116e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a24      	ldr	r2, [pc, #144]	; (8001208 <HAL_TIM_MspPostInit+0xb0>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d11f      	bne.n	80011ba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	613b      	str	r3, [r7, #16]
 800117e:	4b23      	ldr	r3, [pc, #140]	; (800120c <HAL_TIM_MspPostInit+0xb4>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	4a22      	ldr	r2, [pc, #136]	; (800120c <HAL_TIM_MspPostInit+0xb4>)
 8001184:	f043 0301 	orr.w	r3, r3, #1
 8001188:	6313      	str	r3, [r2, #48]	; 0x30
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <HAL_TIM_MspPostInit+0xb4>)
 800118c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118e:	f003 0301 	and.w	r3, r3, #1
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 8001196:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800119a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119c:	2302      	movs	r3, #2
 800119e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a0:	2300      	movs	r3, #0
 80011a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a4:	2300      	movs	r3, #0
 80011a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80011a8:	2301      	movs	r3, #1
 80011aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 80011ac:	f107 0314 	add.w	r3, r7, #20
 80011b0:	4619      	mov	r1, r3
 80011b2:	4817      	ldr	r0, [pc, #92]	; (8001210 <HAL_TIM_MspPostInit+0xb8>)
 80011b4:	f000 fdfc 	bl	8001db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80011b8:	e022      	b.n	8001200 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM9)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a15      	ldr	r2, [pc, #84]	; (8001214 <HAL_TIM_MspPostInit+0xbc>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d11d      	bne.n	8001200 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80011c4:	2300      	movs	r3, #0
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_TIM_MspPostInit+0xb4>)
 80011ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011cc:	4a0f      	ldr	r2, [pc, #60]	; (800120c <HAL_TIM_MspPostInit+0xb4>)
 80011ce:	f043 0310 	orr.w	r3, r3, #16
 80011d2:	6313      	str	r3, [r2, #48]	; 0x30
 80011d4:	4b0d      	ldr	r3, [pc, #52]	; (800120c <HAL_TIM_MspPostInit+0xb4>)
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	60fb      	str	r3, [r7, #12]
 80011de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 80011e0:	2340      	movs	r3, #64	; 0x40
 80011e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e4:	2302      	movs	r3, #2
 80011e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e8:	2300      	movs	r3, #0
 80011ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ec:	2300      	movs	r3, #0
 80011ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80011f0:	2303      	movs	r3, #3
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 80011f4:	f107 0314 	add.w	r3, r7, #20
 80011f8:	4619      	mov	r1, r3
 80011fa:	4807      	ldr	r0, [pc, #28]	; (8001218 <HAL_TIM_MspPostInit+0xc0>)
 80011fc:	f000 fdd8 	bl	8001db0 <HAL_GPIO_Init>
}
 8001200:	bf00      	nop
 8001202:	3728      	adds	r7, #40	; 0x28
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	40010000 	.word	0x40010000
 800120c:	40023800 	.word	0x40023800
 8001210:	40020000 	.word	0x40020000
 8001214:	40014000 	.word	0x40014000
 8001218:	40021000 	.word	0x40021000

0800121c <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001220:	4b11      	ldr	r3, [pc, #68]	; (8001268 <MX_UART4_Init+0x4c>)
 8001222:	4a12      	ldr	r2, [pc, #72]	; (800126c <MX_UART4_Init+0x50>)
 8001224:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 250000;
 8001226:	4b10      	ldr	r3, [pc, #64]	; (8001268 <MX_UART4_Init+0x4c>)
 8001228:	4a11      	ldr	r2, [pc, #68]	; (8001270 <MX_UART4_Init+0x54>)
 800122a:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800122c:	4b0e      	ldr	r3, [pc, #56]	; (8001268 <MX_UART4_Init+0x4c>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8001232:	4b0d      	ldr	r3, [pc, #52]	; (8001268 <MX_UART4_Init+0x4c>)
 8001234:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001238:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800123a:	4b0b      	ldr	r3, [pc, #44]	; (8001268 <MX_UART4_Init+0x4c>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001240:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_UART4_Init+0x4c>)
 8001242:	220c      	movs	r2, #12
 8001244:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001246:	4b08      	ldr	r3, [pc, #32]	; (8001268 <MX_UART4_Init+0x4c>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800124c:	4b06      	ldr	r3, [pc, #24]	; (8001268 <MX_UART4_Init+0x4c>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001252:	4805      	ldr	r0, [pc, #20]	; (8001268 <MX_UART4_Init+0x4c>)
 8001254:	f004 fa36 	bl	80056c4 <HAL_UART_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800125e:	f7ff fbe7 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	2000072c 	.word	0x2000072c
 800126c:	40004c00 	.word	0x40004c00
 8001270:	0003d090 	.word	0x0003d090

08001274 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b08a      	sub	sp, #40	; 0x28
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]
 8001286:	609a      	str	r2, [r3, #8]
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a1d      	ldr	r2, [pc, #116]	; (8001308 <HAL_UART_MspInit+0x94>)
 8001292:	4293      	cmp	r3, r2
 8001294:	d133      	bne.n	80012fe <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	4b1c      	ldr	r3, [pc, #112]	; (800130c <HAL_UART_MspInit+0x98>)
 800129c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129e:	4a1b      	ldr	r2, [pc, #108]	; (800130c <HAL_UART_MspInit+0x98>)
 80012a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012a4:	6413      	str	r3, [r2, #64]	; 0x40
 80012a6:	4b19      	ldr	r3, [pc, #100]	; (800130c <HAL_UART_MspInit+0x98>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <HAL_UART_MspInit+0x98>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a14      	ldr	r2, [pc, #80]	; (800130c <HAL_UART_MspInit+0x98>)
 80012bc:	f043 0301 	orr.w	r3, r3, #1
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b12      	ldr	r3, [pc, #72]	; (800130c <HAL_UART_MspInit+0x98>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = DMX_TX_Pin|DMX_RX_Pin;
 80012ce:	2303      	movs	r3, #3
 80012d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012d6:	2301      	movs	r3, #1
 80012d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012da:	2303      	movs	r3, #3
 80012dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012de:	2308      	movs	r3, #8
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e2:	f107 0314 	add.w	r3, r7, #20
 80012e6:	4619      	mov	r1, r3
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <HAL_UART_MspInit+0x9c>)
 80012ea:	f000 fd61 	bl	8001db0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80012ee:	2200      	movs	r2, #0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2034      	movs	r0, #52	; 0x34
 80012f4:	f000 f9a9 	bl	800164a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80012f8:	2034      	movs	r0, #52	; 0x34
 80012fa:	f000 f9c2 	bl	8001682 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 80012fe:	bf00      	nop
 8001300:	3728      	adds	r7, #40	; 0x28
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	40004c00 	.word	0x40004c00
 800130c:	40023800 	.word	0x40023800
 8001310:	40020000 	.word	0x40020000

08001314 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001314:	f8df d034 	ldr.w	sp, [pc, #52]	; 800134c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001318:	480d      	ldr	r0, [pc, #52]	; (8001350 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800131a:	490e      	ldr	r1, [pc, #56]	; (8001354 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800131c:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800131e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001320:	e002      	b.n	8001328 <LoopCopyDataInit>

08001322 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001322:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001324:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001326:	3304      	adds	r3, #4

08001328 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001328:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800132a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800132c:	d3f9      	bcc.n	8001322 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800132e:	4a0b      	ldr	r2, [pc, #44]	; (800135c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001330:	4c0b      	ldr	r4, [pc, #44]	; (8001360 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001332:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001334:	e001      	b.n	800133a <LoopFillZerobss>

08001336 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001336:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001338:	3204      	adds	r2, #4

0800133a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800133a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800133c:	d3fb      	bcc.n	8001336 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800133e:	f7ff fd39 	bl	8000db4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001342:	f007 ffa5 	bl	8009290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001346:	f7ff fa6d 	bl	8000824 <main>
  bx  lr    
 800134a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800134c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001350:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001354:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001358:	08009420 	.word	0x08009420
  ldr r2, =_sbss
 800135c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001360:	20000bdc 	.word	0x20000bdc

08001364 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001364:	e7fe      	b.n	8001364 <ADC_IRQHandler>
	...

08001368 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800136c:	4b0e      	ldr	r3, [pc, #56]	; (80013a8 <HAL_Init+0x40>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <HAL_Init+0x40>)
 8001372:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001376:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001378:	4b0b      	ldr	r3, [pc, #44]	; (80013a8 <HAL_Init+0x40>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a0a      	ldr	r2, [pc, #40]	; (80013a8 <HAL_Init+0x40>)
 800137e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001382:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001384:	4b08      	ldr	r3, [pc, #32]	; (80013a8 <HAL_Init+0x40>)
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a07      	ldr	r2, [pc, #28]	; (80013a8 <HAL_Init+0x40>)
 800138a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800138e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001390:	2003      	movs	r0, #3
 8001392:	f000 f94f 	bl	8001634 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001396:	2000      	movs	r0, #0
 8001398:	f000 f808 	bl	80013ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800139c:	f7ff fc80 	bl	8000ca0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40023c00 	.word	0x40023c00

080013ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_InitTick+0x54>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <HAL_InitTick+0x58>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	4619      	mov	r1, r3
 80013be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80013c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 f967 	bl	800169e <HAL_SYSTICK_Config>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e00e      	b.n	80013f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2b0f      	cmp	r3, #15
 80013de:	d80a      	bhi.n	80013f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013e0:	2200      	movs	r2, #0
 80013e2:	6879      	ldr	r1, [r7, #4]
 80013e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80013e8:	f000 f92f 	bl	800164a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013ec:	4a06      	ldr	r2, [pc, #24]	; (8001408 <HAL_InitTick+0x5c>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013f2:	2300      	movs	r3, #0
 80013f4:	e000      	b.n	80013f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
}
 80013f8:	4618      	mov	r0, r3
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000000 	.word	0x20000000
 8001404:	20000008 	.word	0x20000008
 8001408:	20000004 	.word	0x20000004

0800140c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001410:	4b06      	ldr	r3, [pc, #24]	; (800142c <HAL_IncTick+0x20>)
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	461a      	mov	r2, r3
 8001416:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_IncTick+0x24>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4413      	add	r3, r2
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_IncTick+0x24>)
 800141e:	6013      	str	r3, [r2, #0]
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000008 	.word	0x20000008
 8001430:	20000770 	.word	0x20000770

08001434 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return uwTick;
 8001438:	4b03      	ldr	r3, [pc, #12]	; (8001448 <HAL_GetTick+0x14>)
 800143a:	681b      	ldr	r3, [r3, #0]
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	20000770 	.word	0x20000770

0800144c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001454:	f7ff ffee 	bl	8001434 <HAL_GetTick>
 8001458:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001464:	d005      	beq.n	8001472 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001466:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <HAL_Delay+0x44>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	461a      	mov	r2, r3
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001472:	bf00      	nop
 8001474:	f7ff ffde 	bl	8001434 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	68fa      	ldr	r2, [r7, #12]
 8001480:	429a      	cmp	r2, r3
 8001482:	d8f7      	bhi.n	8001474 <HAL_Delay+0x28>
  {
  }
}
 8001484:	bf00      	nop
 8001486:	bf00      	nop
 8001488:	3710      	adds	r7, #16
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000008 	.word	0x20000008

08001494 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c6:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	60d3      	str	r3, [r2, #12]
}
 80014cc:	bf00      	nop
 80014ce:	3714      	adds	r7, #20
 80014d0:	46bd      	mov	sp, r7
 80014d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d6:	4770      	bx	lr
 80014d8:	e000ed00 	.word	0xe000ed00

080014dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	2b00      	cmp	r3, #0
 8001508:	db0b      	blt.n	8001522 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	f003 021f 	and.w	r2, r3, #31
 8001510:	4907      	ldr	r1, [pc, #28]	; (8001530 <__NVIC_EnableIRQ+0x38>)
 8001512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001516:	095b      	lsrs	r3, r3, #5
 8001518:	2001      	movs	r0, #1
 800151a:	fa00 f202 	lsl.w	r2, r0, r2
 800151e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	e000e100 	.word	0xe000e100

08001534 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	6039      	str	r1, [r7, #0]
 800153e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001540:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001544:	2b00      	cmp	r3, #0
 8001546:	db0a      	blt.n	800155e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	b2da      	uxtb	r2, r3
 800154c:	490c      	ldr	r1, [pc, #48]	; (8001580 <__NVIC_SetPriority+0x4c>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	0112      	lsls	r2, r2, #4
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	440b      	add	r3, r1
 8001558:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800155c:	e00a      	b.n	8001574 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	b2da      	uxtb	r2, r3
 8001562:	4908      	ldr	r1, [pc, #32]	; (8001584 <__NVIC_SetPriority+0x50>)
 8001564:	79fb      	ldrb	r3, [r7, #7]
 8001566:	f003 030f 	and.w	r3, r3, #15
 800156a:	3b04      	subs	r3, #4
 800156c:	0112      	lsls	r2, r2, #4
 800156e:	b2d2      	uxtb	r2, r2
 8001570:	440b      	add	r3, r1
 8001572:	761a      	strb	r2, [r3, #24]
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	e000e100 	.word	0xe000e100
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001588:	b480      	push	{r7}
 800158a:	b089      	sub	sp, #36	; 0x24
 800158c:	af00      	add	r7, sp, #0
 800158e:	60f8      	str	r0, [r7, #12]
 8001590:	60b9      	str	r1, [r7, #8]
 8001592:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800159c:	69fb      	ldr	r3, [r7, #28]
 800159e:	f1c3 0307 	rsb	r3, r3, #7
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	bf28      	it	cs
 80015a6:	2304      	movcs	r3, #4
 80015a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3304      	adds	r3, #4
 80015ae:	2b06      	cmp	r3, #6
 80015b0:	d902      	bls.n	80015b8 <NVIC_EncodePriority+0x30>
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3b03      	subs	r3, #3
 80015b6:	e000      	b.n	80015ba <NVIC_EncodePriority+0x32>
 80015b8:	2300      	movs	r3, #0
 80015ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015c0:	69bb      	ldr	r3, [r7, #24]
 80015c2:	fa02 f303 	lsl.w	r3, r2, r3
 80015c6:	43da      	mvns	r2, r3
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	401a      	ands	r2, r3
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	43d9      	mvns	r1, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e0:	4313      	orrs	r3, r2
         );
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3724      	adds	r7, #36	; 0x24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
	...

080015f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b082      	sub	sp, #8
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	3b01      	subs	r3, #1
 80015fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001600:	d301      	bcc.n	8001606 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001602:	2301      	movs	r3, #1
 8001604:	e00f      	b.n	8001626 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001606:	4a0a      	ldr	r2, [pc, #40]	; (8001630 <SysTick_Config+0x40>)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3b01      	subs	r3, #1
 800160c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800160e:	210f      	movs	r1, #15
 8001610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001614:	f7ff ff8e 	bl	8001534 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001618:	4b05      	ldr	r3, [pc, #20]	; (8001630 <SysTick_Config+0x40>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800161e:	4b04      	ldr	r3, [pc, #16]	; (8001630 <SysTick_Config+0x40>)
 8001620:	2207      	movs	r2, #7
 8001622:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	e000e010 	.word	0xe000e010

08001634 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7ff ff29 	bl	8001494 <__NVIC_SetPriorityGrouping>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800164a:	b580      	push	{r7, lr}
 800164c:	b086      	sub	sp, #24
 800164e:	af00      	add	r7, sp, #0
 8001650:	4603      	mov	r3, r0
 8001652:	60b9      	str	r1, [r7, #8]
 8001654:	607a      	str	r2, [r7, #4]
 8001656:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001658:	2300      	movs	r3, #0
 800165a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800165c:	f7ff ff3e 	bl	80014dc <__NVIC_GetPriorityGrouping>
 8001660:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001662:	687a      	ldr	r2, [r7, #4]
 8001664:	68b9      	ldr	r1, [r7, #8]
 8001666:	6978      	ldr	r0, [r7, #20]
 8001668:	f7ff ff8e 	bl	8001588 <NVIC_EncodePriority>
 800166c:	4602      	mov	r2, r0
 800166e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001672:	4611      	mov	r1, r2
 8001674:	4618      	mov	r0, r3
 8001676:	f7ff ff5d 	bl	8001534 <__NVIC_SetPriority>
}
 800167a:	bf00      	nop
 800167c:	3718      	adds	r7, #24
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b082      	sub	sp, #8
 8001686:	af00      	add	r7, sp, #0
 8001688:	4603      	mov	r3, r0
 800168a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800168c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001690:	4618      	mov	r0, r3
 8001692:	f7ff ff31 	bl	80014f8 <__NVIC_EnableIRQ>
}
 8001696:	bf00      	nop
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}

0800169e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800169e:	b580      	push	{r7, lr}
 80016a0:	b082      	sub	sp, #8
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016a6:	6878      	ldr	r0, [r7, #4]
 80016a8:	f7ff ffa2 	bl	80015f0 <SysTick_Config>
 80016ac:	4603      	mov	r3, r0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
	...

080016b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80016c4:	f7ff feb6 	bl	8001434 <HAL_GetTick>
 80016c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e099      	b.n	8001808 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2200      	movs	r2, #0
 80016d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2202      	movs	r2, #2
 80016e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 0201 	bic.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80016f4:	e00f      	b.n	8001716 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80016f6:	f7ff fe9d 	bl	8001434 <HAL_GetTick>
 80016fa:	4602      	mov	r2, r0
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	1ad3      	subs	r3, r2, r3
 8001700:	2b05      	cmp	r3, #5
 8001702:	d908      	bls.n	8001716 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2220      	movs	r2, #32
 8001708:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2203      	movs	r2, #3
 800170e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e078      	b.n	8001808 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0301 	and.w	r3, r3, #1
 8001720:	2b00      	cmp	r3, #0
 8001722:	d1e8      	bne.n	80016f6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800172c:	697a      	ldr	r2, [r7, #20]
 800172e:	4b38      	ldr	r3, [pc, #224]	; (8001810 <HAL_DMA_Init+0x158>)
 8001730:	4013      	ands	r3, r2
 8001732:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001742:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	691b      	ldr	r3, [r3, #16]
 8001748:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800174e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	699b      	ldr	r3, [r3, #24]
 8001754:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800175a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	4313      	orrs	r3, r2
 8001766:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	2b04      	cmp	r3, #4
 800176e:	d107      	bne.n	8001780 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	4313      	orrs	r3, r2
 800177a:	697a      	ldr	r2, [r7, #20]
 800177c:	4313      	orrs	r3, r2
 800177e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	695b      	ldr	r3, [r3, #20]
 800178e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	f023 0307 	bic.w	r3, r3, #7
 8001796:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800179c:	697a      	ldr	r2, [r7, #20]
 800179e:	4313      	orrs	r3, r2
 80017a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d117      	bne.n	80017da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ae:	697a      	ldr	r2, [r7, #20]
 80017b0:	4313      	orrs	r3, r2
 80017b2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d00e      	beq.n	80017da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017bc:	6878      	ldr	r0, [r7, #4]
 80017be:	f000 fa7b 	bl	8001cb8 <DMA_CheckFifoParam>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d008      	beq.n	80017da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2240      	movs	r2, #64	; 0x40
 80017cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2201      	movs	r2, #1
 80017d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80017d6:	2301      	movs	r3, #1
 80017d8:	e016      	b.n	8001808 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	697a      	ldr	r2, [r7, #20]
 80017e0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80017e2:	6878      	ldr	r0, [r7, #4]
 80017e4:	f000 fa32 	bl	8001c4c <DMA_CalcBaseAndBitshift>
 80017e8:	4603      	mov	r3, r0
 80017ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f0:	223f      	movs	r2, #63	; 0x3f
 80017f2:	409a      	lsls	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	2200      	movs	r2, #0
 80017fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001806:	2300      	movs	r3, #0
}
 8001808:	4618      	mov	r0, r3
 800180a:	3718      	adds	r7, #24
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	f010803f 	.word	0xf010803f

08001814 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001820:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001822:	f7ff fe07 	bl	8001434 <HAL_GetTick>
 8001826:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800182e:	b2db      	uxtb	r3, r3
 8001830:	2b02      	cmp	r3, #2
 8001832:	d008      	beq.n	8001846 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2280      	movs	r2, #128	; 0x80
 8001838:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e052      	b.n	80018ec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 0216 	bic.w	r2, r2, #22
 8001854:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	695a      	ldr	r2, [r3, #20]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001864:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186a:	2b00      	cmp	r3, #0
 800186c:	d103      	bne.n	8001876 <HAL_DMA_Abort+0x62>
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001872:	2b00      	cmp	r3, #0
 8001874:	d007      	beq.n	8001886 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f022 0208 	bic.w	r2, r2, #8
 8001884:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f022 0201 	bic.w	r2, r2, #1
 8001894:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001896:	e013      	b.n	80018c0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001898:	f7ff fdcc 	bl	8001434 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b05      	cmp	r3, #5
 80018a4:	d90c      	bls.n	80018c0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2220      	movs	r2, #32
 80018aa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2200      	movs	r2, #0
 80018b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2203      	movs	r2, #3
 80018b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e015      	b.n	80018ec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1e4      	bne.n	8001898 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018d2:	223f      	movs	r2, #63	; 0x3f
 80018d4:	409a      	lsls	r2, r3
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	2200      	movs	r2, #0
 80018de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	2201      	movs	r2, #1
 80018e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80018ea:	2300      	movs	r3, #0
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2b02      	cmp	r3, #2
 8001906:	d004      	beq.n	8001912 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e00c      	b.n	800192c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2205      	movs	r2, #5
 8001916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 0201 	bic.w	r2, r2, #1
 8001928:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800192a:	2300      	movs	r3, #0
}
 800192c:	4618      	mov	r0, r3
 800192e:	370c      	adds	r7, #12
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr

08001938 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001940:	2300      	movs	r3, #0
 8001942:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001944:	4b92      	ldr	r3, [pc, #584]	; (8001b90 <HAL_DMA_IRQHandler+0x258>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a92      	ldr	r2, [pc, #584]	; (8001b94 <HAL_DMA_IRQHandler+0x25c>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	0a9b      	lsrs	r3, r3, #10
 8001950:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001956:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001962:	2208      	movs	r2, #8
 8001964:	409a      	lsls	r2, r3
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4013      	ands	r3, r2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01a      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	2b00      	cmp	r3, #0
 800197a:	d013      	beq.n	80019a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	681a      	ldr	r2, [r3, #0]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f022 0204 	bic.w	r2, r2, #4
 800198a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001990:	2208      	movs	r2, #8
 8001992:	409a      	lsls	r2, r3
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800199c:	f043 0201 	orr.w	r2, r3, #1
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a8:	2201      	movs	r2, #1
 80019aa:	409a      	lsls	r2, r3
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	4013      	ands	r3, r2
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d012      	beq.n	80019da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	695b      	ldr	r3, [r3, #20]
 80019ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00b      	beq.n	80019da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c6:	2201      	movs	r2, #1
 80019c8:	409a      	lsls	r2, r3
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019d2:	f043 0202 	orr.w	r2, r3, #2
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019de:	2204      	movs	r2, #4
 80019e0:	409a      	lsls	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4013      	ands	r3, r2
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d012      	beq.n	8001a10 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0302 	and.w	r3, r3, #2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d00b      	beq.n	8001a10 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019fc:	2204      	movs	r2, #4
 80019fe:	409a      	lsls	r2, r3
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a08:	f043 0204 	orr.w	r2, r3, #4
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a14:	2210      	movs	r2, #16
 8001a16:	409a      	lsls	r2, r3
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d043      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0308 	and.w	r3, r3, #8
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d03c      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a32:	2210      	movs	r2, #16
 8001a34:	409a      	lsls	r2, r3
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d018      	beq.n	8001a7a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d108      	bne.n	8001a68 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d024      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	4798      	blx	r3
 8001a66:	e01f      	b.n	8001aa8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d01b      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3
 8001a78:	e016      	b.n	8001aa8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d107      	bne.n	8001a98 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681a      	ldr	r2, [r3, #0]
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f022 0208 	bic.w	r2, r2, #8
 8001a96:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	2220      	movs	r2, #32
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	f000 808e 	beq.w	8001bd6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0310 	and.w	r3, r3, #16
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 8086 	beq.w	8001bd6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ace:	2220      	movs	r2, #32
 8001ad0:	409a      	lsls	r2, r3
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001adc:	b2db      	uxtb	r3, r3
 8001ade:	2b05      	cmp	r3, #5
 8001ae0:	d136      	bne.n	8001b50 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0216 	bic.w	r2, r2, #22
 8001af0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	695a      	ldr	r2, [r3, #20]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b00:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d103      	bne.n	8001b12 <HAL_DMA_IRQHandler+0x1da>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d007      	beq.n	8001b22 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f022 0208 	bic.w	r2, r2, #8
 8001b20:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b26:	223f      	movs	r2, #63	; 0x3f
 8001b28:	409a      	lsls	r2, r3
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d07d      	beq.n	8001c42 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	4798      	blx	r3
        }
        return;
 8001b4e:	e078      	b.n	8001c42 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d01c      	beq.n	8001b98 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d108      	bne.n	8001b7e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d030      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	4798      	blx	r3
 8001b7c:	e02b      	b.n	8001bd6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d027      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8a:	6878      	ldr	r0, [r7, #4]
 8001b8c:	4798      	blx	r3
 8001b8e:	e022      	b.n	8001bd6 <HAL_DMA_IRQHandler+0x29e>
 8001b90:	20000000 	.word	0x20000000
 8001b94:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10f      	bne.n	8001bc6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f022 0210 	bic.w	r2, r2, #16
 8001bb4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d003      	beq.n	8001bd6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d032      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d022      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2205      	movs	r2, #5
 8001bee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	3301      	adds	r3, #1
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d307      	bcc.n	8001c1e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0301 	and.w	r3, r3, #1
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f2      	bne.n	8001c02 <HAL_DMA_IRQHandler+0x2ca>
 8001c1c:	e000      	b.n	8001c20 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001c1e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	4798      	blx	r3
 8001c40:	e000      	b.n	8001c44 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001c42:	bf00      	nop
    }
  }
}
 8001c44:	3718      	adds	r7, #24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop

08001c4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b085      	sub	sp, #20
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	3b10      	subs	r3, #16
 8001c5c:	4a14      	ldr	r2, [pc, #80]	; (8001cb0 <DMA_CalcBaseAndBitshift+0x64>)
 8001c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001c62:	091b      	lsrs	r3, r3, #4
 8001c64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c66:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <DMA_CalcBaseAndBitshift+0x68>)
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	461a      	mov	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	2b03      	cmp	r3, #3
 8001c78:	d909      	bls.n	8001c8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c82:	f023 0303 	bic.w	r3, r3, #3
 8001c86:	1d1a      	adds	r2, r3, #4
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	659a      	str	r2, [r3, #88]	; 0x58
 8001c8c:	e007      	b.n	8001c9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c96:	f023 0303 	bic.w	r3, r3, #3
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	aaaaaaab 	.word	0xaaaaaaab
 8001cb4:	08009374 	.word	0x08009374

08001cb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	699b      	ldr	r3, [r3, #24]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d11f      	bne.n	8001d12 <DMA_CheckFifoParam+0x5a>
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d856      	bhi.n	8001d86 <DMA_CheckFifoParam+0xce>
 8001cd8:	a201      	add	r2, pc, #4	; (adr r2, 8001ce0 <DMA_CheckFifoParam+0x28>)
 8001cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cde:	bf00      	nop
 8001ce0:	08001cf1 	.word	0x08001cf1
 8001ce4:	08001d03 	.word	0x08001d03
 8001ce8:	08001cf1 	.word	0x08001cf1
 8001cec:	08001d87 	.word	0x08001d87
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d046      	beq.n	8001d8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d00:	e043      	b.n	8001d8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d0a:	d140      	bne.n	8001d8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d10:	e03d      	b.n	8001d8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	699b      	ldr	r3, [r3, #24]
 8001d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d1a:	d121      	bne.n	8001d60 <DMA_CheckFifoParam+0xa8>
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	2b03      	cmp	r3, #3
 8001d20:	d837      	bhi.n	8001d92 <DMA_CheckFifoParam+0xda>
 8001d22:	a201      	add	r2, pc, #4	; (adr r2, 8001d28 <DMA_CheckFifoParam+0x70>)
 8001d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d28:	08001d39 	.word	0x08001d39
 8001d2c:	08001d3f 	.word	0x08001d3f
 8001d30:	08001d39 	.word	0x08001d39
 8001d34:	08001d51 	.word	0x08001d51
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001d3c:	e030      	b.n	8001da0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d025      	beq.n	8001d96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d4e:	e022      	b.n	8001d96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d58:	d11f      	bne.n	8001d9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d5e:	e01c      	b.n	8001d9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d903      	bls.n	8001d6e <DMA_CheckFifoParam+0xb6>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b03      	cmp	r3, #3
 8001d6a:	d003      	beq.n	8001d74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d6c:	e018      	b.n	8001da0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	73fb      	strb	r3, [r7, #15]
      break;
 8001d72:	e015      	b.n	8001da0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d00e      	beq.n	8001d9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	73fb      	strb	r3, [r7, #15]
      break;
 8001d84:	e00b      	b.n	8001d9e <DMA_CheckFifoParam+0xe6>
      break;
 8001d86:	bf00      	nop
 8001d88:	e00a      	b.n	8001da0 <DMA_CheckFifoParam+0xe8>
      break;
 8001d8a:	bf00      	nop
 8001d8c:	e008      	b.n	8001da0 <DMA_CheckFifoParam+0xe8>
      break;
 8001d8e:	bf00      	nop
 8001d90:	e006      	b.n	8001da0 <DMA_CheckFifoParam+0xe8>
      break;
 8001d92:	bf00      	nop
 8001d94:	e004      	b.n	8001da0 <DMA_CheckFifoParam+0xe8>
      break;
 8001d96:	bf00      	nop
 8001d98:	e002      	b.n	8001da0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001d9a:	bf00      	nop
 8001d9c:	e000      	b.n	8001da0 <DMA_CheckFifoParam+0xe8>
      break;
 8001d9e:	bf00      	nop
    }
  } 
  
  return status; 
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001da2:	4618      	mov	r0, r3
 8001da4:	3714      	adds	r7, #20
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop

08001db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b089      	sub	sp, #36	; 0x24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	61fb      	str	r3, [r7, #28]
 8001dca:	e165      	b.n	8002098 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001dcc:	2201      	movs	r2, #1
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	697a      	ldr	r2, [r7, #20]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001de0:	693a      	ldr	r2, [r7, #16]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	f040 8154 	bne.w	8002092 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f003 0303 	and.w	r3, r3, #3
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d005      	beq.n	8001e02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d130      	bne.n	8001e64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	2203      	movs	r2, #3
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43db      	mvns	r3, r3
 8001e14:	69ba      	ldr	r2, [r7, #24]
 8001e16:	4013      	ands	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	68da      	ldr	r2, [r3, #12]
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	005b      	lsls	r3, r3, #1
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e38:	2201      	movs	r2, #1
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	091b      	lsrs	r3, r3, #4
 8001e4e:	f003 0201 	and.w	r2, r3, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f003 0303 	and.w	r3, r3, #3
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d017      	beq.n	8001ea0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	2203      	movs	r2, #3
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	43db      	mvns	r3, r3
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	4013      	ands	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	689a      	ldr	r2, [r3, #8]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	005b      	lsls	r3, r3, #1
 8001e90:	fa02 f303 	lsl.w	r3, r2, r3
 8001e94:	69ba      	ldr	r2, [r7, #24]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	69ba      	ldr	r2, [r7, #24]
 8001e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f003 0303 	and.w	r3, r3, #3
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d123      	bne.n	8001ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001eac:	69fb      	ldr	r3, [r7, #28]
 8001eae:	08da      	lsrs	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3208      	adds	r2, #8
 8001eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	691a      	ldr	r2, [r3, #16]
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f003 0307 	and.w	r3, r3, #7
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee0:	69ba      	ldr	r2, [r7, #24]
 8001ee2:	4313      	orrs	r3, r2
 8001ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	08da      	lsrs	r2, r3, #3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3208      	adds	r2, #8
 8001eee:	69b9      	ldr	r1, [r7, #24]
 8001ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001efa:	69fb      	ldr	r3, [r7, #28]
 8001efc:	005b      	lsls	r3, r3, #1
 8001efe:	2203      	movs	r2, #3
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	43db      	mvns	r3, r3
 8001f06:	69ba      	ldr	r2, [r7, #24]
 8001f08:	4013      	ands	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 0203 	and.w	r2, r3, #3
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	69ba      	ldr	r2, [r7, #24]
 8001f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 80ae 	beq.w	8002092 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b5d      	ldr	r3, [pc, #372]	; (80020b0 <HAL_GPIO_Init+0x300>)
 8001f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3e:	4a5c      	ldr	r2, [pc, #368]	; (80020b0 <HAL_GPIO_Init+0x300>)
 8001f40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f44:	6453      	str	r3, [r2, #68]	; 0x44
 8001f46:	4b5a      	ldr	r3, [pc, #360]	; (80020b0 <HAL_GPIO_Init+0x300>)
 8001f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f52:	4a58      	ldr	r2, [pc, #352]	; (80020b4 <HAL_GPIO_Init+0x304>)
 8001f54:	69fb      	ldr	r3, [r7, #28]
 8001f56:	089b      	lsrs	r3, r3, #2
 8001f58:	3302      	adds	r3, #2
 8001f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	009b      	lsls	r3, r3, #2
 8001f68:	220f      	movs	r2, #15
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a4f      	ldr	r2, [pc, #316]	; (80020b8 <HAL_GPIO_Init+0x308>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d025      	beq.n	8001fca <HAL_GPIO_Init+0x21a>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a4e      	ldr	r2, [pc, #312]	; (80020bc <HAL_GPIO_Init+0x30c>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d01f      	beq.n	8001fc6 <HAL_GPIO_Init+0x216>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a4d      	ldr	r2, [pc, #308]	; (80020c0 <HAL_GPIO_Init+0x310>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d019      	beq.n	8001fc2 <HAL_GPIO_Init+0x212>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a4c      	ldr	r2, [pc, #304]	; (80020c4 <HAL_GPIO_Init+0x314>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d013      	beq.n	8001fbe <HAL_GPIO_Init+0x20e>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a4b      	ldr	r2, [pc, #300]	; (80020c8 <HAL_GPIO_Init+0x318>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d00d      	beq.n	8001fba <HAL_GPIO_Init+0x20a>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a4a      	ldr	r2, [pc, #296]	; (80020cc <HAL_GPIO_Init+0x31c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d007      	beq.n	8001fb6 <HAL_GPIO_Init+0x206>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a49      	ldr	r2, [pc, #292]	; (80020d0 <HAL_GPIO_Init+0x320>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d101      	bne.n	8001fb2 <HAL_GPIO_Init+0x202>
 8001fae:	2306      	movs	r3, #6
 8001fb0:	e00c      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fb2:	2307      	movs	r3, #7
 8001fb4:	e00a      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fb6:	2305      	movs	r3, #5
 8001fb8:	e008      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fba:	2304      	movs	r3, #4
 8001fbc:	e006      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fbe:	2303      	movs	r3, #3
 8001fc0:	e004      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	e002      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_GPIO_Init+0x21c>
 8001fca:	2300      	movs	r3, #0
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	f002 0203 	and.w	r2, r2, #3
 8001fd2:	0092      	lsls	r2, r2, #2
 8001fd4:	4093      	lsls	r3, r2
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fdc:	4935      	ldr	r1, [pc, #212]	; (80020b4 <HAL_GPIO_Init+0x304>)
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	089b      	lsrs	r3, r3, #2
 8001fe2:	3302      	adds	r3, #2
 8001fe4:	69ba      	ldr	r2, [r7, #24]
 8001fe6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001fea:	4b3a      	ldr	r3, [pc, #232]	; (80020d4 <HAL_GPIO_Init+0x324>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	43db      	mvns	r3, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ffa:	683b      	ldr	r3, [r7, #0]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d003      	beq.n	800200e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002006:	69ba      	ldr	r2, [r7, #24]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	4313      	orrs	r3, r2
 800200c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800200e:	4a31      	ldr	r2, [pc, #196]	; (80020d4 <HAL_GPIO_Init+0x324>)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002014:	4b2f      	ldr	r3, [pc, #188]	; (80020d4 <HAL_GPIO_Init+0x324>)
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202c:	2b00      	cmp	r3, #0
 800202e:	d003      	beq.n	8002038 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4313      	orrs	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002038:	4a26      	ldr	r2, [pc, #152]	; (80020d4 <HAL_GPIO_Init+0x324>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800203e:	4b25      	ldr	r3, [pc, #148]	; (80020d4 <HAL_GPIO_Init+0x324>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	43db      	mvns	r3, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4013      	ands	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002056:	2b00      	cmp	r3, #0
 8002058:	d003      	beq.n	8002062 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002062:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <HAL_GPIO_Init+0x324>)
 8002064:	69bb      	ldr	r3, [r7, #24]
 8002066:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002068:	4b1a      	ldr	r3, [pc, #104]	; (80020d4 <HAL_GPIO_Init+0x324>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d003      	beq.n	800208c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800208c:	4a11      	ldr	r2, [pc, #68]	; (80020d4 <HAL_GPIO_Init+0x324>)
 800208e:	69bb      	ldr	r3, [r7, #24]
 8002090:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	3301      	adds	r3, #1
 8002096:	61fb      	str	r3, [r7, #28]
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	2b0f      	cmp	r3, #15
 800209c:	f67f ae96 	bls.w	8001dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	3724      	adds	r7, #36	; 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ac:	4770      	bx	lr
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40013800 	.word	0x40013800
 80020b8:	40020000 	.word	0x40020000
 80020bc:	40020400 	.word	0x40020400
 80020c0:	40020800 	.word	0x40020800
 80020c4:	40020c00 	.word	0x40020c00
 80020c8:	40021000 	.word	0x40021000
 80020cc:	40021400 	.word	0x40021400
 80020d0:	40021800 	.word	0x40021800
 80020d4:	40013c00 	.word	0x40013c00

080020d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	460b      	mov	r3, r1
 80020e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691a      	ldr	r2, [r3, #16]
 80020e8:	887b      	ldrh	r3, [r7, #2]
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d002      	beq.n	80020f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80020f0:	2301      	movs	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
 80020f4:	e001      	b.n	80020fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80020f6:	2300      	movs	r3, #0
 80020f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80020fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80020fc:	4618      	mov	r0, r3
 80020fe:	3714      	adds	r7, #20
 8002100:	46bd      	mov	sp, r7
 8002102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002106:	4770      	bx	lr

08002108 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	460b      	mov	r3, r1
 8002112:	807b      	strh	r3, [r7, #2]
 8002114:	4613      	mov	r3, r2
 8002116:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002118:	787b      	ldrb	r3, [r7, #1]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800211e:	887a      	ldrh	r2, [r7, #2]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002124:	e003      	b.n	800212e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002126:	887b      	ldrh	r3, [r7, #2]
 8002128:	041a      	lsls	r2, r3, #16
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	619a      	str	r2, [r3, #24]
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr
	...

0800213c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0cc      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002150:	4b68      	ldr	r3, [pc, #416]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d90c      	bls.n	8002178 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b65      	ldr	r3, [pc, #404]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b63      	ldr	r3, [pc, #396]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0b8      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d020      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002190:	4b59      	ldr	r3, [pc, #356]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	4a58      	ldr	r2, [pc, #352]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800219a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a8:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	4a52      	ldr	r2, [pc, #328]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b4:	4b50      	ldr	r3, [pc, #320]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	494d      	ldr	r1, [pc, #308]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d044      	beq.n	800225c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d107      	bne.n	80021ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	4b47      	ldr	r3, [pc, #284]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d119      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e07f      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d003      	beq.n	80021fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d107      	bne.n	800220a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fa:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e06f      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220a:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e067      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221a:	4b37      	ldr	r3, [pc, #220]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f023 0203 	bic.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4934      	ldr	r1, [pc, #208]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	4313      	orrs	r3, r2
 800222a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800222c:	f7ff f902 	bl	8001434 <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	e00a      	b.n	800224a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7ff f8fe 	bl	8001434 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e04f      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 020c 	and.w	r2, r3, #12
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	429a      	cmp	r2, r3
 800225a:	d1eb      	bne.n	8002234 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d20c      	bcs.n	8002284 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e032      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4916      	ldr	r1, [pc, #88]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	490e      	ldr	r1, [pc, #56]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022c2:	f000 fb7f 	bl	80029c4 <HAL_RCC_GetSysClockFreq>
 80022c6:	4602      	mov	r2, r0
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	490a      	ldr	r1, [pc, #40]	; (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	5ccb      	ldrb	r3, [r1, r3]
 80022d6:	fa22 f303 	lsr.w	r3, r2, r3
 80022da:	4a09      	ldr	r2, [pc, #36]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7ff f862 	bl	80013ac <HAL_InitTick>

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023c00 	.word	0x40023c00
 80022f8:	40023800 	.word	0x40023800
 80022fc:	0800935c 	.word	0x0800935c
 8002300:	20000000 	.word	0x20000000
 8002304:	20000004 	.word	0x20000004

08002308 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800230c:	4b03      	ldr	r3, [pc, #12]	; (800231c <HAL_RCC_GetHCLKFreq+0x14>)
 800230e:	681b      	ldr	r3, [r3, #0]
}
 8002310:	4618      	mov	r0, r3
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr
 800231a:	bf00      	nop
 800231c:	20000000 	.word	0x20000000

08002320 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002324:	f7ff fff0 	bl	8002308 <HAL_RCC_GetHCLKFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_RCC_GetPCLK1Freq+0x20>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	0a9b      	lsrs	r3, r3, #10
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	4903      	ldr	r1, [pc, #12]	; (8002344 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800233c:	4618      	mov	r0, r3
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40023800 	.word	0x40023800
 8002344:	0800936c 	.word	0x0800936c

08002348 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800234c:	f7ff ffdc 	bl	8002308 <HAL_RCC_GetHCLKFreq>
 8002350:	4602      	mov	r2, r0
 8002352:	4b05      	ldr	r3, [pc, #20]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002354:	689b      	ldr	r3, [r3, #8]
 8002356:	0b5b      	lsrs	r3, r3, #13
 8002358:	f003 0307 	and.w	r3, r3, #7
 800235c:	4903      	ldr	r1, [pc, #12]	; (800236c <HAL_RCC_GetPCLK2Freq+0x24>)
 800235e:	5ccb      	ldrb	r3, [r1, r3]
 8002360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002364:	4618      	mov	r0, r3
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40023800 	.word	0x40023800
 800236c:	0800936c 	.word	0x0800936c

08002370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08c      	sub	sp, #48	; 0x30
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002378:	2300      	movs	r3, #0
 800237a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 800237c:	2300      	movs	r3, #0
 800237e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002384:	2300      	movs	r3, #0
 8002386:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002388:	2300      	movs	r3, #0
 800238a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800238c:	2300      	movs	r3, #0
 800238e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002390:	2300      	movs	r3, #0
 8002392:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8002398:	2300      	movs	r3, #0
 800239a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d010      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80023a8:	4b6f      	ldr	r3, [pc, #444]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023ae:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023b6:	496c      	ldr	r1, [pc, #432]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023b8:	4313      	orrs	r3, r2
 80023ba:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80023c6:	2301      	movs	r3, #1
 80023c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d010      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80023d6:	4b64      	ldr	r3, [pc, #400]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023dc:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e4:	4960      	ldr	r1, [pc, #384]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80023e6:	4313      	orrs	r3, r2
 80023e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d101      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80023f4:	2301      	movs	r3, #1
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0304 	and.w	r3, r3, #4
 8002400:	2b00      	cmp	r3, #0
 8002402:	d017      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002404:	4b58      	ldr	r3, [pc, #352]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002406:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800240a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	4955      	ldr	r1, [pc, #340]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002414:	4313      	orrs	r3, r2
 8002416:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002422:	d101      	bne.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002424:	2301      	movs	r3, #1
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002430:	2301      	movs	r3, #1
 8002432:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0308 	and.w	r3, r3, #8
 800243c:	2b00      	cmp	r3, #0
 800243e:	d017      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002440:	4b49      	ldr	r3, [pc, #292]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002442:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002446:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244e:	4946      	ldr	r1, [pc, #280]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002450:	4313      	orrs	r3, r2
 8002452:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800245a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800245e:	d101      	bne.n	8002464 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002460:	2301      	movs	r3, #1
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002468:	2b00      	cmp	r3, #0
 800246a:	d101      	bne.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800246c:	2301      	movs	r3, #1
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b00      	cmp	r3, #0
 800247a:	f000 808a 	beq.w	8002592 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800247e:	2300      	movs	r3, #0
 8002480:	60bb      	str	r3, [r7, #8]
 8002482:	4b39      	ldr	r3, [pc, #228]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	4a38      	ldr	r2, [pc, #224]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248c:	6413      	str	r3, [r2, #64]	; 0x40
 800248e:	4b36      	ldr	r3, [pc, #216]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800249a:	4b34      	ldr	r3, [pc, #208]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a33      	ldr	r2, [pc, #204]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80024a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80024a6:	f7fe ffc5 	bl	8001434 <HAL_GetTick>
 80024aa:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80024ac:	e008      	b.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80024ae:	f7fe ffc1 	bl	8001434 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e278      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80024c0:	4b2a      	ldr	r3, [pc, #168]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024cc:	4b26      	ldr	r3, [pc, #152]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024d4:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024d6:	6a3b      	ldr	r3, [r7, #32]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d02f      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e4:	6a3a      	ldr	r2, [r7, #32]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d028      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024ea:	4b1f      	ldr	r3, [pc, #124]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024f2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024f4:	4b1e      	ldr	r3, [pc, #120]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024fa:	4b1d      	ldr	r3, [pc, #116]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002500:	4a19      	ldr	r2, [pc, #100]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002506:	4b18      	ldr	r3, [pc, #96]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	2b01      	cmp	r3, #1
 8002510:	d114      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002512:	f7fe ff8f 	bl	8001434 <HAL_GetTick>
 8002516:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7fe ff8b 	bl	8001434 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	; 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e240      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0ee      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002540:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002544:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002548:	d114      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800254a:	4b07      	ldr	r3, [pc, #28]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800255a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800255e:	4902      	ldr	r1, [pc, #8]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002560:	4313      	orrs	r3, r2
 8002562:	608b      	str	r3, [r1, #8]
 8002564:	e00c      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	40007000 	.word	0x40007000
 8002570:	42470e40 	.word	0x42470e40
 8002574:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	4a49      	ldr	r2, [pc, #292]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800257a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800257e:	6093      	str	r3, [r2, #8]
 8002580:	4b47      	ldr	r3, [pc, #284]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002582:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258c:	4944      	ldr	r1, [pc, #272]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800258e:	4313      	orrs	r3, r2
 8002590:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b00      	cmp	r3, #0
 800259c:	d004      	beq.n	80025a8 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 80025a4:	4b3f      	ldr	r3, [pc, #252]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 80025a6:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00a      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 80025b4:	4b3a      	ldr	r3, [pc, #232]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c2:	4937      	ldr	r1, [pc, #220]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d00a      	beq.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80025d6:	4b32      	ldr	r3, [pc, #200]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025dc:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e4:	492e      	ldr	r1, [pc, #184]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d011      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80025f8:	4b29      	ldr	r3, [pc, #164]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80025fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025fe:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002606:	4926      	ldr	r1, [pc, #152]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002612:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002616:	d101      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002618:	2301      	movs	r3, #1
 800261a:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002628:	4b1d      	ldr	r3, [pc, #116]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800262a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800262e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	491a      	ldr	r1, [pc, #104]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002646:	2b00      	cmp	r3, #0
 8002648:	d011      	beq.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800264a:	4b15      	ldr	r3, [pc, #84]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800264c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002650:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002658:	4911      	ldr	r1, [pc, #68]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800265a:	4313      	orrs	r3, r2
 800265c:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002664:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002668:	d101      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800266a:	2301      	movs	r3, #1
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002670:	2b01      	cmp	r3, #1
 8002672:	d005      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800267c:	f040 80ff 	bne.w	800287e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002686:	f7fe fed5 	bl	8001434 <HAL_GetTick>
 800268a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800268c:	e00e      	b.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800268e:	f7fe fed1 	bl	8001434 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b02      	cmp	r3, #2
 800269a:	d907      	bls.n	80026ac <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800269c:	2303      	movs	r3, #3
 800269e:	e188      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80026a0:	40023800 	.word	0x40023800
 80026a4:	424711e0 	.word	0x424711e0
 80026a8:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026ac:	4b7e      	ldr	r3, [pc, #504]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1ea      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d009      	beq.n	80026e0 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d028      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d124      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80026e0:	4b71      	ldr	r3, [pc, #452]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e6:	0c1b      	lsrs	r3, r3, #16
 80026e8:	f003 0303 	and.w	r3, r3, #3
 80026ec:	3301      	adds	r3, #1
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026f2:	4b6d      	ldr	r3, [pc, #436]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80026f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f8:	0e1b      	lsrs	r3, r3, #24
 80026fa:	f003 030f 	and.w	r3, r3, #15
 80026fe:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685a      	ldr	r2, [r3, #4]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	689b      	ldr	r3, [r3, #8]
 8002708:	019b      	lsls	r3, r3, #6
 800270a:	431a      	orrs	r2, r3
 800270c:	69fb      	ldr	r3, [r7, #28]
 800270e:	085b      	lsrs	r3, r3, #1
 8002710:	3b01      	subs	r3, #1
 8002712:	041b      	lsls	r3, r3, #16
 8002714:	431a      	orrs	r2, r3
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	061b      	lsls	r3, r3, #24
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	695b      	ldr	r3, [r3, #20]
 8002720:	071b      	lsls	r3, r3, #28
 8002722:	4961      	ldr	r1, [pc, #388]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b00      	cmp	r3, #0
 8002734:	d004      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800273a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002748:	2b00      	cmp	r3, #0
 800274a:	d035      	beq.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002754:	d130      	bne.n	80027b8 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002756:	4b54      	ldr	r3, [pc, #336]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800275c:	0c1b      	lsrs	r3, r3, #16
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	3301      	adds	r3, #1
 8002764:	005b      	lsls	r3, r3, #1
 8002766:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002768:	4b4f      	ldr	r3, [pc, #316]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800276a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800276e:	0f1b      	lsrs	r3, r3, #28
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	019b      	lsls	r3, r3, #6
 8002780:	431a      	orrs	r2, r3
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	085b      	lsrs	r3, r3, #1
 8002786:	3b01      	subs	r3, #1
 8002788:	041b      	lsls	r3, r3, #16
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	061b      	lsls	r3, r3, #24
 8002792:	431a      	orrs	r2, r3
 8002794:	697b      	ldr	r3, [r7, #20]
 8002796:	071b      	lsls	r3, r3, #28
 8002798:	4943      	ldr	r1, [pc, #268]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800279a:	4313      	orrs	r3, r2
 800279c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80027a0:	4b41      	ldr	r3, [pc, #260]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80027a6:	f023 021f 	bic.w	r2, r3, #31
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ae:	3b01      	subs	r3, #1
 80027b0:	493d      	ldr	r1, [pc, #244]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d029      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027cc:	d124      	bne.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80027ce:	4b36      	ldr	r3, [pc, #216]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d4:	0c1b      	lsrs	r3, r3, #16
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	3301      	adds	r3, #1
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027e0:	4b31      	ldr	r3, [pc, #196]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027e6:	0f1b      	lsrs	r3, r3, #28
 80027e8:	f003 0307 	and.w	r3, r3, #7
 80027ec:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685a      	ldr	r2, [r3, #4]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	019b      	lsls	r3, r3, #6
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	085b      	lsrs	r3, r3, #1
 8002800:	3b01      	subs	r3, #1
 8002802:	041b      	lsls	r3, r3, #16
 8002804:	431a      	orrs	r2, r3
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	061b      	lsls	r3, r3, #24
 800280a:	431a      	orrs	r2, r3
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	071b      	lsls	r3, r3, #28
 8002810:	4925      	ldr	r1, [pc, #148]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002812:	4313      	orrs	r3, r2
 8002814:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002820:	2b00      	cmp	r3, #0
 8002822:	d016      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685a      	ldr	r2, [r3, #4]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	019b      	lsls	r3, r3, #6
 800282e:	431a      	orrs	r2, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	3b01      	subs	r3, #1
 8002838:	041b      	lsls	r3, r3, #16
 800283a:	431a      	orrs	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	691b      	ldr	r3, [r3, #16]
 8002840:	061b      	lsls	r3, r3, #24
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	071b      	lsls	r3, r3, #28
 800284a:	4917      	ldr	r1, [pc, #92]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002852:	4b16      	ldr	r3, [pc, #88]	; (80028ac <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002854:	2201      	movs	r2, #1
 8002856:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002858:	f7fe fdec 	bl	8001434 <HAL_GetTick>
 800285c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002860:	f7fe fde8 	bl	8001434 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b02      	cmp	r3, #2
 800286c:	d901      	bls.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e09f      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002872:	4b0d      	ldr	r3, [pc, #52]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800287e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002880:	2b01      	cmp	r3, #1
 8002882:	f040 8095 	bne.w	80029b0 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002886:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800288c:	f7fe fdd2 	bl	8001434 <HAL_GetTick>
 8002890:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002892:	e00f      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002894:	f7fe fdce 	bl	8001434 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d908      	bls.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e085      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
 80028a6:	bf00      	nop
 80028a8:	40023800 	.word	0x40023800
 80028ac:	42470068 	.word	0x42470068
 80028b0:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80028b4:	4b41      	ldr	r3, [pc, #260]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80028bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80028c0:	d0e8      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0304 	and.w	r3, r3, #4
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d003      	beq.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x566>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d02b      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d127      	bne.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80028ea:	4b34      	ldr	r3, [pc, #208]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80028ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f0:	0c1b      	lsrs	r3, r3, #16
 80028f2:	f003 0303 	and.w	r3, r3, #3
 80028f6:	3301      	adds	r3, #1
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	699a      	ldr	r2, [r3, #24]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	019b      	lsls	r3, r3, #6
 8002906:	431a      	orrs	r2, r3
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	085b      	lsrs	r3, r3, #1
 800290c:	3b01      	subs	r3, #1
 800290e:	041b      	lsls	r3, r3, #16
 8002910:	431a      	orrs	r2, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	061b      	lsls	r3, r3, #24
 8002918:	4928      	ldr	r1, [pc, #160]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800291a:	4313      	orrs	r3, r2
 800291c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002920:	4b26      	ldr	r3, [pc, #152]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002922:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002926:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800292e:	3b01      	subs	r3, #1
 8002930:	021b      	lsls	r3, r3, #8
 8002932:	4922      	ldr	r1, [pc, #136]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002934:	4313      	orrs	r3, r2
 8002936:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01d      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800294e:	d118      	bne.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002950:	4b1a      	ldr	r3, [pc, #104]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002956:	0e1b      	lsrs	r3, r3, #24
 8002958:	f003 030f 	and.w	r3, r3, #15
 800295c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	699a      	ldr	r2, [r3, #24]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	019b      	lsls	r3, r3, #6
 8002968:	431a      	orrs	r2, r3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6a1b      	ldr	r3, [r3, #32]
 800296e:	085b      	lsrs	r3, r3, #1
 8002970:	3b01      	subs	r3, #1
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	431a      	orrs	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	061b      	lsls	r3, r3, #24
 800297a:	4910      	ldr	r1, [pc, #64]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002982:	4b0f      	ldr	r3, [pc, #60]	; (80029c0 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002984:	2201      	movs	r2, #1
 8002986:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002988:	f7fe fd54 	bl	8001434 <HAL_GetTick>
 800298c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800298e:	e008      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002990:	f7fe fd50 	bl	8001434 <HAL_GetTick>
 8002994:	4602      	mov	r2, r0
 8002996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	2b02      	cmp	r3, #2
 800299c:	d901      	bls.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e007      	b.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029a2:	4b06      	ldr	r3, [pc, #24]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029ae:	d1ef      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3730      	adds	r7, #48	; 0x30
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40023800 	.word	0x40023800
 80029c0:	42470070 	.word	0x42470070

080029c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80029c8:	b087      	sub	sp, #28
 80029ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029cc:	2600      	movs	r6, #0
 80029ce:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 80029d0:	2600      	movs	r6, #0
 80029d2:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 80029d4:	2600      	movs	r6, #0
 80029d6:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 80029d8:	2600      	movs	r6, #0
 80029da:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029dc:	2600      	movs	r6, #0
 80029de:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e0:	4ea3      	ldr	r6, [pc, #652]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80029e2:	68b6      	ldr	r6, [r6, #8]
 80029e4:	f006 060c 	and.w	r6, r6, #12
 80029e8:	2e0c      	cmp	r6, #12
 80029ea:	f200 8137 	bhi.w	8002c5c <HAL_RCC_GetSysClockFreq+0x298>
 80029ee:	f20f 0c08 	addw	ip, pc, #8
 80029f2:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 80029f6:	bf00      	nop
 80029f8:	08002a2d 	.word	0x08002a2d
 80029fc:	08002c5d 	.word	0x08002c5d
 8002a00:	08002c5d 	.word	0x08002c5d
 8002a04:	08002c5d 	.word	0x08002c5d
 8002a08:	08002a33 	.word	0x08002a33
 8002a0c:	08002c5d 	.word	0x08002c5d
 8002a10:	08002c5d 	.word	0x08002c5d
 8002a14:	08002c5d 	.word	0x08002c5d
 8002a18:	08002a39 	.word	0x08002a39
 8002a1c:	08002c5d 	.word	0x08002c5d
 8002a20:	08002c5d 	.word	0x08002c5d
 8002a24:	08002c5d 	.word	0x08002c5d
 8002a28:	08002b4f 	.word	0x08002b4f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a2c:	4b91      	ldr	r3, [pc, #580]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002a2e:	613b      	str	r3, [r7, #16]
       break;
 8002a30:	e117      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a32:	4b91      	ldr	r3, [pc, #580]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002a34:	613b      	str	r3, [r7, #16]
      break;
 8002a36:	e114      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a38:	4b8d      	ldr	r3, [pc, #564]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a40:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a42:	4b8b      	ldr	r3, [pc, #556]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d024      	beq.n	8002a98 <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a4e:	4b88      	ldr	r3, [pc, #544]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	099b      	lsrs	r3, r3, #6
 8002a54:	461a      	mov	r2, r3
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002a5e:	f04f 0500 	mov.w	r5, #0
 8002a62:	ea02 0004 	and.w	r0, r2, r4
 8002a66:	ea03 0105 	and.w	r1, r3, r5
 8002a6a:	4b83      	ldr	r3, [pc, #524]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002a6c:	fb03 f201 	mul.w	r2, r3, r1
 8002a70:	2300      	movs	r3, #0
 8002a72:	fb03 f300 	mul.w	r3, r3, r0
 8002a76:	4413      	add	r3, r2
 8002a78:	4a7f      	ldr	r2, [pc, #508]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002a7a:	fba0 0102 	umull	r0, r1, r0, r2
 8002a7e:	440b      	add	r3, r1
 8002a80:	4619      	mov	r1, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	461a      	mov	r2, r3
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	f7fd fbbb 	bl	8000204 <__aeabi_uldivmod>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	4613      	mov	r3, r2
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	e04c      	b.n	8002b32 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a98:	4b75      	ldr	r3, [pc, #468]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	099b      	lsrs	r3, r3, #6
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	f04f 0300 	mov.w	r3, #0
 8002aa4:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002aa8:	f04f 0100 	mov.w	r1, #0
 8002aac:	ea02 0800 	and.w	r8, r2, r0
 8002ab0:	ea03 0901 	and.w	r9, r3, r1
 8002ab4:	4640      	mov	r0, r8
 8002ab6:	4649      	mov	r1, r9
 8002ab8:	f04f 0200 	mov.w	r2, #0
 8002abc:	f04f 0300 	mov.w	r3, #0
 8002ac0:	014b      	lsls	r3, r1, #5
 8002ac2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ac6:	0142      	lsls	r2, r0, #5
 8002ac8:	4610      	mov	r0, r2
 8002aca:	4619      	mov	r1, r3
 8002acc:	ebb0 0008 	subs.w	r0, r0, r8
 8002ad0:	eb61 0109 	sbc.w	r1, r1, r9
 8002ad4:	f04f 0200 	mov.w	r2, #0
 8002ad8:	f04f 0300 	mov.w	r3, #0
 8002adc:	018b      	lsls	r3, r1, #6
 8002ade:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ae2:	0182      	lsls	r2, r0, #6
 8002ae4:	1a12      	subs	r2, r2, r0
 8002ae6:	eb63 0301 	sbc.w	r3, r3, r1
 8002aea:	f04f 0000 	mov.w	r0, #0
 8002aee:	f04f 0100 	mov.w	r1, #0
 8002af2:	00d9      	lsls	r1, r3, #3
 8002af4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002af8:	00d0      	lsls	r0, r2, #3
 8002afa:	4602      	mov	r2, r0
 8002afc:	460b      	mov	r3, r1
 8002afe:	eb12 0208 	adds.w	r2, r2, r8
 8002b02:	eb43 0309 	adc.w	r3, r3, r9
 8002b06:	f04f 0000 	mov.w	r0, #0
 8002b0a:	f04f 0100 	mov.w	r1, #0
 8002b0e:	0299      	lsls	r1, r3, #10
 8002b10:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002b14:	0290      	lsls	r0, r2, #10
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4610      	mov	r0, r2
 8002b1c:	4619      	mov	r1, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	461a      	mov	r2, r3
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	f7fd fb6d 	bl	8000204 <__aeabi_uldivmod>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	460b      	mov	r3, r1
 8002b2e:	4613      	mov	r3, r2
 8002b30:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b32:	4b4f      	ldr	r3, [pc, #316]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	0c1b      	lsrs	r3, r3, #16
 8002b38:	f003 0303 	and.w	r3, r3, #3
 8002b3c:	3301      	adds	r3, #1
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002b42:	697a      	ldr	r2, [r7, #20]
 8002b44:	68bb      	ldr	r3, [r7, #8]
 8002b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4a:	613b      	str	r3, [r7, #16]
      break;
 8002b4c:	e089      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b4e:	4948      	ldr	r1, [pc, #288]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002b50:	6849      	ldr	r1, [r1, #4]
 8002b52:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002b56:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b58:	4945      	ldr	r1, [pc, #276]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002b5a:	6849      	ldr	r1, [r1, #4]
 8002b5c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8002b60:	2900      	cmp	r1, #0
 8002b62:	d024      	beq.n	8002bae <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b64:	4942      	ldr	r1, [pc, #264]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002b66:	6849      	ldr	r1, [r1, #4]
 8002b68:	0989      	lsrs	r1, r1, #6
 8002b6a:	4608      	mov	r0, r1
 8002b6c:	f04f 0100 	mov.w	r1, #0
 8002b70:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002b74:	f04f 0500 	mov.w	r5, #0
 8002b78:	ea00 0204 	and.w	r2, r0, r4
 8002b7c:	ea01 0305 	and.w	r3, r1, r5
 8002b80:	493d      	ldr	r1, [pc, #244]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002b82:	fb01 f003 	mul.w	r0, r1, r3
 8002b86:	2100      	movs	r1, #0
 8002b88:	fb01 f102 	mul.w	r1, r1, r2
 8002b8c:	1844      	adds	r4, r0, r1
 8002b8e:	493a      	ldr	r1, [pc, #232]	; (8002c78 <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002b90:	fba2 0101 	umull	r0, r1, r2, r1
 8002b94:	1863      	adds	r3, r4, r1
 8002b96:	4619      	mov	r1, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	f7fd fb30 	bl	8000204 <__aeabi_uldivmod>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	4613      	mov	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	e04a      	b.n	8002c44 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bae:	4b30      	ldr	r3, [pc, #192]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	099b      	lsrs	r3, r3, #6
 8002bb4:	461a      	mov	r2, r3
 8002bb6:	f04f 0300 	mov.w	r3, #0
 8002bba:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002bbe:	f04f 0100 	mov.w	r1, #0
 8002bc2:	ea02 0400 	and.w	r4, r2, r0
 8002bc6:	ea03 0501 	and.w	r5, r3, r1
 8002bca:	4620      	mov	r0, r4
 8002bcc:	4629      	mov	r1, r5
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	f04f 0300 	mov.w	r3, #0
 8002bd6:	014b      	lsls	r3, r1, #5
 8002bd8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bdc:	0142      	lsls	r2, r0, #5
 8002bde:	4610      	mov	r0, r2
 8002be0:	4619      	mov	r1, r3
 8002be2:	1b00      	subs	r0, r0, r4
 8002be4:	eb61 0105 	sbc.w	r1, r1, r5
 8002be8:	f04f 0200 	mov.w	r2, #0
 8002bec:	f04f 0300 	mov.w	r3, #0
 8002bf0:	018b      	lsls	r3, r1, #6
 8002bf2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bf6:	0182      	lsls	r2, r0, #6
 8002bf8:	1a12      	subs	r2, r2, r0
 8002bfa:	eb63 0301 	sbc.w	r3, r3, r1
 8002bfe:	f04f 0000 	mov.w	r0, #0
 8002c02:	f04f 0100 	mov.w	r1, #0
 8002c06:	00d9      	lsls	r1, r3, #3
 8002c08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c0c:	00d0      	lsls	r0, r2, #3
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	1912      	adds	r2, r2, r4
 8002c14:	eb45 0303 	adc.w	r3, r5, r3
 8002c18:	f04f 0000 	mov.w	r0, #0
 8002c1c:	f04f 0100 	mov.w	r1, #0
 8002c20:	0299      	lsls	r1, r3, #10
 8002c22:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002c26:	0290      	lsls	r0, r2, #10
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	4619      	mov	r1, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	461a      	mov	r2, r3
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	f7fd fae4 	bl	8000204 <__aeabi_uldivmod>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4613      	mov	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002c44:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	0f1b      	lsrs	r3, r3, #28
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c58:	613b      	str	r3, [r7, #16]
      break;
 8002c5a:	e002      	b.n	8002c62 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c5c:	4b05      	ldr	r3, [pc, #20]	; (8002c74 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002c5e:	613b      	str	r3, [r7, #16]
      break;
 8002c60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c62:	693b      	ldr	r3, [r7, #16]
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	371c      	adds	r7, #28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c6e:	bf00      	nop
 8002c70:	40023800 	.word	0x40023800
 8002c74:	00f42400 	.word	0x00f42400
 8002c78:	017d7840 	.word	0x017d7840

08002c7c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e28d      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f003 0301 	and.w	r3, r3, #1
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	f000 8083 	beq.w	8002da2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002c9c:	4b94      	ldr	r3, [pc, #592]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f003 030c 	and.w	r3, r3, #12
 8002ca4:	2b04      	cmp	r3, #4
 8002ca6:	d019      	beq.n	8002cdc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002ca8:	4b91      	ldr	r3, [pc, #580]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d106      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cb4:	4b8e      	ldr	r3, [pc, #568]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cc0:	d00c      	beq.n	8002cdc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc2:	4b8b      	ldr	r3, [pc, #556]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002cca:	2b0c      	cmp	r3, #12
 8002ccc:	d112      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cce:	4b88      	ldr	r3, [pc, #544]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cda:	d10b      	bne.n	8002cf4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cdc:	4b84      	ldr	r3, [pc, #528]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d05b      	beq.n	8002da0 <HAL_RCC_OscConfig+0x124>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d157      	bne.n	8002da0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e25a      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cfc:	d106      	bne.n	8002d0c <HAL_RCC_OscConfig+0x90>
 8002cfe:	4b7c      	ldr	r3, [pc, #496]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a7b      	ldr	r2, [pc, #492]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	e01d      	b.n	8002d48 <HAL_RCC_OscConfig+0xcc>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d14:	d10c      	bne.n	8002d30 <HAL_RCC_OscConfig+0xb4>
 8002d16:	4b76      	ldr	r3, [pc, #472]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a75      	ldr	r2, [pc, #468]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	4b73      	ldr	r3, [pc, #460]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a72      	ldr	r2, [pc, #456]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	e00b      	b.n	8002d48 <HAL_RCC_OscConfig+0xcc>
 8002d30:	4b6f      	ldr	r3, [pc, #444]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a6e      	ldr	r2, [pc, #440]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d3a:	6013      	str	r3, [r2, #0]
 8002d3c:	4b6c      	ldr	r3, [pc, #432]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a6b      	ldr	r2, [pc, #428]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d013      	beq.n	8002d78 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d50:	f7fe fb70 	bl	8001434 <HAL_GetTick>
 8002d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d56:	e008      	b.n	8002d6a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d58:	f7fe fb6c 	bl	8001434 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	2b64      	cmp	r3, #100	; 0x64
 8002d64:	d901      	bls.n	8002d6a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002d66:	2303      	movs	r3, #3
 8002d68:	e21f      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d6a:	4b61      	ldr	r3, [pc, #388]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d0f0      	beq.n	8002d58 <HAL_RCC_OscConfig+0xdc>
 8002d76:	e014      	b.n	8002da2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d78:	f7fe fb5c 	bl	8001434 <HAL_GetTick>
 8002d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d7e:	e008      	b.n	8002d92 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d80:	f7fe fb58 	bl	8001434 <HAL_GetTick>
 8002d84:	4602      	mov	r2, r0
 8002d86:	693b      	ldr	r3, [r7, #16]
 8002d88:	1ad3      	subs	r3, r2, r3
 8002d8a:	2b64      	cmp	r3, #100	; 0x64
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e20b      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d92:	4b57      	ldr	r3, [pc, #348]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1f0      	bne.n	8002d80 <HAL_RCC_OscConfig+0x104>
 8002d9e:	e000      	b.n	8002da2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d06f      	beq.n	8002e8e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dae:	4b50      	ldr	r3, [pc, #320]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d017      	beq.n	8002dea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dba:	4b4d      	ldr	r3, [pc, #308]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d105      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dc6:	4b4a      	ldr	r3, [pc, #296]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00b      	beq.n	8002dea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dd2:	4b47      	ldr	r3, [pc, #284]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002dda:	2b0c      	cmp	r3, #12
 8002ddc:	d11c      	bne.n	8002e18 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dde:	4b44      	ldr	r3, [pc, #272]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d116      	bne.n	8002e18 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dea:	4b41      	ldr	r3, [pc, #260]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0302 	and.w	r3, r3, #2
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d005      	beq.n	8002e02 <HAL_RCC_OscConfig+0x186>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d001      	beq.n	8002e02 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e1d3      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e02:	4b3b      	ldr	r3, [pc, #236]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4937      	ldr	r1, [pc, #220]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e16:	e03a      	b.n	8002e8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d020      	beq.n	8002e62 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e20:	4b34      	ldr	r3, [pc, #208]	; (8002ef4 <HAL_RCC_OscConfig+0x278>)
 8002e22:	2201      	movs	r2, #1
 8002e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e26:	f7fe fb05 	bl	8001434 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e2e:	f7fe fb01 	bl	8001434 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e1b4      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e40:	4b2b      	ldr	r3, [pc, #172]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d0f0      	beq.n	8002e2e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e4c:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4925      	ldr	r1, [pc, #148]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	600b      	str	r3, [r1, #0]
 8002e60:	e015      	b.n	8002e8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_RCC_OscConfig+0x278>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7fe fae4 	bl	8001434 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e70:	f7fe fae0 	bl	8001434 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e193      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e82:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d036      	beq.n	8002f08 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d016      	beq.n	8002ed0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea2:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <HAL_RCC_OscConfig+0x27c>)
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ea8:	f7fe fac4 	bl	8001434 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb0:	f7fe fac0 	bl	8001434 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e173      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <HAL_RCC_OscConfig+0x274>)
 8002ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x234>
 8002ece:	e01b      	b.n	8002f08 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <HAL_RCC_OscConfig+0x27c>)
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ed6:	f7fe faad 	bl	8001434 <HAL_GetTick>
 8002eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002edc:	e00e      	b.n	8002efc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ede:	f7fe faa9 	bl	8001434 <HAL_GetTick>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	1ad3      	subs	r3, r2, r3
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d907      	bls.n	8002efc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002eec:	2303      	movs	r3, #3
 8002eee:	e15c      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	42470000 	.word	0x42470000
 8002ef8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002efc:	4b8a      	ldr	r3, [pc, #552]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002efe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f00:	f003 0302 	and.w	r3, r3, #2
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d1ea      	bne.n	8002ede <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f003 0304 	and.w	r3, r3, #4
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	f000 8097 	beq.w	8003044 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f16:	2300      	movs	r3, #0
 8002f18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1a:	4b83      	ldr	r3, [pc, #524]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10f      	bne.n	8002f46 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60bb      	str	r3, [r7, #8]
 8002f2a:	4b7f      	ldr	r3, [pc, #508]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	4a7e      	ldr	r2, [pc, #504]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002f30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f34:	6413      	str	r3, [r2, #64]	; 0x40
 8002f36:	4b7c      	ldr	r3, [pc, #496]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3e:	60bb      	str	r3, [r7, #8]
 8002f40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f42:	2301      	movs	r3, #1
 8002f44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f46:	4b79      	ldr	r3, [pc, #484]	; (800312c <HAL_RCC_OscConfig+0x4b0>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d118      	bne.n	8002f84 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f52:	4b76      	ldr	r3, [pc, #472]	; (800312c <HAL_RCC_OscConfig+0x4b0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a75      	ldr	r2, [pc, #468]	; (800312c <HAL_RCC_OscConfig+0x4b0>)
 8002f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5e:	f7fe fa69 	bl	8001434 <HAL_GetTick>
 8002f62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f64:	e008      	b.n	8002f78 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f66:	f7fe fa65 	bl	8001434 <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d901      	bls.n	8002f78 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	e118      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f78:	4b6c      	ldr	r3, [pc, #432]	; (800312c <HAL_RCC_OscConfig+0x4b0>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d0f0      	beq.n	8002f66 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	d106      	bne.n	8002f9a <HAL_RCC_OscConfig+0x31e>
 8002f8c:	4b66      	ldr	r3, [pc, #408]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f90:	4a65      	ldr	r2, [pc, #404]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002f92:	f043 0301 	orr.w	r3, r3, #1
 8002f96:	6713      	str	r3, [r2, #112]	; 0x70
 8002f98:	e01c      	b.n	8002fd4 <HAL_RCC_OscConfig+0x358>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	2b05      	cmp	r3, #5
 8002fa0:	d10c      	bne.n	8002fbc <HAL_RCC_OscConfig+0x340>
 8002fa2:	4b61      	ldr	r3, [pc, #388]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa6:	4a60      	ldr	r2, [pc, #384]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002fa8:	f043 0304 	orr.w	r3, r3, #4
 8002fac:	6713      	str	r3, [r2, #112]	; 0x70
 8002fae:	4b5e      	ldr	r3, [pc, #376]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002fb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb2:	4a5d      	ldr	r2, [pc, #372]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002fb4:	f043 0301 	orr.w	r3, r3, #1
 8002fb8:	6713      	str	r3, [r2, #112]	; 0x70
 8002fba:	e00b      	b.n	8002fd4 <HAL_RCC_OscConfig+0x358>
 8002fbc:	4b5a      	ldr	r3, [pc, #360]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc0:	4a59      	ldr	r2, [pc, #356]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002fc2:	f023 0301 	bic.w	r3, r3, #1
 8002fc6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fc8:	4b57      	ldr	r3, [pc, #348]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002fca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fcc:	4a56      	ldr	r2, [pc, #344]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002fce:	f023 0304 	bic.w	r3, r3, #4
 8002fd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d015      	beq.n	8003008 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fdc:	f7fe fa2a 	bl	8001434 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fe2:	e00a      	b.n	8002ffa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe4:	f7fe fa26 	bl	8001434 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e0d7      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ffa:	4b4b      	ldr	r3, [pc, #300]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8002ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0ee      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x368>
 8003006:	e014      	b.n	8003032 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003008:	f7fe fa14 	bl	8001434 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800300e:	e00a      	b.n	8003026 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003010:	f7fe fa10 	bl	8001434 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	f241 3288 	movw	r2, #5000	; 0x1388
 800301e:	4293      	cmp	r3, r2
 8003020:	d901      	bls.n	8003026 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003022:	2303      	movs	r3, #3
 8003024:	e0c1      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003026:	4b40      	ldr	r3, [pc, #256]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	f003 0302 	and.w	r3, r3, #2
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1ee      	bne.n	8003010 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d105      	bne.n	8003044 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003038:	4b3b      	ldr	r3, [pc, #236]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 800303a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303c:	4a3a      	ldr	r2, [pc, #232]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 800303e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003042:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	2b00      	cmp	r3, #0
 800304a:	f000 80ad 	beq.w	80031a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800304e:	4b36      	ldr	r3, [pc, #216]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	f003 030c 	and.w	r3, r3, #12
 8003056:	2b08      	cmp	r3, #8
 8003058:	d060      	beq.n	800311c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b02      	cmp	r3, #2
 8003060:	d145      	bne.n	80030ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003062:	4b33      	ldr	r3, [pc, #204]	; (8003130 <HAL_RCC_OscConfig+0x4b4>)
 8003064:	2200      	movs	r2, #0
 8003066:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003068:	f7fe f9e4 	bl	8001434 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003070:	f7fe f9e0 	bl	8001434 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b02      	cmp	r3, #2
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e093      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003082:	4b29      	ldr	r3, [pc, #164]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69da      	ldr	r2, [r3, #28]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	431a      	orrs	r2, r3
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	019b      	lsls	r3, r3, #6
 800309e:	431a      	orrs	r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a4:	085b      	lsrs	r3, r3, #1
 80030a6:	3b01      	subs	r3, #1
 80030a8:	041b      	lsls	r3, r3, #16
 80030aa:	431a      	orrs	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030b0:	061b      	lsls	r3, r3, #24
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	071b      	lsls	r3, r3, #28
 80030ba:	491b      	ldr	r1, [pc, #108]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030c0:	4b1b      	ldr	r3, [pc, #108]	; (8003130 <HAL_RCC_OscConfig+0x4b4>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c6:	f7fe f9b5 	bl	8001434 <HAL_GetTick>
 80030ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030cc:	e008      	b.n	80030e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ce:	f7fe f9b1 	bl	8001434 <HAL_GetTick>
 80030d2:	4602      	mov	r2, r0
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d901      	bls.n	80030e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80030dc:	2303      	movs	r3, #3
 80030de:	e064      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e0:	4b11      	ldr	r3, [pc, #68]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d0f0      	beq.n	80030ce <HAL_RCC_OscConfig+0x452>
 80030ec:	e05c      	b.n	80031a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ee:	4b10      	ldr	r3, [pc, #64]	; (8003130 <HAL_RCC_OscConfig+0x4b4>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030f4:	f7fe f99e 	bl	8001434 <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030fa:	e008      	b.n	800310e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030fc:	f7fe f99a 	bl	8001434 <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d901      	bls.n	800310e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e04d      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800310e:	4b06      	ldr	r3, [pc, #24]	; (8003128 <HAL_RCC_OscConfig+0x4ac>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d1f0      	bne.n	80030fc <HAL_RCC_OscConfig+0x480>
 800311a:	e045      	b.n	80031a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	699b      	ldr	r3, [r3, #24]
 8003120:	2b01      	cmp	r3, #1
 8003122:	d107      	bne.n	8003134 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e040      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
 8003128:	40023800 	.word	0x40023800
 800312c:	40007000 	.word	0x40007000
 8003130:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003134:	4b1f      	ldr	r3, [pc, #124]	; (80031b4 <HAL_RCC_OscConfig+0x538>)
 8003136:	685b      	ldr	r3, [r3, #4]
 8003138:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	699b      	ldr	r3, [r3, #24]
 800313e:	2b01      	cmp	r3, #1
 8003140:	d030      	beq.n	80031a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800314c:	429a      	cmp	r2, r3
 800314e:	d129      	bne.n	80031a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315a:	429a      	cmp	r2, r3
 800315c:	d122      	bne.n	80031a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003164:	4013      	ands	r3, r2
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800316a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800316c:	4293      	cmp	r3, r2
 800316e:	d119      	bne.n	80031a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	085b      	lsrs	r3, r3, #1
 800317c:	3b01      	subs	r3, #1
 800317e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003180:	429a      	cmp	r2, r3
 8003182:	d10f      	bne.n	80031a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800318e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d107      	bne.n	80031a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031a0:	429a      	cmp	r2, r3
 80031a2:	d001      	beq.n	80031a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e000      	b.n	80031aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3718      	adds	r7, #24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}
 80031b2:	bf00      	nop
 80031b4:	40023800 	.word	0x40023800

080031b8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e022      	b.n	8003210 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d105      	bne.n	80031e2 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7fd fc4f 	bl	8000a80 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2203      	movs	r2, #3
 80031e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f814 	bl	8003218 <HAL_SD_InitCard>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80031f6:	2301      	movs	r3, #1
 80031f8:	e00a      	b.n	8003210 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2200      	movs	r2, #0
 8003204:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2201      	movs	r2, #1
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003218:	b5b0      	push	{r4, r5, r7, lr}
 800321a:	b08e      	sub	sp, #56	; 0x38
 800321c:	af04      	add	r7, sp, #16
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003220:	2300      	movs	r3, #0
 8003222:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8003228:	2300      	movs	r3, #0
 800322a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 800322c:	2300      	movs	r3, #0
 800322e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003230:	2300      	movs	r3, #0
 8003232:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003234:	2376      	movs	r3, #118	; 0x76
 8003236:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681d      	ldr	r5, [r3, #0]
 800323c:	466c      	mov	r4, sp
 800323e:	f107 0314 	add.w	r3, r7, #20
 8003242:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003246:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800324a:	f107 0308 	add.w	r3, r7, #8
 800324e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003250:	4628      	mov	r0, r5
 8003252:	f002 ff63 	bl	800611c <SDIO_Init>
 8003256:	4603      	mov	r3, r0
 8003258:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800325c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003260:	2b00      	cmp	r3, #0
 8003262:	d001      	beq.n	8003268 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e04c      	b.n	8003302 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8003268:	4b28      	ldr	r3, [pc, #160]	; (800330c <HAL_SD_InitCard+0xf4>)
 800326a:	2200      	movs	r2, #0
 800326c:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4618      	mov	r0, r3
 8003274:	f002 ff9b 	bl	80061ae <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 8003278:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_SD_InitCard+0xf4>)
 800327a:	2201      	movs	r2, #1
 800327c:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f001 f856 	bl	8004330 <SD_PowerON>
 8003284:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003286:	6a3b      	ldr	r3, [r7, #32]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00b      	beq.n	80032a4 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2201      	movs	r2, #1
 8003290:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003298:	6a3b      	ldr	r3, [r7, #32]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e02e      	b.n	8003302 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80032a4:	6878      	ldr	r0, [r7, #4]
 80032a6:	f000 ff77 	bl	8004198 <SD_InitCard>
 80032aa:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00b      	beq.n	80032ca <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	431a      	orrs	r2, r3
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e01b      	b.n	8003302 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032d2:	4618      	mov	r0, r3
 80032d4:	f002 fffe 	bl	80062d4 <SDMMC_CmdBlockLength>
 80032d8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80032da:	6a3b      	ldr	r3, [r7, #32]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00f      	beq.n	8003300 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a0a      	ldr	r2, [pc, #40]	; (8003310 <HAL_SD_InitCard+0xf8>)
 80032e6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032ec:	6a3b      	ldr	r3, [r7, #32]
 80032ee:	431a      	orrs	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2201      	movs	r2, #1
 80032f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3728      	adds	r7, #40	; 0x28
 8003306:	46bd      	mov	sp, r7
 8003308:	bdb0      	pop	{r4, r5, r7, pc}
 800330a:	bf00      	nop
 800330c:	422580a0 	.word	0x422580a0
 8003310:	004005ff 	.word	0x004005ff

08003314 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b092      	sub	sp, #72	; 0x48
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003322:	f7fe f887 	bl	8001434 <HAL_GetTick>
 8003326:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d107      	bne.n	8003346 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e1bd      	b.n	80036c2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b01      	cmp	r3, #1
 8003350:	f040 81b0 	bne.w	80036b4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800335a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	441a      	add	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003364:	429a      	cmp	r2, r3
 8003366:	d907      	bls.n	8003378 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800336c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003374:	2301      	movs	r3, #1
 8003376:	e1a4      	b.n	80036c2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2203      	movs	r2, #3
 800337c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2200      	movs	r2, #0
 8003386:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338c:	2b01      	cmp	r3, #1
 800338e:	d002      	beq.n	8003396 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8003390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003392:	025b      	lsls	r3, r3, #9
 8003394:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003396:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800339a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	025b      	lsls	r3, r3, #9
 80033a0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80033a2:	2390      	movs	r3, #144	; 0x90
 80033a4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80033a6:	2302      	movs	r3, #2
 80033a8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80033ae:	2301      	movs	r3, #1
 80033b0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f107 0214 	add.w	r2, r7, #20
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f002 ff5d 	bl	800627c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d90a      	bls.n	80033de <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	2202      	movs	r2, #2
 80033cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033d4:	4618      	mov	r0, r3
 80033d6:	f002 ffc1 	bl	800635c <SDMMC_CmdReadMultiBlock>
 80033da:	6478      	str	r0, [r7, #68]	; 0x44
 80033dc:	e009      	b.n	80033f2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2201      	movs	r2, #1
 80033e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033ea:	4618      	mov	r0, r3
 80033ec:	f002 ff94 	bl	8006318 <SDMMC_CmdReadSingleBlock>
 80033f0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80033f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d012      	beq.n	800341e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a7a      	ldr	r2, [pc, #488]	; (80035e8 <HAL_SD_ReadBlocks+0x2d4>)
 80033fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003406:	431a      	orrs	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	e151      	b.n	80036c2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800341e:	69bb      	ldr	r3, [r7, #24]
 8003420:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003422:	e061      	b.n	80034e8 <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d03c      	beq.n	80034ac <HAL_SD_ReadBlocks+0x198>
 8003432:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003434:	2b00      	cmp	r3, #0
 8003436:	d039      	beq.n	80034ac <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8003438:	2300      	movs	r3, #0
 800343a:	643b      	str	r3, [r7, #64]	; 0x40
 800343c:	e033      	b.n	80034a6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4618      	mov	r0, r3
 8003444:	f002 fe95 	bl	8006172 <SDIO_ReadFIFO>
 8003448:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344c:	b2da      	uxtb	r2, r3
 800344e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003450:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003454:	3301      	adds	r3, #1
 8003456:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800345a:	3b01      	subs	r3, #1
 800345c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	0a1b      	lsrs	r3, r3, #8
 8003462:	b2da      	uxtb	r2, r3
 8003464:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003466:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346a:	3301      	adds	r3, #1
 800346c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800346e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003470:	3b01      	subs	r3, #1
 8003472:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003476:	0c1b      	lsrs	r3, r3, #16
 8003478:	b2da      	uxtb	r2, r3
 800347a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800347e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003480:	3301      	adds	r3, #1
 8003482:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003486:	3b01      	subs	r3, #1
 8003488:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800348a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348c:	0e1b      	lsrs	r3, r3, #24
 800348e:	b2da      	uxtb	r2, r3
 8003490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003492:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003496:	3301      	adds	r3, #1
 8003498:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800349a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800349c:	3b01      	subs	r3, #1
 800349e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80034a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a2:	3301      	adds	r3, #1
 80034a4:	643b      	str	r3, [r7, #64]	; 0x40
 80034a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a8:	2b07      	cmp	r3, #7
 80034aa:	d9c8      	bls.n	800343e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80034ac:	f7fd ffc2 	bl	8001434 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d902      	bls.n	80034c2 <HAL_SD_ReadBlocks+0x1ae>
 80034bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d112      	bne.n	80034e8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a48      	ldr	r2, [pc, #288]	; (80035e8 <HAL_SD_ReadBlocks+0x2d4>)
 80034c8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80034e4:	2303      	movs	r3, #3
 80034e6:	e0ec      	b.n	80036c2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ee:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d096      	beq.n	8003424 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003500:	2b00      	cmp	r3, #0
 8003502:	d022      	beq.n	800354a <HAL_SD_ReadBlocks+0x236>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	d91f      	bls.n	800354a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	2b03      	cmp	r3, #3
 8003510:	d01b      	beq.n	800354a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4618      	mov	r0, r3
 8003518:	f002 ff86 	bl	8006428 <SDMMC_CmdStopTransfer>
 800351c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800351e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003520:	2b00      	cmp	r3, #0
 8003522:	d012      	beq.n	800354a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a2f      	ldr	r2, [pc, #188]	; (80035e8 <HAL_SD_ReadBlocks+0x2d4>)
 800352a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003530:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003532:	431a      	orrs	r2, r3
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0bb      	b.n	80036c2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003550:	f003 0308 	and.w	r3, r3, #8
 8003554:	2b00      	cmp	r3, #0
 8003556:	d012      	beq.n	800357e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a22      	ldr	r2, [pc, #136]	; (80035e8 <HAL_SD_ReadBlocks+0x2d4>)
 800355e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003564:	f043 0208 	orr.w	r2, r3, #8
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2200      	movs	r2, #0
 8003578:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800357a:	2301      	movs	r3, #1
 800357c:	e0a1      	b.n	80036c2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b00      	cmp	r3, #0
 800358a:	d012      	beq.n	80035b2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a15      	ldr	r2, [pc, #84]	; (80035e8 <HAL_SD_ReadBlocks+0x2d4>)
 8003592:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003598:	f043 0202 	orr.w	r2, r3, #2
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2200      	movs	r2, #0
 80035ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e087      	b.n	80036c2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d064      	beq.n	800368a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a08      	ldr	r2, [pc, #32]	; (80035e8 <HAL_SD_ReadBlocks+0x2d4>)
 80035c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035cc:	f043 0220 	orr.w	r2, r3, #32
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e06d      	b.n	80036c2 <HAL_SD_ReadBlocks+0x3ae>
 80035e6:	bf00      	nop
 80035e8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f002 fdbe 	bl	8006172 <SDIO_ReadFIFO>
 80035f6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80035f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fa:	b2da      	uxtb	r2, r3
 80035fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035fe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003600:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003602:	3301      	adds	r3, #1
 8003604:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003608:	3b01      	subs	r3, #1
 800360a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360e:	0a1b      	lsrs	r3, r3, #8
 8003610:	b2da      	uxtb	r2, r3
 8003612:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003614:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003618:	3301      	adds	r3, #1
 800361a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800361c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800361e:	3b01      	subs	r3, #1
 8003620:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003624:	0c1b      	lsrs	r3, r3, #16
 8003626:	b2da      	uxtb	r2, r3
 8003628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800362c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800362e:	3301      	adds	r3, #1
 8003630:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003634:	3b01      	subs	r3, #1
 8003636:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003638:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363a:	0e1b      	lsrs	r3, r3, #24
 800363c:	b2da      	uxtb	r2, r3
 800363e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003640:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003644:	3301      	adds	r3, #1
 8003646:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800364a:	3b01      	subs	r3, #1
 800364c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800364e:	f7fd fef1 	bl	8001434 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800365a:	429a      	cmp	r2, r3
 800365c:	d902      	bls.n	8003664 <HAL_SD_ReadBlocks+0x350>
 800365e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003660:	2b00      	cmp	r3, #0
 8003662:	d112      	bne.n	800368a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a18      	ldr	r2, [pc, #96]	; (80036cc <HAL_SD_ReadBlocks+0x3b8>)
 800366a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003670:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2200      	movs	r2, #0
 8003684:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	e01b      	b.n	80036c2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003690:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d002      	beq.n	800369e <HAL_SD_ReadBlocks+0x38a>
 8003698:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1a6      	bne.n	80035ec <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f240 523a 	movw	r2, #1338	; 0x53a
 80036a6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	e006      	b.n	80036c2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
  }
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3748      	adds	r7, #72	; 0x48
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	004005ff 	.word	0x004005ff

080036d0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b092      	sub	sp, #72	; 0x48
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	60f8      	str	r0, [r7, #12]
 80036d8:	60b9      	str	r1, [r7, #8]
 80036da:	607a      	str	r2, [r7, #4]
 80036dc:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80036de:	f7fd fea9 	bl	8001434 <HAL_GetTick>
 80036e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80036e8:	68bb      	ldr	r3, [r7, #8]
 80036ea:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d107      	bne.n	8003702 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e165      	b.n	80039ce <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003708:	b2db      	uxtb	r3, r3
 800370a:	2b01      	cmp	r3, #1
 800370c:	f040 8158 	bne.w	80039c0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2200      	movs	r2, #0
 8003714:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	441a      	add	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003720:	429a      	cmp	r2, r3
 8003722:	d907      	bls.n	8003734 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003728:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003730:	2301      	movs	r3, #1
 8003732:	e14c      	b.n	80039ce <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2203      	movs	r2, #3
 8003738:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2200      	movs	r2, #0
 8003742:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003748:	2b01      	cmp	r3, #1
 800374a:	d002      	beq.n	8003752 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800374c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800374e:	025b      	lsls	r3, r3, #9
 8003750:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003756:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	025b      	lsls	r3, r3, #9
 800375c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 800375e:	2390      	movs	r3, #144	; 0x90
 8003760:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003762:	2300      	movs	r3, #0
 8003764:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003766:	2300      	movs	r3, #0
 8003768:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 800376a:	2301      	movs	r3, #1
 800376c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f107 0218 	add.w	r2, r7, #24
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f002 fd7f 	bl	800627c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b01      	cmp	r3, #1
 8003782:	d90a      	bls.n	800379a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2220      	movs	r2, #32
 8003788:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003790:	4618      	mov	r0, r3
 8003792:	f002 fe27 	bl	80063e4 <SDMMC_CmdWriteMultiBlock>
 8003796:	6478      	str	r0, [r7, #68]	; 0x44
 8003798:	e009      	b.n	80037ae <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	2210      	movs	r2, #16
 800379e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80037a6:	4618      	mov	r0, r3
 80037a8:	f002 fdfa 	bl	80063a0 <SDMMC_CmdWriteSingleBlock>
 80037ac:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80037ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d012      	beq.n	80037da <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a87      	ldr	r2, [pc, #540]	; (80039d8 <HAL_SD_WriteBlocks+0x308>)
 80037ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037c2:	431a      	orrs	r2, r3
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e0f9      	b.n	80039ce <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80037de:	e065      	b.n	80038ac <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d040      	beq.n	8003870 <HAL_SD_WriteBlocks+0x1a0>
 80037ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d03d      	beq.n	8003870 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80037f4:	2300      	movs	r3, #0
 80037f6:	643b      	str	r3, [r7, #64]	; 0x40
 80037f8:	e037      	b.n	800386a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80037fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037fc:	781b      	ldrb	r3, [r3, #0]
 80037fe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003802:	3301      	adds	r3, #1
 8003804:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003806:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003808:	3b01      	subs	r3, #1
 800380a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800380c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	021a      	lsls	r2, r3, #8
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	4313      	orrs	r3, r2
 8003816:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800381a:	3301      	adds	r3, #1
 800381c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800381e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003820:	3b01      	subs	r3, #1
 8003822:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	041a      	lsls	r2, r3, #16
 800382a:	697b      	ldr	r3, [r7, #20]
 800382c:	4313      	orrs	r3, r2
 800382e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003830:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003832:	3301      	adds	r3, #1
 8003834:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003836:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003838:	3b01      	subs	r3, #1
 800383a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800383c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	061a      	lsls	r2, r3, #24
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	4313      	orrs	r3, r2
 8003846:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800384a:	3301      	adds	r3, #1
 800384c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800384e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003850:	3b01      	subs	r3, #1
 8003852:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f107 0214 	add.w	r2, r7, #20
 800385c:	4611      	mov	r1, r2
 800385e:	4618      	mov	r0, r3
 8003860:	f002 fc94 	bl	800618c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003866:	3301      	adds	r3, #1
 8003868:	643b      	str	r3, [r7, #64]	; 0x40
 800386a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800386c:	2b07      	cmp	r3, #7
 800386e:	d9c4      	bls.n	80037fa <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003870:	f7fd fde0 	bl	8001434 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800387c:	429a      	cmp	r2, r3
 800387e:	d902      	bls.n	8003886 <HAL_SD_WriteBlocks+0x1b6>
 8003880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003882:	2b00      	cmp	r3, #0
 8003884:	d112      	bne.n	80038ac <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a53      	ldr	r2, [pc, #332]	; (80039d8 <HAL_SD_WriteBlocks+0x308>)
 800388c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003894:	431a      	orrs	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80038a8:	2303      	movs	r3, #3
 80038aa:	e090      	b.n	80039ce <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b2:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d092      	beq.n	80037e0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d022      	beq.n	800390e <HAL_SD_WriteBlocks+0x23e>
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d91f      	bls.n	800390e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d01b      	beq.n	800390e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f002 fda4 	bl	8006428 <SDMMC_CmdStopTransfer>
 80038e0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80038e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d012      	beq.n	800390e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a3a      	ldr	r2, [pc, #232]	; (80039d8 <HAL_SD_WriteBlocks+0x308>)
 80038ee:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038f6:	431a      	orrs	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2201      	movs	r2, #1
 8003900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e05f      	b.n	80039ce <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003914:	f003 0308 	and.w	r3, r3, #8
 8003918:	2b00      	cmp	r3, #0
 800391a:	d012      	beq.n	8003942 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a2d      	ldr	r2, [pc, #180]	; (80039d8 <HAL_SD_WriteBlocks+0x308>)
 8003922:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003928:	f043 0208 	orr.w	r2, r3, #8
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e045      	b.n	80039ce <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d012      	beq.n	8003976 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a20      	ldr	r2, [pc, #128]	; (80039d8 <HAL_SD_WriteBlocks+0x308>)
 8003956:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800395c:	f043 0202 	orr.w	r2, r3, #2
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e02b      	b.n	80039ce <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800397c:	f003 0310 	and.w	r3, r3, #16
 8003980:	2b00      	cmp	r3, #0
 8003982:	d012      	beq.n	80039aa <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4a13      	ldr	r2, [pc, #76]	; (80039d8 <HAL_SD_WriteBlocks+0x308>)
 800398a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003990:	f043 0210 	orr.w	r2, r3, #16
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e011      	b.n	80039ce <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f240 523a 	movw	r2, #1338	; 0x53a
 80039b2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e006      	b.n	80039ce <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
  }
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3748      	adds	r7, #72	; 0x48
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	004005ff 	.word	0x004005ff

080039dc <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d008      	beq.n	8003a0a <HAL_SD_IRQHandler+0x2e>
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d003      	beq.n	8003a0a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 fd4a 	bl	800449c <SD_Read_IT>
 8003a08:	e155      	b.n	8003cb6 <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	f000 808f 	beq.w	8003b38 <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003a22:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	6812      	ldr	r2, [r2, #0]
 8003a2e:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003a32:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003a36:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f022 0201 	bic.w	r2, r2, #1
 8003a46:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	f003 0308 	and.w	r3, r3, #8
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d039      	beq.n	8003ac6 <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	f003 0302 	and.w	r3, r3, #2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d104      	bne.n	8003a66 <HAL_SD_IRQHandler+0x8a>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f003 0320 	and.w	r3, r3, #32
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d011      	beq.n	8003a8a <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f002 fcdc 	bl	8006428 <SDMMC_CmdStopTransfer>
 8003a70:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d008      	beq.n	8003a8a <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f91f 	bl	8003cc8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a92:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d104      	bne.n	8003ab6 <HAL_SD_IRQHandler+0xda>
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d003      	beq.n	8003abe <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	f003 f902 	bl	8006cc0 <HAL_SD_RxCpltCallback>
 8003abc:	e0fb      	b.n	8003cb6 <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f003 f8f4 	bl	8006cac <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ac4:	e0f7      	b.n	8003cb6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	f000 80f2 	beq.w	8003cb6 <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f003 0320 	and.w	r3, r3, #32
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d011      	beq.n	8003b00 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f002 fca1 	bl	8006428 <SDMMC_CmdStopTransfer>
 8003ae6:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d008      	beq.n	8003b00 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	431a      	orrs	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f000 f8e4 	bl	8003cc8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f003 0301 	and.w	r3, r3, #1
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f040 80d5 	bne.w	8003cb6 <HAL_SD_IRQHandler+0x2da>
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 0302 	and.w	r3, r3, #2
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f040 80cf 	bne.w	8003cb6 <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 0208 	bic.w	r2, r2, #8
 8003b26:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2201      	movs	r2, #1
 8003b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f003 f8bb 	bl	8006cac <HAL_SD_TxCpltCallback>
}
 8003b36:	e0be      	b.n	8003cb6 <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d008      	beq.n	8003b58 <HAL_SD_IRQHandler+0x17c>
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	f003 0308 	and.w	r3, r3, #8
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d003      	beq.n	8003b58 <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fcf4 	bl	800453e <SD_Write_IT>
 8003b56:	e0ae      	b.n	8003cb6 <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b5e:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 80a7 	beq.w	8003cb6 <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b6e:	f003 0302 	and.w	r3, r3, #2
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b7a:	f043 0202 	orr.w	r2, r3, #2
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d005      	beq.n	8003b9c <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b94:	f043 0208 	orr.w	r2, r3, #8
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba2:	f003 0320 	and.w	r3, r3, #32
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d005      	beq.n	8003bb6 <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bae:	f043 0220 	orr.w	r2, r3, #32
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d005      	beq.n	8003bd0 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bc8:	f043 0210 	orr.w	r2, r3, #16
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f240 523a 	movw	r2, #1338	; 0x53a
 8003bd8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8003be8:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f002 fc1a 	bl	8006428 <SDMMC_CmdStopTransfer>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bfa:	431a      	orrs	r2, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f003 0308 	and.w	r3, r3, #8
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00a      	beq.n	8003c20 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003c18:	6878      	ldr	r0, [r7, #4]
 8003c1a:	f000 f855 	bl	8003cc8 <HAL_SD_ErrorCallback>
}
 8003c1e:	e04a      	b.n	8003cb6 <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d045      	beq.n	8003cb6 <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f003 0310 	and.w	r3, r3, #16
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d104      	bne.n	8003c3e <HAL_SD_IRQHandler+0x262>
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f003 0320 	and.w	r3, r3, #32
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d011      	beq.n	8003c62 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c42:	4a1f      	ldr	r2, [pc, #124]	; (8003cc0 <HAL_SD_IRQHandler+0x2e4>)
 8003c44:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fd fe52 	bl	80018f4 <HAL_DMA_Abort_IT>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d02f      	beq.n	8003cb6 <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f000 fa2e 	bl	80040bc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003c60:	e029      	b.n	8003cb6 <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d104      	bne.n	8003c76 <HAL_SD_IRQHandler+0x29a>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d011      	beq.n	8003c9a <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c7a:	4a12      	ldr	r2, [pc, #72]	; (8003cc4 <HAL_SD_IRQHandler+0x2e8>)
 8003c7c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7fd fe36 	bl	80018f4 <HAL_DMA_Abort_IT>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d013      	beq.n	8003cb6 <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	4618      	mov	r0, r3
 8003c94:	f000 fa49 	bl	800412a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003c98:	e00d      	b.n	8003cb6 <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f002 fff2 	bl	8006c98 <HAL_SD_AbortCallback>
}
 8003cb4:	e7ff      	b.n	8003cb6 <HAL_SD_IRQHandler+0x2da>
 8003cb6:	bf00      	nop
 8003cb8:	3710      	adds	r7, #16
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	080040bd 	.word	0x080040bd
 8003cc4:	0800412b 	.word	0x0800412b

08003cc8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8003cd0:	bf00      	nop
 8003cd2:	370c      	adds	r7, #12
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cea:	0f9b      	lsrs	r3, r3, #30
 8003cec:	b2da      	uxtb	r2, r3
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cf6:	0e9b      	lsrs	r3, r3, #26
 8003cf8:	b2db      	uxtb	r3, r3
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d08:	0e1b      	lsrs	r3, r3, #24
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	f003 0303 	and.w	r3, r3, #3
 8003d10:	b2da      	uxtb	r2, r3
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d1a:	0c1b      	lsrs	r3, r3, #16
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d26:	0a1b      	lsrs	r3, r3, #8
 8003d28:	b2da      	uxtb	r2, r3
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d32:	b2da      	uxtb	r2, r3
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d3c:	0d1b      	lsrs	r3, r3, #20
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d48:	0c1b      	lsrs	r3, r3, #16
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	b2da      	uxtb	r2, r3
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d5a:	0bdb      	lsrs	r3, r3, #15
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	f003 0301 	and.w	r3, r3, #1
 8003d62:	b2da      	uxtb	r2, r3
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d6c:	0b9b      	lsrs	r3, r3, #14
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	b2da      	uxtb	r2, r3
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d7e:	0b5b      	lsrs	r3, r3, #13
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003d90:	0b1b      	lsrs	r3, r3, #12
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	f003 0301 	and.w	r3, r3, #1
 8003d98:	b2da      	uxtb	r2, r3
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	2200      	movs	r2, #0
 8003da2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d163      	bne.n	8003e74 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003db0:	009a      	lsls	r2, r3, #2
 8003db2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003db6:	4013      	ands	r3, r2
 8003db8:	687a      	ldr	r2, [r7, #4]
 8003dba:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8003dbc:	0f92      	lsrs	r2, r2, #30
 8003dbe:	431a      	orrs	r2, r3
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dc8:	0edb      	lsrs	r3, r3, #27
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dda:	0e1b      	lsrs	r3, r3, #24
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	f003 0307 	and.w	r3, r3, #7
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dec:	0d5b      	lsrs	r3, r3, #21
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	f003 0307 	and.w	r3, r3, #7
 8003df4:	b2da      	uxtb	r2, r3
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dfe:	0c9b      	lsrs	r3, r3, #18
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	f003 0307 	and.w	r3, r3, #7
 8003e06:	b2da      	uxtb	r2, r3
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e10:	0bdb      	lsrs	r3, r3, #15
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	f003 0307 	and.w	r3, r3, #7
 8003e18:	b2da      	uxtb	r2, r3
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	7e1b      	ldrb	r3, [r3, #24]
 8003e2c:	b2db      	uxtb	r3, r3
 8003e2e:	f003 0307 	and.w	r3, r3, #7
 8003e32:	3302      	adds	r3, #2
 8003e34:	2201      	movs	r2, #1
 8003e36:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3a:	687a      	ldr	r2, [r7, #4]
 8003e3c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003e3e:	fb02 f203 	mul.w	r2, r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	7a1b      	ldrb	r3, [r3, #8]
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	f003 030f 	and.w	r3, r3, #15
 8003e50:	2201      	movs	r2, #1
 8003e52:	409a      	lsls	r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003e60:	0a52      	lsrs	r2, r2, #9
 8003e62:	fb02 f203 	mul.w	r2, r2, r3
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e70:	661a      	str	r2, [r3, #96]	; 0x60
 8003e72:	e031      	b.n	8003ed8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d11d      	bne.n	8003eb8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e80:	041b      	lsls	r3, r3, #16
 8003e82:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e8a:	0c1b      	lsrs	r3, r3, #16
 8003e8c:	431a      	orrs	r2, r3
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	3301      	adds	r3, #1
 8003e98:	029a      	lsls	r2, r3, #10
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003eac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	661a      	str	r2, [r3, #96]	; 0x60
 8003eb6:	e00f      	b.n	8003ed8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a58      	ldr	r2, [pc, #352]	; (8004020 <HAL_SD_GetCardCSD+0x344>)
 8003ebe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2201      	movs	r2, #1
 8003ed0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e09d      	b.n	8004014 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003edc:	0b9b      	lsrs	r3, r3, #14
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	b2da      	uxtb	r2, r3
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eee:	09db      	lsrs	r3, r3, #7
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ef6:	b2da      	uxtb	r2, r3
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f06:	b2da      	uxtb	r2, r3
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	0fdb      	lsrs	r3, r3, #31
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1c:	0f5b      	lsrs	r3, r3, #29
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	f003 0303 	and.w	r3, r3, #3
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2e:	0e9b      	lsrs	r3, r3, #26
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	f003 0307 	and.w	r3, r3, #7
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f40:	0d9b      	lsrs	r3, r3, #22
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	f003 030f 	and.w	r3, r3, #15
 8003f48:	b2da      	uxtb	r2, r3
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	0d5b      	lsrs	r3, r3, #21
 8003f54:	b2db      	uxtb	r3, r3
 8003f56:	f003 0301 	and.w	r3, r3, #1
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6e:	0c1b      	lsrs	r3, r3, #16
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f82:	0bdb      	lsrs	r3, r3, #15
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	b2da      	uxtb	r2, r3
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f96:	0b9b      	lsrs	r3, r3, #14
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	f003 0301 	and.w	r3, r3, #1
 8003f9e:	b2da      	uxtb	r2, r3
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	0b5b      	lsrs	r3, r3, #13
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fbe:	0b1b      	lsrs	r3, r3, #12
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	f003 0301 	and.w	r3, r3, #1
 8003fc6:	b2da      	uxtb	r2, r3
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	0a9b      	lsrs	r3, r3, #10
 8003fd4:	b2db      	uxtb	r3, r3
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	b2da      	uxtb	r2, r3
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe6:	0a1b      	lsrs	r3, r3, #8
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	f003 0303 	and.w	r3, r3, #3
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	b2db      	uxtb	r3, r3
 8003ffe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004002:	b2da      	uxtb	r2, r3
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2201      	movs	r2, #1
 800400e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004012:	2300      	movs	r3, #0
}
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	004005ff 	.word	0x004005ff

08004024 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800406e:	2300      	movs	r3, #0
}
 8004070:	4618      	mov	r0, r3
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b086      	sub	sp, #24
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004084:	2300      	movs	r3, #0
 8004086:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8004088:	f107 030c 	add.w	r3, r7, #12
 800408c:	4619      	mov	r1, r3
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f9dc 	bl	800444c <SD_SendStatus>
 8004094:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004096:	697b      	ldr	r3, [r7, #20]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d005      	beq.n	80040a8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	431a      	orrs	r2, r3
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	0a5b      	lsrs	r3, r3, #9
 80040ac:	f003 030f 	and.w	r3, r3, #15
 80040b0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80040b2:	693b      	ldr	r3, [r7, #16]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3718      	adds	r7, #24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b084      	sub	sp, #16
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f240 523a 	movw	r2, #1338	; 0x53a
 80040d2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80040d4:	68f8      	ldr	r0, [r7, #12]
 80040d6:	f7ff ffd1 	bl	800407c <HAL_SD_GetCardState>
 80040da:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	2b06      	cmp	r3, #6
 80040ee:	d002      	beq.n	80040f6 <SD_DMATxAbort+0x3a>
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	2b05      	cmp	r3, #5
 80040f4:	d10a      	bne.n	800410c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f002 f994 	bl	8006428 <SDMMC_CmdStopTransfer>
 8004100:	4602      	mov	r2, r0
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004106:	431a      	orrs	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	2b00      	cmp	r3, #0
 8004112:	d103      	bne.n	800411c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004114:	68f8      	ldr	r0, [r7, #12]
 8004116:	f002 fdbf 	bl	8006c98 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800411a:	e002      	b.n	8004122 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f7ff fdd3 	bl	8003cc8 <HAL_SD_ErrorCallback>
}
 8004122:	bf00      	nop
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}

0800412a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800412a:	b580      	push	{r7, lr}
 800412c:	b084      	sub	sp, #16
 800412e:	af00      	add	r7, sp, #0
 8004130:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004136:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f240 523a 	movw	r2, #1338	; 0x53a
 8004140:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f7ff ff9a 	bl	800407c <HAL_SD_GetCardState>
 8004148:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b06      	cmp	r3, #6
 800415c:	d002      	beq.n	8004164 <SD_DMARxAbort+0x3a>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	2b05      	cmp	r3, #5
 8004162:	d10a      	bne.n	800417a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4618      	mov	r0, r3
 800416a:	f002 f95d 	bl	8006428 <SDMMC_CmdStopTransfer>
 800416e:	4602      	mov	r2, r0
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004174:	431a      	orrs	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	2b00      	cmp	r3, #0
 8004180:	d103      	bne.n	800418a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f002 fd88 	bl	8006c98 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8004188:	e002      	b.n	8004190 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f7ff fd9c 	bl	8003cc8 <HAL_SD_ErrorCallback>
}
 8004190:	bf00      	nop
 8004192:	3710      	adds	r7, #16
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8004198:	b5b0      	push	{r4, r5, r7, lr}
 800419a:	b094      	sub	sp, #80	; 0x50
 800419c:	af04      	add	r7, sp, #16
 800419e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80041a0:	2301      	movs	r3, #1
 80041a2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f002 f80f 	bl	80061cc <SDIO_GetPowerState>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d102      	bne.n	80041ba <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80041b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80041b8:	e0b6      	b.n	8004328 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041be:	2b03      	cmp	r3, #3
 80041c0:	d02f      	beq.n	8004222 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4618      	mov	r0, r3
 80041c8:	f002 f9f5 	bl	80065b6 <SDMMC_CmdSendCID>
 80041cc:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80041ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d001      	beq.n	80041d8 <SD_InitCard+0x40>
    {
      return errorstate;
 80041d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041d6:	e0a7      	b.n	8004328 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2100      	movs	r1, #0
 80041de:	4618      	mov	r0, r3
 80041e0:	f002 f839 	bl	8006256 <SDIO_GetResponse>
 80041e4:	4602      	mov	r2, r0
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2104      	movs	r1, #4
 80041f0:	4618      	mov	r0, r3
 80041f2:	f002 f830 	bl	8006256 <SDIO_GetResponse>
 80041f6:	4602      	mov	r2, r0
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	2108      	movs	r1, #8
 8004202:	4618      	mov	r0, r3
 8004204:	f002 f827 	bl	8006256 <SDIO_GetResponse>
 8004208:	4602      	mov	r2, r0
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	210c      	movs	r1, #12
 8004214:	4618      	mov	r0, r3
 8004216:	f002 f81e 	bl	8006256 <SDIO_GetResponse>
 800421a:	4602      	mov	r2, r0
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004226:	2b03      	cmp	r3, #3
 8004228:	d00d      	beq.n	8004246 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f107 020e 	add.w	r2, r7, #14
 8004232:	4611      	mov	r1, r2
 8004234:	4618      	mov	r0, r3
 8004236:	f002 f9fb 	bl	8006630 <SDMMC_CmdSetRelAdd>
 800423a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800423c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800423e:	2b00      	cmp	r3, #0
 8004240:	d001      	beq.n	8004246 <SD_InitCard+0xae>
    {
      return errorstate;
 8004242:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004244:	e070      	b.n	8004328 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424a:	2b03      	cmp	r3, #3
 800424c:	d036      	beq.n	80042bc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800424e:	89fb      	ldrh	r3, [r7, #14]
 8004250:	461a      	mov	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800425e:	041b      	lsls	r3, r3, #16
 8004260:	4619      	mov	r1, r3
 8004262:	4610      	mov	r0, r2
 8004264:	f002 f9c5 	bl	80065f2 <SDMMC_CmdSendCSD>
 8004268:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800426a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004272:	e059      	b.n	8004328 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	2100      	movs	r1, #0
 800427a:	4618      	mov	r0, r3
 800427c:	f001 ffeb 	bl	8006256 <SDIO_GetResponse>
 8004280:	4602      	mov	r2, r0
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2104      	movs	r1, #4
 800428c:	4618      	mov	r0, r3
 800428e:	f001 ffe2 	bl	8006256 <SDIO_GetResponse>
 8004292:	4602      	mov	r2, r0
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2108      	movs	r1, #8
 800429e:	4618      	mov	r0, r3
 80042a0:	f001 ffd9 	bl	8006256 <SDIO_GetResponse>
 80042a4:	4602      	mov	r2, r0
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	210c      	movs	r1, #12
 80042b0:	4618      	mov	r0, r3
 80042b2:	f001 ffd0 	bl	8006256 <SDIO_GetResponse>
 80042b6:	4602      	mov	r2, r0
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	2104      	movs	r1, #4
 80042c2:	4618      	mov	r0, r3
 80042c4:	f001 ffc7 	bl	8006256 <SDIO_GetResponse>
 80042c8:	4603      	mov	r3, r0
 80042ca:	0d1a      	lsrs	r2, r3, #20
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80042d0:	f107 0310 	add.w	r3, r7, #16
 80042d4:	4619      	mov	r1, r3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff fd00 	bl	8003cdc <HAL_SD_GetCardCSD>
 80042dc:	4603      	mov	r3, r0
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d002      	beq.n	80042e8 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80042e2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80042e6:	e01f      	b.n	8004328 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6819      	ldr	r1, [r3, #0]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f0:	041b      	lsls	r3, r3, #16
 80042f2:	461a      	mov	r2, r3
 80042f4:	f04f 0300 	mov.w	r3, #0
 80042f8:	4608      	mov	r0, r1
 80042fa:	f002 f8b7 	bl	800646c <SDMMC_CmdSelDesel>
 80042fe:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004300:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004302:	2b00      	cmp	r3, #0
 8004304:	d001      	beq.n	800430a <SD_InitCard+0x172>
  {
    return errorstate;
 8004306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004308:	e00e      	b.n	8004328 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681d      	ldr	r5, [r3, #0]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	466c      	mov	r4, sp
 8004312:	f103 0210 	add.w	r2, r3, #16
 8004316:	ca07      	ldmia	r2, {r0, r1, r2}
 8004318:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800431c:	3304      	adds	r3, #4
 800431e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004320:	4628      	mov	r0, r5
 8004322:	f001 fefb 	bl	800611c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8004326:	2300      	movs	r3, #0
}
 8004328:	4618      	mov	r0, r3
 800432a:	3740      	adds	r7, #64	; 0x40
 800432c:	46bd      	mov	sp, r7
 800432e:	bdb0      	pop	{r4, r5, r7, pc}

08004330 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b086      	sub	sp, #24
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004338:	2300      	movs	r3, #0
 800433a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]
 8004340:	2300      	movs	r3, #0
 8004342:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f002 f8b2 	bl	80064b2 <SDMMC_CmdGoIdleState>
 800434e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d001      	beq.n	800435a <SD_PowerON+0x2a>
  {
    return errorstate;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	e072      	b.n	8004440 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f002 f8c5 	bl	80064ee <SDMMC_CmdOperCond>
 8004364:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00d      	beq.n	8004388 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4618      	mov	r0, r3
 8004378:	f002 f89b 	bl	80064b2 <SDMMC_CmdGoIdleState>
 800437c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d004      	beq.n	800438e <SD_PowerON+0x5e>
    {
      return errorstate;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	e05b      	b.n	8004440 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2201      	movs	r2, #1
 800438c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004392:	2b01      	cmp	r3, #1
 8004394:	d137      	bne.n	8004406 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2100      	movs	r1, #0
 800439c:	4618      	mov	r0, r3
 800439e:	f002 f8c5 	bl	800652c <SDMMC_CmdAppCommand>
 80043a2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d02d      	beq.n	8004406 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80043ae:	e047      	b.n	8004440 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2100      	movs	r1, #0
 80043b6:	4618      	mov	r0, r3
 80043b8:	f002 f8b8 	bl	800652c <SDMMC_CmdAppCommand>
 80043bc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d001      	beq.n	80043c8 <SD_PowerON+0x98>
    {
      return errorstate;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	e03b      	b.n	8004440 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	491e      	ldr	r1, [pc, #120]	; (8004448 <SD_PowerON+0x118>)
 80043ce:	4618      	mov	r0, r3
 80043d0:	f002 f8ce 	bl	8006570 <SDMMC_CmdAppOperCommand>
 80043d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043dc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80043e0:	e02e      	b.n	8004440 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2100      	movs	r1, #0
 80043e8:	4618      	mov	r0, r3
 80043ea:	f001 ff34 	bl	8006256 <SDIO_GetResponse>
 80043ee:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	0fdb      	lsrs	r3, r3, #31
 80043f4:	2b01      	cmp	r3, #1
 80043f6:	d101      	bne.n	80043fc <SD_PowerON+0xcc>
 80043f8:	2301      	movs	r3, #1
 80043fa:	e000      	b.n	80043fe <SD_PowerON+0xce>
 80043fc:	2300      	movs	r3, #0
 80043fe:	613b      	str	r3, [r7, #16]

    count++;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	3301      	adds	r3, #1
 8004404:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800440c:	4293      	cmp	r3, r2
 800440e:	d802      	bhi.n	8004416 <SD_PowerON+0xe6>
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0cc      	beq.n	80043b0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800441c:	4293      	cmp	r3, r2
 800441e:	d902      	bls.n	8004426 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004420:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004424:	e00c      	b.n	8004440 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d003      	beq.n	8004438 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2201      	movs	r2, #1
 8004434:	645a      	str	r2, [r3, #68]	; 0x44
 8004436:	e002      	b.n	800443e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2200      	movs	r2, #0
 800443c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3718      	adds	r7, #24
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	c1100000 	.word	0xc1100000

0800444c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b084      	sub	sp, #16
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d102      	bne.n	8004462 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800445c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004460:	e018      	b.n	8004494 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800446a:	041b      	lsls	r3, r3, #16
 800446c:	4619      	mov	r1, r3
 800446e:	4610      	mov	r0, r2
 8004470:	f002 f8ff 	bl	8006672 <SDMMC_CmdSendStatus>
 8004474:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <SD_SendStatus+0x34>
  {
    return errorstate;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	e009      	b.n	8004494 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	2100      	movs	r1, #0
 8004486:	4618      	mov	r0, r3
 8004488:	f001 fee5 	bl	8006256 <SDIO_GetResponse>
 800448c:	4602      	mov	r2, r0
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3710      	adds	r7, #16
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044a8:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d03f      	beq.n	8004536 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]
 80044ba:	e033      	b.n	8004524 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4618      	mov	r0, r3
 80044c2:	f001 fe56 	bl	8006172 <SDIO_ReadFIFO>
 80044c6:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	b2da      	uxtb	r2, r3
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	701a      	strb	r2, [r3, #0]
      tmp++;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3301      	adds	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	3b01      	subs	r3, #1
 80044da:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	701a      	strb	r2, [r3, #0]
      tmp++;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3301      	adds	r3, #1
 80044ea:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	3b01      	subs	r3, #1
 80044f0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	0c1b      	lsrs	r3, r3, #16
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	3301      	adds	r3, #1
 8004500:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	3b01      	subs	r3, #1
 8004506:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	0e1b      	lsrs	r3, r3, #24
 800450c:	b2da      	uxtb	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	3301      	adds	r3, #1
 8004516:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	3b01      	subs	r3, #1
 800451c:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	3301      	adds	r3, #1
 8004522:	617b      	str	r3, [r7, #20]
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	2b07      	cmp	r3, #7
 8004528:	d9c8      	bls.n	80044bc <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	693a      	ldr	r2, [r7, #16]
 8004534:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004536:	bf00      	nop
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b086      	sub	sp, #24
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a1b      	ldr	r3, [r3, #32]
 800454a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d043      	beq.n	80045e0 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004558:	2300      	movs	r3, #0
 800455a:	617b      	str	r3, [r7, #20]
 800455c:	e037      	b.n	80045ce <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	3301      	adds	r3, #1
 8004568:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	3b01      	subs	r3, #1
 800456e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	021a      	lsls	r2, r3, #8
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	4313      	orrs	r3, r2
 800457a:	60bb      	str	r3, [r7, #8]
      tmp++;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	3301      	adds	r3, #1
 8004580:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	3b01      	subs	r3, #1
 8004586:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	781b      	ldrb	r3, [r3, #0]
 800458c:	041a      	lsls	r2, r3, #16
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	4313      	orrs	r3, r2
 8004592:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3301      	adds	r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800459a:	693b      	ldr	r3, [r7, #16]
 800459c:	3b01      	subs	r3, #1
 800459e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	061a      	lsls	r2, r3, #24
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	4313      	orrs	r3, r2
 80045aa:	60bb      	str	r3, [r7, #8]
      tmp++;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	3301      	adds	r3, #1
 80045b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	3b01      	subs	r3, #1
 80045b6:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f107 0208 	add.w	r2, r7, #8
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f001 fde2 	bl	800618c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	3301      	adds	r3, #1
 80045cc:	617b      	str	r3, [r7, #20]
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	2b07      	cmp	r3, #7
 80045d2:	d9c4      	bls.n	800455e <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 80045e0:	bf00      	nop
 80045e2:	3718      	adds	r7, #24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b082      	sub	sp, #8
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d101      	bne.n	80045fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e041      	b.n	800467e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004600:	b2db      	uxtb	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7fc fd4e 	bl	80010b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681a      	ldr	r2, [r3, #0]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	3304      	adds	r3, #4
 8004624:	4619      	mov	r1, r3
 8004626:	4610      	mov	r0, r2
 8004628:	f000 fc5a 	bl	8004ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3708      	adds	r7, #8
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}

08004686 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e041      	b.n	800471c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800469e:	b2db      	uxtb	r3, r3
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d106      	bne.n	80046b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f7fc fcdd 	bl	800106c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2202      	movs	r2, #2
 80046b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3304      	adds	r3, #4
 80046c2:	4619      	mov	r1, r3
 80046c4:	4610      	mov	r0, r2
 80046c6:	f000 fc0b 	bl	8004ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
 800472c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d109      	bne.n	8004748 <HAL_TIM_PWM_Start+0x24>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b01      	cmp	r3, #1
 800473e:	bf14      	ite	ne
 8004740:	2301      	movne	r3, #1
 8004742:	2300      	moveq	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	e022      	b.n	800478e <HAL_TIM_PWM_Start+0x6a>
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	2b04      	cmp	r3, #4
 800474c:	d109      	bne.n	8004762 <HAL_TIM_PWM_Start+0x3e>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b01      	cmp	r3, #1
 8004758:	bf14      	ite	ne
 800475a:	2301      	movne	r3, #1
 800475c:	2300      	moveq	r3, #0
 800475e:	b2db      	uxtb	r3, r3
 8004760:	e015      	b.n	800478e <HAL_TIM_PWM_Start+0x6a>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b08      	cmp	r3, #8
 8004766:	d109      	bne.n	800477c <HAL_TIM_PWM_Start+0x58>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	bf14      	ite	ne
 8004774:	2301      	movne	r3, #1
 8004776:	2300      	moveq	r3, #0
 8004778:	b2db      	uxtb	r3, r3
 800477a:	e008      	b.n	800478e <HAL_TIM_PWM_Start+0x6a>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004782:	b2db      	uxtb	r3, r3
 8004784:	2b01      	cmp	r3, #1
 8004786:	bf14      	ite	ne
 8004788:	2301      	movne	r3, #1
 800478a:	2300      	moveq	r3, #0
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	d001      	beq.n	8004796 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e07c      	b.n	8004890 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d104      	bne.n	80047a6 <HAL_TIM_PWM_Start+0x82>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047a4:	e013      	b.n	80047ce <HAL_TIM_PWM_Start+0xaa>
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	2b04      	cmp	r3, #4
 80047aa:	d104      	bne.n	80047b6 <HAL_TIM_PWM_Start+0x92>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047b4:	e00b      	b.n	80047ce <HAL_TIM_PWM_Start+0xaa>
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d104      	bne.n	80047c6 <HAL_TIM_PWM_Start+0xa2>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2202      	movs	r2, #2
 80047c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047c4:	e003      	b.n	80047ce <HAL_TIM_PWM_Start+0xaa>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2202      	movs	r2, #2
 80047ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2201      	movs	r2, #1
 80047d4:	6839      	ldr	r1, [r7, #0]
 80047d6:	4618      	mov	r0, r3
 80047d8:	f000 fe6c 	bl	80054b4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a2d      	ldr	r2, [pc, #180]	; (8004898 <HAL_TIM_PWM_Start+0x174>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d004      	beq.n	80047f0 <HAL_TIM_PWM_Start+0xcc>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a2c      	ldr	r2, [pc, #176]	; (800489c <HAL_TIM_PWM_Start+0x178>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d101      	bne.n	80047f4 <HAL_TIM_PWM_Start+0xd0>
 80047f0:	2301      	movs	r3, #1
 80047f2:	e000      	b.n	80047f6 <HAL_TIM_PWM_Start+0xd2>
 80047f4:	2300      	movs	r3, #0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d007      	beq.n	800480a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004808:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	4a22      	ldr	r2, [pc, #136]	; (8004898 <HAL_TIM_PWM_Start+0x174>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d022      	beq.n	800485a <HAL_TIM_PWM_Start+0x136>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800481c:	d01d      	beq.n	800485a <HAL_TIM_PWM_Start+0x136>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	4a1f      	ldr	r2, [pc, #124]	; (80048a0 <HAL_TIM_PWM_Start+0x17c>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d018      	beq.n	800485a <HAL_TIM_PWM_Start+0x136>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a1d      	ldr	r2, [pc, #116]	; (80048a4 <HAL_TIM_PWM_Start+0x180>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d013      	beq.n	800485a <HAL_TIM_PWM_Start+0x136>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a1c      	ldr	r2, [pc, #112]	; (80048a8 <HAL_TIM_PWM_Start+0x184>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d00e      	beq.n	800485a <HAL_TIM_PWM_Start+0x136>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a16      	ldr	r2, [pc, #88]	; (800489c <HAL_TIM_PWM_Start+0x178>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d009      	beq.n	800485a <HAL_TIM_PWM_Start+0x136>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a18      	ldr	r2, [pc, #96]	; (80048ac <HAL_TIM_PWM_Start+0x188>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d004      	beq.n	800485a <HAL_TIM_PWM_Start+0x136>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a16      	ldr	r2, [pc, #88]	; (80048b0 <HAL_TIM_PWM_Start+0x18c>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d111      	bne.n	800487e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2b06      	cmp	r3, #6
 800486a:	d010      	beq.n	800488e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487c:	e007      	b.n	800488e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f042 0201 	orr.w	r2, r2, #1
 800488c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3710      	adds	r7, #16
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	40010000 	.word	0x40010000
 800489c:	40010400 	.word	0x40010400
 80048a0:	40000400 	.word	0x40000400
 80048a4:	40000800 	.word	0x40000800
 80048a8:	40000c00 	.word	0x40000c00
 80048ac:	40014000 	.word	0x40014000
 80048b0:	40001800 	.word	0x40001800

080048b4 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b082      	sub	sp, #8
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d101      	bne.n	80048c8 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	e041      	b.n	800494c <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ce:	b2db      	uxtb	r3, r3
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d106      	bne.n	80048e2 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f839 	bl	8004954 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2202      	movs	r2, #2
 80048e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3304      	adds	r3, #4
 80048f2:	4619      	mov	r1, r3
 80048f4:	4610      	mov	r0, r2
 80048f6:	f000 faf3 	bl	8004ee0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	681a      	ldr	r2, [r3, #0]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f022 0208 	bic.w	r2, r2, #8
 8004908:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	6819      	ldr	r1, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	683a      	ldr	r2, [r7, #0]
 8004916:	430a      	orrs	r2, r1
 8004918:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2201      	movs	r2, #1
 800491e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2201      	movs	r2, #1
 8004926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2201      	movs	r2, #1
 800492e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2201      	movs	r2, #1
 8004936:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2201      	movs	r2, #1
 800493e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2201      	movs	r2, #1
 8004946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800494a:	2300      	movs	r3, #0
}
 800494c:	4618      	mov	r0, r3
 800494e:	3708      	adds	r7, #8
 8004950:	46bd      	mov	sp, r7
 8004952:	bd80      	pop	{r7, pc}

08004954 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 800495c:	bf00      	nop
 800495e:	370c      	adds	r7, #12
 8004960:	46bd      	mov	sp, r7
 8004962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004966:	4770      	bx	lr

08004968 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b082      	sub	sp, #8
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0302 	and.w	r3, r3, #2
 800497a:	2b02      	cmp	r3, #2
 800497c:	d122      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b02      	cmp	r3, #2
 800498a:	d11b      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0202 	mvn.w	r2, #2
 8004994:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2201      	movs	r2, #1
 800499a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	699b      	ldr	r3, [r3, #24]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fa7a 	bl	8004ea4 <HAL_TIM_IC_CaptureCallback>
 80049b0:	e005      	b.n	80049be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fa6c 	bl	8004e90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fa7d 	bl	8004eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0304 	and.w	r3, r3, #4
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d122      	bne.n	8004a18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0304 	and.w	r3, r3, #4
 80049dc:	2b04      	cmp	r3, #4
 80049de:	d11b      	bne.n	8004a18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0204 	mvn.w	r2, #4
 80049e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2202      	movs	r2, #2
 80049ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699b      	ldr	r3, [r3, #24]
 80049f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fa50 	bl	8004ea4 <HAL_TIM_IC_CaptureCallback>
 8004a04:	e005      	b.n	8004a12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 fa42 	bl	8004e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fa53 	bl	8004eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0308 	and.w	r3, r3, #8
 8004a22:	2b08      	cmp	r3, #8
 8004a24:	d122      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0308 	and.w	r3, r3, #8
 8004a30:	2b08      	cmp	r3, #8
 8004a32:	d11b      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0208 	mvn.w	r2, #8
 8004a3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2204      	movs	r2, #4
 8004a42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	69db      	ldr	r3, [r3, #28]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fa26 	bl	8004ea4 <HAL_TIM_IC_CaptureCallback>
 8004a58:	e005      	b.n	8004a66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fa18 	bl	8004e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fa29 	bl	8004eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0310 	and.w	r3, r3, #16
 8004a76:	2b10      	cmp	r3, #16
 8004a78:	d122      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f003 0310 	and.w	r3, r3, #16
 8004a84:	2b10      	cmp	r3, #16
 8004a86:	d11b      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f06f 0210 	mvn.w	r2, #16
 8004a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2208      	movs	r2, #8
 8004a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 f9fc 	bl	8004ea4 <HAL_TIM_IC_CaptureCallback>
 8004aac:	e005      	b.n	8004aba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f9ee 	bl	8004e90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f9ff 	bl	8004eb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0301 	and.w	r3, r3, #1
 8004aca:	2b01      	cmp	r3, #1
 8004acc:	d10e      	bne.n	8004aec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f003 0301 	and.w	r3, r3, #1
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d107      	bne.n	8004aec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0201 	mvn.w	r2, #1
 8004ae4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ae6:	6878      	ldr	r0, [r7, #4]
 8004ae8:	f000 f9c8 	bl	8004e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004af6:	2b80      	cmp	r3, #128	; 0x80
 8004af8:	d10e      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b04:	2b80      	cmp	r3, #128	; 0x80
 8004b06:	d107      	bne.n	8004b18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 fdcc 	bl	80056b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b22:	2b40      	cmp	r3, #64	; 0x40
 8004b24:	d10e      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	68db      	ldr	r3, [r3, #12]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d107      	bne.n	8004b44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004b3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f000 f9c4 	bl	8004ecc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	f003 0320 	and.w	r3, r3, #32
 8004b4e:	2b20      	cmp	r3, #32
 8004b50:	d10e      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f003 0320 	and.w	r3, r3, #32
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d107      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f06f 0220 	mvn.w	r2, #32
 8004b68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 fd96 	bl	800569c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b70:	bf00      	nop
 8004b72:	3708      	adds	r7, #8
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e0ac      	b.n	8004cec <HAL_TIM_PWM_ConfigChannel+0x174>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2201      	movs	r2, #1
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b0c      	cmp	r3, #12
 8004b9e:	f200 809f 	bhi.w	8004ce0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004ba2:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004bdd 	.word	0x08004bdd
 8004bac:	08004ce1 	.word	0x08004ce1
 8004bb0:	08004ce1 	.word	0x08004ce1
 8004bb4:	08004ce1 	.word	0x08004ce1
 8004bb8:	08004c1d 	.word	0x08004c1d
 8004bbc:	08004ce1 	.word	0x08004ce1
 8004bc0:	08004ce1 	.word	0x08004ce1
 8004bc4:	08004ce1 	.word	0x08004ce1
 8004bc8:	08004c5f 	.word	0x08004c5f
 8004bcc:	08004ce1 	.word	0x08004ce1
 8004bd0:	08004ce1 	.word	0x08004ce1
 8004bd4:	08004ce1 	.word	0x08004ce1
 8004bd8:	08004c9f 	.word	0x08004c9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	68b9      	ldr	r1, [r7, #8]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f000 fa1c 	bl	8005020 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699a      	ldr	r2, [r3, #24]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0208 	orr.w	r2, r2, #8
 8004bf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	699a      	ldr	r2, [r3, #24]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0204 	bic.w	r2, r2, #4
 8004c06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6999      	ldr	r1, [r3, #24]
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	691a      	ldr	r2, [r3, #16]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	619a      	str	r2, [r3, #24]
      break;
 8004c1a:	e062      	b.n	8004ce2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f000 fa6c 	bl	8005100 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	699a      	ldr	r2, [r3, #24]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6999      	ldr	r1, [r3, #24]
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	691b      	ldr	r3, [r3, #16]
 8004c52:	021a      	lsls	r2, r3, #8
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	619a      	str	r2, [r3, #24]
      break;
 8004c5c:	e041      	b.n	8004ce2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	68b9      	ldr	r1, [r7, #8]
 8004c64:	4618      	mov	r0, r3
 8004c66:	f000 fac1 	bl	80051ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	69da      	ldr	r2, [r3, #28]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f042 0208 	orr.w	r2, r2, #8
 8004c78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	69da      	ldr	r2, [r3, #28]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f022 0204 	bic.w	r2, r2, #4
 8004c88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	69d9      	ldr	r1, [r3, #28]
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	691a      	ldr	r2, [r3, #16]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	61da      	str	r2, [r3, #28]
      break;
 8004c9c:	e021      	b.n	8004ce2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 fb15 	bl	80052d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69da      	ldr	r2, [r3, #28]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	69da      	ldr	r2, [r3, #28]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	69d9      	ldr	r1, [r3, #28]
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	691b      	ldr	r3, [r3, #16]
 8004cd4:	021a      	lsls	r2, r3, #8
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	430a      	orrs	r2, r1
 8004cdc:	61da      	str	r2, [r3, #28]
      break;
 8004cde:	e000      	b.n	8004ce2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004ce0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3710      	adds	r7, #16
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b084      	sub	sp, #16
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d101      	bne.n	8004d0c <HAL_TIM_ConfigClockSource+0x18>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e0b3      	b.n	8004e74 <HAL_TIM_ConfigClockSource+0x180>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d2a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d32:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d44:	d03e      	beq.n	8004dc4 <HAL_TIM_ConfigClockSource+0xd0>
 8004d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d4a:	f200 8087 	bhi.w	8004e5c <HAL_TIM_ConfigClockSource+0x168>
 8004d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d52:	f000 8085 	beq.w	8004e60 <HAL_TIM_ConfigClockSource+0x16c>
 8004d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d5a:	d87f      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x168>
 8004d5c:	2b70      	cmp	r3, #112	; 0x70
 8004d5e:	d01a      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0xa2>
 8004d60:	2b70      	cmp	r3, #112	; 0x70
 8004d62:	d87b      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x168>
 8004d64:	2b60      	cmp	r3, #96	; 0x60
 8004d66:	d050      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0x116>
 8004d68:	2b60      	cmp	r3, #96	; 0x60
 8004d6a:	d877      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x168>
 8004d6c:	2b50      	cmp	r3, #80	; 0x50
 8004d6e:	d03c      	beq.n	8004dea <HAL_TIM_ConfigClockSource+0xf6>
 8004d70:	2b50      	cmp	r3, #80	; 0x50
 8004d72:	d873      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x168>
 8004d74:	2b40      	cmp	r3, #64	; 0x40
 8004d76:	d058      	beq.n	8004e2a <HAL_TIM_ConfigClockSource+0x136>
 8004d78:	2b40      	cmp	r3, #64	; 0x40
 8004d7a:	d86f      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x168>
 8004d7c:	2b30      	cmp	r3, #48	; 0x30
 8004d7e:	d064      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0x156>
 8004d80:	2b30      	cmp	r3, #48	; 0x30
 8004d82:	d86b      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x168>
 8004d84:	2b20      	cmp	r3, #32
 8004d86:	d060      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0x156>
 8004d88:	2b20      	cmp	r3, #32
 8004d8a:	d867      	bhi.n	8004e5c <HAL_TIM_ConfigClockSource+0x168>
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d05c      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0x156>
 8004d90:	2b10      	cmp	r3, #16
 8004d92:	d05a      	beq.n	8004e4a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004d94:	e062      	b.n	8004e5c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6818      	ldr	r0, [r3, #0]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	6899      	ldr	r1, [r3, #8]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f000 fb65 	bl	8005474 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004db8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68fa      	ldr	r2, [r7, #12]
 8004dc0:	609a      	str	r2, [r3, #8]
      break;
 8004dc2:	e04e      	b.n	8004e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6818      	ldr	r0, [r3, #0]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	6899      	ldr	r1, [r3, #8]
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	f000 fb4e 	bl	8005474 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	689a      	ldr	r2, [r3, #8]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004de6:	609a      	str	r2, [r3, #8]
      break;
 8004de8:	e03b      	b.n	8004e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6818      	ldr	r0, [r3, #0]
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	6859      	ldr	r1, [r3, #4]
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	461a      	mov	r2, r3
 8004df8:	f000 fac2 	bl	8005380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	2150      	movs	r1, #80	; 0x50
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fb1b 	bl	800543e <TIM_ITRx_SetConfig>
      break;
 8004e08:	e02b      	b.n	8004e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6859      	ldr	r1, [r3, #4]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	461a      	mov	r2, r3
 8004e18:	f000 fae1 	bl	80053de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	2160      	movs	r1, #96	; 0x60
 8004e22:	4618      	mov	r0, r3
 8004e24:	f000 fb0b 	bl	800543e <TIM_ITRx_SetConfig>
      break;
 8004e28:	e01b      	b.n	8004e62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6818      	ldr	r0, [r3, #0]
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	6859      	ldr	r1, [r3, #4]
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	68db      	ldr	r3, [r3, #12]
 8004e36:	461a      	mov	r2, r3
 8004e38:	f000 faa2 	bl	8005380 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2140      	movs	r1, #64	; 0x40
 8004e42:	4618      	mov	r0, r3
 8004e44:	f000 fafb 	bl	800543e <TIM_ITRx_SetConfig>
      break;
 8004e48:	e00b      	b.n	8004e62 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4619      	mov	r1, r3
 8004e54:	4610      	mov	r0, r2
 8004e56:	f000 faf2 	bl	800543e <TIM_ITRx_SetConfig>
        break;
 8004e5a:	e002      	b.n	8004e62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e5c:	bf00      	nop
 8004e5e:	e000      	b.n	8004e62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004e60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e72:	2300      	movs	r3, #0
}
 8004e74:	4618      	mov	r0, r3
 8004e76:	3710      	adds	r7, #16
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b083      	sub	sp, #12
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ec0:	bf00      	nop
 8004ec2:	370c      	adds	r7, #12
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr

08004ecc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b083      	sub	sp, #12
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004ed4:	bf00      	nop
 8004ed6:	370c      	adds	r7, #12
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ede:	4770      	bx	lr

08004ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a40      	ldr	r2, [pc, #256]	; (8004ff4 <TIM_Base_SetConfig+0x114>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d013      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004efe:	d00f      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	4a3d      	ldr	r2, [pc, #244]	; (8004ff8 <TIM_Base_SetConfig+0x118>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d00b      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	4a3c      	ldr	r2, [pc, #240]	; (8004ffc <TIM_Base_SetConfig+0x11c>)
 8004f0c:	4293      	cmp	r3, r2
 8004f0e:	d007      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	4a3b      	ldr	r2, [pc, #236]	; (8005000 <TIM_Base_SetConfig+0x120>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d003      	beq.n	8004f20 <TIM_Base_SetConfig+0x40>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a3a      	ldr	r2, [pc, #232]	; (8005004 <TIM_Base_SetConfig+0x124>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d108      	bne.n	8004f32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a2f      	ldr	r2, [pc, #188]	; (8004ff4 <TIM_Base_SetConfig+0x114>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d02b      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f40:	d027      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a2c      	ldr	r2, [pc, #176]	; (8004ff8 <TIM_Base_SetConfig+0x118>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d023      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a2b      	ldr	r2, [pc, #172]	; (8004ffc <TIM_Base_SetConfig+0x11c>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d01f      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a2a      	ldr	r2, [pc, #168]	; (8005000 <TIM_Base_SetConfig+0x120>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d01b      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a29      	ldr	r2, [pc, #164]	; (8005004 <TIM_Base_SetConfig+0x124>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d017      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a28      	ldr	r2, [pc, #160]	; (8005008 <TIM_Base_SetConfig+0x128>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d013      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a27      	ldr	r2, [pc, #156]	; (800500c <TIM_Base_SetConfig+0x12c>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d00f      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a26      	ldr	r2, [pc, #152]	; (8005010 <TIM_Base_SetConfig+0x130>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d00b      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a25      	ldr	r2, [pc, #148]	; (8005014 <TIM_Base_SetConfig+0x134>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d007      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a24      	ldr	r2, [pc, #144]	; (8005018 <TIM_Base_SetConfig+0x138>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d003      	beq.n	8004f92 <TIM_Base_SetConfig+0xb2>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a23      	ldr	r2, [pc, #140]	; (800501c <TIM_Base_SetConfig+0x13c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d108      	bne.n	8004fa4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	68db      	ldr	r3, [r3, #12]
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68fa      	ldr	r2, [r7, #12]
 8004fb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a0a      	ldr	r2, [pc, #40]	; (8004ff4 <TIM_Base_SetConfig+0x114>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d003      	beq.n	8004fd8 <TIM_Base_SetConfig+0xf8>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a0c      	ldr	r2, [pc, #48]	; (8005004 <TIM_Base_SetConfig+0x124>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d103      	bne.n	8004fe0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	691a      	ldr	r2, [r3, #16]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	615a      	str	r2, [r3, #20]
}
 8004fe6:	bf00      	nop
 8004fe8:	3714      	adds	r7, #20
 8004fea:	46bd      	mov	sp, r7
 8004fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff0:	4770      	bx	lr
 8004ff2:	bf00      	nop
 8004ff4:	40010000 	.word	0x40010000
 8004ff8:	40000400 	.word	0x40000400
 8004ffc:	40000800 	.word	0x40000800
 8005000:	40000c00 	.word	0x40000c00
 8005004:	40010400 	.word	0x40010400
 8005008:	40014000 	.word	0x40014000
 800500c:	40014400 	.word	0x40014400
 8005010:	40014800 	.word	0x40014800
 8005014:	40001800 	.word	0x40001800
 8005018:	40001c00 	.word	0x40001c00
 800501c:	40002000 	.word	0x40002000

08005020 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
 8005028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6a1b      	ldr	r3, [r3, #32]
 800502e:	f023 0201 	bic.w	r2, r3, #1
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1b      	ldr	r3, [r3, #32]
 800503a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	f023 0303 	bic.w	r3, r3, #3
 8005056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	4313      	orrs	r3, r2
 8005060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	f023 0302 	bic.w	r3, r3, #2
 8005068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	4313      	orrs	r3, r2
 8005072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	4a20      	ldr	r2, [pc, #128]	; (80050f8 <TIM_OC1_SetConfig+0xd8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d003      	beq.n	8005084 <TIM_OC1_SetConfig+0x64>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	4a1f      	ldr	r2, [pc, #124]	; (80050fc <TIM_OC1_SetConfig+0xdc>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d10c      	bne.n	800509e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	f023 0308 	bic.w	r3, r3, #8
 800508a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	4313      	orrs	r3, r2
 8005094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f023 0304 	bic.w	r3, r3, #4
 800509c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a15      	ldr	r2, [pc, #84]	; (80050f8 <TIM_OC1_SetConfig+0xd8>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d003      	beq.n	80050ae <TIM_OC1_SetConfig+0x8e>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a14      	ldr	r2, [pc, #80]	; (80050fc <TIM_OC1_SetConfig+0xdc>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d111      	bne.n	80050d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80050b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050b6:	693b      	ldr	r3, [r7, #16]
 80050b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	4313      	orrs	r3, r2
 80050c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	699b      	ldr	r3, [r3, #24]
 80050cc:	693a      	ldr	r2, [r7, #16]
 80050ce:	4313      	orrs	r3, r2
 80050d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	68fa      	ldr	r2, [r7, #12]
 80050dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685a      	ldr	r2, [r3, #4]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	621a      	str	r2, [r3, #32]
}
 80050ec:	bf00      	nop
 80050ee:	371c      	adds	r7, #28
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr
 80050f8:	40010000 	.word	0x40010000
 80050fc:	40010400 	.word	0x40010400

08005100 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005100:	b480      	push	{r7}
 8005102:	b087      	sub	sp, #28
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6a1b      	ldr	r3, [r3, #32]
 800510e:	f023 0210 	bic.w	r2, r3, #16
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	6a1b      	ldr	r3, [r3, #32]
 800511a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800512e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005136:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	021b      	lsls	r3, r3, #8
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	f023 0320 	bic.w	r3, r3, #32
 800514a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	011b      	lsls	r3, r3, #4
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	4313      	orrs	r3, r2
 8005156:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a22      	ldr	r2, [pc, #136]	; (80051e4 <TIM_OC2_SetConfig+0xe4>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_OC2_SetConfig+0x68>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a21      	ldr	r2, [pc, #132]	; (80051e8 <TIM_OC2_SetConfig+0xe8>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d10d      	bne.n	8005184 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800516e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	011b      	lsls	r3, r3, #4
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	4313      	orrs	r3, r2
 800517a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005182:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a17      	ldr	r2, [pc, #92]	; (80051e4 <TIM_OC2_SetConfig+0xe4>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d003      	beq.n	8005194 <TIM_OC2_SetConfig+0x94>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a16      	ldr	r2, [pc, #88]	; (80051e8 <TIM_OC2_SetConfig+0xe8>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d113      	bne.n	80051bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800519a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	695b      	ldr	r3, [r3, #20]
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68fa      	ldr	r2, [r7, #12]
 80051c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	685a      	ldr	r2, [r3, #4]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	697a      	ldr	r2, [r7, #20]
 80051d4:	621a      	str	r2, [r3, #32]
}
 80051d6:	bf00      	nop
 80051d8:	371c      	adds	r7, #28
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	40010000 	.word	0x40010000
 80051e8:	40010400 	.word	0x40010400

080051ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b087      	sub	sp, #28
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a1b      	ldr	r3, [r3, #32]
 80051fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800521a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f023 0303 	bic.w	r3, r3, #3
 8005222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	021b      	lsls	r3, r3, #8
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	4313      	orrs	r3, r2
 8005240:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a21      	ldr	r2, [pc, #132]	; (80052cc <TIM_OC3_SetConfig+0xe0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d003      	beq.n	8005252 <TIM_OC3_SetConfig+0x66>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a20      	ldr	r2, [pc, #128]	; (80052d0 <TIM_OC3_SetConfig+0xe4>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d10d      	bne.n	800526e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005258:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	68db      	ldr	r3, [r3, #12]
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	4313      	orrs	r3, r2
 8005264:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800526c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a16      	ldr	r2, [pc, #88]	; (80052cc <TIM_OC3_SetConfig+0xe0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d003      	beq.n	800527e <TIM_OC3_SetConfig+0x92>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	4a15      	ldr	r2, [pc, #84]	; (80052d0 <TIM_OC3_SetConfig+0xe4>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d113      	bne.n	80052a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005284:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800528c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	695b      	ldr	r3, [r3, #20]
 8005292:	011b      	lsls	r3, r3, #4
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	4313      	orrs	r3, r2
 8005298:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	699b      	ldr	r3, [r3, #24]
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685a      	ldr	r2, [r3, #4]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	697a      	ldr	r2, [r7, #20]
 80052be:	621a      	str	r2, [r3, #32]
}
 80052c0:	bf00      	nop
 80052c2:	371c      	adds	r7, #28
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr
 80052cc:	40010000 	.word	0x40010000
 80052d0:	40010400 	.word	0x40010400

080052d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b087      	sub	sp, #28
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	69db      	ldr	r3, [r3, #28]
 80052fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800530a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	021b      	lsls	r3, r3, #8
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	4313      	orrs	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800531e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	031b      	lsls	r3, r3, #12
 8005326:	693a      	ldr	r2, [r7, #16]
 8005328:	4313      	orrs	r3, r2
 800532a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a12      	ldr	r2, [pc, #72]	; (8005378 <TIM_OC4_SetConfig+0xa4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d003      	beq.n	800533c <TIM_OC4_SetConfig+0x68>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a11      	ldr	r2, [pc, #68]	; (800537c <TIM_OC4_SetConfig+0xa8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d109      	bne.n	8005350 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005342:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	019b      	lsls	r3, r3, #6
 800534a:	697a      	ldr	r2, [r7, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	697a      	ldr	r2, [r7, #20]
 8005354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	621a      	str	r2, [r3, #32]
}
 800536a:	bf00      	nop
 800536c:	371c      	adds	r7, #28
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	40010000 	.word	0x40010000
 800537c:	40010400 	.word	0x40010400

08005380 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005380:	b480      	push	{r7}
 8005382:	b087      	sub	sp, #28
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	6a1b      	ldr	r3, [r3, #32]
 8005390:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	f023 0201 	bic.w	r2, r3, #1
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	699b      	ldr	r3, [r3, #24]
 80053a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	011b      	lsls	r3, r3, #4
 80053b0:	693a      	ldr	r2, [r7, #16]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f023 030a 	bic.w	r3, r3, #10
 80053bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053be:	697a      	ldr	r2, [r7, #20]
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr

080053de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053de:	b480      	push	{r7}
 80053e0:	b087      	sub	sp, #28
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f023 0210 	bic.w	r2, r3, #16
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005402:	697b      	ldr	r3, [r7, #20]
 8005404:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005408:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	031b      	lsls	r3, r3, #12
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800541a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800541c:	68bb      	ldr	r3, [r7, #8]
 800541e:	011b      	lsls	r3, r3, #4
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	4313      	orrs	r3, r2
 8005424:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	693a      	ldr	r2, [r7, #16]
 8005430:	621a      	str	r2, [r3, #32]
}
 8005432:	bf00      	nop
 8005434:	371c      	adds	r7, #28
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800543e:	b480      	push	{r7}
 8005440:	b085      	sub	sp, #20
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
 8005446:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005454:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	4313      	orrs	r3, r2
 800545c:	f043 0307 	orr.w	r3, r3, #7
 8005460:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	68fa      	ldr	r2, [r7, #12]
 8005466:	609a      	str	r2, [r3, #8]
}
 8005468:	bf00      	nop
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005474:	b480      	push	{r7}
 8005476:	b087      	sub	sp, #28
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	689b      	ldr	r3, [r3, #8]
 8005486:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800548e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	021a      	lsls	r2, r3, #8
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	431a      	orrs	r2, r3
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	4313      	orrs	r3, r2
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	4313      	orrs	r3, r2
 80054a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	609a      	str	r2, [r3, #8]
}
 80054a8:	bf00      	nop
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80054b4:	b480      	push	{r7}
 80054b6:	b087      	sub	sp, #28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054c0:	68bb      	ldr	r3, [r7, #8]
 80054c2:	f003 031f 	and.w	r3, r3, #31
 80054c6:	2201      	movs	r2, #1
 80054c8:	fa02 f303 	lsl.w	r3, r2, r3
 80054cc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a1a      	ldr	r2, [r3, #32]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	43db      	mvns	r3, r3
 80054d6:	401a      	ands	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a1a      	ldr	r2, [r3, #32]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	f003 031f 	and.w	r3, r3, #31
 80054e6:	6879      	ldr	r1, [r7, #4]
 80054e8:	fa01 f303 	lsl.w	r3, r1, r3
 80054ec:	431a      	orrs	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	621a      	str	r2, [r3, #32]
}
 80054f2:	bf00      	nop
 80054f4:	371c      	adds	r7, #28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
	...

08005500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005500:	b480      	push	{r7}
 8005502:	b085      	sub	sp, #20
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005510:	2b01      	cmp	r3, #1
 8005512:	d101      	bne.n	8005518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005514:	2302      	movs	r3, #2
 8005516:	e05a      	b.n	80055ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2201      	movs	r2, #1
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2202      	movs	r2, #2
 8005524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	4313      	orrs	r3, r2
 8005548:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4a21      	ldr	r2, [pc, #132]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d022      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005564:	d01d      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a1d      	ldr	r2, [pc, #116]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d018      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a1b      	ldr	r2, [pc, #108]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d013      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	4a1a      	ldr	r2, [pc, #104]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005580:	4293      	cmp	r3, r2
 8005582:	d00e      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	4a18      	ldr	r2, [pc, #96]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d009      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a17      	ldr	r2, [pc, #92]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d004      	beq.n	80055a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	4a15      	ldr	r2, [pc, #84]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d10c      	bne.n	80055bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055a2:	68bb      	ldr	r3, [r7, #8]
 80055a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	68ba      	ldr	r2, [r7, #8]
 80055b0:	4313      	orrs	r3, r2
 80055b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68ba      	ldr	r2, [r7, #8]
 80055ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2201      	movs	r2, #1
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3714      	adds	r7, #20
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr
 80055da:	bf00      	nop
 80055dc:	40010000 	.word	0x40010000
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40000800 	.word	0x40000800
 80055e8:	40000c00 	.word	0x40000c00
 80055ec:	40010400 	.word	0x40010400
 80055f0:	40014000 	.word	0x40014000
 80055f4:	40001800 	.word	0x40001800

080055f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b085      	sub	sp, #20
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005602:	2300      	movs	r3, #0
 8005604:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005610:	2302      	movs	r3, #2
 8005612:	e03d      	b.n	8005690 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	4313      	orrs	r3, r2
 8005628:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	691b      	ldr	r3, [r3, #16]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68fa      	ldr	r2, [r7, #12]
 8005684:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3714      	adds	r7, #20
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr

0800569c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800569c:	b480      	push	{r7}
 800569e:	b083      	sub	sp, #12
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80056a4:	bf00      	nop
 80056a6:	370c      	adds	r7, #12
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b083      	sub	sp, #12
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr

080056c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d101      	bne.n	80056d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056d2:	2301      	movs	r3, #1
 80056d4:	e03f      	b.n	8005756 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d106      	bne.n	80056f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7fb fdc2 	bl	8001274 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2224      	movs	r2, #36	; 0x24
 80056f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	68da      	ldr	r2, [r3, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005706:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005708:	6878      	ldr	r0, [r7, #4]
 800570a:	f000 fb3f 	bl	8005d8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	691a      	ldr	r2, [r3, #16]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800571c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	695a      	ldr	r2, [r3, #20]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800572c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800573c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2220      	movs	r2, #32
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2220      	movs	r2, #32
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
	...

08005760 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b08a      	sub	sp, #40	; 0x28
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	68db      	ldr	r3, [r3, #12]
 8005776:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005780:	2300      	movs	r3, #0
 8005782:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005784:	2300      	movs	r3, #0
 8005786:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10d      	bne.n	80057b2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	f003 0320 	and.w	r3, r3, #32
 800579c:	2b00      	cmp	r3, #0
 800579e:	d008      	beq.n	80057b2 <HAL_UART_IRQHandler+0x52>
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	f003 0320 	and.w	r3, r3, #32
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 fa57 	bl	8005c5e <UART_Receive_IT>
      return;
 80057b0:	e17c      	b.n	8005aac <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	f000 80b1 	beq.w	800591c <HAL_UART_IRQHandler+0x1bc>
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	f003 0301 	and.w	r3, r3, #1
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d105      	bne.n	80057d0 <HAL_UART_IRQHandler+0x70>
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	f000 80a6 	beq.w	800591c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80057d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <HAL_UART_IRQHandler+0x90>
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d005      	beq.n	80057f0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e8:	f043 0201 	orr.w	r2, r3, #1
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00a      	beq.n	8005810 <HAL_UART_IRQHandler+0xb0>
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005808:	f043 0202 	orr.w	r2, r3, #2
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005812:	f003 0302 	and.w	r3, r3, #2
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00a      	beq.n	8005830 <HAL_UART_IRQHandler+0xd0>
 800581a:	69fb      	ldr	r3, [r7, #28]
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	2b00      	cmp	r3, #0
 8005822:	d005      	beq.n	8005830 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005828:	f043 0204 	orr.w	r2, r3, #4
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d00f      	beq.n	800585a <HAL_UART_IRQHandler+0xfa>
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d104      	bne.n	800584e <HAL_UART_IRQHandler+0xee>
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d005      	beq.n	800585a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	f043 0208 	orr.w	r2, r3, #8
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800585e:	2b00      	cmp	r3, #0
 8005860:	f000 811f 	beq.w	8005aa2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005866:	f003 0320 	and.w	r3, r3, #32
 800586a:	2b00      	cmp	r3, #0
 800586c:	d007      	beq.n	800587e <HAL_UART_IRQHandler+0x11e>
 800586e:	6a3b      	ldr	r3, [r7, #32]
 8005870:	f003 0320 	and.w	r3, r3, #32
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f9f0 	bl	8005c5e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	695b      	ldr	r3, [r3, #20]
 8005884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	bf0c      	ite	eq
 800588c:	2301      	moveq	r3, #1
 800588e:	2300      	movne	r3, #0
 8005890:	b2db      	uxtb	r3, r3
 8005892:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005898:	f003 0308 	and.w	r3, r3, #8
 800589c:	2b00      	cmp	r3, #0
 800589e:	d102      	bne.n	80058a6 <HAL_UART_IRQHandler+0x146>
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d031      	beq.n	800590a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f000 f930 	bl	8005b0c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b6:	2b40      	cmp	r3, #64	; 0x40
 80058b8:	d123      	bne.n	8005902 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	695a      	ldr	r2, [r3, #20]
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058c8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d013      	beq.n	80058fa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d6:	4a77      	ldr	r2, [pc, #476]	; (8005ab4 <HAL_UART_IRQHandler+0x354>)
 80058d8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fc f808 	bl	80018f4 <HAL_DMA_Abort_IT>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d016      	beq.n	8005918 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058f4:	4610      	mov	r0, r2
 80058f6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f8:	e00e      	b.n	8005918 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058fa:	6878      	ldr	r0, [r7, #4]
 80058fc:	f000 f8f0 	bl	8005ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005900:	e00a      	b.n	8005918 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f8ec 	bl	8005ae0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005908:	e006      	b.n	8005918 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f8e8 	bl	8005ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005916:	e0c4      	b.n	8005aa2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005918:	bf00      	nop
    return;
 800591a:	e0c2      	b.n	8005aa2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005920:	2b01      	cmp	r3, #1
 8005922:	f040 80a2 	bne.w	8005a6a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	f003 0310 	and.w	r3, r3, #16
 800592c:	2b00      	cmp	r3, #0
 800592e:	f000 809c 	beq.w	8005a6a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005932:	6a3b      	ldr	r3, [r7, #32]
 8005934:	f003 0310 	and.w	r3, r3, #16
 8005938:	2b00      	cmp	r3, #0
 800593a:	f000 8096 	beq.w	8005a6a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800593e:	2300      	movs	r3, #0
 8005940:	60fb      	str	r3, [r7, #12]
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	60fb      	str	r3, [r7, #12]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	685b      	ldr	r3, [r3, #4]
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800595e:	2b40      	cmp	r3, #64	; 0x40
 8005960:	d14f      	bne.n	8005a02 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800596c:	8a3b      	ldrh	r3, [r7, #16]
 800596e:	2b00      	cmp	r3, #0
 8005970:	f000 8099 	beq.w	8005aa6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005978:	8a3a      	ldrh	r2, [r7, #16]
 800597a:	429a      	cmp	r2, r3
 800597c:	f080 8093 	bcs.w	8005aa6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	8a3a      	ldrh	r2, [r7, #16]
 8005984:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	69db      	ldr	r3, [r3, #28]
 800598c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005990:	d02b      	beq.n	80059ea <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	68da      	ldr	r2, [r3, #12]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80059a0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695a      	ldr	r2, [r3, #20]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 0201 	bic.w	r2, r2, #1
 80059b0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	695a      	ldr	r2, [r3, #20]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059c0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68da      	ldr	r2, [r3, #12]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f022 0210 	bic.w	r2, r2, #16
 80059de:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e4:	4618      	mov	r0, r3
 80059e6:	f7fb ff15 	bl	8001814 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	1ad3      	subs	r3, r2, r3
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	4619      	mov	r1, r3
 80059fa:	6878      	ldr	r0, [r7, #4]
 80059fc:	f000 f87a 	bl	8005af4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a00:	e051      	b.n	8005aa6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	1ad3      	subs	r3, r2, r3
 8005a0e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a14:	b29b      	uxth	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d047      	beq.n	8005aaa <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8005a1a:	8a7b      	ldrh	r3, [r7, #18]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d044      	beq.n	8005aaa <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68da      	ldr	r2, [r3, #12]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005a2e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695a      	ldr	r2, [r3, #20]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f022 0201 	bic.w	r2, r2, #1
 8005a3e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2220      	movs	r2, #32
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	68da      	ldr	r2, [r3, #12]
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f022 0210 	bic.w	r2, r2, #16
 8005a5c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a5e:	8a7b      	ldrh	r3, [r7, #18]
 8005a60:	4619      	mov	r1, r3
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f846 	bl	8005af4 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005a68:	e01f      	b.n	8005aaa <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d008      	beq.n	8005a86 <HAL_UART_IRQHandler+0x326>
 8005a74:	6a3b      	ldr	r3, [r7, #32]
 8005a76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f885 	bl	8005b8e <UART_Transmit_IT>
    return;
 8005a84:	e012      	b.n	8005aac <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d00d      	beq.n	8005aac <HAL_UART_IRQHandler+0x34c>
 8005a90:	6a3b      	ldr	r3, [r7, #32]
 8005a92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d008      	beq.n	8005aac <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f000 f8c7 	bl	8005c2e <UART_EndTransmit_IT>
    return;
 8005aa0:	e004      	b.n	8005aac <HAL_UART_IRQHandler+0x34c>
    return;
 8005aa2:	bf00      	nop
 8005aa4:	e002      	b.n	8005aac <HAL_UART_IRQHandler+0x34c>
      return;
 8005aa6:	bf00      	nop
 8005aa8:	e000      	b.n	8005aac <HAL_UART_IRQHandler+0x34c>
      return;
 8005aaa:	bf00      	nop
  }
}
 8005aac:	3728      	adds	r7, #40	; 0x28
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	08005b67 	.word	0x08005b67

08005ab8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005ad4:	bf00      	nop
 8005ad6:	370c      	adds	r7, #12
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr

08005ae0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	460b      	mov	r3, r1
 8005afe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	68da      	ldr	r2, [r3, #12]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005b22:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	695a      	ldr	r2, [r3, #20]
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f022 0201 	bic.w	r2, r2, #1
 8005b32:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d107      	bne.n	8005b4c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	68da      	ldr	r2, [r3, #12]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f022 0210 	bic.w	r2, r2, #16
 8005b4a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2220      	movs	r2, #32
 8005b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b5a:	bf00      	nop
 8005b5c:	370c      	adds	r7, #12
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr

08005b66 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b66:	b580      	push	{r7, lr}
 8005b68:	b084      	sub	sp, #16
 8005b6a:	af00      	add	r7, sp, #0
 8005b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b72:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f7ff ffad 	bl	8005ae0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b86:	bf00      	nop
 8005b88:	3710      	adds	r7, #16
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b085      	sub	sp, #20
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	2b21      	cmp	r3, #33	; 0x21
 8005ba0:	d13e      	bne.n	8005c20 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005baa:	d114      	bne.n	8005bd6 <UART_Transmit_IT+0x48>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d110      	bne.n	8005bd6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6a1b      	ldr	r3, [r3, #32]
 8005bb8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005bc8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6a1b      	ldr	r3, [r3, #32]
 8005bce:	1c9a      	adds	r2, r3, #2
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	621a      	str	r2, [r3, #32]
 8005bd4:	e008      	b.n	8005be8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6a1b      	ldr	r3, [r3, #32]
 8005bda:	1c59      	adds	r1, r3, #1
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	6211      	str	r1, [r2, #32]
 8005be0:	781a      	ldrb	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	3b01      	subs	r3, #1
 8005bf0:	b29b      	uxth	r3, r3
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d10f      	bne.n	8005c1c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68da      	ldr	r2, [r3, #12]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c0a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c1a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	e000      	b.n	8005c22 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005c20:	2302      	movs	r3, #2
  }
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr

08005c2e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c2e:	b580      	push	{r7, lr}
 8005c30:	b082      	sub	sp, #8
 8005c32:	af00      	add	r7, sp, #0
 8005c34:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68da      	ldr	r2, [r3, #12]
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c44:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f7ff ff32 	bl	8005ab8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b22      	cmp	r3, #34	; 0x22
 8005c70:	f040 8087 	bne.w	8005d82 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c7c:	d117      	bne.n	8005cae <UART_Receive_IT+0x50>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d113      	bne.n	8005cae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c86:	2300      	movs	r3, #0
 8005c88:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c8e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ca6:	1c9a      	adds	r2, r3, #2
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	629a      	str	r2, [r3, #40]	; 0x28
 8005cac:	e026      	b.n	8005cfc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cb2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc0:	d007      	beq.n	8005cd2 <UART_Receive_IT+0x74>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d10a      	bne.n	8005ce0 <UART_Receive_IT+0x82>
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	691b      	ldr	r3, [r3, #16]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d106      	bne.n	8005ce0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	b2da      	uxtb	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	701a      	strb	r2, [r3, #0]
 8005cde:	e008      	b.n	8005cf2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	b2db      	uxtb	r3, r3
 8005ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cec:	b2da      	uxtb	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf6:	1c5a      	adds	r2, r3, #1
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	4619      	mov	r1, r3
 8005d0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d136      	bne.n	8005d7e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	68da      	ldr	r2, [r3, #12]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0220 	bic.w	r2, r2, #32
 8005d1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	695a      	ldr	r2, [r3, #20]
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0201 	bic.w	r2, r2, #1
 8005d3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d10e      	bne.n	8005d6e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68da      	ldr	r2, [r3, #12]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	f022 0210 	bic.w	r2, r2, #16
 8005d5e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d64:	4619      	mov	r1, r3
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff fec4 	bl	8005af4 <HAL_UARTEx_RxEventCallback>
 8005d6c:	e002      	b.n	8005d74 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f7ff feac 	bl	8005acc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2200      	movs	r2, #0
 8005d78:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	e002      	b.n	8005d84 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e000      	b.n	8005d84 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005d82:	2302      	movs	r3, #2
  }
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d90:	b09f      	sub	sp, #124	; 0x7c
 8005d92:	af00      	add	r7, sp, #0
 8005d94:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da2:	68d9      	ldr	r1, [r3, #12]
 8005da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	ea40 0301 	orr.w	r3, r0, r1
 8005dac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db0:	689a      	ldr	r2, [r3, #8]
 8005db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	431a      	orrs	r2, r3
 8005db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dba:	695b      	ldr	r3, [r3, #20]
 8005dbc:	431a      	orrs	r2, r3
 8005dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc0:	69db      	ldr	r3, [r3, #28]
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005dc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005dd0:	f021 010c 	bic.w	r1, r1, #12
 8005dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd6:	681a      	ldr	r2, [r3, #0]
 8005dd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005dda:	430b      	orrs	r3, r1
 8005ddc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005de8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dea:	6999      	ldr	r1, [r3, #24]
 8005dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dee:	681a      	ldr	r2, [r3, #0]
 8005df0:	ea40 0301 	orr.w	r3, r0, r1
 8005df4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df8:	681a      	ldr	r2, [r3, #0]
 8005dfa:	4bc5      	ldr	r3, [pc, #788]	; (8006110 <UART_SetConfig+0x384>)
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d004      	beq.n	8005e0a <UART_SetConfig+0x7e>
 8005e00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	4bc3      	ldr	r3, [pc, #780]	; (8006114 <UART_SetConfig+0x388>)
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d103      	bne.n	8005e12 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e0a:	f7fc fa9d 	bl	8002348 <HAL_RCC_GetPCLK2Freq>
 8005e0e:	6778      	str	r0, [r7, #116]	; 0x74
 8005e10:	e002      	b.n	8005e18 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e12:	f7fc fa85 	bl	8002320 <HAL_RCC_GetPCLK1Freq>
 8005e16:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e20:	f040 80b6 	bne.w	8005f90 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e26:	461c      	mov	r4, r3
 8005e28:	f04f 0500 	mov.w	r5, #0
 8005e2c:	4622      	mov	r2, r4
 8005e2e:	462b      	mov	r3, r5
 8005e30:	1891      	adds	r1, r2, r2
 8005e32:	6439      	str	r1, [r7, #64]	; 0x40
 8005e34:	415b      	adcs	r3, r3
 8005e36:	647b      	str	r3, [r7, #68]	; 0x44
 8005e38:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e3c:	1912      	adds	r2, r2, r4
 8005e3e:	eb45 0303 	adc.w	r3, r5, r3
 8005e42:	f04f 0000 	mov.w	r0, #0
 8005e46:	f04f 0100 	mov.w	r1, #0
 8005e4a:	00d9      	lsls	r1, r3, #3
 8005e4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e50:	00d0      	lsls	r0, r2, #3
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	1911      	adds	r1, r2, r4
 8005e58:	6639      	str	r1, [r7, #96]	; 0x60
 8005e5a:	416b      	adcs	r3, r5
 8005e5c:	667b      	str	r3, [r7, #100]	; 0x64
 8005e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e60:	685b      	ldr	r3, [r3, #4]
 8005e62:	461a      	mov	r2, r3
 8005e64:	f04f 0300 	mov.w	r3, #0
 8005e68:	1891      	adds	r1, r2, r2
 8005e6a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e6c:	415b      	adcs	r3, r3
 8005e6e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e70:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e74:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e78:	f7fa f9c4 	bl	8000204 <__aeabi_uldivmod>
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4ba5      	ldr	r3, [pc, #660]	; (8006118 <UART_SetConfig+0x38c>)
 8005e82:	fba3 2302 	umull	r2, r3, r3, r2
 8005e86:	095b      	lsrs	r3, r3, #5
 8005e88:	011e      	lsls	r6, r3, #4
 8005e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e8c:	461c      	mov	r4, r3
 8005e8e:	f04f 0500 	mov.w	r5, #0
 8005e92:	4622      	mov	r2, r4
 8005e94:	462b      	mov	r3, r5
 8005e96:	1891      	adds	r1, r2, r2
 8005e98:	6339      	str	r1, [r7, #48]	; 0x30
 8005e9a:	415b      	adcs	r3, r3
 8005e9c:	637b      	str	r3, [r7, #52]	; 0x34
 8005e9e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005ea2:	1912      	adds	r2, r2, r4
 8005ea4:	eb45 0303 	adc.w	r3, r5, r3
 8005ea8:	f04f 0000 	mov.w	r0, #0
 8005eac:	f04f 0100 	mov.w	r1, #0
 8005eb0:	00d9      	lsls	r1, r3, #3
 8005eb2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005eb6:	00d0      	lsls	r0, r2, #3
 8005eb8:	4602      	mov	r2, r0
 8005eba:	460b      	mov	r3, r1
 8005ebc:	1911      	adds	r1, r2, r4
 8005ebe:	65b9      	str	r1, [r7, #88]	; 0x58
 8005ec0:	416b      	adcs	r3, r5
 8005ec2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ec6:	685b      	ldr	r3, [r3, #4]
 8005ec8:	461a      	mov	r2, r3
 8005eca:	f04f 0300 	mov.w	r3, #0
 8005ece:	1891      	adds	r1, r2, r2
 8005ed0:	62b9      	str	r1, [r7, #40]	; 0x28
 8005ed2:	415b      	adcs	r3, r3
 8005ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ed6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005eda:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005ede:	f7fa f991 	bl	8000204 <__aeabi_uldivmod>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	460b      	mov	r3, r1
 8005ee6:	4b8c      	ldr	r3, [pc, #560]	; (8006118 <UART_SetConfig+0x38c>)
 8005ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8005eec:	095b      	lsrs	r3, r3, #5
 8005eee:	2164      	movs	r1, #100	; 0x64
 8005ef0:	fb01 f303 	mul.w	r3, r1, r3
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	00db      	lsls	r3, r3, #3
 8005ef8:	3332      	adds	r3, #50	; 0x32
 8005efa:	4a87      	ldr	r2, [pc, #540]	; (8006118 <UART_SetConfig+0x38c>)
 8005efc:	fba2 2303 	umull	r2, r3, r2, r3
 8005f00:	095b      	lsrs	r3, r3, #5
 8005f02:	005b      	lsls	r3, r3, #1
 8005f04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f08:	441e      	add	r6, r3
 8005f0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f04f 0100 	mov.w	r1, #0
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	1894      	adds	r4, r2, r2
 8005f18:	623c      	str	r4, [r7, #32]
 8005f1a:	415b      	adcs	r3, r3
 8005f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f1e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f22:	1812      	adds	r2, r2, r0
 8005f24:	eb41 0303 	adc.w	r3, r1, r3
 8005f28:	f04f 0400 	mov.w	r4, #0
 8005f2c:	f04f 0500 	mov.w	r5, #0
 8005f30:	00dd      	lsls	r5, r3, #3
 8005f32:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f36:	00d4      	lsls	r4, r2, #3
 8005f38:	4622      	mov	r2, r4
 8005f3a:	462b      	mov	r3, r5
 8005f3c:	1814      	adds	r4, r2, r0
 8005f3e:	653c      	str	r4, [r7, #80]	; 0x50
 8005f40:	414b      	adcs	r3, r1
 8005f42:	657b      	str	r3, [r7, #84]	; 0x54
 8005f44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	f04f 0300 	mov.w	r3, #0
 8005f4e:	1891      	adds	r1, r2, r2
 8005f50:	61b9      	str	r1, [r7, #24]
 8005f52:	415b      	adcs	r3, r3
 8005f54:	61fb      	str	r3, [r7, #28]
 8005f56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f5a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f5e:	f7fa f951 	bl	8000204 <__aeabi_uldivmod>
 8005f62:	4602      	mov	r2, r0
 8005f64:	460b      	mov	r3, r1
 8005f66:	4b6c      	ldr	r3, [pc, #432]	; (8006118 <UART_SetConfig+0x38c>)
 8005f68:	fba3 1302 	umull	r1, r3, r3, r2
 8005f6c:	095b      	lsrs	r3, r3, #5
 8005f6e:	2164      	movs	r1, #100	; 0x64
 8005f70:	fb01 f303 	mul.w	r3, r1, r3
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	3332      	adds	r3, #50	; 0x32
 8005f7a:	4a67      	ldr	r2, [pc, #412]	; (8006118 <UART_SetConfig+0x38c>)
 8005f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f80:	095b      	lsrs	r3, r3, #5
 8005f82:	f003 0207 	and.w	r2, r3, #7
 8005f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4432      	add	r2, r6
 8005f8c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f8e:	e0b9      	b.n	8006104 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f92:	461c      	mov	r4, r3
 8005f94:	f04f 0500 	mov.w	r5, #0
 8005f98:	4622      	mov	r2, r4
 8005f9a:	462b      	mov	r3, r5
 8005f9c:	1891      	adds	r1, r2, r2
 8005f9e:	6139      	str	r1, [r7, #16]
 8005fa0:	415b      	adcs	r3, r3
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005fa8:	1912      	adds	r2, r2, r4
 8005faa:	eb45 0303 	adc.w	r3, r5, r3
 8005fae:	f04f 0000 	mov.w	r0, #0
 8005fb2:	f04f 0100 	mov.w	r1, #0
 8005fb6:	00d9      	lsls	r1, r3, #3
 8005fb8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fbc:	00d0      	lsls	r0, r2, #3
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	eb12 0804 	adds.w	r8, r2, r4
 8005fc6:	eb43 0905 	adc.w	r9, r3, r5
 8005fca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fcc:	685b      	ldr	r3, [r3, #4]
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f04f 0100 	mov.w	r1, #0
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	008b      	lsls	r3, r1, #2
 8005fde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005fe2:	0082      	lsls	r2, r0, #2
 8005fe4:	4640      	mov	r0, r8
 8005fe6:	4649      	mov	r1, r9
 8005fe8:	f7fa f90c 	bl	8000204 <__aeabi_uldivmod>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4b49      	ldr	r3, [pc, #292]	; (8006118 <UART_SetConfig+0x38c>)
 8005ff2:	fba3 2302 	umull	r2, r3, r3, r2
 8005ff6:	095b      	lsrs	r3, r3, #5
 8005ff8:	011e      	lsls	r6, r3, #4
 8005ffa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f04f 0100 	mov.w	r1, #0
 8006002:	4602      	mov	r2, r0
 8006004:	460b      	mov	r3, r1
 8006006:	1894      	adds	r4, r2, r2
 8006008:	60bc      	str	r4, [r7, #8]
 800600a:	415b      	adcs	r3, r3
 800600c:	60fb      	str	r3, [r7, #12]
 800600e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006012:	1812      	adds	r2, r2, r0
 8006014:	eb41 0303 	adc.w	r3, r1, r3
 8006018:	f04f 0400 	mov.w	r4, #0
 800601c:	f04f 0500 	mov.w	r5, #0
 8006020:	00dd      	lsls	r5, r3, #3
 8006022:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006026:	00d4      	lsls	r4, r2, #3
 8006028:	4622      	mov	r2, r4
 800602a:	462b      	mov	r3, r5
 800602c:	1814      	adds	r4, r2, r0
 800602e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006030:	414b      	adcs	r3, r1
 8006032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006034:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	4618      	mov	r0, r3
 800603a:	f04f 0100 	mov.w	r1, #0
 800603e:	f04f 0200 	mov.w	r2, #0
 8006042:	f04f 0300 	mov.w	r3, #0
 8006046:	008b      	lsls	r3, r1, #2
 8006048:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800604c:	0082      	lsls	r2, r0, #2
 800604e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006052:	f7fa f8d7 	bl	8000204 <__aeabi_uldivmod>
 8006056:	4602      	mov	r2, r0
 8006058:	460b      	mov	r3, r1
 800605a:	4b2f      	ldr	r3, [pc, #188]	; (8006118 <UART_SetConfig+0x38c>)
 800605c:	fba3 1302 	umull	r1, r3, r3, r2
 8006060:	095b      	lsrs	r3, r3, #5
 8006062:	2164      	movs	r1, #100	; 0x64
 8006064:	fb01 f303 	mul.w	r3, r1, r3
 8006068:	1ad3      	subs	r3, r2, r3
 800606a:	011b      	lsls	r3, r3, #4
 800606c:	3332      	adds	r3, #50	; 0x32
 800606e:	4a2a      	ldr	r2, [pc, #168]	; (8006118 <UART_SetConfig+0x38c>)
 8006070:	fba2 2303 	umull	r2, r3, r2, r3
 8006074:	095b      	lsrs	r3, r3, #5
 8006076:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800607a:	441e      	add	r6, r3
 800607c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800607e:	4618      	mov	r0, r3
 8006080:	f04f 0100 	mov.w	r1, #0
 8006084:	4602      	mov	r2, r0
 8006086:	460b      	mov	r3, r1
 8006088:	1894      	adds	r4, r2, r2
 800608a:	603c      	str	r4, [r7, #0]
 800608c:	415b      	adcs	r3, r3
 800608e:	607b      	str	r3, [r7, #4]
 8006090:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006094:	1812      	adds	r2, r2, r0
 8006096:	eb41 0303 	adc.w	r3, r1, r3
 800609a:	f04f 0400 	mov.w	r4, #0
 800609e:	f04f 0500 	mov.w	r5, #0
 80060a2:	00dd      	lsls	r5, r3, #3
 80060a4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060a8:	00d4      	lsls	r4, r2, #3
 80060aa:	4622      	mov	r2, r4
 80060ac:	462b      	mov	r3, r5
 80060ae:	eb12 0a00 	adds.w	sl, r2, r0
 80060b2:	eb43 0b01 	adc.w	fp, r3, r1
 80060b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	4618      	mov	r0, r3
 80060bc:	f04f 0100 	mov.w	r1, #0
 80060c0:	f04f 0200 	mov.w	r2, #0
 80060c4:	f04f 0300 	mov.w	r3, #0
 80060c8:	008b      	lsls	r3, r1, #2
 80060ca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060ce:	0082      	lsls	r2, r0, #2
 80060d0:	4650      	mov	r0, sl
 80060d2:	4659      	mov	r1, fp
 80060d4:	f7fa f896 	bl	8000204 <__aeabi_uldivmod>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	4b0e      	ldr	r3, [pc, #56]	; (8006118 <UART_SetConfig+0x38c>)
 80060de:	fba3 1302 	umull	r1, r3, r3, r2
 80060e2:	095b      	lsrs	r3, r3, #5
 80060e4:	2164      	movs	r1, #100	; 0x64
 80060e6:	fb01 f303 	mul.w	r3, r1, r3
 80060ea:	1ad3      	subs	r3, r2, r3
 80060ec:	011b      	lsls	r3, r3, #4
 80060ee:	3332      	adds	r3, #50	; 0x32
 80060f0:	4a09      	ldr	r2, [pc, #36]	; (8006118 <UART_SetConfig+0x38c>)
 80060f2:	fba2 2303 	umull	r2, r3, r2, r3
 80060f6:	095b      	lsrs	r3, r3, #5
 80060f8:	f003 020f 	and.w	r2, r3, #15
 80060fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4432      	add	r2, r6
 8006102:	609a      	str	r2, [r3, #8]
}
 8006104:	bf00      	nop
 8006106:	377c      	adds	r7, #124	; 0x7c
 8006108:	46bd      	mov	sp, r7
 800610a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800610e:	bf00      	nop
 8006110:	40011000 	.word	0x40011000
 8006114:	40011400 	.word	0x40011400
 8006118:	51eb851f 	.word	0x51eb851f

0800611c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800611c:	b084      	sub	sp, #16
 800611e:	b480      	push	{r7}
 8006120:	b085      	sub	sp, #20
 8006122:	af00      	add	r7, sp, #0
 8006124:	6078      	str	r0, [r7, #4]
 8006126:	f107 001c 	add.w	r0, r7, #28
 800612a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800612e:	2300      	movs	r3, #0
 8006130:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006132:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006134:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006136:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800613a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800613c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800613e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006140:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006142:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006146:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006156:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	431a      	orrs	r2, r3
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006162:	2300      	movs	r3, #0
}
 8006164:	4618      	mov	r0, r3
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	b004      	add	sp, #16
 8006170:	4770      	bx	lr

08006172 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006172:	b480      	push	{r7}
 8006174:	b083      	sub	sp, #12
 8006176:	af00      	add	r7, sp, #0
 8006178:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006180:	4618      	mov	r0, r3
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800618c:	b480      	push	{r7}
 800618e:	b083      	sub	sp, #12
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
 8006194:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	370c      	adds	r7, #12
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b082      	sub	sp, #8
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2203      	movs	r2, #3
 80061ba:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80061bc:	2002      	movs	r0, #2
 80061be:	f7fb f945 	bl	800144c <HAL_Delay>
  
  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3708      	adds	r7, #8
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f003 0303 	and.w	r3, r3, #3
}
 80061dc:	4618      	mov	r0, r3
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80061f2:	2300      	movs	r3, #0
 80061f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006206:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800620c:	431a      	orrs	r2, r3
                       Command->CPSM);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006212:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4313      	orrs	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68db      	ldr	r3, [r3, #12]
 800621e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006222:	f023 030f 	bic.w	r3, r3, #15
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	431a      	orrs	r2, r3
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800622e:	2300      	movs	r3, #0
}
 8006230:	4618      	mov	r0, r3
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800623c:	b480      	push	{r7}
 800623e:	b083      	sub	sp, #12
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	691b      	ldr	r3, [r3, #16]
 8006248:	b2db      	uxtb	r3, r3
}
 800624a:	4618      	mov	r0, r3
 800624c:	370c      	adds	r7, #12
 800624e:	46bd      	mov	sp, r7
 8006250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006254:	4770      	bx	lr

08006256 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006256:	b480      	push	{r7}
 8006258:	b085      	sub	sp, #20
 800625a:	af00      	add	r7, sp, #0
 800625c:	6078      	str	r0, [r7, #4]
 800625e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	3314      	adds	r3, #20
 8006264:	461a      	mov	r2, r3
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	4413      	add	r3, r2
 800626a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
}  
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800627c:	b480      	push	{r7}
 800627e:	b085      	sub	sp, #20
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006286:	2300      	movs	r3, #0
 8006288:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80062a2:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80062a8:	431a      	orrs	r2, r3
                       Data->DPSM);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80062ae:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ba:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	431a      	orrs	r2, r3
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80062c6:	2300      	movs	r3, #0

}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3714      	adds	r7, #20
 80062cc:	46bd      	mov	sp, r7
 80062ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d2:	4770      	bx	lr

080062d4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b088      	sub	sp, #32
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80062de:	683b      	ldr	r3, [r7, #0]
 80062e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80062e2:	2310      	movs	r3, #16
 80062e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80062e6:	2340      	movs	r3, #64	; 0x40
 80062e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80062ea:	2300      	movs	r3, #0
 80062ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80062ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80062f4:	f107 0308 	add.w	r3, r7, #8
 80062f8:	4619      	mov	r1, r3
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7ff ff74 	bl	80061e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006300:	f241 3288 	movw	r2, #5000	; 0x1388
 8006304:	2110      	movs	r1, #16
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa02 	bl	8006710 <SDMMC_GetCmdResp1>
 800630c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800630e:	69fb      	ldr	r3, [r7, #28]
}
 8006310:	4618      	mov	r0, r3
 8006312:	3720      	adds	r7, #32
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}

08006318 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b088      	sub	sp, #32
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006326:	2311      	movs	r3, #17
 8006328:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800632a:	2340      	movs	r3, #64	; 0x40
 800632c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800632e:	2300      	movs	r3, #0
 8006330:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006332:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006336:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006338:	f107 0308 	add.w	r3, r7, #8
 800633c:	4619      	mov	r1, r3
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f7ff ff52 	bl	80061e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006344:	f241 3288 	movw	r2, #5000	; 0x1388
 8006348:	2111      	movs	r1, #17
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f000 f9e0 	bl	8006710 <SDMMC_GetCmdResp1>
 8006350:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006352:	69fb      	ldr	r3, [r7, #28]
}
 8006354:	4618      	mov	r0, r3
 8006356:	3720      	adds	r7, #32
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b088      	sub	sp, #32
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800636a:	2312      	movs	r3, #18
 800636c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800636e:	2340      	movs	r3, #64	; 0x40
 8006370:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006372:	2300      	movs	r3, #0
 8006374:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800637a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800637c:	f107 0308 	add.w	r3, r7, #8
 8006380:	4619      	mov	r1, r3
 8006382:	6878      	ldr	r0, [r7, #4]
 8006384:	f7ff ff30 	bl	80061e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006388:	f241 3288 	movw	r2, #5000	; 0x1388
 800638c:	2112      	movs	r1, #18
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f9be 	bl	8006710 <SDMMC_GetCmdResp1>
 8006394:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006396:	69fb      	ldr	r3, [r7, #28]
}
 8006398:	4618      	mov	r0, r3
 800639a:	3720      	adds	r7, #32
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80063ae:	2318      	movs	r3, #24
 80063b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063b2:	2340      	movs	r3, #64	; 0x40
 80063b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063b6:	2300      	movs	r3, #0
 80063b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80063c0:	f107 0308 	add.w	r3, r7, #8
 80063c4:	4619      	mov	r1, r3
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f7ff ff0e 	bl	80061e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80063cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d0:	2118      	movs	r1, #24
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f99c 	bl	8006710 <SDMMC_GetCmdResp1>
 80063d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80063da:	69fb      	ldr	r3, [r7, #28]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3720      	adds	r7, #32
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b088      	sub	sp, #32
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80063f2:	2319      	movs	r3, #25
 80063f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80063f6:	2340      	movs	r3, #64	; 0x40
 80063f8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80063fa:	2300      	movs	r3, #0
 80063fc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80063fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006402:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006404:	f107 0308 	add.w	r3, r7, #8
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f7ff feec 	bl	80061e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006410:	f241 3288 	movw	r2, #5000	; 0x1388
 8006414:	2119      	movs	r1, #25
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 f97a 	bl	8006710 <SDMMC_GetCmdResp1>
 800641c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800641e:	69fb      	ldr	r3, [r7, #28]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3720      	adds	r7, #32
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}

08006428 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b088      	sub	sp, #32
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006430:	2300      	movs	r3, #0
 8006432:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006434:	230c      	movs	r3, #12
 8006436:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006438:	2340      	movs	r3, #64	; 0x40
 800643a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800643c:	2300      	movs	r3, #0
 800643e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006444:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006446:	f107 0308 	add.w	r3, r7, #8
 800644a:	4619      	mov	r1, r3
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7ff fecb 	bl	80061e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006452:	4a05      	ldr	r2, [pc, #20]	; (8006468 <SDMMC_CmdStopTransfer+0x40>)
 8006454:	210c      	movs	r1, #12
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f95a 	bl	8006710 <SDMMC_GetCmdResp1>
 800645c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800645e:	69fb      	ldr	r3, [r7, #28]
}
 8006460:	4618      	mov	r0, r3
 8006462:	3720      	adds	r7, #32
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}
 8006468:	05f5e100 	.word	0x05f5e100

0800646c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08a      	sub	sp, #40	; 0x28
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800647c:	2307      	movs	r3, #7
 800647e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006480:	2340      	movs	r3, #64	; 0x40
 8006482:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006484:	2300      	movs	r3, #0
 8006486:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006488:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800648c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800648e:	f107 0310 	add.w	r3, r7, #16
 8006492:	4619      	mov	r1, r3
 8006494:	68f8      	ldr	r0, [r7, #12]
 8006496:	f7ff fea7 	bl	80061e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800649a:	f241 3288 	movw	r2, #5000	; 0x1388
 800649e:	2107      	movs	r1, #7
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 f935 	bl	8006710 <SDMMC_GetCmdResp1>
 80064a6:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80064a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3728      	adds	r7, #40	; 0x28
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}

080064b2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80064b2:	b580      	push	{r7, lr}
 80064b4:	b088      	sub	sp, #32
 80064b6:	af00      	add	r7, sp, #0
 80064b8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80064c2:	2300      	movs	r3, #0
 80064c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80064c6:	2300      	movs	r3, #0
 80064c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80064ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80064ce:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80064d0:	f107 0308 	add.w	r3, r7, #8
 80064d4:	4619      	mov	r1, r3
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f7ff fe86 	bl	80061e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 f8eb 	bl	80066b8 <SDMMC_GetCmdError>
 80064e2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80064e4:	69fb      	ldr	r3, [r7, #28]
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	3720      	adds	r7, #32
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b088      	sub	sp, #32
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80064f6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80064fa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80064fc:	2308      	movs	r3, #8
 80064fe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006500:	2340      	movs	r3, #64	; 0x40
 8006502:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006504:	2300      	movs	r3, #0
 8006506:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006508:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800650c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800650e:	f107 0308 	add.w	r3, r7, #8
 8006512:	4619      	mov	r1, r3
 8006514:	6878      	ldr	r0, [r7, #4]
 8006516:	f7ff fe67 	bl	80061e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 fae2 	bl	8006ae4 <SDMMC_GetCmdResp7>
 8006520:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006522:	69fb      	ldr	r3, [r7, #28]
}
 8006524:	4618      	mov	r0, r3
 8006526:	3720      	adds	r7, #32
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}

0800652c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b088      	sub	sp, #32
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800653a:	2337      	movs	r3, #55	; 0x37
 800653c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800653e:	2340      	movs	r3, #64	; 0x40
 8006540:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006542:	2300      	movs	r3, #0
 8006544:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800654a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800654c:	f107 0308 	add.w	r3, r7, #8
 8006550:	4619      	mov	r1, r3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7ff fe48 	bl	80061e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006558:	f241 3288 	movw	r2, #5000	; 0x1388
 800655c:	2137      	movs	r1, #55	; 0x37
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f8d6 	bl	8006710 <SDMMC_GetCmdResp1>
 8006564:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006566:	69fb      	ldr	r3, [r7, #28]
}
 8006568:	4618      	mov	r0, r3
 800656a:	3720      	adds	r7, #32
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b088      	sub	sp, #32
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006580:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006584:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006586:	2329      	movs	r3, #41	; 0x29
 8006588:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800658a:	2340      	movs	r3, #64	; 0x40
 800658c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800658e:	2300      	movs	r3, #0
 8006590:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006592:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006596:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006598:	f107 0308 	add.w	r3, r7, #8
 800659c:	4619      	mov	r1, r3
 800659e:	6878      	ldr	r0, [r7, #4]
 80065a0:	f7ff fe22 	bl	80061e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 f9e9 	bl	800697c <SDMMC_GetCmdResp3>
 80065aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065ac:	69fb      	ldr	r3, [r7, #28]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3720      	adds	r7, #32
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}

080065b6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b088      	sub	sp, #32
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80065be:	2300      	movs	r3, #0
 80065c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80065c2:	2302      	movs	r3, #2
 80065c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 80065c6:	23c0      	movs	r3, #192	; 0xc0
 80065c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80065ca:	2300      	movs	r3, #0
 80065cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80065ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80065d4:	f107 0308 	add.w	r3, r7, #8
 80065d8:	4619      	mov	r1, r3
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff fe04 	bl	80061e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f983 	bl	80068ec <SDMMC_GetCmdResp2>
 80065e6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80065e8:	69fb      	ldr	r3, [r7, #28]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3720      	adds	r7, #32
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b088      	sub	sp, #32
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
 80065fa:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006600:	2309      	movs	r3, #9
 8006602:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006604:	23c0      	movs	r3, #192	; 0xc0
 8006606:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006608:	2300      	movs	r3, #0
 800660a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800660c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006610:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006612:	f107 0308 	add.w	r3, r7, #8
 8006616:	4619      	mov	r1, r3
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	f7ff fde5 	bl	80061e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f000 f964 	bl	80068ec <SDMMC_GetCmdResp2>
 8006624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006626:	69fb      	ldr	r3, [r7, #28]
}
 8006628:	4618      	mov	r0, r3
 800662a:	3720      	adds	r7, #32
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b088      	sub	sp, #32
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800663e:	2303      	movs	r3, #3
 8006640:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006642:	2340      	movs	r3, #64	; 0x40
 8006644:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006646:	2300      	movs	r3, #0
 8006648:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800664a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800664e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006650:	f107 0308 	add.w	r3, r7, #8
 8006654:	4619      	mov	r1, r3
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7ff fdc6 	bl	80061e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800665c:	683a      	ldr	r2, [r7, #0]
 800665e:	2103      	movs	r1, #3
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f9c9 	bl	80069f8 <SDMMC_GetCmdResp6>
 8006666:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006668:	69fb      	ldr	r3, [r7, #28]
}
 800666a:	4618      	mov	r0, r3
 800666c:	3720      	adds	r7, #32
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b088      	sub	sp, #32
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
 800667a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800667c:	683b      	ldr	r3, [r7, #0]
 800667e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006680:	230d      	movs	r3, #13
 8006682:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006684:	2340      	movs	r3, #64	; 0x40
 8006686:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006688:	2300      	movs	r3, #0
 800668a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800668c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006690:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006692:	f107 0308 	add.w	r3, r7, #8
 8006696:	4619      	mov	r1, r3
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f7ff fda5 	bl	80061e8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800669e:	f241 3288 	movw	r2, #5000	; 0x1388
 80066a2:	210d      	movs	r1, #13
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f833 	bl	8006710 <SDMMC_GetCmdResp1>
 80066aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80066ac:	69fb      	ldr	r3, [r7, #28]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3720      	adds	r7, #32
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}
	...

080066b8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80066c0:	4b11      	ldr	r3, [pc, #68]	; (8006708 <SDMMC_GetCmdError+0x50>)
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a11      	ldr	r2, [pc, #68]	; (800670c <SDMMC_GetCmdError+0x54>)
 80066c6:	fba2 2303 	umull	r2, r3, r2, r3
 80066ca:	0a5b      	lsrs	r3, r3, #9
 80066cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80066d0:	fb02 f303 	mul.w	r3, r2, r3
 80066d4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	1e5a      	subs	r2, r3, #1
 80066da:	60fa      	str	r2, [r7, #12]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d102      	bne.n	80066e6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80066e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80066e4:	e009      	b.n	80066fa <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0f1      	beq.n	80066d6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	22c5      	movs	r2, #197	; 0xc5
 80066f6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr
 8006706:	bf00      	nop
 8006708:	20000000 	.word	0x20000000
 800670c:	10624dd3 	.word	0x10624dd3

08006710 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b088      	sub	sp, #32
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	460b      	mov	r3, r1
 800671a:	607a      	str	r2, [r7, #4]
 800671c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800671e:	4b70      	ldr	r3, [pc, #448]	; (80068e0 <SDMMC_GetCmdResp1+0x1d0>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	4a70      	ldr	r2, [pc, #448]	; (80068e4 <SDMMC_GetCmdResp1+0x1d4>)
 8006724:	fba2 2303 	umull	r2, r3, r2, r3
 8006728:	0a5a      	lsrs	r2, r3, #9
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	fb02 f303 	mul.w	r3, r2, r3
 8006730:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	1e5a      	subs	r2, r3, #1
 8006736:	61fa      	str	r2, [r7, #28]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d102      	bne.n	8006742 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800673c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006740:	e0c9      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006746:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800674e:	2b00      	cmp	r3, #0
 8006750:	d0ef      	beq.n	8006732 <SDMMC_GetCmdResp1+0x22>
 8006752:	69bb      	ldr	r3, [r7, #24]
 8006754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006758:	2b00      	cmp	r3, #0
 800675a:	d1ea      	bne.n	8006732 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006760:	f003 0304 	and.w	r3, r3, #4
 8006764:	2b00      	cmp	r3, #0
 8006766:	d004      	beq.n	8006772 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2204      	movs	r2, #4
 800676c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800676e:	2304      	movs	r3, #4
 8006770:	e0b1      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006776:	f003 0301 	and.w	r3, r3, #1
 800677a:	2b00      	cmp	r3, #0
 800677c:	d004      	beq.n	8006788 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2201      	movs	r2, #1
 8006782:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006784:	2301      	movs	r3, #1
 8006786:	e0a6      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	22c5      	movs	r2, #197	; 0xc5
 800678c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800678e:	68f8      	ldr	r0, [r7, #12]
 8006790:	f7ff fd54 	bl	800623c <SDIO_GetCommandResponse>
 8006794:	4603      	mov	r3, r0
 8006796:	461a      	mov	r2, r3
 8006798:	7afb      	ldrb	r3, [r7, #11]
 800679a:	4293      	cmp	r3, r2
 800679c:	d001      	beq.n	80067a2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800679e:	2301      	movs	r3, #1
 80067a0:	e099      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80067a2:	2100      	movs	r1, #0
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f7ff fd56 	bl	8006256 <SDIO_GetResponse>
 80067aa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 80067ac:	697a      	ldr	r2, [r7, #20]
 80067ae:	4b4e      	ldr	r3, [pc, #312]	; (80068e8 <SDMMC_GetCmdResp1+0x1d8>)
 80067b0:	4013      	ands	r3, r2
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 80067b6:	2300      	movs	r3, #0
 80067b8:	e08d      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	da02      	bge.n	80067c6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80067c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067c4:	e087      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80067d0:	2340      	movs	r3, #64	; 0x40
 80067d2:	e080      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80067d4:	697b      	ldr	r3, [r7, #20]
 80067d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d001      	beq.n	80067e2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80067de:	2380      	movs	r3, #128	; 0x80
 80067e0:	e079      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80067ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067f0:	e071      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d002      	beq.n	8006802 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80067fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006800:	e069      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006802:	697b      	ldr	r3, [r7, #20]
 8006804:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800680c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006810:	e061      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006812:	697b      	ldr	r3, [r7, #20]
 8006814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006818:	2b00      	cmp	r3, #0
 800681a:	d002      	beq.n	8006822 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800681c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006820:	e059      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006828:	2b00      	cmp	r3, #0
 800682a:	d002      	beq.n	8006832 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800682c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006830:	e051      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800683c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006840:	e049      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d002      	beq.n	8006852 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800684c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006850:	e041      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d002      	beq.n	8006862 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800685c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006860:	e039      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006868:	2b00      	cmp	r3, #0
 800686a:	d002      	beq.n	8006872 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800686c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006870:	e031      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d002      	beq.n	8006882 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800687c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006880:	e029      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800688c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006890:	e021      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800689c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80068a0:	e019      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d002      	beq.n	80068b2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80068ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80068b0:	e011      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 80068bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80068c0:	e009      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	f003 0308 	and.w	r3, r3, #8
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d002      	beq.n	80068d2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80068cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80068d0:	e001      	b.n	80068d6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80068d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3720      	adds	r7, #32
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
 80068de:	bf00      	nop
 80068e0:	20000000 	.word	0x20000000
 80068e4:	10624dd3 	.word	0x10624dd3
 80068e8:	fdffe008 	.word	0xfdffe008

080068ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b085      	sub	sp, #20
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80068f4:	4b1f      	ldr	r3, [pc, #124]	; (8006974 <SDMMC_GetCmdResp2+0x88>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a1f      	ldr	r2, [pc, #124]	; (8006978 <SDMMC_GetCmdResp2+0x8c>)
 80068fa:	fba2 2303 	umull	r2, r3, r2, r3
 80068fe:	0a5b      	lsrs	r3, r3, #9
 8006900:	f241 3288 	movw	r2, #5000	; 0x1388
 8006904:	fb02 f303 	mul.w	r3, r2, r3
 8006908:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	1e5a      	subs	r2, r3, #1
 800690e:	60fa      	str	r2, [r7, #12]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d102      	bne.n	800691a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006914:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006918:	e026      	b.n	8006968 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800691e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006926:	2b00      	cmp	r3, #0
 8006928:	d0ef      	beq.n	800690a <SDMMC_GetCmdResp2+0x1e>
 800692a:	68bb      	ldr	r3, [r7, #8]
 800692c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006930:	2b00      	cmp	r3, #0
 8006932:	d1ea      	bne.n	800690a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006938:	f003 0304 	and.w	r3, r3, #4
 800693c:	2b00      	cmp	r3, #0
 800693e:	d004      	beq.n	800694a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2204      	movs	r2, #4
 8006944:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006946:	2304      	movs	r3, #4
 8006948:	e00e      	b.n	8006968 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800694e:	f003 0301 	and.w	r3, r3, #1
 8006952:	2b00      	cmp	r3, #0
 8006954:	d004      	beq.n	8006960 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	2201      	movs	r2, #1
 800695a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800695c:	2301      	movs	r3, #1
 800695e:	e003      	b.n	8006968 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	22c5      	movs	r2, #197	; 0xc5
 8006964:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8006966:	2300      	movs	r3, #0
}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	20000000 	.word	0x20000000
 8006978:	10624dd3 	.word	0x10624dd3

0800697c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800697c:	b480      	push	{r7}
 800697e:	b085      	sub	sp, #20
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006984:	4b1a      	ldr	r3, [pc, #104]	; (80069f0 <SDMMC_GetCmdResp3+0x74>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	4a1a      	ldr	r2, [pc, #104]	; (80069f4 <SDMMC_GetCmdResp3+0x78>)
 800698a:	fba2 2303 	umull	r2, r3, r2, r3
 800698e:	0a5b      	lsrs	r3, r3, #9
 8006990:	f241 3288 	movw	r2, #5000	; 0x1388
 8006994:	fb02 f303 	mul.w	r3, r2, r3
 8006998:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	1e5a      	subs	r2, r3, #1
 800699e:	60fa      	str	r2, [r7, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d102      	bne.n	80069aa <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80069a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80069a8:	e01b      	b.n	80069e2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d0ef      	beq.n	800699a <SDMMC_GetCmdResp3+0x1e>
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1ea      	bne.n	800699a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d004      	beq.n	80069da <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2204      	movs	r2, #4
 80069d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80069d6:	2304      	movs	r3, #4
 80069d8:	e003      	b.n	80069e2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	22c5      	movs	r2, #197	; 0xc5
 80069de:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80069e0:	2300      	movs	r3, #0
}
 80069e2:	4618      	mov	r0, r3
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	20000000 	.word	0x20000000
 80069f4:	10624dd3 	.word	0x10624dd3

080069f8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b088      	sub	sp, #32
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	460b      	mov	r3, r1
 8006a02:	607a      	str	r2, [r7, #4]
 8006a04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006a06:	4b35      	ldr	r3, [pc, #212]	; (8006adc <SDMMC_GetCmdResp6+0xe4>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a35      	ldr	r2, [pc, #212]	; (8006ae0 <SDMMC_GetCmdResp6+0xe8>)
 8006a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006a10:	0a5b      	lsrs	r3, r3, #9
 8006a12:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a16:	fb02 f303 	mul.w	r3, r2, r3
 8006a1a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	1e5a      	subs	r2, r3, #1
 8006a20:	61fa      	str	r2, [r7, #28]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d102      	bne.n	8006a2c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006a26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006a2a:	e052      	b.n	8006ad2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a30:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a32:	69bb      	ldr	r3, [r7, #24]
 8006a34:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d0ef      	beq.n	8006a1c <SDMMC_GetCmdResp6+0x24>
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1ea      	bne.n	8006a1c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a4a:	f003 0304 	and.w	r3, r3, #4
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d004      	beq.n	8006a5c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	2204      	movs	r2, #4
 8006a56:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006a58:	2304      	movs	r3, #4
 8006a5a:	e03a      	b.n	8006ad2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a60:	f003 0301 	and.w	r3, r3, #1
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d004      	beq.n	8006a72 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2201      	movs	r2, #1
 8006a6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e02f      	b.n	8006ad2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006a72:	68f8      	ldr	r0, [r7, #12]
 8006a74:	f7ff fbe2 	bl	800623c <SDIO_GetCommandResponse>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	7afb      	ldrb	r3, [r7, #11]
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d001      	beq.n	8006a86 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e025      	b.n	8006ad2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	22c5      	movs	r2, #197	; 0xc5
 8006a8a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	68f8      	ldr	r0, [r7, #12]
 8006a90:	f7ff fbe1 	bl	8006256 <SDIO_GetResponse>
 8006a94:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d106      	bne.n	8006aae <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8006aa0:	697b      	ldr	r3, [r7, #20]
 8006aa2:	0c1b      	lsrs	r3, r3, #16
 8006aa4:	b29a      	uxth	r2, r3
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	e011      	b.n	8006ad2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d002      	beq.n	8006abe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006ab8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006abc:	e009      	b.n	8006ad2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006ac8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006acc:	e001      	b.n	8006ad2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006ace:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3720      	adds	r7, #32
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	bf00      	nop
 8006adc:	20000000 	.word	0x20000000
 8006ae0:	10624dd3 	.word	0x10624dd3

08006ae4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8006ae4:	b480      	push	{r7}
 8006ae6:	b085      	sub	sp, #20
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006aec:	4b22      	ldr	r3, [pc, #136]	; (8006b78 <SDMMC_GetCmdResp7+0x94>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a22      	ldr	r2, [pc, #136]	; (8006b7c <SDMMC_GetCmdResp7+0x98>)
 8006af2:	fba2 2303 	umull	r2, r3, r2, r3
 8006af6:	0a5b      	lsrs	r3, r3, #9
 8006af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006afc:	fb02 f303 	mul.w	r3, r2, r3
 8006b00:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	1e5a      	subs	r2, r3, #1
 8006b06:	60fa      	str	r2, [r7, #12]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d102      	bne.n	8006b12 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006b0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006b10:	e02c      	b.n	8006b6c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b16:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b18:	68bb      	ldr	r3, [r7, #8]
 8006b1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d0ef      	beq.n	8006b02 <SDMMC_GetCmdResp7+0x1e>
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1ea      	bne.n	8006b02 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b30:	f003 0304 	and.w	r3, r3, #4
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d004      	beq.n	8006b42 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006b3e:	2304      	movs	r3, #4
 8006b40:	e014      	b.n	8006b6c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b46:	f003 0301 	and.w	r3, r3, #1
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d004      	beq.n	8006b58 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006b54:	2301      	movs	r3, #1
 8006b56:	e009      	b.n	8006b6c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d002      	beq.n	8006b6a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2240      	movs	r2, #64	; 0x40
 8006b68:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8006b6a:	2300      	movs	r3, #0
  
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3714      	adds	r7, #20
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	20000000 	.word	0x20000000
 8006b7c:	10624dd3 	.word	0x10624dd3

08006b80 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8006b84:	4904      	ldr	r1, [pc, #16]	; (8006b98 <MX_FATFS_Init+0x18>)
 8006b86:	4805      	ldr	r0, [pc, #20]	; (8006b9c <MX_FATFS_Init+0x1c>)
 8006b88:	f002 fb72 	bl	8009270 <FATFS_LinkDriver>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	461a      	mov	r2, r3
 8006b90:	4b03      	ldr	r3, [pc, #12]	; (8006ba0 <MX_FATFS_Init+0x20>)
 8006b92:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006b94:	bf00      	nop
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	20000778 	.word	0x20000778
 8006b9c:	0800937c 	.word	0x0800937c
 8006ba0:	20000774 	.word	0x20000774

08006ba4 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8006ba8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8006bbe:	f000 f89e 	bl	8006cfe <BSP_SD_IsDetected>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b01      	cmp	r3, #1
 8006bc6:	d001      	beq.n	8006bcc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8006bc8:	2301      	movs	r3, #1
 8006bca:	e005      	b.n	8006bd8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8006bcc:	4804      	ldr	r0, [pc, #16]	; (8006be0 <BSP_SD_Init+0x2c>)
 8006bce:	f7fc faf3 	bl	80031b8 <HAL_SD_Init>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8006bd6:	79fb      	ldrb	r3, [r7, #7]
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3708      	adds	r7, #8
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20000588 	.word	0x20000588

08006be4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b088      	sub	sp, #32
 8006be8:	af02      	add	r7, sp, #8
 8006bea:	60f8      	str	r0, [r7, #12]
 8006bec:	60b9      	str	r1, [r7, #8]
 8006bee:	607a      	str	r2, [r7, #4]
 8006bf0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	9300      	str	r3, [sp, #0]
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	68ba      	ldr	r2, [r7, #8]
 8006bfe:	68f9      	ldr	r1, [r7, #12]
 8006c00:	4806      	ldr	r0, [pc, #24]	; (8006c1c <BSP_SD_ReadBlocks+0x38>)
 8006c02:	f7fc fb87 	bl	8003314 <HAL_SD_ReadBlocks>
 8006c06:	4603      	mov	r3, r0
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d001      	beq.n	8006c10 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006c0c:	2301      	movs	r3, #1
 8006c0e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c12:	4618      	mov	r0, r3
 8006c14:	3718      	adds	r7, #24
 8006c16:	46bd      	mov	sp, r7
 8006c18:	bd80      	pop	{r7, pc}
 8006c1a:	bf00      	nop
 8006c1c:	20000588 	.word	0x20000588

08006c20 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	60f8      	str	r0, [r7, #12]
 8006c28:	60b9      	str	r1, [r7, #8]
 8006c2a:	607a      	str	r2, [r7, #4]
 8006c2c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	9300      	str	r3, [sp, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	68ba      	ldr	r2, [r7, #8]
 8006c3a:	68f9      	ldr	r1, [r7, #12]
 8006c3c:	4806      	ldr	r0, [pc, #24]	; (8006c58 <BSP_SD_WriteBlocks+0x38>)
 8006c3e:	f7fc fd47 	bl	80036d0 <HAL_SD_WriteBlocks>
 8006c42:	4603      	mov	r3, r0
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d001      	beq.n	8006c4c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	20000588 	.word	0x20000588

08006c5c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8006c60:	4805      	ldr	r0, [pc, #20]	; (8006c78 <BSP_SD_GetCardState+0x1c>)
 8006c62:	f7fd fa0b 	bl	800407c <HAL_SD_GetCardState>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b04      	cmp	r3, #4
 8006c6a:	bf14      	ite	ne
 8006c6c:	2301      	movne	r3, #1
 8006c6e:	2300      	moveq	r3, #0
 8006c70:	b2db      	uxtb	r3, r3
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000588 	.word	0x20000588

08006c7c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b082      	sub	sp, #8
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8006c84:	6879      	ldr	r1, [r7, #4]
 8006c86:	4803      	ldr	r0, [pc, #12]	; (8006c94 <BSP_SD_GetCardInfo+0x18>)
 8006c88:	f7fd f9cc 	bl	8004024 <HAL_SD_GetCardInfo>
}
 8006c8c:	bf00      	nop
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	20000588 	.word	0x20000588

08006c98 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b082      	sub	sp, #8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8006ca0:	f000 f818 	bl	8006cd4 <BSP_SD_AbortCallback>
}
 8006ca4:	bf00      	nop
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8006cb4:	f000 f815 	bl	8006ce2 <BSP_SD_WriteCpltCallback>
}
 8006cb8:	bf00      	nop
 8006cba:	3708      	adds	r7, #8
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bd80      	pop	{r7, pc}

08006cc0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8006cc8:	f000 f812 	bl	8006cf0 <BSP_SD_ReadCpltCallback>
}
 8006ccc:	bf00      	nop
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	af00      	add	r7, sp, #0

}
 8006cd8:	bf00      	nop
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	af00      	add	r7, sp, #0

}
 8006ce6:	bf00      	nop
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr

08006cf0 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8006cf0:	b480      	push	{r7}
 8006cf2:	af00      	add	r7, sp, #0

}
 8006cf4:	bf00      	nop
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfc:	4770      	bx	lr

08006cfe <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8006cfe:	b580      	push	{r7, lr}
 8006d00:	b082      	sub	sp, #8
 8006d02:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8006d04:	2301      	movs	r3, #1
 8006d06:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8006d08:	f000 f80c 	bl	8006d24 <BSP_PlatformIsDetected>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d101      	bne.n	8006d16 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8006d12:	2300      	movs	r3, #0
 8006d14:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8006d16:	79fb      	ldrb	r3, [r7, #7]
 8006d18:	b2db      	uxtb	r3, r3
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3708      	adds	r7, #8
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8006d2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006d32:	4806      	ldr	r0, [pc, #24]	; (8006d4c <BSP_PlatformIsDetected+0x28>)
 8006d34:	f7fb f9d0 	bl	80020d8 <HAL_GPIO_ReadPin>
 8006d38:	4603      	mov	r3, r0
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d001      	beq.n	8006d42 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8006d42:	79fb      	ldrb	r3, [r7, #7]
}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}
 8006d4c:	40020800 	.word	0x40020800

08006d50 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b082      	sub	sp, #8
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	4603      	mov	r3, r0
 8006d58:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8006d5a:	4b0b      	ldr	r3, [pc, #44]	; (8006d88 <SD_CheckStatus+0x38>)
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8006d60:	f7ff ff7c 	bl	8006c5c <BSP_SD_GetCardState>
 8006d64:	4603      	mov	r3, r0
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d107      	bne.n	8006d7a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8006d6a:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <SD_CheckStatus+0x38>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	f023 0301 	bic.w	r3, r3, #1
 8006d74:	b2da      	uxtb	r2, r3
 8006d76:	4b04      	ldr	r3, [pc, #16]	; (8006d88 <SD_CheckStatus+0x38>)
 8006d78:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8006d7a:	4b03      	ldr	r3, [pc, #12]	; (8006d88 <SD_CheckStatus+0x38>)
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	b2db      	uxtb	r3, r3
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3708      	adds	r7, #8
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}
 8006d88:	20000009 	.word	0x20000009

08006d8c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b082      	sub	sp, #8
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	4603      	mov	r3, r0
 8006d94:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8006d96:	4b0b      	ldr	r3, [pc, #44]	; (8006dc4 <SD_initialize+0x38>)
 8006d98:	2201      	movs	r2, #1
 8006d9a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8006d9c:	f7ff ff0a 	bl	8006bb4 <BSP_SD_Init>
 8006da0:	4603      	mov	r3, r0
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d107      	bne.n	8006db6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8006da6:	79fb      	ldrb	r3, [r7, #7]
 8006da8:	4618      	mov	r0, r3
 8006daa:	f7ff ffd1 	bl	8006d50 <SD_CheckStatus>
 8006dae:	4603      	mov	r3, r0
 8006db0:	461a      	mov	r2, r3
 8006db2:	4b04      	ldr	r3, [pc, #16]	; (8006dc4 <SD_initialize+0x38>)
 8006db4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8006db6:	4b03      	ldr	r3, [pc, #12]	; (8006dc4 <SD_initialize+0x38>)
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	b2db      	uxtb	r3, r3
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3708      	adds	r7, #8
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}
 8006dc4:	20000009 	.word	0x20000009

08006dc8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b082      	sub	sp, #8
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8006dd2:	79fb      	ldrb	r3, [r7, #7]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	f7ff ffbb 	bl	8006d50 <SD_CheckStatus>
 8006dda:	4603      	mov	r3, r0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b086      	sub	sp, #24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60b9      	str	r1, [r7, #8]
 8006dec:	607a      	str	r2, [r7, #4]
 8006dee:	603b      	str	r3, [r7, #0]
 8006df0:	4603      	mov	r3, r0
 8006df2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8006df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	6879      	ldr	r1, [r7, #4]
 8006e00:	68b8      	ldr	r0, [r7, #8]
 8006e02:	f7ff feef 	bl	8006be4 <BSP_SD_ReadBlocks>
 8006e06:	4603      	mov	r3, r0
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d107      	bne.n	8006e1c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8006e0c:	bf00      	nop
 8006e0e:	f7ff ff25 	bl	8006c5c <BSP_SD_GetCardState>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1fa      	bne.n	8006e0e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006e1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3718      	adds	r7, #24
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b086      	sub	sp, #24
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	607a      	str	r2, [r7, #4]
 8006e30:	603b      	str	r3, [r7, #0]
 8006e32:	4603      	mov	r3, r0
 8006e34:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 8006e3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	6879      	ldr	r1, [r7, #4]
 8006e42:	68b8      	ldr	r0, [r7, #8]
 8006e44:	f7ff feec 	bl	8006c20 <BSP_SD_WriteBlocks>
 8006e48:	4603      	mov	r3, r0
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d107      	bne.n	8006e5e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 8006e4e:	bf00      	nop
 8006e50:	f7ff ff04 	bl	8006c5c <BSP_SD_GetCardState>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d1fa      	bne.n	8006e50 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8006e5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e60:	4618      	mov	r0, r3
 8006e62:	3718      	adds	r7, #24
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}

08006e68 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08c      	sub	sp, #48	; 0x30
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	4603      	mov	r3, r0
 8006e70:	603a      	str	r2, [r7, #0]
 8006e72:	71fb      	strb	r3, [r7, #7]
 8006e74:	460b      	mov	r3, r1
 8006e76:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8006e7e:	4b25      	ldr	r3, [pc, #148]	; (8006f14 <SD_ioctl+0xac>)
 8006e80:	781b      	ldrb	r3, [r3, #0]
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	f003 0301 	and.w	r3, r3, #1
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d001      	beq.n	8006e90 <SD_ioctl+0x28>
 8006e8c:	2303      	movs	r3, #3
 8006e8e:	e03c      	b.n	8006f0a <SD_ioctl+0xa2>

  switch (cmd)
 8006e90:	79bb      	ldrb	r3, [r7, #6]
 8006e92:	2b03      	cmp	r3, #3
 8006e94:	d834      	bhi.n	8006f00 <SD_ioctl+0x98>
 8006e96:	a201      	add	r2, pc, #4	; (adr r2, 8006e9c <SD_ioctl+0x34>)
 8006e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e9c:	08006ead 	.word	0x08006ead
 8006ea0:	08006eb5 	.word	0x08006eb5
 8006ea4:	08006ecd 	.word	0x08006ecd
 8006ea8:	08006ee7 	.word	0x08006ee7
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8006eac:	2300      	movs	r3, #0
 8006eae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006eb2:	e028      	b.n	8006f06 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8006eb4:	f107 030c 	add.w	r3, r7, #12
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7ff fedf 	bl	8006c7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8006ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006eca:	e01c      	b.n	8006f06 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006ecc:	f107 030c 	add.w	r3, r7, #12
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	f7ff fed3 	bl	8006c7c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8006ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8006ede:	2300      	movs	r3, #0
 8006ee0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006ee4:	e00f      	b.n	8006f06 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8006ee6:	f107 030c 	add.w	r3, r7, #12
 8006eea:	4618      	mov	r0, r3
 8006eec:	f7ff fec6 	bl	8006c7c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8006ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ef2:	0a5a      	lsrs	r2, r3, #9
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8006ef8:	2300      	movs	r3, #0
 8006efa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8006efe:	e002      	b.n	8006f06 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8006f00:	2304      	movs	r3, #4
 8006f02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8006f06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3730      	adds	r7, #48	; 0x30
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	bd80      	pop	{r7, pc}
 8006f12:	bf00      	nop
 8006f14:	20000009 	.word	0x20000009

08006f18 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8006f22:	79fb      	ldrb	r3, [r7, #7]
 8006f24:	4a08      	ldr	r2, [pc, #32]	; (8006f48 <disk_status+0x30>)
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	4413      	add	r3, r2
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	685b      	ldr	r3, [r3, #4]
 8006f2e:	79fa      	ldrb	r2, [r7, #7]
 8006f30:	4905      	ldr	r1, [pc, #20]	; (8006f48 <disk_status+0x30>)
 8006f32:	440a      	add	r2, r1
 8006f34:	7a12      	ldrb	r2, [r2, #8]
 8006f36:	4610      	mov	r0, r2
 8006f38:	4798      	blx	r3
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3710      	adds	r7, #16
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	20000050 	.word	0x20000050

08006f4c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	4603      	mov	r3, r0
 8006f54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8006f56:	2300      	movs	r3, #0
 8006f58:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8006f5a:	79fb      	ldrb	r3, [r7, #7]
 8006f5c:	4a0d      	ldr	r2, [pc, #52]	; (8006f94 <disk_initialize+0x48>)
 8006f5e:	5cd3      	ldrb	r3, [r2, r3]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d111      	bne.n	8006f88 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8006f64:	79fb      	ldrb	r3, [r7, #7]
 8006f66:	4a0b      	ldr	r2, [pc, #44]	; (8006f94 <disk_initialize+0x48>)
 8006f68:	2101      	movs	r1, #1
 8006f6a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8006f6c:	79fb      	ldrb	r3, [r7, #7]
 8006f6e:	4a09      	ldr	r2, [pc, #36]	; (8006f94 <disk_initialize+0x48>)
 8006f70:	009b      	lsls	r3, r3, #2
 8006f72:	4413      	add	r3, r2
 8006f74:	685b      	ldr	r3, [r3, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	79fa      	ldrb	r2, [r7, #7]
 8006f7a:	4906      	ldr	r1, [pc, #24]	; (8006f94 <disk_initialize+0x48>)
 8006f7c:	440a      	add	r2, r1
 8006f7e:	7a12      	ldrb	r2, [r2, #8]
 8006f80:	4610      	mov	r0, r2
 8006f82:	4798      	blx	r3
 8006f84:	4603      	mov	r3, r0
 8006f86:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8006f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3710      	adds	r7, #16
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20000050 	.word	0x20000050

08006f98 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8006f98:	b590      	push	{r4, r7, lr}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60b9      	str	r1, [r7, #8]
 8006fa0:	607a      	str	r2, [r7, #4]
 8006fa2:	603b      	str	r3, [r7, #0]
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	4a0a      	ldr	r2, [pc, #40]	; (8006fd4 <disk_read+0x3c>)
 8006fac:	009b      	lsls	r3, r3, #2
 8006fae:	4413      	add	r3, r2
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	689c      	ldr	r4, [r3, #8]
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
 8006fb6:	4a07      	ldr	r2, [pc, #28]	; (8006fd4 <disk_read+0x3c>)
 8006fb8:	4413      	add	r3, r2
 8006fba:	7a18      	ldrb	r0, [r3, #8]
 8006fbc:	683b      	ldr	r3, [r7, #0]
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	68b9      	ldr	r1, [r7, #8]
 8006fc2:	47a0      	blx	r4
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	75fb      	strb	r3, [r7, #23]
  return res;
 8006fc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd90      	pop	{r4, r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	20000050 	.word	0x20000050

08006fd8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8006fd8:	b590      	push	{r4, r7, lr}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60b9      	str	r1, [r7, #8]
 8006fe0:	607a      	str	r2, [r7, #4]
 8006fe2:	603b      	str	r3, [r7, #0]
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
 8006fea:	4a0a      	ldr	r2, [pc, #40]	; (8007014 <disk_write+0x3c>)
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	68dc      	ldr	r4, [r3, #12]
 8006ff4:	7bfb      	ldrb	r3, [r7, #15]
 8006ff6:	4a07      	ldr	r2, [pc, #28]	; (8007014 <disk_write+0x3c>)
 8006ff8:	4413      	add	r3, r2
 8006ffa:	7a18      	ldrb	r0, [r3, #8]
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	687a      	ldr	r2, [r7, #4]
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	47a0      	blx	r4
 8007004:	4603      	mov	r3, r0
 8007006:	75fb      	strb	r3, [r7, #23]
  return res;
 8007008:	7dfb      	ldrb	r3, [r7, #23]
}
 800700a:	4618      	mov	r0, r3
 800700c:	371c      	adds	r7, #28
 800700e:	46bd      	mov	sp, r7
 8007010:	bd90      	pop	{r4, r7, pc}
 8007012:	bf00      	nop
 8007014:	20000050 	.word	0x20000050

08007018 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b084      	sub	sp, #16
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	603a      	str	r2, [r7, #0]
 8007022:	71fb      	strb	r3, [r7, #7]
 8007024:	460b      	mov	r3, r1
 8007026:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8007028:	79fb      	ldrb	r3, [r7, #7]
 800702a:	4a09      	ldr	r2, [pc, #36]	; (8007050 <disk_ioctl+0x38>)
 800702c:	009b      	lsls	r3, r3, #2
 800702e:	4413      	add	r3, r2
 8007030:	685b      	ldr	r3, [r3, #4]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	79fa      	ldrb	r2, [r7, #7]
 8007036:	4906      	ldr	r1, [pc, #24]	; (8007050 <disk_ioctl+0x38>)
 8007038:	440a      	add	r2, r1
 800703a:	7a10      	ldrb	r0, [r2, #8]
 800703c:	79b9      	ldrb	r1, [r7, #6]
 800703e:	683a      	ldr	r2, [r7, #0]
 8007040:	4798      	blx	r3
 8007042:	4603      	mov	r3, r0
 8007044:	73fb      	strb	r3, [r7, #15]
  return res;
 8007046:	7bfb      	ldrb	r3, [r7, #15]
}
 8007048:	4618      	mov	r0, r3
 800704a:	3710      	adds	r7, #16
 800704c:	46bd      	mov	sp, r7
 800704e:	bd80      	pop	{r7, pc}
 8007050:	20000050 	.word	0x20000050

08007054 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8007054:	b480      	push	{r7}
 8007056:	b085      	sub	sp, #20
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	3301      	adds	r3, #1
 8007060:	781b      	ldrb	r3, [r3, #0]
 8007062:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8007064:	89fb      	ldrh	r3, [r7, #14]
 8007066:	021b      	lsls	r3, r3, #8
 8007068:	b21a      	sxth	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	b21b      	sxth	r3, r3
 8007070:	4313      	orrs	r3, r2
 8007072:	b21b      	sxth	r3, r3
 8007074:	81fb      	strh	r3, [r7, #14]
	return rv;
 8007076:	89fb      	ldrh	r3, [r7, #14]
}
 8007078:	4618      	mov	r0, r3
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	3303      	adds	r3, #3
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	021b      	lsls	r3, r3, #8
 8007098:	687a      	ldr	r2, [r7, #4]
 800709a:	3202      	adds	r2, #2
 800709c:	7812      	ldrb	r2, [r2, #0]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	021b      	lsls	r3, r3, #8
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	3201      	adds	r2, #1
 80070aa:	7812      	ldrb	r2, [r2, #0]
 80070ac:	4313      	orrs	r3, r2
 80070ae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	021b      	lsls	r3, r3, #8
 80070b4:	687a      	ldr	r2, [r7, #4]
 80070b6:	7812      	ldrb	r2, [r2, #0]
 80070b8:	4313      	orrs	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]
	return rv;
 80070bc:	68fb      	ldr	r3, [r7, #12]
}
 80070be:	4618      	mov	r0, r3
 80070c0:	3714      	adds	r7, #20
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr

080070ca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 80070ca:	b480      	push	{r7}
 80070cc:	b083      	sub	sp, #12
 80070ce:	af00      	add	r7, sp, #0
 80070d0:	6078      	str	r0, [r7, #4]
 80070d2:	460b      	mov	r3, r1
 80070d4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	1c5a      	adds	r2, r3, #1
 80070da:	607a      	str	r2, [r7, #4]
 80070dc:	887a      	ldrh	r2, [r7, #2]
 80070de:	b2d2      	uxtb	r2, r2
 80070e0:	701a      	strb	r2, [r3, #0]
 80070e2:	887b      	ldrh	r3, [r7, #2]
 80070e4:	0a1b      	lsrs	r3, r3, #8
 80070e6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	1c5a      	adds	r2, r3, #1
 80070ec:	607a      	str	r2, [r7, #4]
 80070ee:	887a      	ldrh	r2, [r7, #2]
 80070f0:	b2d2      	uxtb	r2, r2
 80070f2:	701a      	strb	r2, [r3, #0]
}
 80070f4:	bf00      	nop
 80070f6:	370c      	adds	r7, #12
 80070f8:	46bd      	mov	sp, r7
 80070fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fe:	4770      	bx	lr

08007100 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
 8007108:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	1c5a      	adds	r2, r3, #1
 800710e:	607a      	str	r2, [r7, #4]
 8007110:	683a      	ldr	r2, [r7, #0]
 8007112:	b2d2      	uxtb	r2, r2
 8007114:	701a      	strb	r2, [r3, #0]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	0a1b      	lsrs	r3, r3, #8
 800711a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	1c5a      	adds	r2, r3, #1
 8007120:	607a      	str	r2, [r7, #4]
 8007122:	683a      	ldr	r2, [r7, #0]
 8007124:	b2d2      	uxtb	r2, r2
 8007126:	701a      	strb	r2, [r3, #0]
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	0a1b      	lsrs	r3, r3, #8
 800712c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	1c5a      	adds	r2, r3, #1
 8007132:	607a      	str	r2, [r7, #4]
 8007134:	683a      	ldr	r2, [r7, #0]
 8007136:	b2d2      	uxtb	r2, r2
 8007138:	701a      	strb	r2, [r3, #0]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	0a1b      	lsrs	r3, r3, #8
 800713e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	1c5a      	adds	r2, r3, #1
 8007144:	607a      	str	r2, [r7, #4]
 8007146:	683a      	ldr	r2, [r7, #0]
 8007148:	b2d2      	uxtb	r2, r2
 800714a:	701a      	strb	r2, [r3, #0]
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8007158:	b480      	push	{r7}
 800715a:	b087      	sub	sp, #28
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d00d      	beq.n	800718e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8007172:	693a      	ldr	r2, [r7, #16]
 8007174:	1c53      	adds	r3, r2, #1
 8007176:	613b      	str	r3, [r7, #16]
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	1c59      	adds	r1, r3, #1
 800717c:	6179      	str	r1, [r7, #20]
 800717e:	7812      	ldrb	r2, [r2, #0]
 8007180:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3b01      	subs	r3, #1
 8007186:	607b      	str	r3, [r7, #4]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1f1      	bne.n	8007172 <mem_cpy+0x1a>
	}
}
 800718e:	bf00      	nop
 8007190:	371c      	adds	r7, #28
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr

0800719a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800719a:	b480      	push	{r7}
 800719c:	b087      	sub	sp, #28
 800719e:	af00      	add	r7, sp, #0
 80071a0:	60f8      	str	r0, [r7, #12]
 80071a2:	60b9      	str	r1, [r7, #8]
 80071a4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	1c5a      	adds	r2, r3, #1
 80071ae:	617a      	str	r2, [r7, #20]
 80071b0:	68ba      	ldr	r2, [r7, #8]
 80071b2:	b2d2      	uxtb	r2, r2
 80071b4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	3b01      	subs	r3, #1
 80071ba:	607b      	str	r3, [r7, #4]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1f3      	bne.n	80071aa <mem_set+0x10>
}
 80071c2:	bf00      	nop
 80071c4:	bf00      	nop
 80071c6:	371c      	adds	r7, #28
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr

080071d0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80071d0:	b480      	push	{r7}
 80071d2:	b089      	sub	sp, #36	; 0x24
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	60f8      	str	r0, [r7, #12]
 80071d8:	60b9      	str	r1, [r7, #8]
 80071da:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	61fb      	str	r3, [r7, #28]
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80071e4:	2300      	movs	r3, #0
 80071e6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	1c5a      	adds	r2, r3, #1
 80071ec:	61fa      	str	r2, [r7, #28]
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	4619      	mov	r1, r3
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	61ba      	str	r2, [r7, #24]
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	1acb      	subs	r3, r1, r3
 80071fc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	3b01      	subs	r3, #1
 8007202:	607b      	str	r3, [r7, #4]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <mem_cmp+0x40>
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0eb      	beq.n	80071e8 <mem_cmp+0x18>

	return r;
 8007210:	697b      	ldr	r3, [r7, #20]
}
 8007212:	4618      	mov	r0, r3
 8007214:	3724      	adds	r7, #36	; 0x24
 8007216:	46bd      	mov	sp, r7
 8007218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721c:	4770      	bx	lr

0800721e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800721e:	b480      	push	{r7}
 8007220:	b083      	sub	sp, #12
 8007222:	af00      	add	r7, sp, #0
 8007224:	6078      	str	r0, [r7, #4]
 8007226:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8007228:	e002      	b.n	8007230 <chk_chr+0x12>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	3301      	adds	r3, #1
 800722e:	607b      	str	r3, [r7, #4]
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d005      	beq.n	8007244 <chk_chr+0x26>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	781b      	ldrb	r3, [r3, #0]
 800723c:	461a      	mov	r2, r3
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	4293      	cmp	r3, r2
 8007242:	d1f2      	bne.n	800722a <chk_chr+0xc>
	return *str;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	781b      	ldrb	r3, [r3, #0]
}
 8007248:	4618      	mov	r0, r3
 800724a:	370c      	adds	r7, #12
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr

08007254 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007254:	b480      	push	{r7}
 8007256:	b085      	sub	sp, #20
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800725e:	2300      	movs	r3, #0
 8007260:	60bb      	str	r3, [r7, #8]
 8007262:	68bb      	ldr	r3, [r7, #8]
 8007264:	60fb      	str	r3, [r7, #12]
 8007266:	e029      	b.n	80072bc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8007268:	4a27      	ldr	r2, [pc, #156]	; (8007308 <chk_lock+0xb4>)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	011b      	lsls	r3, r3, #4
 800726e:	4413      	add	r3, r2
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d01d      	beq.n	80072b2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007276:	4a24      	ldr	r2, [pc, #144]	; (8007308 <chk_lock+0xb4>)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	4413      	add	r3, r2
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	429a      	cmp	r2, r3
 8007286:	d116      	bne.n	80072b6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8007288:	4a1f      	ldr	r2, [pc, #124]	; (8007308 <chk_lock+0xb4>)
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	011b      	lsls	r3, r3, #4
 800728e:	4413      	add	r3, r2
 8007290:	3304      	adds	r3, #4
 8007292:	681a      	ldr	r2, [r3, #0]
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8007298:	429a      	cmp	r2, r3
 800729a:	d10c      	bne.n	80072b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800729c:	4a1a      	ldr	r2, [pc, #104]	; (8007308 <chk_lock+0xb4>)
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	011b      	lsls	r3, r3, #4
 80072a2:	4413      	add	r3, r2
 80072a4:	3308      	adds	r3, #8
 80072a6:	681a      	ldr	r2, [r3, #0]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80072ac:	429a      	cmp	r2, r3
 80072ae:	d102      	bne.n	80072b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80072b0:	e007      	b.n	80072c2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80072b2:	2301      	movs	r3, #1
 80072b4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3301      	adds	r3, #1
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d9d2      	bls.n	8007268 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2b02      	cmp	r3, #2
 80072c6:	d109      	bne.n	80072dc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d102      	bne.n	80072d4 <chk_lock+0x80>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	2b02      	cmp	r3, #2
 80072d2:	d101      	bne.n	80072d8 <chk_lock+0x84>
 80072d4:	2300      	movs	r3, #0
 80072d6:	e010      	b.n	80072fa <chk_lock+0xa6>
 80072d8:	2312      	movs	r3, #18
 80072da:	e00e      	b.n	80072fa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d108      	bne.n	80072f4 <chk_lock+0xa0>
 80072e2:	4a09      	ldr	r2, [pc, #36]	; (8007308 <chk_lock+0xb4>)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	011b      	lsls	r3, r3, #4
 80072e8:	4413      	add	r3, r2
 80072ea:	330c      	adds	r3, #12
 80072ec:	881b      	ldrh	r3, [r3, #0]
 80072ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072f2:	d101      	bne.n	80072f8 <chk_lock+0xa4>
 80072f4:	2310      	movs	r3, #16
 80072f6:	e000      	b.n	80072fa <chk_lock+0xa6>
 80072f8:	2300      	movs	r3, #0
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3714      	adds	r7, #20
 80072fe:	46bd      	mov	sp, r7
 8007300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007304:	4770      	bx	lr
 8007306:	bf00      	nop
 8007308:	20000030 	.word	0x20000030

0800730c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8007312:	2300      	movs	r3, #0
 8007314:	607b      	str	r3, [r7, #4]
 8007316:	e002      	b.n	800731e <enq_lock+0x12>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	3301      	adds	r3, #1
 800731c:	607b      	str	r3, [r7, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2b01      	cmp	r3, #1
 8007322:	d806      	bhi.n	8007332 <enq_lock+0x26>
 8007324:	4a09      	ldr	r2, [pc, #36]	; (800734c <enq_lock+0x40>)
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	011b      	lsls	r3, r3, #4
 800732a:	4413      	add	r3, r2
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d1f2      	bne.n	8007318 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2b02      	cmp	r3, #2
 8007336:	bf14      	ite	ne
 8007338:	2301      	movne	r3, #1
 800733a:	2300      	moveq	r3, #0
 800733c:	b2db      	uxtb	r3, r3
}
 800733e:	4618      	mov	r0, r3
 8007340:	370c      	adds	r7, #12
 8007342:	46bd      	mov	sp, r7
 8007344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007348:	4770      	bx	lr
 800734a:	bf00      	nop
 800734c:	20000030 	.word	0x20000030

08007350 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800735a:	2300      	movs	r3, #0
 800735c:	60fb      	str	r3, [r7, #12]
 800735e:	e01f      	b.n	80073a0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8007360:	4a41      	ldr	r2, [pc, #260]	; (8007468 <inc_lock+0x118>)
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	011b      	lsls	r3, r3, #4
 8007366:	4413      	add	r3, r2
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	429a      	cmp	r2, r3
 8007370:	d113      	bne.n	800739a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8007372:	4a3d      	ldr	r2, [pc, #244]	; (8007468 <inc_lock+0x118>)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	011b      	lsls	r3, r3, #4
 8007378:	4413      	add	r3, r2
 800737a:	3304      	adds	r3, #4
 800737c:	681a      	ldr	r2, [r3, #0]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8007382:	429a      	cmp	r2, r3
 8007384:	d109      	bne.n	800739a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8007386:	4a38      	ldr	r2, [pc, #224]	; (8007468 <inc_lock+0x118>)
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	011b      	lsls	r3, r3, #4
 800738c:	4413      	add	r3, r2
 800738e:	3308      	adds	r3, #8
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8007396:	429a      	cmp	r2, r3
 8007398:	d006      	beq.n	80073a8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3301      	adds	r3, #1
 800739e:	60fb      	str	r3, [r7, #12]
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2b01      	cmp	r3, #1
 80073a4:	d9dc      	bls.n	8007360 <inc_lock+0x10>
 80073a6:	e000      	b.n	80073aa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80073a8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	2b02      	cmp	r3, #2
 80073ae:	d132      	bne.n	8007416 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80073b0:	2300      	movs	r3, #0
 80073b2:	60fb      	str	r3, [r7, #12]
 80073b4:	e002      	b.n	80073bc <inc_lock+0x6c>
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3301      	adds	r3, #1
 80073ba:	60fb      	str	r3, [r7, #12]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d806      	bhi.n	80073d0 <inc_lock+0x80>
 80073c2:	4a29      	ldr	r2, [pc, #164]	; (8007468 <inc_lock+0x118>)
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	011b      	lsls	r3, r3, #4
 80073c8:	4413      	add	r3, r2
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d1f2      	bne.n	80073b6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2b02      	cmp	r3, #2
 80073d4:	d101      	bne.n	80073da <inc_lock+0x8a>
 80073d6:	2300      	movs	r3, #0
 80073d8:	e040      	b.n	800745c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	4922      	ldr	r1, [pc, #136]	; (8007468 <inc_lock+0x118>)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	011b      	lsls	r3, r3, #4
 80073e4:	440b      	add	r3, r1
 80073e6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	689a      	ldr	r2, [r3, #8]
 80073ec:	491e      	ldr	r1, [pc, #120]	; (8007468 <inc_lock+0x118>)
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	011b      	lsls	r3, r3, #4
 80073f2:	440b      	add	r3, r1
 80073f4:	3304      	adds	r3, #4
 80073f6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	695a      	ldr	r2, [r3, #20]
 80073fc:	491a      	ldr	r1, [pc, #104]	; (8007468 <inc_lock+0x118>)
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	011b      	lsls	r3, r3, #4
 8007402:	440b      	add	r3, r1
 8007404:	3308      	adds	r3, #8
 8007406:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8007408:	4a17      	ldr	r2, [pc, #92]	; (8007468 <inc_lock+0x118>)
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	011b      	lsls	r3, r3, #4
 800740e:	4413      	add	r3, r2
 8007410:	330c      	adds	r3, #12
 8007412:	2200      	movs	r2, #0
 8007414:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d009      	beq.n	8007430 <inc_lock+0xe0>
 800741c:	4a12      	ldr	r2, [pc, #72]	; (8007468 <inc_lock+0x118>)
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	011b      	lsls	r3, r3, #4
 8007422:	4413      	add	r3, r2
 8007424:	330c      	adds	r3, #12
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d001      	beq.n	8007430 <inc_lock+0xe0>
 800742c:	2300      	movs	r3, #0
 800742e:	e015      	b.n	800745c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d108      	bne.n	8007448 <inc_lock+0xf8>
 8007436:	4a0c      	ldr	r2, [pc, #48]	; (8007468 <inc_lock+0x118>)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	011b      	lsls	r3, r3, #4
 800743c:	4413      	add	r3, r2
 800743e:	330c      	adds	r3, #12
 8007440:	881b      	ldrh	r3, [r3, #0]
 8007442:	3301      	adds	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	e001      	b.n	800744c <inc_lock+0xfc>
 8007448:	f44f 7280 	mov.w	r2, #256	; 0x100
 800744c:	4906      	ldr	r1, [pc, #24]	; (8007468 <inc_lock+0x118>)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	011b      	lsls	r3, r3, #4
 8007452:	440b      	add	r3, r1
 8007454:	330c      	adds	r3, #12
 8007456:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3301      	adds	r3, #1
}
 800745c:	4618      	mov	r0, r3
 800745e:	3714      	adds	r7, #20
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr
 8007468:	20000030 	.word	0x20000030

0800746c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800746c:	b480      	push	{r7}
 800746e:	b085      	sub	sp, #20
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	3b01      	subs	r3, #1
 8007478:	607b      	str	r3, [r7, #4]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2b01      	cmp	r3, #1
 800747e:	d825      	bhi.n	80074cc <dec_lock+0x60>
		n = Files[i].ctr;
 8007480:	4a17      	ldr	r2, [pc, #92]	; (80074e0 <dec_lock+0x74>)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	011b      	lsls	r3, r3, #4
 8007486:	4413      	add	r3, r2
 8007488:	330c      	adds	r3, #12
 800748a:	881b      	ldrh	r3, [r3, #0]
 800748c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800748e:	89fb      	ldrh	r3, [r7, #14]
 8007490:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007494:	d101      	bne.n	800749a <dec_lock+0x2e>
 8007496:	2300      	movs	r3, #0
 8007498:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800749a:	89fb      	ldrh	r3, [r7, #14]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d002      	beq.n	80074a6 <dec_lock+0x3a>
 80074a0:	89fb      	ldrh	r3, [r7, #14]
 80074a2:	3b01      	subs	r3, #1
 80074a4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80074a6:	4a0e      	ldr	r2, [pc, #56]	; (80074e0 <dec_lock+0x74>)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	011b      	lsls	r3, r3, #4
 80074ac:	4413      	add	r3, r2
 80074ae:	330c      	adds	r3, #12
 80074b0:	89fa      	ldrh	r2, [r7, #14]
 80074b2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80074b4:	89fb      	ldrh	r3, [r7, #14]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d105      	bne.n	80074c6 <dec_lock+0x5a>
 80074ba:	4a09      	ldr	r2, [pc, #36]	; (80074e0 <dec_lock+0x74>)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	011b      	lsls	r3, r3, #4
 80074c0:	4413      	add	r3, r2
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80074c6:	2300      	movs	r3, #0
 80074c8:	737b      	strb	r3, [r7, #13]
 80074ca:	e001      	b.n	80074d0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80074cc:	2302      	movs	r3, #2
 80074ce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80074d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3714      	adds	r7, #20
 80074d6:	46bd      	mov	sp, r7
 80074d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074dc:	4770      	bx	lr
 80074de:	bf00      	nop
 80074e0:	20000030 	.word	0x20000030

080074e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b085      	sub	sp, #20
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80074ec:	2300      	movs	r3, #0
 80074ee:	60fb      	str	r3, [r7, #12]
 80074f0:	e010      	b.n	8007514 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80074f2:	4a0d      	ldr	r2, [pc, #52]	; (8007528 <clear_lock+0x44>)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	011b      	lsls	r3, r3, #4
 80074f8:	4413      	add	r3, r2
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	429a      	cmp	r2, r3
 8007500:	d105      	bne.n	800750e <clear_lock+0x2a>
 8007502:	4a09      	ldr	r2, [pc, #36]	; (8007528 <clear_lock+0x44>)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	011b      	lsls	r3, r3, #4
 8007508:	4413      	add	r3, r2
 800750a:	2200      	movs	r2, #0
 800750c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	3301      	adds	r3, #1
 8007512:	60fb      	str	r3, [r7, #12]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2b01      	cmp	r3, #1
 8007518:	d9eb      	bls.n	80074f2 <clear_lock+0xe>
	}
}
 800751a:	bf00      	nop
 800751c:	bf00      	nop
 800751e:	3714      	adds	r7, #20
 8007520:	46bd      	mov	sp, r7
 8007522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007526:	4770      	bx	lr
 8007528:	20000030 	.word	0x20000030

0800752c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b086      	sub	sp, #24
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	78db      	ldrb	r3, [r3, #3]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d034      	beq.n	80075aa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007544:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	7858      	ldrb	r0, [r3, #1]
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007550:	2301      	movs	r3, #1
 8007552:	697a      	ldr	r2, [r7, #20]
 8007554:	f7ff fd40 	bl	8006fd8 <disk_write>
 8007558:	4603      	mov	r3, r0
 800755a:	2b00      	cmp	r3, #0
 800755c:	d002      	beq.n	8007564 <sync_window+0x38>
			res = FR_DISK_ERR;
 800755e:	2301      	movs	r3, #1
 8007560:	73fb      	strb	r3, [r7, #15]
 8007562:	e022      	b.n	80075aa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2200      	movs	r2, #0
 8007568:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	697a      	ldr	r2, [r7, #20]
 8007570:	1ad2      	subs	r2, r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	699b      	ldr	r3, [r3, #24]
 8007576:	429a      	cmp	r2, r3
 8007578:	d217      	bcs.n	80075aa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	789b      	ldrb	r3, [r3, #2]
 800757e:	613b      	str	r3, [r7, #16]
 8007580:	e010      	b.n	80075a4 <sync_window+0x78>
					wsect += fs->fsize;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	697a      	ldr	r2, [r7, #20]
 8007588:	4413      	add	r3, r2
 800758a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	7858      	ldrb	r0, [r3, #1]
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007596:	2301      	movs	r3, #1
 8007598:	697a      	ldr	r2, [r7, #20]
 800759a:	f7ff fd1d 	bl	8006fd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800759e:	693b      	ldr	r3, [r7, #16]
 80075a0:	3b01      	subs	r3, #1
 80075a2:	613b      	str	r3, [r7, #16]
 80075a4:	693b      	ldr	r3, [r7, #16]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d8eb      	bhi.n	8007582 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80075aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3718      	adds	r7, #24
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}

080075b4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b084      	sub	sp, #16
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
 80075bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80075be:	2300      	movs	r3, #0
 80075c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075c6:	683a      	ldr	r2, [r7, #0]
 80075c8:	429a      	cmp	r2, r3
 80075ca:	d01b      	beq.n	8007604 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f7ff ffad 	bl	800752c <sync_window>
 80075d2:	4603      	mov	r3, r0
 80075d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80075d6:	7bfb      	ldrb	r3, [r7, #15]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d113      	bne.n	8007604 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	7858      	ldrb	r0, [r3, #1]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80075e6:	2301      	movs	r3, #1
 80075e8:	683a      	ldr	r2, [r7, #0]
 80075ea:	f7ff fcd5 	bl	8006f98 <disk_read>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d004      	beq.n	80075fe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80075f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80075fa:	2301      	movs	r3, #1
 80075fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8007604:	7bfb      	ldrb	r3, [r7, #15]
}
 8007606:	4618      	mov	r0, r3
 8007608:	3710      	adds	r7, #16
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
	...

08007610 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff ff87 	bl	800752c <sync_window>
 800761e:	4603      	mov	r3, r0
 8007620:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8007622:	7bfb      	ldrb	r3, [r7, #15]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d158      	bne.n	80076da <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	781b      	ldrb	r3, [r3, #0]
 800762c:	2b03      	cmp	r3, #3
 800762e:	d148      	bne.n	80076c2 <sync_fs+0xb2>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	791b      	ldrb	r3, [r3, #4]
 8007634:	2b01      	cmp	r3, #1
 8007636:	d144      	bne.n	80076c2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	3330      	adds	r3, #48	; 0x30
 800763c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007640:	2100      	movs	r1, #0
 8007642:	4618      	mov	r0, r3
 8007644:	f7ff fda9 	bl	800719a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	3330      	adds	r3, #48	; 0x30
 800764c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007650:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8007654:	4618      	mov	r0, r3
 8007656:	f7ff fd38 	bl	80070ca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	3330      	adds	r3, #48	; 0x30
 800765e:	4921      	ldr	r1, [pc, #132]	; (80076e4 <sync_fs+0xd4>)
 8007660:	4618      	mov	r0, r3
 8007662:	f7ff fd4d 	bl	8007100 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	3330      	adds	r3, #48	; 0x30
 800766a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800766e:	491e      	ldr	r1, [pc, #120]	; (80076e8 <sync_fs+0xd8>)
 8007670:	4618      	mov	r0, r3
 8007672:	f7ff fd45 	bl	8007100 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	3330      	adds	r3, #48	; 0x30
 800767a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	4619      	mov	r1, r3
 8007684:	4610      	mov	r0, r2
 8007686:	f7ff fd3b 	bl	8007100 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	3330      	adds	r3, #48	; 0x30
 800768e:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	68db      	ldr	r3, [r3, #12]
 8007696:	4619      	mov	r1, r3
 8007698:	4610      	mov	r0, r2
 800769a:	f7ff fd31 	bl	8007100 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	69db      	ldr	r3, [r3, #28]
 80076a2:	1c5a      	adds	r2, r3, #1
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	7858      	ldrb	r0, [r3, #1]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b6:	2301      	movs	r3, #1
 80076b8:	f7ff fc8e 	bl	8006fd8 <disk_write>
			fs->fsi_flag = 0;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	785b      	ldrb	r3, [r3, #1]
 80076c6:	2200      	movs	r2, #0
 80076c8:	2100      	movs	r1, #0
 80076ca:	4618      	mov	r0, r3
 80076cc:	f7ff fca4 	bl	8007018 <disk_ioctl>
 80076d0:	4603      	mov	r3, r0
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d001      	beq.n	80076da <sync_fs+0xca>
 80076d6:	2301      	movs	r3, #1
 80076d8:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80076da:	7bfb      	ldrb	r3, [r7, #15]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	41615252 	.word	0x41615252
 80076e8:	61417272 	.word	0x61417272

080076ec <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	3b02      	subs	r3, #2
 80076fa:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	3b02      	subs	r3, #2
 8007702:	683a      	ldr	r2, [r7, #0]
 8007704:	429a      	cmp	r2, r3
 8007706:	d301      	bcc.n	800770c <clust2sect+0x20>
 8007708:	2300      	movs	r3, #0
 800770a:	e008      	b.n	800771e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	895b      	ldrh	r3, [r3, #10]
 8007710:	461a      	mov	r2, r3
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	fb03 f202 	mul.w	r2, r3, r2
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800771c:	4413      	add	r3, r2
}
 800771e:	4618      	mov	r0, r3
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr

0800772a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800772a:	b580      	push	{r7, lr}
 800772c:	b086      	sub	sp, #24
 800772e:	af00      	add	r7, sp, #0
 8007730:	6078      	str	r0, [r7, #4]
 8007732:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	2b01      	cmp	r3, #1
 800773e:	d904      	bls.n	800774a <get_fat+0x20>
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	683a      	ldr	r2, [r7, #0]
 8007746:	429a      	cmp	r2, r3
 8007748:	d302      	bcc.n	8007750 <get_fat+0x26>
		val = 1;	/* Internal error */
 800774a:	2301      	movs	r3, #1
 800774c:	617b      	str	r3, [r7, #20]
 800774e:	e08f      	b.n	8007870 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8007750:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007754:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	781b      	ldrb	r3, [r3, #0]
 800775a:	2b03      	cmp	r3, #3
 800775c:	d062      	beq.n	8007824 <get_fat+0xfa>
 800775e:	2b03      	cmp	r3, #3
 8007760:	dc7c      	bgt.n	800785c <get_fat+0x132>
 8007762:	2b01      	cmp	r3, #1
 8007764:	d002      	beq.n	800776c <get_fat+0x42>
 8007766:	2b02      	cmp	r3, #2
 8007768:	d042      	beq.n	80077f0 <get_fat+0xc6>
 800776a:	e077      	b.n	800785c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	60fb      	str	r3, [r7, #12]
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	085b      	lsrs	r3, r3, #1
 8007774:	68fa      	ldr	r2, [r7, #12]
 8007776:	4413      	add	r3, r2
 8007778:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800777a:	693b      	ldr	r3, [r7, #16]
 800777c:	6a1a      	ldr	r2, [r3, #32]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	0a5b      	lsrs	r3, r3, #9
 8007782:	4413      	add	r3, r2
 8007784:	4619      	mov	r1, r3
 8007786:	6938      	ldr	r0, [r7, #16]
 8007788:	f7ff ff14 	bl	80075b4 <move_window>
 800778c:	4603      	mov	r3, r0
 800778e:	2b00      	cmp	r3, #0
 8007790:	d167      	bne.n	8007862 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	1c5a      	adds	r2, r3, #1
 8007796:	60fa      	str	r2, [r7, #12]
 8007798:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800779c:	693a      	ldr	r2, [r7, #16]
 800779e:	4413      	add	r3, r2
 80077a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077a4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	6a1a      	ldr	r2, [r3, #32]
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	0a5b      	lsrs	r3, r3, #9
 80077ae:	4413      	add	r3, r2
 80077b0:	4619      	mov	r1, r3
 80077b2:	6938      	ldr	r0, [r7, #16]
 80077b4:	f7ff fefe 	bl	80075b4 <move_window>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d153      	bne.n	8007866 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077c4:	693a      	ldr	r2, [r7, #16]
 80077c6:	4413      	add	r3, r2
 80077c8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80077cc:	021b      	lsls	r3, r3, #8
 80077ce:	461a      	mov	r2, r3
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	4313      	orrs	r3, r2
 80077d4:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	f003 0301 	and.w	r3, r3, #1
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d002      	beq.n	80077e6 <get_fat+0xbc>
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	091b      	lsrs	r3, r3, #4
 80077e4:	e002      	b.n	80077ec <get_fat+0xc2>
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80077ec:	617b      	str	r3, [r7, #20]
			break;
 80077ee:	e03f      	b.n	8007870 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80077f0:	693b      	ldr	r3, [r7, #16]
 80077f2:	6a1a      	ldr	r2, [r3, #32]
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	0a1b      	lsrs	r3, r3, #8
 80077f8:	4413      	add	r3, r2
 80077fa:	4619      	mov	r1, r3
 80077fc:	6938      	ldr	r0, [r7, #16]
 80077fe:	f7ff fed9 	bl	80075b4 <move_window>
 8007802:	4603      	mov	r3, r0
 8007804:	2b00      	cmp	r3, #0
 8007806:	d130      	bne.n	800786a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800780e:	683b      	ldr	r3, [r7, #0]
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8007816:	4413      	add	r3, r2
 8007818:	4618      	mov	r0, r3
 800781a:	f7ff fc1b 	bl	8007054 <ld_word>
 800781e:	4603      	mov	r3, r0
 8007820:	617b      	str	r3, [r7, #20]
			break;
 8007822:	e025      	b.n	8007870 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	6a1a      	ldr	r2, [r3, #32]
 8007828:	683b      	ldr	r3, [r7, #0]
 800782a:	09db      	lsrs	r3, r3, #7
 800782c:	4413      	add	r3, r2
 800782e:	4619      	mov	r1, r3
 8007830:	6938      	ldr	r0, [r7, #16]
 8007832:	f7ff febf 	bl	80075b4 <move_window>
 8007836:	4603      	mov	r3, r0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d118      	bne.n	800786e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800784a:	4413      	add	r3, r2
 800784c:	4618      	mov	r0, r3
 800784e:	f7ff fc19 	bl	8007084 <ld_dword>
 8007852:	4603      	mov	r3, r0
 8007854:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007858:	617b      	str	r3, [r7, #20]
			break;
 800785a:	e009      	b.n	8007870 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800785c:	2301      	movs	r3, #1
 800785e:	617b      	str	r3, [r7, #20]
 8007860:	e006      	b.n	8007870 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007862:	bf00      	nop
 8007864:	e004      	b.n	8007870 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8007866:	bf00      	nop
 8007868:	e002      	b.n	8007870 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800786a:	bf00      	nop
 800786c:	e000      	b.n	8007870 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800786e:	bf00      	nop
		}
	}

	return val;
 8007870:	697b      	ldr	r3, [r7, #20]
}
 8007872:	4618      	mov	r0, r3
 8007874:	3718      	adds	r7, #24
 8007876:	46bd      	mov	sp, r7
 8007878:	bd80      	pop	{r7, pc}

0800787a <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800787a:	b590      	push	{r4, r7, lr}
 800787c:	b089      	sub	sp, #36	; 0x24
 800787e:	af00      	add	r7, sp, #0
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	60b9      	str	r1, [r7, #8]
 8007884:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8007886:	2302      	movs	r3, #2
 8007888:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	2b01      	cmp	r3, #1
 800788e:	f240 80d2 	bls.w	8007a36 <put_fat+0x1bc>
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	695b      	ldr	r3, [r3, #20]
 8007896:	68ba      	ldr	r2, [r7, #8]
 8007898:	429a      	cmp	r2, r3
 800789a:	f080 80cc 	bcs.w	8007a36 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	2b03      	cmp	r3, #3
 80078a4:	f000 8096 	beq.w	80079d4 <put_fat+0x15a>
 80078a8:	2b03      	cmp	r3, #3
 80078aa:	f300 80cd 	bgt.w	8007a48 <put_fat+0x1ce>
 80078ae:	2b01      	cmp	r3, #1
 80078b0:	d002      	beq.n	80078b8 <put_fat+0x3e>
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d06e      	beq.n	8007994 <put_fat+0x11a>
 80078b6:	e0c7      	b.n	8007a48 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	61bb      	str	r3, [r7, #24]
 80078bc:	69bb      	ldr	r3, [r7, #24]
 80078be:	085b      	lsrs	r3, r3, #1
 80078c0:	69ba      	ldr	r2, [r7, #24]
 80078c2:	4413      	add	r3, r2
 80078c4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6a1a      	ldr	r2, [r3, #32]
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	0a5b      	lsrs	r3, r3, #9
 80078ce:	4413      	add	r3, r2
 80078d0:	4619      	mov	r1, r3
 80078d2:	68f8      	ldr	r0, [r7, #12]
 80078d4:	f7ff fe6e 	bl	80075b4 <move_window>
 80078d8:	4603      	mov	r3, r0
 80078da:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80078dc:	7ffb      	ldrb	r3, [r7, #31]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	f040 80ab 	bne.w	8007a3a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	1c59      	adds	r1, r3, #1
 80078ee:	61b9      	str	r1, [r7, #24]
 80078f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078f4:	4413      	add	r3, r2
 80078f6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	f003 0301 	and.w	r3, r3, #1
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d00d      	beq.n	800791e <put_fat+0xa4>
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	b25b      	sxtb	r3, r3
 8007908:	f003 030f 	and.w	r3, r3, #15
 800790c:	b25a      	sxtb	r2, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	011b      	lsls	r3, r3, #4
 8007914:	b25b      	sxtb	r3, r3
 8007916:	4313      	orrs	r3, r2
 8007918:	b25b      	sxtb	r3, r3
 800791a:	b2db      	uxtb	r3, r3
 800791c:	e001      	b.n	8007922 <put_fat+0xa8>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	b2db      	uxtb	r3, r3
 8007922:	697a      	ldr	r2, [r7, #20]
 8007924:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2201      	movs	r2, #1
 800792a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6a1a      	ldr	r2, [r3, #32]
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	0a5b      	lsrs	r3, r3, #9
 8007934:	4413      	add	r3, r2
 8007936:	4619      	mov	r1, r3
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	f7ff fe3b 	bl	80075b4 <move_window>
 800793e:	4603      	mov	r3, r0
 8007940:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8007942:	7ffb      	ldrb	r3, [r7, #31]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d17a      	bne.n	8007a3e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800794e:	69bb      	ldr	r3, [r7, #24]
 8007950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007954:	4413      	add	r3, r2
 8007956:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <put_fat+0xf0>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	091b      	lsrs	r3, r3, #4
 8007966:	b2db      	uxtb	r3, r3
 8007968:	e00e      	b.n	8007988 <put_fat+0x10e>
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	781b      	ldrb	r3, [r3, #0]
 800796e:	b25b      	sxtb	r3, r3
 8007970:	f023 030f 	bic.w	r3, r3, #15
 8007974:	b25a      	sxtb	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	0a1b      	lsrs	r3, r3, #8
 800797a:	b25b      	sxtb	r3, r3
 800797c:	f003 030f 	and.w	r3, r3, #15
 8007980:	b25b      	sxtb	r3, r3
 8007982:	4313      	orrs	r3, r2
 8007984:	b25b      	sxtb	r3, r3
 8007986:	b2db      	uxtb	r3, r3
 8007988:	697a      	ldr	r2, [r7, #20]
 800798a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2201      	movs	r2, #1
 8007990:	70da      	strb	r2, [r3, #3]
			break;
 8007992:	e059      	b.n	8007a48 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6a1a      	ldr	r2, [r3, #32]
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	0a1b      	lsrs	r3, r3, #8
 800799c:	4413      	add	r3, r2
 800799e:	4619      	mov	r1, r3
 80079a0:	68f8      	ldr	r0, [r7, #12]
 80079a2:	f7ff fe07 	bl	80075b4 <move_window>
 80079a6:	4603      	mov	r3, r0
 80079a8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80079aa:	7ffb      	ldrb	r3, [r7, #31]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d148      	bne.n	8007a42 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80079be:	4413      	add	r3, r2
 80079c0:	687a      	ldr	r2, [r7, #4]
 80079c2:	b292      	uxth	r2, r2
 80079c4:	4611      	mov	r1, r2
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff fb7f 	bl	80070ca <st_word>
			fs->wflag = 1;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	2201      	movs	r2, #1
 80079d0:	70da      	strb	r2, [r3, #3]
			break;
 80079d2:	e039      	b.n	8007a48 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6a1a      	ldr	r2, [r3, #32]
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	09db      	lsrs	r3, r3, #7
 80079dc:	4413      	add	r3, r2
 80079de:	4619      	mov	r1, r3
 80079e0:	68f8      	ldr	r0, [r7, #12]
 80079e2:	f7ff fde7 	bl	80075b4 <move_window>
 80079e6:	4603      	mov	r3, r0
 80079e8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80079ea:	7ffb      	ldrb	r3, [r7, #31]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d12a      	bne.n	8007a46 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	009b      	lsls	r3, r3, #2
 8007a00:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007a04:	4413      	add	r3, r2
 8007a06:	4618      	mov	r0, r3
 8007a08:	f7ff fb3c 	bl	8007084 <ld_dword>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8007a12:	4323      	orrs	r3, r4
 8007a14:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007a1c:	68bb      	ldr	r3, [r7, #8]
 8007a1e:	009b      	lsls	r3, r3, #2
 8007a20:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8007a24:	4413      	add	r3, r2
 8007a26:	6879      	ldr	r1, [r7, #4]
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f7ff fb69 	bl	8007100 <st_dword>
			fs->wflag = 1;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	2201      	movs	r2, #1
 8007a32:	70da      	strb	r2, [r3, #3]
			break;
 8007a34:	e008      	b.n	8007a48 <put_fat+0x1ce>
		}
	}
 8007a36:	bf00      	nop
 8007a38:	e006      	b.n	8007a48 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007a3a:	bf00      	nop
 8007a3c:	e004      	b.n	8007a48 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007a3e:	bf00      	nop
 8007a40:	e002      	b.n	8007a48 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007a42:	bf00      	nop
 8007a44:	e000      	b.n	8007a48 <put_fat+0x1ce>
			if (res != FR_OK) break;
 8007a46:	bf00      	nop
	return res;
 8007a48:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	3724      	adds	r7, #36	; 0x24
 8007a4e:	46bd      	mov	sp, r7
 8007a50:	bd90      	pop	{r4, r7, pc}

08007a52 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8007a52:	b580      	push	{r7, lr}
 8007a54:	b088      	sub	sp, #32
 8007a56:	af00      	add	r7, sp, #0
 8007a58:	60f8      	str	r0, [r7, #12]
 8007a5a:	60b9      	str	r1, [r7, #8]
 8007a5c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d904      	bls.n	8007a78 <remove_chain+0x26>
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	695b      	ldr	r3, [r3, #20]
 8007a72:	68ba      	ldr	r2, [r7, #8]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d301      	bcc.n	8007a7c <remove_chain+0x2a>
 8007a78:	2302      	movs	r3, #2
 8007a7a:	e04b      	b.n	8007b14 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d00c      	beq.n	8007a9c <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8007a82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a86:	6879      	ldr	r1, [r7, #4]
 8007a88:	69b8      	ldr	r0, [r7, #24]
 8007a8a:	f7ff fef6 	bl	800787a <put_fat>
 8007a8e:	4603      	mov	r3, r0
 8007a90:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8007a92:	7ffb      	ldrb	r3, [r7, #31]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <remove_chain+0x4a>
 8007a98:	7ffb      	ldrb	r3, [r7, #31]
 8007a9a:	e03b      	b.n	8007b14 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8007a9c:	68b9      	ldr	r1, [r7, #8]
 8007a9e:	68f8      	ldr	r0, [r7, #12]
 8007aa0:	f7ff fe43 	bl	800772a <get_fat>
 8007aa4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d031      	beq.n	8007b10 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	2b01      	cmp	r3, #1
 8007ab0:	d101      	bne.n	8007ab6 <remove_chain+0x64>
 8007ab2:	2302      	movs	r3, #2
 8007ab4:	e02e      	b.n	8007b14 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007abc:	d101      	bne.n	8007ac2 <remove_chain+0x70>
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e028      	b.n	8007b14 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	68b9      	ldr	r1, [r7, #8]
 8007ac6:	69b8      	ldr	r0, [r7, #24]
 8007ac8:	f7ff fed7 	bl	800787a <put_fat>
 8007acc:	4603      	mov	r3, r0
 8007ace:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8007ad0:	7ffb      	ldrb	r3, [r7, #31]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <remove_chain+0x88>
 8007ad6:	7ffb      	ldrb	r3, [r7, #31]
 8007ad8:	e01c      	b.n	8007b14 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8007ada:	69bb      	ldr	r3, [r7, #24]
 8007adc:	691a      	ldr	r2, [r3, #16]
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	695b      	ldr	r3, [r3, #20]
 8007ae2:	3b02      	subs	r3, #2
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d20b      	bcs.n	8007b00 <remove_chain+0xae>
			fs->free_clst++;
 8007ae8:	69bb      	ldr	r3, [r7, #24]
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	1c5a      	adds	r2, r3, #1
 8007aee:	69bb      	ldr	r3, [r7, #24]
 8007af0:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8007af2:	69bb      	ldr	r3, [r7, #24]
 8007af4:	791b      	ldrb	r3, [r3, #4]
 8007af6:	f043 0301 	orr.w	r3, r3, #1
 8007afa:	b2da      	uxtb	r2, r3
 8007afc:	69bb      	ldr	r3, [r7, #24]
 8007afe:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8007b04:	69bb      	ldr	r3, [r7, #24]
 8007b06:	695b      	ldr	r3, [r3, #20]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d3c6      	bcc.n	8007a9c <remove_chain+0x4a>
 8007b0e:	e000      	b.n	8007b12 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8007b10:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3720      	adds	r7, #32
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b088      	sub	sp, #32
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8007b2c:	683b      	ldr	r3, [r7, #0]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d10d      	bne.n	8007b4e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8007b32:	693b      	ldr	r3, [r7, #16]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d004      	beq.n	8007b48 <create_chain+0x2c>
 8007b3e:	693b      	ldr	r3, [r7, #16]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	69ba      	ldr	r2, [r7, #24]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d31b      	bcc.n	8007b80 <create_chain+0x64>
 8007b48:	2301      	movs	r3, #1
 8007b4a:	61bb      	str	r3, [r7, #24]
 8007b4c:	e018      	b.n	8007b80 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8007b4e:	6839      	ldr	r1, [r7, #0]
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7ff fdea 	bl	800772a <get_fat>
 8007b56:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d801      	bhi.n	8007b62 <create_chain+0x46>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	e070      	b.n	8007c44 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007b68:	d101      	bne.n	8007b6e <create_chain+0x52>
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	e06a      	b.n	8007c44 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	68fa      	ldr	r2, [r7, #12]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d201      	bcs.n	8007b7c <create_chain+0x60>
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	e063      	b.n	8007c44 <create_chain+0x128>
		scl = clst;
 8007b7c:	683b      	ldr	r3, [r7, #0]
 8007b7e:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8007b80:	69bb      	ldr	r3, [r7, #24]
 8007b82:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8007b84:	69fb      	ldr	r3, [r7, #28]
 8007b86:	3301      	adds	r3, #1
 8007b88:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8007b8a:	693b      	ldr	r3, [r7, #16]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d307      	bcc.n	8007ba4 <create_chain+0x88>
				ncl = 2;
 8007b94:	2302      	movs	r3, #2
 8007b96:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8007b98:	69fa      	ldr	r2, [r7, #28]
 8007b9a:	69bb      	ldr	r3, [r7, #24]
 8007b9c:	429a      	cmp	r2, r3
 8007b9e:	d901      	bls.n	8007ba4 <create_chain+0x88>
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e04f      	b.n	8007c44 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8007ba4:	69f9      	ldr	r1, [r7, #28]
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f7ff fdbf 	bl	800772a <get_fat>
 8007bac:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d00e      	beq.n	8007bd2 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	d003      	beq.n	8007bc2 <create_chain+0xa6>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007bc0:	d101      	bne.n	8007bc6 <create_chain+0xaa>
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	e03e      	b.n	8007c44 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8007bc6:	69fa      	ldr	r2, [r7, #28]
 8007bc8:	69bb      	ldr	r3, [r7, #24]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d1da      	bne.n	8007b84 <create_chain+0x68>
 8007bce:	2300      	movs	r3, #0
 8007bd0:	e038      	b.n	8007c44 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8007bd2:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8007bd4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007bd8:	69f9      	ldr	r1, [r7, #28]
 8007bda:	6938      	ldr	r0, [r7, #16]
 8007bdc:	f7ff fe4d 	bl	800787a <put_fat>
 8007be0:	4603      	mov	r3, r0
 8007be2:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8007be4:	7dfb      	ldrb	r3, [r7, #23]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d109      	bne.n	8007bfe <create_chain+0xe2>
 8007bea:	683b      	ldr	r3, [r7, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d006      	beq.n	8007bfe <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8007bf0:	69fa      	ldr	r2, [r7, #28]
 8007bf2:	6839      	ldr	r1, [r7, #0]
 8007bf4:	6938      	ldr	r0, [r7, #16]
 8007bf6:	f7ff fe40 	bl	800787a <put_fat>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8007bfe:	7dfb      	ldrb	r3, [r7, #23]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d116      	bne.n	8007c32 <create_chain+0x116>
		fs->last_clst = ncl;
 8007c04:	693b      	ldr	r3, [r7, #16]
 8007c06:	69fa      	ldr	r2, [r7, #28]
 8007c08:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	691a      	ldr	r2, [r3, #16]
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	3b02      	subs	r3, #2
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d804      	bhi.n	8007c22 <create_chain+0x106>
 8007c18:	693b      	ldr	r3, [r7, #16]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	1e5a      	subs	r2, r3, #1
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8007c22:	693b      	ldr	r3, [r7, #16]
 8007c24:	791b      	ldrb	r3, [r3, #4]
 8007c26:	f043 0301 	orr.w	r3, r3, #1
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	693b      	ldr	r3, [r7, #16]
 8007c2e:	711a      	strb	r2, [r3, #4]
 8007c30:	e007      	b.n	8007c42 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8007c32:	7dfb      	ldrb	r3, [r7, #23]
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d102      	bne.n	8007c3e <create_chain+0x122>
 8007c38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007c3c:	e000      	b.n	8007c40 <create_chain+0x124>
 8007c3e:	2301      	movs	r3, #1
 8007c40:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8007c42:	69fb      	ldr	r3, [r7, #28]
}
 8007c44:	4618      	mov	r0, r3
 8007c46:	3720      	adds	r7, #32
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	bd80      	pop	{r7, pc}

08007c4c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b087      	sub	sp, #28
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
 8007c54:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c60:	3304      	adds	r3, #4
 8007c62:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	0a5b      	lsrs	r3, r3, #9
 8007c68:	68fa      	ldr	r2, [r7, #12]
 8007c6a:	8952      	ldrh	r2, [r2, #10]
 8007c6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c70:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	1d1a      	adds	r2, r3, #4
 8007c76:	613a      	str	r2, [r7, #16]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d101      	bne.n	8007c86 <clmt_clust+0x3a>
 8007c82:	2300      	movs	r3, #0
 8007c84:	e010      	b.n	8007ca8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8007c86:	697a      	ldr	r2, [r7, #20]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	429a      	cmp	r2, r3
 8007c8c:	d307      	bcc.n	8007c9e <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8007c8e:	697a      	ldr	r2, [r7, #20]
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	1ad3      	subs	r3, r2, r3
 8007c94:	617b      	str	r3, [r7, #20]
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	3304      	adds	r3, #4
 8007c9a:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8007c9c:	e7e9      	b.n	8007c72 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8007c9e:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	4413      	add	r3, r2
}
 8007ca8:	4618      	mov	r0, r3
 8007caa:	371c      	adds	r7, #28
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007cca:	d204      	bcs.n	8007cd6 <dir_sdi+0x22>
 8007ccc:	683b      	ldr	r3, [r7, #0]
 8007cce:	f003 031f 	and.w	r3, r3, #31
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <dir_sdi+0x26>
		return FR_INT_ERR;
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	e063      	b.n	8007da2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	689b      	ldr	r3, [r3, #8]
 8007ce4:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8007ce6:	697b      	ldr	r3, [r7, #20]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d106      	bne.n	8007cfa <dir_sdi+0x46>
 8007cec:	693b      	ldr	r3, [r7, #16]
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	2b02      	cmp	r3, #2
 8007cf2:	d902      	bls.n	8007cfa <dir_sdi+0x46>
		clst = fs->dirbase;
 8007cf4:	693b      	ldr	r3, [r7, #16]
 8007cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf8:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10c      	bne.n	8007d1a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	095b      	lsrs	r3, r3, #5
 8007d04:	693a      	ldr	r2, [r7, #16]
 8007d06:	8912      	ldrh	r2, [r2, #8]
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d301      	bcc.n	8007d10 <dir_sdi+0x5c>
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	e048      	b.n	8007da2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8007d10:	693b      	ldr	r3, [r7, #16]
 8007d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	61da      	str	r2, [r3, #28]
 8007d18:	e029      	b.n	8007d6e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	895b      	ldrh	r3, [r3, #10]
 8007d1e:	025b      	lsls	r3, r3, #9
 8007d20:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007d22:	e019      	b.n	8007d58 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6979      	ldr	r1, [r7, #20]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7ff fcfe 	bl	800772a <get_fat>
 8007d2e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d36:	d101      	bne.n	8007d3c <dir_sdi+0x88>
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e032      	b.n	8007da2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8007d3c:	697b      	ldr	r3, [r7, #20]
 8007d3e:	2b01      	cmp	r3, #1
 8007d40:	d904      	bls.n	8007d4c <dir_sdi+0x98>
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	697a      	ldr	r2, [r7, #20]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d301      	bcc.n	8007d50 <dir_sdi+0x9c>
 8007d4c:	2302      	movs	r3, #2
 8007d4e:	e028      	b.n	8007da2 <dir_sdi+0xee>
			ofs -= csz;
 8007d50:	683a      	ldr	r2, [r7, #0]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8007d58:	683a      	ldr	r2, [r7, #0]
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	d2e1      	bcs.n	8007d24 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8007d60:	6979      	ldr	r1, [r7, #20]
 8007d62:	6938      	ldr	r0, [r7, #16]
 8007d64:	f7ff fcc2 	bl	80076ec <clust2sect>
 8007d68:	4602      	mov	r2, r0
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	697a      	ldr	r2, [r7, #20]
 8007d72:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	69db      	ldr	r3, [r3, #28]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d101      	bne.n	8007d80 <dir_sdi+0xcc>
 8007d7c:	2302      	movs	r3, #2
 8007d7e:	e010      	b.n	8007da2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	69da      	ldr	r2, [r3, #28]
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	0a5b      	lsrs	r3, r3, #9
 8007d88:	441a      	add	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007d94:	683b      	ldr	r3, [r7, #0]
 8007d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d9a:	441a      	add	r2, r3
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007da0:	2300      	movs	r3, #0
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3718      	adds	r7, #24
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}

08007daa <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8007daa:	b580      	push	{r7, lr}
 8007dac:	b086      	sub	sp, #24
 8007dae:	af00      	add	r7, sp, #0
 8007db0:	6078      	str	r0, [r7, #4]
 8007db2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	3320      	adds	r3, #32
 8007dc0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	69db      	ldr	r3, [r3, #28]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <dir_next+0x28>
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007dd0:	d301      	bcc.n	8007dd6 <dir_next+0x2c>
 8007dd2:	2304      	movs	r3, #4
 8007dd4:	e0aa      	b.n	8007f2c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f040 8098 	bne.w	8007f12 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	69db      	ldr	r3, [r3, #28]
 8007de6:	1c5a      	adds	r2, r3, #1
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	699b      	ldr	r3, [r3, #24]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10b      	bne.n	8007e0c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	095b      	lsrs	r3, r3, #5
 8007df8:	68fa      	ldr	r2, [r7, #12]
 8007dfa:	8912      	ldrh	r2, [r2, #8]
 8007dfc:	4293      	cmp	r3, r2
 8007dfe:	f0c0 8088 	bcc.w	8007f12 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	61da      	str	r2, [r3, #28]
 8007e08:	2304      	movs	r3, #4
 8007e0a:	e08f      	b.n	8007f2c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	0a5b      	lsrs	r3, r3, #9
 8007e10:	68fa      	ldr	r2, [r7, #12]
 8007e12:	8952      	ldrh	r2, [r2, #10]
 8007e14:	3a01      	subs	r2, #1
 8007e16:	4013      	ands	r3, r2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d17a      	bne.n	8007f12 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	4619      	mov	r1, r3
 8007e24:	4610      	mov	r0, r2
 8007e26:	f7ff fc80 	bl	800772a <get_fat>
 8007e2a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d801      	bhi.n	8007e36 <dir_next+0x8c>
 8007e32:	2302      	movs	r3, #2
 8007e34:	e07a      	b.n	8007f2c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e3c:	d101      	bne.n	8007e42 <dir_next+0x98>
 8007e3e:	2301      	movs	r3, #1
 8007e40:	e074      	b.n	8007f2c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	429a      	cmp	r2, r3
 8007e4a:	d358      	bcc.n	8007efe <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d104      	bne.n	8007e5c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2200      	movs	r2, #0
 8007e56:	61da      	str	r2, [r3, #28]
 8007e58:	2304      	movs	r3, #4
 8007e5a:	e067      	b.n	8007f2c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8007e5c:	687a      	ldr	r2, [r7, #4]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	4619      	mov	r1, r3
 8007e64:	4610      	mov	r0, r2
 8007e66:	f7ff fe59 	bl	8007b1c <create_chain>
 8007e6a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d101      	bne.n	8007e76 <dir_next+0xcc>
 8007e72:	2307      	movs	r3, #7
 8007e74:	e05a      	b.n	8007f2c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2b01      	cmp	r3, #1
 8007e7a:	d101      	bne.n	8007e80 <dir_next+0xd6>
 8007e7c:	2302      	movs	r3, #2
 8007e7e:	e055      	b.n	8007f2c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e86:	d101      	bne.n	8007e8c <dir_next+0xe2>
 8007e88:	2301      	movs	r3, #1
 8007e8a:	e04f      	b.n	8007f2c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8007e8c:	68f8      	ldr	r0, [r7, #12]
 8007e8e:	f7ff fb4d 	bl	800752c <sync_window>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <dir_next+0xf2>
 8007e98:	2301      	movs	r3, #1
 8007e9a:	e047      	b.n	8007f2c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3330      	adds	r3, #48	; 0x30
 8007ea0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	f7ff f977 	bl	800719a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007eac:	2300      	movs	r3, #0
 8007eae:	613b      	str	r3, [r7, #16]
 8007eb0:	6979      	ldr	r1, [r7, #20]
 8007eb2:	68f8      	ldr	r0, [r7, #12]
 8007eb4:	f7ff fc1a 	bl	80076ec <clust2sect>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	62da      	str	r2, [r3, #44]	; 0x2c
 8007ebe:	e012      	b.n	8007ee6 <dir_next+0x13c>
						fs->wflag = 1;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8007ec6:	68f8      	ldr	r0, [r7, #12]
 8007ec8:	f7ff fb30 	bl	800752c <sync_window>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <dir_next+0x12c>
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e02a      	b.n	8007f2c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8007ed6:	693b      	ldr	r3, [r7, #16]
 8007ed8:	3301      	adds	r3, #1
 8007eda:	613b      	str	r3, [r7, #16]
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ee0:	1c5a      	adds	r2, r3, #1
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	62da      	str	r2, [r3, #44]	; 0x2c
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	895b      	ldrh	r3, [r3, #10]
 8007eea:	461a      	mov	r2, r3
 8007eec:	693b      	ldr	r3, [r7, #16]
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d3e6      	bcc.n	8007ec0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef6:	693b      	ldr	r3, [r7, #16]
 8007ef8:	1ad2      	subs	r2, r2, r3
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8007f04:	6979      	ldr	r1, [r7, #20]
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f7ff fbf0 	bl	80076ec <clust2sect>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68ba      	ldr	r2, [r7, #8]
 8007f16:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f24:	441a      	add	r2, r3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	3718      	adds	r7, #24
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd80      	pop	{r7, pc}

08007f34 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b086      	sub	sp, #24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8007f44:	2100      	movs	r1, #0
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7ff feb4 	bl	8007cb4 <dir_sdi>
 8007f4c:	4603      	mov	r3, r0
 8007f4e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007f50:	7dfb      	ldrb	r3, [r7, #23]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d12b      	bne.n	8007fae <dir_alloc+0x7a>
		n = 0;
 8007f56:	2300      	movs	r3, #0
 8007f58:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	69db      	ldr	r3, [r3, #28]
 8007f5e:	4619      	mov	r1, r3
 8007f60:	68f8      	ldr	r0, [r7, #12]
 8007f62:	f7ff fb27 	bl	80075b4 <move_window>
 8007f66:	4603      	mov	r3, r0
 8007f68:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8007f6a:	7dfb      	ldrb	r3, [r7, #23]
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d11d      	bne.n	8007fac <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6a1b      	ldr	r3, [r3, #32]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2be5      	cmp	r3, #229	; 0xe5
 8007f78:	d004      	beq.n	8007f84 <dir_alloc+0x50>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d107      	bne.n	8007f94 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	3301      	adds	r3, #1
 8007f88:	613b      	str	r3, [r7, #16]
 8007f8a:	693a      	ldr	r2, [r7, #16]
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d102      	bne.n	8007f98 <dir_alloc+0x64>
 8007f92:	e00c      	b.n	8007fae <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8007f94:	2300      	movs	r3, #0
 8007f96:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8007f98:	2101      	movs	r1, #1
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f7ff ff05 	bl	8007daa <dir_next>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8007fa4:	7dfb      	ldrb	r3, [r7, #23]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d0d7      	beq.n	8007f5a <dir_alloc+0x26>
 8007faa:	e000      	b.n	8007fae <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8007fac:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8007fae:	7dfb      	ldrb	r3, [r7, #23]
 8007fb0:	2b04      	cmp	r3, #4
 8007fb2:	d101      	bne.n	8007fb8 <dir_alloc+0x84>
 8007fb4:	2307      	movs	r3, #7
 8007fb6:	75fb      	strb	r3, [r7, #23]
	return res;
 8007fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3718      	adds	r7, #24
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b084      	sub	sp, #16
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
 8007fca:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	331a      	adds	r3, #26
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7ff f83f 	bl	8007054 <ld_word>
 8007fd6:	4603      	mov	r3, r0
 8007fd8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	781b      	ldrb	r3, [r3, #0]
 8007fde:	2b03      	cmp	r3, #3
 8007fe0:	d109      	bne.n	8007ff6 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	3314      	adds	r3, #20
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7ff f834 	bl	8007054 <ld_word>
 8007fec:	4603      	mov	r3, r0
 8007fee:	041b      	lsls	r3, r3, #16
 8007ff0:	68fa      	ldr	r2, [r7, #12]
 8007ff2:	4313      	orrs	r3, r2
 8007ff4:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8007ff6:	68fb      	ldr	r3, [r7, #12]
}
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	3710      	adds	r7, #16
 8007ffc:	46bd      	mov	sp, r7
 8007ffe:	bd80      	pop	{r7, pc}

08008000 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b084      	sub	sp, #16
 8008004:	af00      	add	r7, sp, #0
 8008006:	60f8      	str	r0, [r7, #12]
 8008008:	60b9      	str	r1, [r7, #8]
 800800a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	331a      	adds	r3, #26
 8008010:	687a      	ldr	r2, [r7, #4]
 8008012:	b292      	uxth	r2, r2
 8008014:	4611      	mov	r1, r2
 8008016:	4618      	mov	r0, r3
 8008018:	f7ff f857 	bl	80070ca <st_word>
	if (fs->fs_type == FS_FAT32) {
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	781b      	ldrb	r3, [r3, #0]
 8008020:	2b03      	cmp	r3, #3
 8008022:	d109      	bne.n	8008038 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	f103 0214 	add.w	r2, r3, #20
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	0c1b      	lsrs	r3, r3, #16
 800802e:	b29b      	uxth	r3, r3
 8008030:	4619      	mov	r1, r3
 8008032:	4610      	mov	r0, r2
 8008034:	f7ff f849 	bl	80070ca <st_word>
	}
}
 8008038:	bf00      	nop
 800803a:	3710      	adds	r7, #16
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}

08008040 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b086      	sub	sp, #24
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800804e:	2100      	movs	r1, #0
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7ff fe2f 	bl	8007cb4 <dir_sdi>
 8008056:	4603      	mov	r3, r0
 8008058:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800805a:	7dfb      	ldrb	r3, [r7, #23]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <dir_find+0x24>
 8008060:	7dfb      	ldrb	r3, [r7, #23]
 8008062:	e03e      	b.n	80080e2 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	69db      	ldr	r3, [r3, #28]
 8008068:	4619      	mov	r1, r3
 800806a:	6938      	ldr	r0, [r7, #16]
 800806c:	f7ff faa2 	bl	80075b4 <move_window>
 8008070:	4603      	mov	r3, r0
 8008072:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8008074:	7dfb      	ldrb	r3, [r7, #23]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d12f      	bne.n	80080da <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6a1b      	ldr	r3, [r3, #32]
 800807e:	781b      	ldrb	r3, [r3, #0]
 8008080:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8008082:	7bfb      	ldrb	r3, [r7, #15]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d102      	bne.n	800808e <dir_find+0x4e>
 8008088:	2304      	movs	r3, #4
 800808a:	75fb      	strb	r3, [r7, #23]
 800808c:	e028      	b.n	80080e0 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	330b      	adds	r3, #11
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800809a:	b2da      	uxtb	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a1b      	ldr	r3, [r3, #32]
 80080a4:	330b      	adds	r3, #11
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	f003 0308 	and.w	r3, r3, #8
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d10a      	bne.n	80080c6 <dir_find+0x86>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6a18      	ldr	r0, [r3, #32]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	3324      	adds	r3, #36	; 0x24
 80080b8:	220b      	movs	r2, #11
 80080ba:	4619      	mov	r1, r3
 80080bc:	f7ff f888 	bl	80071d0 <mem_cmp>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d00b      	beq.n	80080de <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80080c6:	2100      	movs	r1, #0
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f7ff fe6e 	bl	8007daa <dir_next>
 80080ce:	4603      	mov	r3, r0
 80080d0:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80080d2:	7dfb      	ldrb	r3, [r7, #23]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d0c5      	beq.n	8008064 <dir_find+0x24>
 80080d8:	e002      	b.n	80080e0 <dir_find+0xa0>
		if (res != FR_OK) break;
 80080da:	bf00      	nop
 80080dc:	e000      	b.n	80080e0 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80080de:	bf00      	nop

	return res;
 80080e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3718      	adds	r7, #24
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80080ea:	b580      	push	{r7, lr}
 80080ec:	b084      	sub	sp, #16
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 80080f8:	2101      	movs	r1, #1
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f7ff ff1a 	bl	8007f34 <dir_alloc>
 8008100:	4603      	mov	r3, r0
 8008102:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8008104:	7bfb      	ldrb	r3, [r7, #15]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d11c      	bne.n	8008144 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	69db      	ldr	r3, [r3, #28]
 800810e:	4619      	mov	r1, r3
 8008110:	68b8      	ldr	r0, [r7, #8]
 8008112:	f7ff fa4f 	bl	80075b4 <move_window>
 8008116:	4603      	mov	r3, r0
 8008118:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800811a:	7bfb      	ldrb	r3, [r7, #15]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d111      	bne.n	8008144 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a1b      	ldr	r3, [r3, #32]
 8008124:	2220      	movs	r2, #32
 8008126:	2100      	movs	r1, #0
 8008128:	4618      	mov	r0, r3
 800812a:	f7ff f836 	bl	800719a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a18      	ldr	r0, [r3, #32]
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	3324      	adds	r3, #36	; 0x24
 8008136:	220b      	movs	r2, #11
 8008138:	4619      	mov	r1, r3
 800813a:	f7ff f80d 	bl	8007158 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	2201      	movs	r2, #1
 8008142:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8008144:	7bfb      	ldrb	r3, [r7, #15]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3710      	adds	r7, #16
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
	...

08008150 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b088      	sub	sp, #32
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	60fb      	str	r3, [r7, #12]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	3324      	adds	r3, #36	; 0x24
 8008164:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8008166:	220b      	movs	r2, #11
 8008168:	2120      	movs	r1, #32
 800816a:	68b8      	ldr	r0, [r7, #8]
 800816c:	f7ff f815 	bl	800719a <mem_set>
	si = i = 0; ni = 8;
 8008170:	2300      	movs	r3, #0
 8008172:	613b      	str	r3, [r7, #16]
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	61fb      	str	r3, [r7, #28]
 8008178:	2308      	movs	r3, #8
 800817a:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800817c:	69fb      	ldr	r3, [r7, #28]
 800817e:	1c5a      	adds	r2, r3, #1
 8008180:	61fa      	str	r2, [r7, #28]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	4413      	add	r3, r2
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800818a:	7efb      	ldrb	r3, [r7, #27]
 800818c:	2b20      	cmp	r3, #32
 800818e:	d94e      	bls.n	800822e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8008190:	7efb      	ldrb	r3, [r7, #27]
 8008192:	2b2f      	cmp	r3, #47	; 0x2f
 8008194:	d006      	beq.n	80081a4 <create_name+0x54>
 8008196:	7efb      	ldrb	r3, [r7, #27]
 8008198:	2b5c      	cmp	r3, #92	; 0x5c
 800819a:	d110      	bne.n	80081be <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800819c:	e002      	b.n	80081a4 <create_name+0x54>
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	3301      	adds	r3, #1
 80081a2:	61fb      	str	r3, [r7, #28]
 80081a4:	68fa      	ldr	r2, [r7, #12]
 80081a6:	69fb      	ldr	r3, [r7, #28]
 80081a8:	4413      	add	r3, r2
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	2b2f      	cmp	r3, #47	; 0x2f
 80081ae:	d0f6      	beq.n	800819e <create_name+0x4e>
 80081b0:	68fa      	ldr	r2, [r7, #12]
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	4413      	add	r3, r2
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	2b5c      	cmp	r3, #92	; 0x5c
 80081ba:	d0f0      	beq.n	800819e <create_name+0x4e>
			break;
 80081bc:	e038      	b.n	8008230 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 80081be:	7efb      	ldrb	r3, [r7, #27]
 80081c0:	2b2e      	cmp	r3, #46	; 0x2e
 80081c2:	d003      	beq.n	80081cc <create_name+0x7c>
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d30c      	bcc.n	80081e6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 80081cc:	697b      	ldr	r3, [r7, #20]
 80081ce:	2b0b      	cmp	r3, #11
 80081d0:	d002      	beq.n	80081d8 <create_name+0x88>
 80081d2:	7efb      	ldrb	r3, [r7, #27]
 80081d4:	2b2e      	cmp	r3, #46	; 0x2e
 80081d6:	d001      	beq.n	80081dc <create_name+0x8c>
 80081d8:	2306      	movs	r3, #6
 80081da:	e044      	b.n	8008266 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 80081dc:	2308      	movs	r3, #8
 80081de:	613b      	str	r3, [r7, #16]
 80081e0:	230b      	movs	r3, #11
 80081e2:	617b      	str	r3, [r7, #20]
			continue;
 80081e4:	e022      	b.n	800822c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 80081e6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	da04      	bge.n	80081f8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 80081ee:	7efb      	ldrb	r3, [r7, #27]
 80081f0:	3b80      	subs	r3, #128	; 0x80
 80081f2:	4a1f      	ldr	r2, [pc, #124]	; (8008270 <create_name+0x120>)
 80081f4:	5cd3      	ldrb	r3, [r2, r3]
 80081f6:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 80081f8:	7efb      	ldrb	r3, [r7, #27]
 80081fa:	4619      	mov	r1, r3
 80081fc:	481d      	ldr	r0, [pc, #116]	; (8008274 <create_name+0x124>)
 80081fe:	f7ff f80e 	bl	800721e <chk_chr>
 8008202:	4603      	mov	r3, r0
 8008204:	2b00      	cmp	r3, #0
 8008206:	d001      	beq.n	800820c <create_name+0xbc>
 8008208:	2306      	movs	r3, #6
 800820a:	e02c      	b.n	8008266 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800820c:	7efb      	ldrb	r3, [r7, #27]
 800820e:	2b60      	cmp	r3, #96	; 0x60
 8008210:	d905      	bls.n	800821e <create_name+0xce>
 8008212:	7efb      	ldrb	r3, [r7, #27]
 8008214:	2b7a      	cmp	r3, #122	; 0x7a
 8008216:	d802      	bhi.n	800821e <create_name+0xce>
 8008218:	7efb      	ldrb	r3, [r7, #27]
 800821a:	3b20      	subs	r3, #32
 800821c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800821e:	693b      	ldr	r3, [r7, #16]
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	613a      	str	r2, [r7, #16]
 8008224:	68ba      	ldr	r2, [r7, #8]
 8008226:	4413      	add	r3, r2
 8008228:	7efa      	ldrb	r2, [r7, #27]
 800822a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800822c:	e7a6      	b.n	800817c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800822e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8008230:	68fa      	ldr	r2, [r7, #12]
 8008232:	69fb      	ldr	r3, [r7, #28]
 8008234:	441a      	add	r2, r3
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d101      	bne.n	8008244 <create_name+0xf4>
 8008240:	2306      	movs	r3, #6
 8008242:	e010      	b.n	8008266 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	781b      	ldrb	r3, [r3, #0]
 8008248:	2be5      	cmp	r3, #229	; 0xe5
 800824a:	d102      	bne.n	8008252 <create_name+0x102>
 800824c:	68bb      	ldr	r3, [r7, #8]
 800824e:	2205      	movs	r2, #5
 8008250:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8008252:	7efb      	ldrb	r3, [r7, #27]
 8008254:	2b20      	cmp	r3, #32
 8008256:	d801      	bhi.n	800825c <create_name+0x10c>
 8008258:	2204      	movs	r2, #4
 800825a:	e000      	b.n	800825e <create_name+0x10e>
 800825c:	2200      	movs	r2, #0
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	330b      	adds	r3, #11
 8008262:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8008264:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8008266:	4618      	mov	r0, r3
 8008268:	3720      	adds	r7, #32
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	08009390 	.word	0x08009390
 8008274:	08009318 	.word	0x08009318

08008278 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8008286:	693b      	ldr	r3, [r7, #16]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800828c:	e002      	b.n	8008294 <follow_path+0x1c>
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	3301      	adds	r3, #1
 8008292:	603b      	str	r3, [r7, #0]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	2b2f      	cmp	r3, #47	; 0x2f
 800829a:	d0f8      	beq.n	800828e <follow_path+0x16>
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	2b5c      	cmp	r3, #92	; 0x5c
 80082a2:	d0f4      	beq.n	800828e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	2200      	movs	r2, #0
 80082a8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b1f      	cmp	r3, #31
 80082b0:	d80a      	bhi.n	80082c8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2280      	movs	r2, #128	; 0x80
 80082b6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80082ba:	2100      	movs	r1, #0
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7ff fcf9 	bl	8007cb4 <dir_sdi>
 80082c2:	4603      	mov	r3, r0
 80082c4:	75fb      	strb	r3, [r7, #23]
 80082c6:	e043      	b.n	8008350 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80082c8:	463b      	mov	r3, r7
 80082ca:	4619      	mov	r1, r3
 80082cc:	6878      	ldr	r0, [r7, #4]
 80082ce:	f7ff ff3f 	bl	8008150 <create_name>
 80082d2:	4603      	mov	r3, r0
 80082d4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80082d6:	7dfb      	ldrb	r3, [r7, #23]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d134      	bne.n	8008346 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f7ff feaf 	bl	8008040 <dir_find>
 80082e2:	4603      	mov	r3, r0
 80082e4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80082ec:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80082ee:	7dfb      	ldrb	r3, [r7, #23]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d00a      	beq.n	800830a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80082f4:	7dfb      	ldrb	r3, [r7, #23]
 80082f6:	2b04      	cmp	r3, #4
 80082f8:	d127      	bne.n	800834a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80082fa:	7afb      	ldrb	r3, [r7, #11]
 80082fc:	f003 0304 	and.w	r3, r3, #4
 8008300:	2b00      	cmp	r3, #0
 8008302:	d122      	bne.n	800834a <follow_path+0xd2>
 8008304:	2305      	movs	r3, #5
 8008306:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8008308:	e01f      	b.n	800834a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800830a:	7afb      	ldrb	r3, [r7, #11]
 800830c:	f003 0304 	and.w	r3, r3, #4
 8008310:	2b00      	cmp	r3, #0
 8008312:	d11c      	bne.n	800834e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	799b      	ldrb	r3, [r3, #6]
 8008318:	f003 0310 	and.w	r3, r3, #16
 800831c:	2b00      	cmp	r3, #0
 800831e:	d102      	bne.n	8008326 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8008320:	2305      	movs	r3, #5
 8008322:	75fb      	strb	r3, [r7, #23]
 8008324:	e014      	b.n	8008350 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008334:	4413      	add	r3, r2
 8008336:	4619      	mov	r1, r3
 8008338:	68f8      	ldr	r0, [r7, #12]
 800833a:	f7ff fe42 	bl	8007fc2 <ld_clust>
 800833e:	4602      	mov	r2, r0
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8008344:	e7c0      	b.n	80082c8 <follow_path+0x50>
			if (res != FR_OK) break;
 8008346:	bf00      	nop
 8008348:	e002      	b.n	8008350 <follow_path+0xd8>
				break;
 800834a:	bf00      	nop
 800834c:	e000      	b.n	8008350 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800834e:	bf00      	nop
			}
		}
	}

	return res;
 8008350:	7dfb      	ldrb	r3, [r7, #23]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800835a:	b480      	push	{r7}
 800835c:	b087      	sub	sp, #28
 800835e:	af00      	add	r7, sp, #0
 8008360:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8008362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008366:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d031      	beq.n	80083d4 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	617b      	str	r3, [r7, #20]
 8008376:	e002      	b.n	800837e <get_ldnumber+0x24>
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	3301      	adds	r3, #1
 800837c:	617b      	str	r3, [r7, #20]
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	781b      	ldrb	r3, [r3, #0]
 8008382:	2b20      	cmp	r3, #32
 8008384:	d903      	bls.n	800838e <get_ldnumber+0x34>
 8008386:	697b      	ldr	r3, [r7, #20]
 8008388:	781b      	ldrb	r3, [r3, #0]
 800838a:	2b3a      	cmp	r3, #58	; 0x3a
 800838c:	d1f4      	bne.n	8008378 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	781b      	ldrb	r3, [r3, #0]
 8008392:	2b3a      	cmp	r3, #58	; 0x3a
 8008394:	d11c      	bne.n	80083d0 <get_ldnumber+0x76>
			tp = *path;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	1c5a      	adds	r2, r3, #1
 80083a0:	60fa      	str	r2, [r7, #12]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	3b30      	subs	r3, #48	; 0x30
 80083a6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	2b09      	cmp	r3, #9
 80083ac:	d80e      	bhi.n	80083cc <get_ldnumber+0x72>
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	429a      	cmp	r2, r3
 80083b4:	d10a      	bne.n	80083cc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d107      	bne.n	80083cc <get_ldnumber+0x72>
					vol = (int)i;
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	3301      	adds	r3, #1
 80083c4:	617b      	str	r3, [r7, #20]
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80083cc:	693b      	ldr	r3, [r7, #16]
 80083ce:	e002      	b.n	80083d6 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80083d0:	2300      	movs	r3, #0
 80083d2:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80083d4:	693b      	ldr	r3, [r7, #16]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	371c      	adds	r7, #28
 80083da:	46bd      	mov	sp, r7
 80083dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e0:	4770      	bx	lr
	...

080083e4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80083e4:	b580      	push	{r7, lr}
 80083e6:	b082      	sub	sp, #8
 80083e8:	af00      	add	r7, sp, #0
 80083ea:	6078      	str	r0, [r7, #4]
 80083ec:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2200      	movs	r2, #0
 80083f2:	70da      	strb	r2, [r3, #3]
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80083fa:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80083fc:	6839      	ldr	r1, [r7, #0]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f7ff f8d8 	bl	80075b4 <move_window>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d001      	beq.n	800840e <check_fs+0x2a>
 800840a:	2304      	movs	r3, #4
 800840c:	e038      	b.n	8008480 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	3330      	adds	r3, #48	; 0x30
 8008412:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8008416:	4618      	mov	r0, r3
 8008418:	f7fe fe1c 	bl	8007054 <ld_word>
 800841c:	4603      	mov	r3, r0
 800841e:	461a      	mov	r2, r3
 8008420:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8008424:	429a      	cmp	r2, r3
 8008426:	d001      	beq.n	800842c <check_fs+0x48>
 8008428:	2303      	movs	r3, #3
 800842a:	e029      	b.n	8008480 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008432:	2be9      	cmp	r3, #233	; 0xe9
 8008434:	d009      	beq.n	800844a <check_fs+0x66>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800843c:	2beb      	cmp	r3, #235	; 0xeb
 800843e:	d11e      	bne.n	800847e <check_fs+0x9a>
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008446:	2b90      	cmp	r3, #144	; 0x90
 8008448:	d119      	bne.n	800847e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	3330      	adds	r3, #48	; 0x30
 800844e:	3336      	adds	r3, #54	; 0x36
 8008450:	4618      	mov	r0, r3
 8008452:	f7fe fe17 	bl	8007084 <ld_dword>
 8008456:	4603      	mov	r3, r0
 8008458:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800845c:	4a0a      	ldr	r2, [pc, #40]	; (8008488 <check_fs+0xa4>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d101      	bne.n	8008466 <check_fs+0x82>
 8008462:	2300      	movs	r3, #0
 8008464:	e00c      	b.n	8008480 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	3330      	adds	r3, #48	; 0x30
 800846a:	3352      	adds	r3, #82	; 0x52
 800846c:	4618      	mov	r0, r3
 800846e:	f7fe fe09 	bl	8007084 <ld_dword>
 8008472:	4603      	mov	r3, r0
 8008474:	4a05      	ldr	r2, [pc, #20]	; (800848c <check_fs+0xa8>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d101      	bne.n	800847e <check_fs+0x9a>
 800847a:	2300      	movs	r3, #0
 800847c:	e000      	b.n	8008480 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800847e:	2302      	movs	r3, #2
}
 8008480:	4618      	mov	r0, r3
 8008482:	3708      	adds	r7, #8
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	00544146 	.word	0x00544146
 800848c:	33544146 	.word	0x33544146

08008490 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b096      	sub	sp, #88	; 0x58
 8008494:	af00      	add	r7, sp, #0
 8008496:	60f8      	str	r0, [r7, #12]
 8008498:	60b9      	str	r1, [r7, #8]
 800849a:	4613      	mov	r3, r2
 800849c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2200      	movs	r2, #0
 80084a2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80084a4:	68f8      	ldr	r0, [r7, #12]
 80084a6:	f7ff ff58 	bl	800835a <get_ldnumber>
 80084aa:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80084ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	da01      	bge.n	80084b6 <find_volume+0x26>
 80084b2:	230b      	movs	r3, #11
 80084b4:	e22e      	b.n	8008914 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80084b6:	4aa8      	ldr	r2, [pc, #672]	; (8008758 <find_volume+0x2c8>)
 80084b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80084be:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80084c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d101      	bne.n	80084ca <find_volume+0x3a>
 80084c6:	230c      	movs	r3, #12
 80084c8:	e224      	b.n	8008914 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084ce:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80084d0:	79fb      	ldrb	r3, [r7, #7]
 80084d2:	f023 0301 	bic.w	r3, r3, #1
 80084d6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80084d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084da:	781b      	ldrb	r3, [r3, #0]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d01a      	beq.n	8008516 <find_volume+0x86>
		stat = disk_status(fs->drv);
 80084e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084e2:	785b      	ldrb	r3, [r3, #1]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fe fd17 	bl	8006f18 <disk_status>
 80084ea:	4603      	mov	r3, r0
 80084ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80084f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d10c      	bne.n	8008516 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80084fc:	79fb      	ldrb	r3, [r7, #7]
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d007      	beq.n	8008512 <find_volume+0x82>
 8008502:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008506:	f003 0304 	and.w	r3, r3, #4
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800850e:	230a      	movs	r3, #10
 8008510:	e200      	b.n	8008914 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8008512:	2300      	movs	r3, #0
 8008514:	e1fe      	b.n	8008914 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8008516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008518:	2200      	movs	r2, #0
 800851a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800851c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800851e:	b2da      	uxtb	r2, r3
 8008520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008522:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8008524:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008526:	785b      	ldrb	r3, [r3, #1]
 8008528:	4618      	mov	r0, r3
 800852a:	f7fe fd0f 	bl	8006f4c <disk_initialize>
 800852e:	4603      	mov	r3, r0
 8008530:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8008534:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	2b00      	cmp	r3, #0
 800853e:	d001      	beq.n	8008544 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8008540:	2303      	movs	r3, #3
 8008542:	e1e7      	b.n	8008914 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8008544:	79fb      	ldrb	r3, [r7, #7]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d007      	beq.n	800855a <find_volume+0xca>
 800854a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800854e:	f003 0304 	and.w	r3, r3, #4
 8008552:	2b00      	cmp	r3, #0
 8008554:	d001      	beq.n	800855a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8008556:	230a      	movs	r3, #10
 8008558:	e1dc      	b.n	8008914 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800855e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008560:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008562:	f7ff ff3f 	bl	80083e4 <check_fs>
 8008566:	4603      	mov	r3, r0
 8008568:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800856c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008570:	2b02      	cmp	r3, #2
 8008572:	d14b      	bne.n	800860c <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8008574:	2300      	movs	r3, #0
 8008576:	643b      	str	r3, [r7, #64]	; 0x40
 8008578:	e01f      	b.n	80085ba <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800857a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800857c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8008580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008582:	011b      	lsls	r3, r3, #4
 8008584:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8008588:	4413      	add	r3, r2
 800858a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800858c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800858e:	3304      	adds	r3, #4
 8008590:	781b      	ldrb	r3, [r3, #0]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d006      	beq.n	80085a4 <find_volume+0x114>
 8008596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008598:	3308      	adds	r3, #8
 800859a:	4618      	mov	r0, r3
 800859c:	f7fe fd72 	bl	8007084 <ld_dword>
 80085a0:	4602      	mov	r2, r0
 80085a2:	e000      	b.n	80085a6 <find_volume+0x116>
 80085a4:	2200      	movs	r2, #0
 80085a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085a8:	009b      	lsls	r3, r3, #2
 80085aa:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80085ae:	440b      	add	r3, r1
 80085b0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80085b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085b6:	3301      	adds	r3, #1
 80085b8:	643b      	str	r3, [r7, #64]	; 0x40
 80085ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085bc:	2b03      	cmp	r3, #3
 80085be:	d9dc      	bls.n	800857a <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80085c0:	2300      	movs	r3, #0
 80085c2:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80085c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d002      	beq.n	80085d0 <find_volume+0x140>
 80085ca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085cc:	3b01      	subs	r3, #1
 80085ce:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80085d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80085d2:	009b      	lsls	r3, r3, #2
 80085d4:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80085d8:	4413      	add	r3, r2
 80085da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80085de:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80085e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d005      	beq.n	80085f2 <find_volume+0x162>
 80085e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80085e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80085ea:	f7ff fefb 	bl	80083e4 <check_fs>
 80085ee:	4603      	mov	r3, r0
 80085f0:	e000      	b.n	80085f4 <find_volume+0x164>
 80085f2:	2303      	movs	r3, #3
 80085f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80085f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80085fc:	2b01      	cmp	r3, #1
 80085fe:	d905      	bls.n	800860c <find_volume+0x17c>
 8008600:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008602:	3301      	adds	r3, #1
 8008604:	643b      	str	r3, [r7, #64]	; 0x40
 8008606:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008608:	2b03      	cmp	r3, #3
 800860a:	d9e1      	bls.n	80085d0 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800860c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008610:	2b04      	cmp	r3, #4
 8008612:	d101      	bne.n	8008618 <find_volume+0x188>
 8008614:	2301      	movs	r3, #1
 8008616:	e17d      	b.n	8008914 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8008618:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800861c:	2b01      	cmp	r3, #1
 800861e:	d901      	bls.n	8008624 <find_volume+0x194>
 8008620:	230d      	movs	r3, #13
 8008622:	e177      	b.n	8008914 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8008624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008626:	3330      	adds	r3, #48	; 0x30
 8008628:	330b      	adds	r3, #11
 800862a:	4618      	mov	r0, r3
 800862c:	f7fe fd12 	bl	8007054 <ld_word>
 8008630:	4603      	mov	r3, r0
 8008632:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008636:	d001      	beq.n	800863c <find_volume+0x1ac>
 8008638:	230d      	movs	r3, #13
 800863a:	e16b      	b.n	8008914 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800863c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800863e:	3330      	adds	r3, #48	; 0x30
 8008640:	3316      	adds	r3, #22
 8008642:	4618      	mov	r0, r3
 8008644:	f7fe fd06 	bl	8007054 <ld_word>
 8008648:	4603      	mov	r3, r0
 800864a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800864c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800864e:	2b00      	cmp	r3, #0
 8008650:	d106      	bne.n	8008660 <find_volume+0x1d0>
 8008652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008654:	3330      	adds	r3, #48	; 0x30
 8008656:	3324      	adds	r3, #36	; 0x24
 8008658:	4618      	mov	r0, r3
 800865a:	f7fe fd13 	bl	8007084 <ld_dword>
 800865e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8008660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008662:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008664:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8008666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008668:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800866c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800866e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8008670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008672:	789b      	ldrb	r3, [r3, #2]
 8008674:	2b01      	cmp	r3, #1
 8008676:	d005      	beq.n	8008684 <find_volume+0x1f4>
 8008678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800867a:	789b      	ldrb	r3, [r3, #2]
 800867c:	2b02      	cmp	r3, #2
 800867e:	d001      	beq.n	8008684 <find_volume+0x1f4>
 8008680:	230d      	movs	r3, #13
 8008682:	e147      	b.n	8008914 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8008684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008686:	789b      	ldrb	r3, [r3, #2]
 8008688:	461a      	mov	r2, r3
 800868a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800868c:	fb02 f303 	mul.w	r3, r2, r3
 8008690:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8008692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008698:	b29a      	uxth	r2, r3
 800869a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800869c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800869e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a0:	895b      	ldrh	r3, [r3, #10]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d008      	beq.n	80086b8 <find_volume+0x228>
 80086a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a8:	895b      	ldrh	r3, [r3, #10]
 80086aa:	461a      	mov	r2, r3
 80086ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ae:	895b      	ldrh	r3, [r3, #10]
 80086b0:	3b01      	subs	r3, #1
 80086b2:	4013      	ands	r3, r2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d001      	beq.n	80086bc <find_volume+0x22c>
 80086b8:	230d      	movs	r3, #13
 80086ba:	e12b      	b.n	8008914 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80086bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086be:	3330      	adds	r3, #48	; 0x30
 80086c0:	3311      	adds	r3, #17
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fe fcc6 	bl	8007054 <ld_word>
 80086c8:	4603      	mov	r3, r0
 80086ca:	461a      	mov	r2, r3
 80086cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80086d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086d2:	891b      	ldrh	r3, [r3, #8]
 80086d4:	f003 030f 	and.w	r3, r3, #15
 80086d8:	b29b      	uxth	r3, r3
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <find_volume+0x252>
 80086de:	230d      	movs	r3, #13
 80086e0:	e118      	b.n	8008914 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80086e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e4:	3330      	adds	r3, #48	; 0x30
 80086e6:	3313      	adds	r3, #19
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7fe fcb3 	bl	8007054 <ld_word>
 80086ee:	4603      	mov	r3, r0
 80086f0:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80086f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d106      	bne.n	8008706 <find_volume+0x276>
 80086f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086fa:	3330      	adds	r3, #48	; 0x30
 80086fc:	3320      	adds	r3, #32
 80086fe:	4618      	mov	r0, r3
 8008700:	f7fe fcc0 	bl	8007084 <ld_dword>
 8008704:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8008706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008708:	3330      	adds	r3, #48	; 0x30
 800870a:	330e      	adds	r3, #14
 800870c:	4618      	mov	r0, r3
 800870e:	f7fe fca1 	bl	8007054 <ld_word>
 8008712:	4603      	mov	r3, r0
 8008714:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8008716:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8008718:	2b00      	cmp	r3, #0
 800871a:	d101      	bne.n	8008720 <find_volume+0x290>
 800871c:	230d      	movs	r3, #13
 800871e:	e0f9      	b.n	8008914 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8008720:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008724:	4413      	add	r3, r2
 8008726:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008728:	8912      	ldrh	r2, [r2, #8]
 800872a:	0912      	lsrs	r2, r2, #4
 800872c:	b292      	uxth	r2, r2
 800872e:	4413      	add	r3, r2
 8008730:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8008732:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008736:	429a      	cmp	r2, r3
 8008738:	d201      	bcs.n	800873e <find_volume+0x2ae>
 800873a:	230d      	movs	r3, #13
 800873c:	e0ea      	b.n	8008914 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800873e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008742:	1ad3      	subs	r3, r2, r3
 8008744:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008746:	8952      	ldrh	r2, [r2, #10]
 8008748:	fbb3 f3f2 	udiv	r3, r3, r2
 800874c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	2b00      	cmp	r3, #0
 8008752:	d103      	bne.n	800875c <find_volume+0x2cc>
 8008754:	230d      	movs	r3, #13
 8008756:	e0dd      	b.n	8008914 <find_volume+0x484>
 8008758:	20000028 	.word	0x20000028
		fmt = FS_FAT32;
 800875c:	2303      	movs	r3, #3
 800875e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8008762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008764:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8008768:	4293      	cmp	r3, r2
 800876a:	d802      	bhi.n	8008772 <find_volume+0x2e2>
 800876c:	2302      	movs	r3, #2
 800876e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8008772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008774:	f640 72f5 	movw	r2, #4085	; 0xff5
 8008778:	4293      	cmp	r3, r2
 800877a:	d802      	bhi.n	8008782 <find_volume+0x2f2>
 800877c:	2301      	movs	r3, #1
 800877e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8008782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008784:	1c9a      	adds	r2, r3, #2
 8008786:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008788:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800878a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800878c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800878e:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8008790:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8008792:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008794:	441a      	add	r2, r3
 8008796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008798:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800879a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800879c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879e:	441a      	add	r2, r3
 80087a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087a2:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80087a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80087a8:	2b03      	cmp	r3, #3
 80087aa:	d11e      	bne.n	80087ea <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80087ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ae:	3330      	adds	r3, #48	; 0x30
 80087b0:	332a      	adds	r3, #42	; 0x2a
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7fe fc4e 	bl	8007054 <ld_word>
 80087b8:	4603      	mov	r3, r0
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <find_volume+0x332>
 80087be:	230d      	movs	r3, #13
 80087c0:	e0a8      	b.n	8008914 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80087c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087c4:	891b      	ldrh	r3, [r3, #8]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d001      	beq.n	80087ce <find_volume+0x33e>
 80087ca:	230d      	movs	r3, #13
 80087cc:	e0a2      	b.n	8008914 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80087ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087d0:	3330      	adds	r3, #48	; 0x30
 80087d2:	332c      	adds	r3, #44	; 0x2c
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7fe fc55 	bl	8007084 <ld_dword>
 80087da:	4602      	mov	r2, r0
 80087dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087de:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80087e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087e2:	695b      	ldr	r3, [r3, #20]
 80087e4:	009b      	lsls	r3, r3, #2
 80087e6:	647b      	str	r3, [r7, #68]	; 0x44
 80087e8:	e01f      	b.n	800882a <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80087ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087ec:	891b      	ldrh	r3, [r3, #8]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <find_volume+0x366>
 80087f2:	230d      	movs	r3, #13
 80087f4:	e08e      	b.n	8008914 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80087f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80087f8:	6a1a      	ldr	r2, [r3, #32]
 80087fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087fc:	441a      	add	r2, r3
 80087fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008800:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8008802:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008806:	2b02      	cmp	r3, #2
 8008808:	d103      	bne.n	8008812 <find_volume+0x382>
 800880a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800880c:	695b      	ldr	r3, [r3, #20]
 800880e:	005b      	lsls	r3, r3, #1
 8008810:	e00a      	b.n	8008828 <find_volume+0x398>
 8008812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008814:	695a      	ldr	r2, [r3, #20]
 8008816:	4613      	mov	r3, r2
 8008818:	005b      	lsls	r3, r3, #1
 800881a:	4413      	add	r3, r2
 800881c:	085a      	lsrs	r2, r3, #1
 800881e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008820:	695b      	ldr	r3, [r3, #20]
 8008822:	f003 0301 	and.w	r3, r3, #1
 8008826:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8008828:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800882a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800882c:	699a      	ldr	r2, [r3, #24]
 800882e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008830:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008834:	0a5b      	lsrs	r3, r3, #9
 8008836:	429a      	cmp	r2, r3
 8008838:	d201      	bcs.n	800883e <find_volume+0x3ae>
 800883a:	230d      	movs	r3, #13
 800883c:	e06a      	b.n	8008914 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800883e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008840:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008844:	611a      	str	r2, [r3, #16]
 8008846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008848:	691a      	ldr	r2, [r3, #16]
 800884a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800884c:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800884e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008850:	2280      	movs	r2, #128	; 0x80
 8008852:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8008854:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8008858:	2b03      	cmp	r3, #3
 800885a:	d149      	bne.n	80088f0 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800885c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800885e:	3330      	adds	r3, #48	; 0x30
 8008860:	3330      	adds	r3, #48	; 0x30
 8008862:	4618      	mov	r0, r3
 8008864:	f7fe fbf6 	bl	8007054 <ld_word>
 8008868:	4603      	mov	r3, r0
 800886a:	2b01      	cmp	r3, #1
 800886c:	d140      	bne.n	80088f0 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 800886e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008870:	3301      	adds	r3, #1
 8008872:	4619      	mov	r1, r3
 8008874:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008876:	f7fe fe9d 	bl	80075b4 <move_window>
 800887a:	4603      	mov	r3, r0
 800887c:	2b00      	cmp	r3, #0
 800887e:	d137      	bne.n	80088f0 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8008880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008882:	2200      	movs	r2, #0
 8008884:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8008886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008888:	3330      	adds	r3, #48	; 0x30
 800888a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe fbe0 	bl	8007054 <ld_word>
 8008894:	4603      	mov	r3, r0
 8008896:	461a      	mov	r2, r3
 8008898:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800889c:	429a      	cmp	r2, r3
 800889e:	d127      	bne.n	80088f0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80088a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088a2:	3330      	adds	r3, #48	; 0x30
 80088a4:	4618      	mov	r0, r3
 80088a6:	f7fe fbed 	bl	8007084 <ld_dword>
 80088aa:	4603      	mov	r3, r0
 80088ac:	4a1b      	ldr	r2, [pc, #108]	; (800891c <find_volume+0x48c>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d11e      	bne.n	80088f0 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80088b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088b4:	3330      	adds	r3, #48	; 0x30
 80088b6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7fe fbe2 	bl	8007084 <ld_dword>
 80088c0:	4603      	mov	r3, r0
 80088c2:	4a17      	ldr	r2, [pc, #92]	; (8008920 <find_volume+0x490>)
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d113      	bne.n	80088f0 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80088c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ca:	3330      	adds	r3, #48	; 0x30
 80088cc:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fe fbd7 	bl	8007084 <ld_dword>
 80088d6:	4602      	mov	r2, r0
 80088d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088da:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80088dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088de:	3330      	adds	r3, #48	; 0x30
 80088e0:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80088e4:	4618      	mov	r0, r3
 80088e6:	f7fe fbcd 	bl	8007084 <ld_dword>
 80088ea:	4602      	mov	r2, r0
 80088ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088ee:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80088f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80088f6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80088f8:	4b0a      	ldr	r3, [pc, #40]	; (8008924 <find_volume+0x494>)
 80088fa:	881b      	ldrh	r3, [r3, #0]
 80088fc:	3301      	adds	r3, #1
 80088fe:	b29a      	uxth	r2, r3
 8008900:	4b08      	ldr	r3, [pc, #32]	; (8008924 <find_volume+0x494>)
 8008902:	801a      	strh	r2, [r3, #0]
 8008904:	4b07      	ldr	r3, [pc, #28]	; (8008924 <find_volume+0x494>)
 8008906:	881a      	ldrh	r2, [r3, #0]
 8008908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800890a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800890c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800890e:	f7fe fde9 	bl	80074e4 <clear_lock>
#endif
	return FR_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3758      	adds	r7, #88	; 0x58
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}
 800891c:	41615252 	.word	0x41615252
 8008920:	61417272 	.word	0x61417272
 8008924:	2000002c 	.word	0x2000002c

08008928 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8008932:	2309      	movs	r3, #9
 8008934:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d01c      	beq.n	8008976 <validate+0x4e>
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2b00      	cmp	r3, #0
 8008942:	d018      	beq.n	8008976 <validate+0x4e>
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	781b      	ldrb	r3, [r3, #0]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d013      	beq.n	8008976 <validate+0x4e>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	889a      	ldrh	r2, [r3, #4]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	88db      	ldrh	r3, [r3, #6]
 8008958:	429a      	cmp	r2, r3
 800895a:	d10c      	bne.n	8008976 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	785b      	ldrb	r3, [r3, #1]
 8008962:	4618      	mov	r0, r3
 8008964:	f7fe fad8 	bl	8006f18 <disk_status>
 8008968:	4603      	mov	r3, r0
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <validate+0x4e>
			res = FR_OK;
 8008972:	2300      	movs	r3, #0
 8008974:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8008976:	7bfb      	ldrb	r3, [r7, #15]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d102      	bne.n	8008982 <validate+0x5a>
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	e000      	b.n	8008984 <validate+0x5c>
 8008982:	2300      	movs	r3, #0
 8008984:	683a      	ldr	r2, [r7, #0]
 8008986:	6013      	str	r3, [r2, #0]
	return res;
 8008988:	7bfb      	ldrb	r3, [r7, #15]
}
 800898a:	4618      	mov	r0, r3
 800898c:	3710      	adds	r7, #16
 800898e:	46bd      	mov	sp, r7
 8008990:	bd80      	pop	{r7, pc}
	...

08008994 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b088      	sub	sp, #32
 8008998:	af00      	add	r7, sp, #0
 800899a:	60f8      	str	r0, [r7, #12]
 800899c:	60b9      	str	r1, [r7, #8]
 800899e:	4613      	mov	r3, r2
 80089a0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80089a6:	f107 0310 	add.w	r3, r7, #16
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7ff fcd5 	bl	800835a <get_ldnumber>
 80089b0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80089b2:	69fb      	ldr	r3, [r7, #28]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	da01      	bge.n	80089bc <f_mount+0x28>
 80089b8:	230b      	movs	r3, #11
 80089ba:	e02b      	b.n	8008a14 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80089bc:	4a17      	ldr	r2, [pc, #92]	; (8008a1c <f_mount+0x88>)
 80089be:	69fb      	ldr	r3, [r7, #28]
 80089c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089c4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d005      	beq.n	80089d8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80089cc:	69b8      	ldr	r0, [r7, #24]
 80089ce:	f7fe fd89 	bl	80074e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80089d2:	69bb      	ldr	r3, [r7, #24]
 80089d4:	2200      	movs	r2, #0
 80089d6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d002      	beq.n	80089e4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2200      	movs	r2, #0
 80089e2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80089e4:	68fa      	ldr	r2, [r7, #12]
 80089e6:	490d      	ldr	r1, [pc, #52]	; (8008a1c <f_mount+0x88>)
 80089e8:	69fb      	ldr	r3, [r7, #28]
 80089ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d002      	beq.n	80089fa <f_mount+0x66>
 80089f4:	79fb      	ldrb	r3, [r7, #7]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d001      	beq.n	80089fe <f_mount+0x6a>
 80089fa:	2300      	movs	r3, #0
 80089fc:	e00a      	b.n	8008a14 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80089fe:	f107 010c 	add.w	r1, r7, #12
 8008a02:	f107 0308 	add.w	r3, r7, #8
 8008a06:	2200      	movs	r2, #0
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f7ff fd41 	bl	8008490 <find_volume>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3720      	adds	r7, #32
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	20000028 	.word	0x20000028

08008a20 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b098      	sub	sp, #96	; 0x60
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	4613      	mov	r3, r2
 8008a2c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d101      	bne.n	8008a38 <f_open+0x18>
 8008a34:	2309      	movs	r3, #9
 8008a36:	e1ad      	b.n	8008d94 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8008a38:	79fb      	ldrb	r3, [r7, #7]
 8008a3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a3e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008a40:	79fa      	ldrb	r2, [r7, #7]
 8008a42:	f107 0110 	add.w	r1, r7, #16
 8008a46:	f107 0308 	add.w	r3, r7, #8
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	f7ff fd20 	bl	8008490 <find_volume>
 8008a50:	4603      	mov	r3, r0
 8008a52:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8008a56:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	f040 8191 	bne.w	8008d82 <f_open+0x362>
		dj.obj.fs = fs;
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	f107 0314 	add.w	r3, r7, #20
 8008a6a:	4611      	mov	r1, r2
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	f7ff fc03 	bl	8008278 <follow_path>
 8008a72:	4603      	mov	r3, r0
 8008a74:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8008a78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d11a      	bne.n	8008ab6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8008a80:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008a84:	b25b      	sxtb	r3, r3
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	da03      	bge.n	8008a92 <f_open+0x72>
				res = FR_INVALID_NAME;
 8008a8a:	2306      	movs	r3, #6
 8008a8c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008a90:	e011      	b.n	8008ab6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008a92:	79fb      	ldrb	r3, [r7, #7]
 8008a94:	f023 0301 	bic.w	r3, r3, #1
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	bf14      	ite	ne
 8008a9c:	2301      	movne	r3, #1
 8008a9e:	2300      	moveq	r3, #0
 8008aa0:	b2db      	uxtb	r3, r3
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	f107 0314 	add.w	r3, r7, #20
 8008aa8:	4611      	mov	r1, r2
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fe fbd2 	bl	8007254 <chk_lock>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8008ab6:	79fb      	ldrb	r3, [r7, #7]
 8008ab8:	f003 031c 	and.w	r3, r3, #28
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d07f      	beq.n	8008bc0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8008ac0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d017      	beq.n	8008af8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008ac8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008acc:	2b04      	cmp	r3, #4
 8008ace:	d10e      	bne.n	8008aee <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008ad0:	f7fe fc1c 	bl	800730c <enq_lock>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d006      	beq.n	8008ae8 <f_open+0xc8>
 8008ada:	f107 0314 	add.w	r3, r7, #20
 8008ade:	4618      	mov	r0, r3
 8008ae0:	f7ff fb03 	bl	80080ea <dir_register>
 8008ae4:	4603      	mov	r3, r0
 8008ae6:	e000      	b.n	8008aea <f_open+0xca>
 8008ae8:	2312      	movs	r3, #18
 8008aea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8008aee:	79fb      	ldrb	r3, [r7, #7]
 8008af0:	f043 0308 	orr.w	r3, r3, #8
 8008af4:	71fb      	strb	r3, [r7, #7]
 8008af6:	e010      	b.n	8008b1a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008af8:	7ebb      	ldrb	r3, [r7, #26]
 8008afa:	f003 0311 	and.w	r3, r3, #17
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d003      	beq.n	8008b0a <f_open+0xea>
					res = FR_DENIED;
 8008b02:	2307      	movs	r3, #7
 8008b04:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008b08:	e007      	b.n	8008b1a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8008b0a:	79fb      	ldrb	r3, [r7, #7]
 8008b0c:	f003 0304 	and.w	r3, r3, #4
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d002      	beq.n	8008b1a <f_open+0xfa>
 8008b14:	2308      	movs	r3, #8
 8008b16:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8008b1a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d168      	bne.n	8008bf4 <f_open+0x1d4>
 8008b22:	79fb      	ldrb	r3, [r7, #7]
 8008b24:	f003 0308 	and.w	r3, r3, #8
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d063      	beq.n	8008bf4 <f_open+0x1d4>
				dw = GET_FATTIME();
 8008b2c:	f7fe f83a 	bl	8006ba4 <get_fattime>
 8008b30:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b34:	330e      	adds	r3, #14
 8008b36:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b38:	4618      	mov	r0, r3
 8008b3a:	f7fe fae1 	bl	8007100 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8008b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b40:	3316      	adds	r3, #22
 8008b42:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008b44:	4618      	mov	r0, r3
 8008b46:	f7fe fadb 	bl	8007100 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8008b4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b4c:	330b      	adds	r3, #11
 8008b4e:	2220      	movs	r2, #32
 8008b50:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b56:	4611      	mov	r1, r2
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f7ff fa32 	bl	8007fc2 <ld_clust>
 8008b5e:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b64:	2200      	movs	r2, #0
 8008b66:	4618      	mov	r0, r3
 8008b68:	f7ff fa4a 	bl	8008000 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8008b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b6e:	331c      	adds	r3, #28
 8008b70:	2100      	movs	r1, #0
 8008b72:	4618      	mov	r0, r3
 8008b74:	f7fe fac4 	bl	8007100 <st_dword>
					fs->wflag = 1;
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	2201      	movs	r2, #1
 8008b7c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8008b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d037      	beq.n	8008bf4 <f_open+0x1d4>
						dw = fs->winsect;
 8008b84:	693b      	ldr	r3, [r7, #16]
 8008b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b88:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8008b8a:	f107 0314 	add.w	r3, r7, #20
 8008b8e:	2200      	movs	r2, #0
 8008b90:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7fe ff5d 	bl	8007a52 <remove_chain>
 8008b98:	4603      	mov	r3, r0
 8008b9a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8008b9e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d126      	bne.n	8008bf4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008baa:	4618      	mov	r0, r3
 8008bac:	f7fe fd02 	bl	80075b4 <move_window>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bba:	3a01      	subs	r2, #1
 8008bbc:	60da      	str	r2, [r3, #12]
 8008bbe:	e019      	b.n	8008bf4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008bc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d115      	bne.n	8008bf4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008bc8:	7ebb      	ldrb	r3, [r7, #26]
 8008bca:	f003 0310 	and.w	r3, r3, #16
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d003      	beq.n	8008bda <f_open+0x1ba>
					res = FR_NO_FILE;
 8008bd2:	2304      	movs	r3, #4
 8008bd4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008bd8:	e00c      	b.n	8008bf4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8008bda:	79fb      	ldrb	r3, [r7, #7]
 8008bdc:	f003 0302 	and.w	r3, r3, #2
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d007      	beq.n	8008bf4 <f_open+0x1d4>
 8008be4:	7ebb      	ldrb	r3, [r7, #26]
 8008be6:	f003 0301 	and.w	r3, r3, #1
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d002      	beq.n	8008bf4 <f_open+0x1d4>
						res = FR_DENIED;
 8008bee:	2307      	movs	r3, #7
 8008bf0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8008bf4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d128      	bne.n	8008c4e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8008bfc:	79fb      	ldrb	r3, [r7, #7]
 8008bfe:	f003 0308 	and.w	r3, r3, #8
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8008c06:	79fb      	ldrb	r3, [r7, #7]
 8008c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c0c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8008c16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8008c1c:	79fb      	ldrb	r3, [r7, #7]
 8008c1e:	f023 0301 	bic.w	r3, r3, #1
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	bf14      	ite	ne
 8008c26:	2301      	movne	r3, #1
 8008c28:	2300      	moveq	r3, #0
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	461a      	mov	r2, r3
 8008c2e:	f107 0314 	add.w	r3, r7, #20
 8008c32:	4611      	mov	r1, r2
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fe fb8b 	bl	8007350 <inc_lock>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	691b      	ldr	r3, [r3, #16]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d102      	bne.n	8008c4e <f_open+0x22e>
 8008c48:	2302      	movs	r3, #2
 8008c4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8008c4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	f040 8095 	bne.w	8008d82 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008c58:	693b      	ldr	r3, [r7, #16]
 8008c5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008c5c:	4611      	mov	r1, r2
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7ff f9af 	bl	8007fc2 <ld_clust>
 8008c64:	4602      	mov	r2, r0
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8008c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6c:	331c      	adds	r3, #28
 8008c6e:	4618      	mov	r0, r3
 8008c70:	f7fe fa08 	bl	8007084 <ld_dword>
 8008c74:	4602      	mov	r2, r0
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8008c80:	693a      	ldr	r2, [r7, #16]
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	88da      	ldrh	r2, [r3, #6]
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	79fa      	ldrb	r2, [r7, #7]
 8008c92:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	2200      	movs	r2, #0
 8008c98:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	3330      	adds	r3, #48	; 0x30
 8008caa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008cae:	2100      	movs	r1, #0
 8008cb0:	4618      	mov	r0, r3
 8008cb2:	f7fe fa72 	bl	800719a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8008cb6:	79fb      	ldrb	r3, [r7, #7]
 8008cb8:	f003 0320 	and.w	r3, r3, #32
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d060      	beq.n	8008d82 <f_open+0x362>
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d05c      	beq.n	8008d82 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	68da      	ldr	r2, [r3, #12]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	895b      	ldrh	r3, [r3, #10]
 8008cd4:	025b      	lsls	r3, r3, #9
 8008cd6:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	689b      	ldr	r3, [r3, #8]
 8008cdc:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	68db      	ldr	r3, [r3, #12]
 8008ce2:	657b      	str	r3, [r7, #84]	; 0x54
 8008ce4:	e016      	b.n	8008d14 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008cea:	4618      	mov	r0, r3
 8008cec:	f7fe fd1d 	bl	800772a <get_fat>
 8008cf0:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8008cf2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d802      	bhi.n	8008cfe <f_open+0x2de>
 8008cf8:	2302      	movs	r3, #2
 8008cfa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008d00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d04:	d102      	bne.n	8008d0c <f_open+0x2ec>
 8008d06:	2301      	movs	r3, #1
 8008d08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008d0c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	657b      	str	r3, [r7, #84]	; 0x54
 8008d14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d103      	bne.n	8008d24 <f_open+0x304>
 8008d1c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d8e0      	bhi.n	8008ce6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d28:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8008d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d127      	bne.n	8008d82 <f_open+0x362>
 8008d32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d022      	beq.n	8008d82 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008d40:	4618      	mov	r0, r3
 8008d42:	f7fe fcd3 	bl	80076ec <clust2sect>
 8008d46:	6478      	str	r0, [r7, #68]	; 0x44
 8008d48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d103      	bne.n	8008d56 <f_open+0x336>
						res = FR_INT_ERR;
 8008d4e:	2302      	movs	r3, #2
 8008d50:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8008d54:	e015      	b.n	8008d82 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8008d56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008d58:	0a5a      	lsrs	r2, r3, #9
 8008d5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d5c:	441a      	add	r2, r3
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	7858      	ldrb	r0, [r3, #1]
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6a1a      	ldr	r2, [r3, #32]
 8008d70:	2301      	movs	r3, #1
 8008d72:	f7fe f911 	bl	8006f98 <disk_read>
 8008d76:	4603      	mov	r3, r0
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	d002      	beq.n	8008d82 <f_open+0x362>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8008d82:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d002      	beq.n	8008d90 <f_open+0x370>
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8008d90:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	3760      	adds	r7, #96	; 0x60
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	bd80      	pop	{r7, pc}

08008d9c <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b08c      	sub	sp, #48	; 0x30
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	60f8      	str	r0, [r7, #12]
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008daa:	68bb      	ldr	r3, [r7, #8]
 8008dac:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008dae:	683b      	ldr	r3, [r7, #0]
 8008db0:	2200      	movs	r2, #0
 8008db2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f107 0210 	add.w	r2, r7, #16
 8008dba:	4611      	mov	r1, r2
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f7ff fdb3 	bl	8008928 <validate>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008dc8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d107      	bne.n	8008de0 <f_write+0x44>
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	7d5b      	ldrb	r3, [r3, #21]
 8008dd4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008dd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d002      	beq.n	8008de6 <f_write+0x4a>
 8008de0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008de4:	e14b      	b.n	800907e <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	7d1b      	ldrb	r3, [r3, #20]
 8008dea:	f003 0302 	and.w	r3, r3, #2
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d101      	bne.n	8008df6 <f_write+0x5a>
 8008df2:	2307      	movs	r3, #7
 8008df4:	e143      	b.n	800907e <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	699a      	ldr	r2, [r3, #24]
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	441a      	add	r2, r3
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	f080 812d 	bcs.w	8009062 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	699b      	ldr	r3, [r3, #24]
 8008e0c:	43db      	mvns	r3, r3
 8008e0e:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008e10:	e127      	b.n	8009062 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	699b      	ldr	r3, [r3, #24]
 8008e16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	f040 80e3 	bne.w	8008fe6 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	699b      	ldr	r3, [r3, #24]
 8008e24:	0a5b      	lsrs	r3, r3, #9
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	8952      	ldrh	r2, [r2, #10]
 8008e2a:	3a01      	subs	r2, #1
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008e30:	69bb      	ldr	r3, [r7, #24]
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d143      	bne.n	8008ebe <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	699b      	ldr	r3, [r3, #24]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d10c      	bne.n	8008e58 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	689b      	ldr	r3, [r3, #8]
 8008e42:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8008e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d11a      	bne.n	8008e80 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2100      	movs	r1, #0
 8008e4e:	4618      	mov	r0, r3
 8008e50:	f7fe fe64 	bl	8007b1c <create_chain>
 8008e54:	62b8      	str	r0, [r7, #40]	; 0x28
 8008e56:	e013      	b.n	8008e80 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d007      	beq.n	8008e70 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	4619      	mov	r1, r3
 8008e66:	68f8      	ldr	r0, [r7, #12]
 8008e68:	f7fe fef0 	bl	8007c4c <clmt_clust>
 8008e6c:	62b8      	str	r0, [r7, #40]	; 0x28
 8008e6e:	e007      	b.n	8008e80 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8008e70:	68fa      	ldr	r2, [r7, #12]
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	4619      	mov	r1, r3
 8008e78:	4610      	mov	r0, r2
 8008e7a:	f7fe fe4f 	bl	8007b1c <create_chain>
 8008e7e:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	f000 80f2 	beq.w	800906c <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8008e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d104      	bne.n	8008e98 <f_write+0xfc>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	2202      	movs	r2, #2
 8008e92:	755a      	strb	r2, [r3, #21]
 8008e94:	2302      	movs	r3, #2
 8008e96:	e0f2      	b.n	800907e <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e9e:	d104      	bne.n	8008eaa <f_write+0x10e>
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2201      	movs	r2, #1
 8008ea4:	755a      	strb	r2, [r3, #21]
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e0e9      	b.n	800907e <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008eae:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d102      	bne.n	8008ebe <f_write+0x122>
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ebc:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	7d1b      	ldrb	r3, [r3, #20]
 8008ec2:	b25b      	sxtb	r3, r3
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	da18      	bge.n	8008efa <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	7858      	ldrb	r0, [r3, #1]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6a1a      	ldr	r2, [r3, #32]
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	f7fe f87e 	bl	8006fd8 <disk_write>
 8008edc:	4603      	mov	r3, r0
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d004      	beq.n	8008eec <f_write+0x150>
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	755a      	strb	r2, [r3, #21]
 8008ee8:	2301      	movs	r3, #1
 8008eea:	e0c8      	b.n	800907e <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	7d1b      	ldrb	r3, [r3, #20]
 8008ef0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ef4:	b2da      	uxtb	r2, r3
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	69db      	ldr	r3, [r3, #28]
 8008f00:	4619      	mov	r1, r3
 8008f02:	4610      	mov	r0, r2
 8008f04:	f7fe fbf2 	bl	80076ec <clust2sect>
 8008f08:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d104      	bne.n	8008f1a <f_write+0x17e>
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	2202      	movs	r2, #2
 8008f14:	755a      	strb	r2, [r3, #21]
 8008f16:	2302      	movs	r3, #2
 8008f18:	e0b1      	b.n	800907e <f_write+0x2e2>
			sect += csect;
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	69bb      	ldr	r3, [r7, #24]
 8008f1e:	4413      	add	r3, r2
 8008f20:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	0a5b      	lsrs	r3, r3, #9
 8008f26:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008f28:	6a3b      	ldr	r3, [r7, #32]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d03c      	beq.n	8008fa8 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8008f2e:	69ba      	ldr	r2, [r7, #24]
 8008f30:	6a3b      	ldr	r3, [r7, #32]
 8008f32:	4413      	add	r3, r2
 8008f34:	693a      	ldr	r2, [r7, #16]
 8008f36:	8952      	ldrh	r2, [r2, #10]
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d905      	bls.n	8008f48 <f_write+0x1ac>
					cc = fs->csize - csect;
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	895b      	ldrh	r3, [r3, #10]
 8008f40:	461a      	mov	r2, r3
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	1ad3      	subs	r3, r2, r3
 8008f46:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008f48:	693b      	ldr	r3, [r7, #16]
 8008f4a:	7858      	ldrb	r0, [r3, #1]
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	697a      	ldr	r2, [r7, #20]
 8008f50:	69f9      	ldr	r1, [r7, #28]
 8008f52:	f7fe f841 	bl	8006fd8 <disk_write>
 8008f56:	4603      	mov	r3, r0
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d004      	beq.n	8008f66 <f_write+0x1ca>
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	2201      	movs	r2, #1
 8008f60:	755a      	strb	r2, [r3, #21]
 8008f62:	2301      	movs	r3, #1
 8008f64:	e08b      	b.n	800907e <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	6a1a      	ldr	r2, [r3, #32]
 8008f6a:	697b      	ldr	r3, [r7, #20]
 8008f6c:	1ad3      	subs	r3, r2, r3
 8008f6e:	6a3a      	ldr	r2, [r7, #32]
 8008f70:	429a      	cmp	r2, r3
 8008f72:	d915      	bls.n	8008fa0 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	6a1a      	ldr	r2, [r3, #32]
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	1ad3      	subs	r3, r2, r3
 8008f82:	025b      	lsls	r3, r3, #9
 8008f84:	69fa      	ldr	r2, [r7, #28]
 8008f86:	4413      	add	r3, r2
 8008f88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	f7fe f8e3 	bl	8007158 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	7d1b      	ldrb	r3, [r3, #20]
 8008f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f9a:	b2da      	uxtb	r2, r3
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008fa0:	6a3b      	ldr	r3, [r7, #32]
 8008fa2:	025b      	lsls	r3, r3, #9
 8008fa4:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8008fa6:	e03f      	b.n	8009028 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	6a1b      	ldr	r3, [r3, #32]
 8008fac:	697a      	ldr	r2, [r7, #20]
 8008fae:	429a      	cmp	r2, r3
 8008fb0:	d016      	beq.n	8008fe0 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	699a      	ldr	r2, [r3, #24]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	d210      	bcs.n	8008fe0 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	7858      	ldrb	r0, [r3, #1]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8008fc8:	2301      	movs	r3, #1
 8008fca:	697a      	ldr	r2, [r7, #20]
 8008fcc:	f7fd ffe4 	bl	8006f98 <disk_read>
 8008fd0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d004      	beq.n	8008fe0 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2201      	movs	r2, #1
 8008fda:	755a      	strb	r2, [r3, #21]
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e04e      	b.n	800907e <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	697a      	ldr	r2, [r7, #20]
 8008fe4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	699b      	ldr	r3, [r3, #24]
 8008fea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008fee:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8008ff2:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	429a      	cmp	r2, r3
 8008ffa:	d901      	bls.n	8009000 <f_write+0x264>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800900e:	4413      	add	r3, r2
 8009010:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009012:	69f9      	ldr	r1, [r7, #28]
 8009014:	4618      	mov	r0, r3
 8009016:	f7fe f89f 	bl	8007158 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	7d1b      	ldrb	r3, [r3, #20]
 800901e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009022:	b2da      	uxtb	r2, r3
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8009028:	69fa      	ldr	r2, [r7, #28]
 800902a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800902c:	4413      	add	r3, r2
 800902e:	61fb      	str	r3, [r7, #28]
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	699a      	ldr	r2, [r3, #24]
 8009034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009036:	441a      	add	r2, r3
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	619a      	str	r2, [r3, #24]
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	68da      	ldr	r2, [r3, #12]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	429a      	cmp	r2, r3
 8009046:	bf38      	it	cc
 8009048:	461a      	movcc	r2, r3
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	60da      	str	r2, [r3, #12]
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009054:	441a      	add	r2, r3
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	601a      	str	r2, [r3, #0]
 800905a:	687a      	ldr	r2, [r7, #4]
 800905c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800905e:	1ad3      	subs	r3, r2, r3
 8009060:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	f47f aed4 	bne.w	8008e12 <f_write+0x76>
 800906a:	e000      	b.n	800906e <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800906c:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	7d1b      	ldrb	r3, [r3, #20]
 8009072:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009076:	b2da      	uxtb	r2, r3
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800907c:	2300      	movs	r3, #0
}
 800907e:	4618      	mov	r0, r3
 8009080:	3730      	adds	r7, #48	; 0x30
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8009086:	b580      	push	{r7, lr}
 8009088:	b086      	sub	sp, #24
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	f107 0208 	add.w	r2, r7, #8
 8009094:	4611      	mov	r1, r2
 8009096:	4618      	mov	r0, r3
 8009098:	f7ff fc46 	bl	8008928 <validate>
 800909c:	4603      	mov	r3, r0
 800909e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80090a0:	7dfb      	ldrb	r3, [r7, #23]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d168      	bne.n	8009178 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	7d1b      	ldrb	r3, [r3, #20]
 80090aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d062      	beq.n	8009178 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	7d1b      	ldrb	r3, [r3, #20]
 80090b6:	b25b      	sxtb	r3, r3
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	da15      	bge.n	80090e8 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	7858      	ldrb	r0, [r3, #1]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6a1a      	ldr	r2, [r3, #32]
 80090ca:	2301      	movs	r3, #1
 80090cc:	f7fd ff84 	bl	8006fd8 <disk_write>
 80090d0:	4603      	mov	r3, r0
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d001      	beq.n	80090da <f_sync+0x54>
 80090d6:	2301      	movs	r3, #1
 80090d8:	e04f      	b.n	800917a <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	7d1b      	ldrb	r3, [r3, #20]
 80090de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80090e2:	b2da      	uxtb	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80090e8:	f7fd fd5c 	bl	8006ba4 <get_fattime>
 80090ec:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f4:	4619      	mov	r1, r3
 80090f6:	4610      	mov	r0, r2
 80090f8:	f7fe fa5c 	bl	80075b4 <move_window>
 80090fc:	4603      	mov	r3, r0
 80090fe:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8009100:	7dfb      	ldrb	r3, [r7, #23]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d138      	bne.n	8009178 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	330b      	adds	r3, #11
 8009110:	781a      	ldrb	r2, [r3, #0]
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	330b      	adds	r3, #11
 8009116:	f042 0220 	orr.w	r2, r2, #32
 800911a:	b2d2      	uxtb	r2, r2
 800911c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6818      	ldr	r0, [r3, #0]
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	689b      	ldr	r3, [r3, #8]
 8009126:	461a      	mov	r2, r3
 8009128:	68f9      	ldr	r1, [r7, #12]
 800912a:	f7fe ff69 	bl	8008000 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	f103 021c 	add.w	r2, r3, #28
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	68db      	ldr	r3, [r3, #12]
 8009138:	4619      	mov	r1, r3
 800913a:	4610      	mov	r0, r2
 800913c:	f7fd ffe0 	bl	8007100 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	3316      	adds	r3, #22
 8009144:	6939      	ldr	r1, [r7, #16]
 8009146:	4618      	mov	r0, r3
 8009148:	f7fd ffda 	bl	8007100 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	3312      	adds	r3, #18
 8009150:	2100      	movs	r1, #0
 8009152:	4618      	mov	r0, r3
 8009154:	f7fd ffb9 	bl	80070ca <st_word>
					fs->wflag = 1;
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2201      	movs	r2, #1
 800915c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	4618      	mov	r0, r3
 8009162:	f7fe fa55 	bl	8007610 <sync_fs>
 8009166:	4603      	mov	r3, r0
 8009168:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	7d1b      	ldrb	r3, [r3, #20]
 800916e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009172:	b2da      	uxtb	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8009178:	7dfb      	ldrb	r3, [r7, #23]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3718      	adds	r7, #24
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b084      	sub	sp, #16
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800918a:	6878      	ldr	r0, [r7, #4]
 800918c:	f7ff ff7b 	bl	8009086 <f_sync>
 8009190:	4603      	mov	r3, r0
 8009192:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8009194:	7bfb      	ldrb	r3, [r7, #15]
 8009196:	2b00      	cmp	r3, #0
 8009198:	d118      	bne.n	80091cc <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f107 0208 	add.w	r2, r7, #8
 80091a0:	4611      	mov	r1, r2
 80091a2:	4618      	mov	r0, r3
 80091a4:	f7ff fbc0 	bl	8008928 <validate>
 80091a8:	4603      	mov	r3, r0
 80091aa:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80091ac:	7bfb      	ldrb	r3, [r7, #15]
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d10c      	bne.n	80091cc <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	4618      	mov	r0, r3
 80091b8:	f7fe f958 	bl	800746c <dec_lock>
 80091bc:	4603      	mov	r3, r0
 80091be:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d102      	bne.n	80091cc <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80091cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ce:	4618      	mov	r0, r3
 80091d0:	3710      	adds	r7, #16
 80091d2:	46bd      	mov	sp, r7
 80091d4:	bd80      	pop	{r7, pc}
	...

080091d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80091d8:	b480      	push	{r7}
 80091da:	b087      	sub	sp, #28
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	4613      	mov	r3, r2
 80091e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80091e6:	2301      	movs	r3, #1
 80091e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80091ea:	2300      	movs	r3, #0
 80091ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80091ee:	4b1f      	ldr	r3, [pc, #124]	; (800926c <FATFS_LinkDriverEx+0x94>)
 80091f0:	7a5b      	ldrb	r3, [r3, #9]
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d131      	bne.n	800925c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80091f8:	4b1c      	ldr	r3, [pc, #112]	; (800926c <FATFS_LinkDriverEx+0x94>)
 80091fa:	7a5b      	ldrb	r3, [r3, #9]
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	461a      	mov	r2, r3
 8009200:	4b1a      	ldr	r3, [pc, #104]	; (800926c <FATFS_LinkDriverEx+0x94>)
 8009202:	2100      	movs	r1, #0
 8009204:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009206:	4b19      	ldr	r3, [pc, #100]	; (800926c <FATFS_LinkDriverEx+0x94>)
 8009208:	7a5b      	ldrb	r3, [r3, #9]
 800920a:	b2db      	uxtb	r3, r3
 800920c:	4a17      	ldr	r2, [pc, #92]	; (800926c <FATFS_LinkDriverEx+0x94>)
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	4413      	add	r3, r2
 8009212:	68fa      	ldr	r2, [r7, #12]
 8009214:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009216:	4b15      	ldr	r3, [pc, #84]	; (800926c <FATFS_LinkDriverEx+0x94>)
 8009218:	7a5b      	ldrb	r3, [r3, #9]
 800921a:	b2db      	uxtb	r3, r3
 800921c:	461a      	mov	r2, r3
 800921e:	4b13      	ldr	r3, [pc, #76]	; (800926c <FATFS_LinkDriverEx+0x94>)
 8009220:	4413      	add	r3, r2
 8009222:	79fa      	ldrb	r2, [r7, #7]
 8009224:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009226:	4b11      	ldr	r3, [pc, #68]	; (800926c <FATFS_LinkDriverEx+0x94>)
 8009228:	7a5b      	ldrb	r3, [r3, #9]
 800922a:	b2db      	uxtb	r3, r3
 800922c:	1c5a      	adds	r2, r3, #1
 800922e:	b2d1      	uxtb	r1, r2
 8009230:	4a0e      	ldr	r2, [pc, #56]	; (800926c <FATFS_LinkDriverEx+0x94>)
 8009232:	7251      	strb	r1, [r2, #9]
 8009234:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009236:	7dbb      	ldrb	r3, [r7, #22]
 8009238:	3330      	adds	r3, #48	; 0x30
 800923a:	b2da      	uxtb	r2, r3
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	3301      	adds	r3, #1
 8009244:	223a      	movs	r2, #58	; 0x3a
 8009246:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009248:	68bb      	ldr	r3, [r7, #8]
 800924a:	3302      	adds	r3, #2
 800924c:	222f      	movs	r2, #47	; 0x2f
 800924e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	3303      	adds	r3, #3
 8009254:	2200      	movs	r2, #0
 8009256:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009258:	2300      	movs	r3, #0
 800925a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800925c:	7dfb      	ldrb	r3, [r7, #23]
}
 800925e:	4618      	mov	r0, r3
 8009260:	371c      	adds	r7, #28
 8009262:	46bd      	mov	sp, r7
 8009264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009268:	4770      	bx	lr
 800926a:	bf00      	nop
 800926c:	20000050 	.word	0x20000050

08009270 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b082      	sub	sp, #8
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800927a:	2200      	movs	r2, #0
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff ffaa 	bl	80091d8 <FATFS_LinkDriverEx>
 8009284:	4603      	mov	r3, r0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}
	...

08009290 <__libc_init_array>:
 8009290:	b570      	push	{r4, r5, r6, lr}
 8009292:	4d0d      	ldr	r5, [pc, #52]	; (80092c8 <__libc_init_array+0x38>)
 8009294:	4c0d      	ldr	r4, [pc, #52]	; (80092cc <__libc_init_array+0x3c>)
 8009296:	1b64      	subs	r4, r4, r5
 8009298:	10a4      	asrs	r4, r4, #2
 800929a:	2600      	movs	r6, #0
 800929c:	42a6      	cmp	r6, r4
 800929e:	d109      	bne.n	80092b4 <__libc_init_array+0x24>
 80092a0:	4d0b      	ldr	r5, [pc, #44]	; (80092d0 <__libc_init_array+0x40>)
 80092a2:	4c0c      	ldr	r4, [pc, #48]	; (80092d4 <__libc_init_array+0x44>)
 80092a4:	f000 f820 	bl	80092e8 <_init>
 80092a8:	1b64      	subs	r4, r4, r5
 80092aa:	10a4      	asrs	r4, r4, #2
 80092ac:	2600      	movs	r6, #0
 80092ae:	42a6      	cmp	r6, r4
 80092b0:	d105      	bne.n	80092be <__libc_init_array+0x2e>
 80092b2:	bd70      	pop	{r4, r5, r6, pc}
 80092b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80092b8:	4798      	blx	r3
 80092ba:	3601      	adds	r6, #1
 80092bc:	e7ee      	b.n	800929c <__libc_init_array+0xc>
 80092be:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c2:	4798      	blx	r3
 80092c4:	3601      	adds	r6, #1
 80092c6:	e7f2      	b.n	80092ae <__libc_init_array+0x1e>
 80092c8:	08009418 	.word	0x08009418
 80092cc:	08009418 	.word	0x08009418
 80092d0:	08009418 	.word	0x08009418
 80092d4:	0800941c 	.word	0x0800941c

080092d8 <memset>:
 80092d8:	4402      	add	r2, r0
 80092da:	4603      	mov	r3, r0
 80092dc:	4293      	cmp	r3, r2
 80092de:	d100      	bne.n	80092e2 <memset+0xa>
 80092e0:	4770      	bx	lr
 80092e2:	f803 1b01 	strb.w	r1, [r3], #1
 80092e6:	e7f9      	b.n	80092dc <memset+0x4>

080092e8 <_init>:
 80092e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092ea:	bf00      	nop
 80092ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ee:	bc08      	pop	{r3}
 80092f0:	469e      	mov	lr, r3
 80092f2:	4770      	bx	lr

080092f4 <_fini>:
 80092f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f6:	bf00      	nop
 80092f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092fa:	bc08      	pop	{r3}
 80092fc:	469e      	mov	lr, r3
 80092fe:	4770      	bx	lr
