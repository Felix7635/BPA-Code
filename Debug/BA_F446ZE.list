
BA_F446ZE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077a4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08007968  08007968  00017968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a3c  08007a3c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007a3c  08007a3c  00017a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a44  08007a44  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a44  08007a44  00017a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a48  08007a48  00017a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007a4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010a0  2000000c  08007a58  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010ac  08007a58  000210ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001af0b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b1b  00000000  00000000  0003af47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001300  00000000  00000000  0003ea68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001168  00000000  00000000  0003fd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000256c9  00000000  00000000  00040ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018958  00000000  00000000  00066599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7173  00000000  00000000  0007eef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00156064  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d14  00000000  00000000  001560b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	2000000c 	.word	0x2000000c
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08007950 	.word	0x08007950

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000010 	.word	0x20000010
 8000200:	08007950 	.word	0x08007950

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <__aeabi_uldivmod>:
 8000214:	b953      	cbnz	r3, 800022c <__aeabi_uldivmod+0x18>
 8000216:	b94a      	cbnz	r2, 800022c <__aeabi_uldivmod+0x18>
 8000218:	2900      	cmp	r1, #0
 800021a:	bf08      	it	eq
 800021c:	2800      	cmpeq	r0, #0
 800021e:	bf1c      	itt	ne
 8000220:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000224:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000228:	f000 b96e 	b.w	8000508 <__aeabi_idiv0>
 800022c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000230:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000234:	f000 f806 	bl	8000244 <__udivmoddi4>
 8000238:	f8dd e004 	ldr.w	lr, [sp, #4]
 800023c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000240:	b004      	add	sp, #16
 8000242:	4770      	bx	lr

08000244 <__udivmoddi4>:
 8000244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000248:	9d08      	ldr	r5, [sp, #32]
 800024a:	4604      	mov	r4, r0
 800024c:	468c      	mov	ip, r1
 800024e:	2b00      	cmp	r3, #0
 8000250:	f040 8083 	bne.w	800035a <__udivmoddi4+0x116>
 8000254:	428a      	cmp	r2, r1
 8000256:	4617      	mov	r7, r2
 8000258:	d947      	bls.n	80002ea <__udivmoddi4+0xa6>
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	b142      	cbz	r2, 8000272 <__udivmoddi4+0x2e>
 8000260:	f1c2 0020 	rsb	r0, r2, #32
 8000264:	fa24 f000 	lsr.w	r0, r4, r0
 8000268:	4091      	lsls	r1, r2
 800026a:	4097      	lsls	r7, r2
 800026c:	ea40 0c01 	orr.w	ip, r0, r1
 8000270:	4094      	lsls	r4, r2
 8000272:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000276:	0c23      	lsrs	r3, r4, #16
 8000278:	fbbc f6f8 	udiv	r6, ip, r8
 800027c:	fa1f fe87 	uxth.w	lr, r7
 8000280:	fb08 c116 	mls	r1, r8, r6, ip
 8000284:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000288:	fb06 f10e 	mul.w	r1, r6, lr
 800028c:	4299      	cmp	r1, r3
 800028e:	d909      	bls.n	80002a4 <__udivmoddi4+0x60>
 8000290:	18fb      	adds	r3, r7, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000296:	f080 8119 	bcs.w	80004cc <__udivmoddi4+0x288>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 8116 	bls.w	80004cc <__udivmoddi4+0x288>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	443b      	add	r3, r7
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b8:	45a6      	cmp	lr, r4
 80002ba:	d909      	bls.n	80002d0 <__udivmoddi4+0x8c>
 80002bc:	193c      	adds	r4, r7, r4
 80002be:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002c2:	f080 8105 	bcs.w	80004d0 <__udivmoddi4+0x28c>
 80002c6:	45a6      	cmp	lr, r4
 80002c8:	f240 8102 	bls.w	80004d0 <__udivmoddi4+0x28c>
 80002cc:	3802      	subs	r0, #2
 80002ce:	443c      	add	r4, r7
 80002d0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d4:	eba4 040e 	sub.w	r4, r4, lr
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa0>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xaa>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f282 	clz	r2, r2
 80002f2:	2a00      	cmp	r2, #0
 80002f4:	d150      	bne.n	8000398 <__udivmoddi4+0x154>
 80002f6:	1bcb      	subs	r3, r1, r7
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	fa1f f887 	uxth.w	r8, r7
 8000300:	2601      	movs	r6, #1
 8000302:	fbb3 fcfe 	udiv	ip, r3, lr
 8000306:	0c21      	lsrs	r1, r4, #16
 8000308:	fb0e 331c 	mls	r3, lr, ip, r3
 800030c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000310:	fb08 f30c 	mul.w	r3, r8, ip
 8000314:	428b      	cmp	r3, r1
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0xe4>
 8000318:	1879      	adds	r1, r7, r1
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0xe2>
 8000320:	428b      	cmp	r3, r1
 8000322:	f200 80e9 	bhi.w	80004f8 <__udivmoddi4+0x2b4>
 8000326:	4684      	mov	ip, r0
 8000328:	1ac9      	subs	r1, r1, r3
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1110 	mls	r1, lr, r0, r1
 8000334:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x10c>
 8000340:	193c      	adds	r4, r7, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x10a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80d9 	bhi.w	8000500 <__udivmoddi4+0x2bc>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e7bf      	b.n	80002da <__udivmoddi4+0x96>
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0x12e>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80b1 	beq.w	80004c6 <__udivmoddi4+0x282>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x1cc>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0x140>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80b8 	bhi.w	80004f4 <__udivmoddi4+0x2b0>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0103 	sbc.w	r1, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	468c      	mov	ip, r1
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0a8      	beq.n	80002e4 <__udivmoddi4+0xa0>
 8000392:	e9c5 4c00 	strd	r4, ip, [r5]
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0xa0>
 8000398:	f1c2 0320 	rsb	r3, r2, #32
 800039c:	fa20 f603 	lsr.w	r6, r0, r3
 80003a0:	4097      	lsls	r7, r2
 80003a2:	fa01 f002 	lsl.w	r0, r1, r2
 80003a6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003aa:	40d9      	lsrs	r1, r3
 80003ac:	4330      	orrs	r0, r6
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b4:	fa1f f887 	uxth.w	r8, r7
 80003b8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003c0:	fb06 f108 	mul.w	r1, r6, r8
 80003c4:	4299      	cmp	r1, r3
 80003c6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ca:	d909      	bls.n	80003e0 <__udivmoddi4+0x19c>
 80003cc:	18fb      	adds	r3, r7, r3
 80003ce:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 80003d2:	f080 808d 	bcs.w	80004f0 <__udivmoddi4+0x2ac>
 80003d6:	4299      	cmp	r1, r3
 80003d8:	f240 808a 	bls.w	80004f0 <__udivmoddi4+0x2ac>
 80003dc:	3e02      	subs	r6, #2
 80003de:	443b      	add	r3, r7
 80003e0:	1a5b      	subs	r3, r3, r1
 80003e2:	b281      	uxth	r1, r0
 80003e4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003f0:	fb00 f308 	mul.w	r3, r0, r8
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d907      	bls.n	8000408 <__udivmoddi4+0x1c4>
 80003f8:	1879      	adds	r1, r7, r1
 80003fa:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003fe:	d273      	bcs.n	80004e8 <__udivmoddi4+0x2a4>
 8000400:	428b      	cmp	r3, r1
 8000402:	d971      	bls.n	80004e8 <__udivmoddi4+0x2a4>
 8000404:	3802      	subs	r0, #2
 8000406:	4439      	add	r1, r7
 8000408:	1acb      	subs	r3, r1, r3
 800040a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040e:	e778      	b.n	8000302 <__udivmoddi4+0xbe>
 8000410:	f1c6 0c20 	rsb	ip, r6, #32
 8000414:	fa03 f406 	lsl.w	r4, r3, r6
 8000418:	fa22 f30c 	lsr.w	r3, r2, ip
 800041c:	431c      	orrs	r4, r3
 800041e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800042a:	fa21 f10c 	lsr.w	r1, r1, ip
 800042e:	431f      	orrs	r7, r3
 8000430:	0c3b      	lsrs	r3, r7, #16
 8000432:	fbb1 f9fe 	udiv	r9, r1, lr
 8000436:	fa1f f884 	uxth.w	r8, r4
 800043a:	fb0e 1119 	mls	r1, lr, r9, r1
 800043e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000442:	fb09 fa08 	mul.w	sl, r9, r8
 8000446:	458a      	cmp	sl, r1
 8000448:	fa02 f206 	lsl.w	r2, r2, r6
 800044c:	fa00 f306 	lsl.w	r3, r0, r6
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x220>
 8000452:	1861      	adds	r1, r4, r1
 8000454:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000458:	d248      	bcs.n	80004ec <__udivmoddi4+0x2a8>
 800045a:	458a      	cmp	sl, r1
 800045c:	d946      	bls.n	80004ec <__udivmoddi4+0x2a8>
 800045e:	f1a9 0902 	sub.w	r9, r9, #2
 8000462:	4421      	add	r1, r4
 8000464:	eba1 010a 	sub.w	r1, r1, sl
 8000468:	b2bf      	uxth	r7, r7
 800046a:	fbb1 f0fe 	udiv	r0, r1, lr
 800046e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000472:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000476:	fb00 f808 	mul.w	r8, r0, r8
 800047a:	45b8      	cmp	r8, r7
 800047c:	d907      	bls.n	800048e <__udivmoddi4+0x24a>
 800047e:	19e7      	adds	r7, r4, r7
 8000480:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000484:	d22e      	bcs.n	80004e4 <__udivmoddi4+0x2a0>
 8000486:	45b8      	cmp	r8, r7
 8000488:	d92c      	bls.n	80004e4 <__udivmoddi4+0x2a0>
 800048a:	3802      	subs	r0, #2
 800048c:	4427      	add	r7, r4
 800048e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000492:	eba7 0708 	sub.w	r7, r7, r8
 8000496:	fba0 8902 	umull	r8, r9, r0, r2
 800049a:	454f      	cmp	r7, r9
 800049c:	46c6      	mov	lr, r8
 800049e:	4649      	mov	r1, r9
 80004a0:	d31a      	bcc.n	80004d8 <__udivmoddi4+0x294>
 80004a2:	d017      	beq.n	80004d4 <__udivmoddi4+0x290>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x27a>
 80004a6:	ebb3 020e 	subs.w	r2, r3, lr
 80004aa:	eb67 0701 	sbc.w	r7, r7, r1
 80004ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004b2:	40f2      	lsrs	r2, r6
 80004b4:	ea4c 0202 	orr.w	r2, ip, r2
 80004b8:	40f7      	lsrs	r7, r6
 80004ba:	e9c5 2700 	strd	r2, r7, [r5]
 80004be:	2600      	movs	r6, #0
 80004c0:	4631      	mov	r1, r6
 80004c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c6:	462e      	mov	r6, r5
 80004c8:	4628      	mov	r0, r5
 80004ca:	e70b      	b.n	80002e4 <__udivmoddi4+0xa0>
 80004cc:	4606      	mov	r6, r0
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0x60>
 80004d0:	4618      	mov	r0, r3
 80004d2:	e6fd      	b.n	80002d0 <__udivmoddi4+0x8c>
 80004d4:	4543      	cmp	r3, r8
 80004d6:	d2e5      	bcs.n	80004a4 <__udivmoddi4+0x260>
 80004d8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004dc:	eb69 0104 	sbc.w	r1, r9, r4
 80004e0:	3801      	subs	r0, #1
 80004e2:	e7df      	b.n	80004a4 <__udivmoddi4+0x260>
 80004e4:	4608      	mov	r0, r1
 80004e6:	e7d2      	b.n	800048e <__udivmoddi4+0x24a>
 80004e8:	4660      	mov	r0, ip
 80004ea:	e78d      	b.n	8000408 <__udivmoddi4+0x1c4>
 80004ec:	4681      	mov	r9, r0
 80004ee:	e7b9      	b.n	8000464 <__udivmoddi4+0x220>
 80004f0:	4666      	mov	r6, ip
 80004f2:	e775      	b.n	80003e0 <__udivmoddi4+0x19c>
 80004f4:	4630      	mov	r0, r6
 80004f6:	e74a      	b.n	800038e <__udivmoddi4+0x14a>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	4439      	add	r1, r7
 80004fe:	e713      	b.n	8000328 <__udivmoddi4+0xe4>
 8000500:	3802      	subs	r0, #2
 8000502:	443c      	add	r4, r7
 8000504:	e724      	b.n	8000350 <__udivmoddi4+0x10c>
 8000506:	bf00      	nop

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <test_Encoder>:
	f_close(&tmp_file);
	return;
}

void test_Encoder()
{
 800050c:	b580      	push	{r7, lr}
 800050e:	af00      	add	r7, sp, #0
	while(1)
	{
		if(HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) == GPIO_PIN_RESET)
 8000510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000514:	4818      	ldr	r0, [pc, #96]	; (8000578 <test_Encoder+0x6c>)
 8000516:	f002 f869 	bl	80025ec <HAL_GPIO_ReadPin>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d1f7      	bne.n	8000510 <test_Encoder+0x4>
		{
			if(HAL_GPIO_ReadPin(ENC_B_GPIO_Port, ENC_B_Pin) == GPIO_PIN_RESET)
 8000520:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000524:	4814      	ldr	r0, [pc, #80]	; (8000578 <test_Encoder+0x6c>)
 8000526:	f002 f861 	bl	80025ec <HAL_GPIO_ReadPin>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d10a      	bne.n	8000546 <test_Encoder+0x3a>
			{
				HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2120      	movs	r1, #32
 8000534:	4811      	ldr	r0, [pc, #68]	; (800057c <test_Encoder+0x70>)
 8000536:	f002 f871 	bl	800261c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2110      	movs	r1, #16
 800053e:	480f      	ldr	r0, [pc, #60]	; (800057c <test_Encoder+0x70>)
 8000540:	f002 f86c 	bl	800261c <HAL_GPIO_WritePin>
 8000544:	e009      	b.n	800055a <test_Encoder+0x4e>
			}
			else
			{

				HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
 8000546:	2200      	movs	r2, #0
 8000548:	2120      	movs	r1, #32
 800054a:	480c      	ldr	r0, [pc, #48]	; (800057c <test_Encoder+0x70>)
 800054c:	f002 f866 	bl	800261c <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);
 8000550:	2201      	movs	r2, #1
 8000552:	2110      	movs	r1, #16
 8000554:	4809      	ldr	r0, [pc, #36]	; (800057c <test_Encoder+0x70>)
 8000556:	f002 f861 	bl	800261c <HAL_GPIO_WritePin>
			}
			HAL_Delay(500);
 800055a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800055e:	f001 f9ff 	bl	8001960 <HAL_Delay>
			HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
 8000562:	2200      	movs	r2, #0
 8000564:	2120      	movs	r1, #32
 8000566:	4805      	ldr	r0, [pc, #20]	; (800057c <test_Encoder+0x70>)
 8000568:	f002 f858 	bl	800261c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);
 800056c:	2200      	movs	r2, #0
 800056e:	2110      	movs	r1, #16
 8000570:	4802      	ldr	r0, [pc, #8]	; (800057c <test_Encoder+0x70>)
 8000572:	f002 f853 	bl	800261c <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ENC_A_GPIO_Port, ENC_A_Pin) == GPIO_PIN_RESET)
 8000576:	e7cb      	b.n	8000510 <test_Encoder+0x4>
 8000578:	40020400 	.word	0x40020400
 800057c:	40021000 	.word	0x40021000

08000580 <test_LCD>:
		}
	}
}

void test_LCD()
{
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b096      	sub	sp, #88	; 0x58
 8000584:	af04      	add	r7, sp, #16
	Lcd_PinType pins[8] = {
 8000586:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <test_LCD+0xb0>)
 8000588:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800058c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800058e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			LCD_D5_Pin,
			LCD_D6_Pin,
			LCD_D7_Pin
	};

	Lcd_PortType ports[8] = {
 8000592:	4b28      	ldr	r3, [pc, #160]	; (8000634 <test_LCD+0xb4>)
 8000594:	f107 0418 	add.w	r4, r7, #24
 8000598:	461d      	mov	r5, r3
 800059a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800059c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800059e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80005a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			LCD_D5_GPIO_Port,
			LCD_D6_GPIO_Port,
			LCD_D7_GPIO_Port
	};

	Lcd_HandleTypeDef lcd = Lcd_create(ports, pins, LCD_RS_GPIO_Port, LCD_RS_Pin, LCD_E_GPIO_Port, LCD_E_Pin, LCD_8_BIT_MODE);
 80005a6:	4638      	mov	r0, r7
 80005a8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80005ac:	f107 0118 	add.w	r1, r7, #24
 80005b0:	2301      	movs	r3, #1
 80005b2:	9303      	str	r3, [sp, #12]
 80005b4:	2320      	movs	r3, #32
 80005b6:	9302      	str	r3, [sp, #8]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <test_LCD+0xb8>)
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	2310      	movs	r3, #16
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <test_LCD+0xb8>)
 80005c2:	f007 f84c 	bl	800765e <Lcd_create>


	HAL_Delay(1);
 80005c6:	2001      	movs	r0, #1
 80005c8:	f001 f9ca 	bl	8001960 <HAL_Delay>
	Lcd_clear(&lcd);
 80005cc:	463b      	mov	r3, r7
 80005ce:	4618      	mov	r0, r3
 80005d0:	f007 f8dc 	bl	800778c <Lcd_clear>
	HAL_Delay(1);
 80005d4:	2001      	movs	r0, #1
 80005d6:	f001 f9c3 	bl	8001960 <HAL_Delay>
	Lcd_string(&lcd, "first row");
 80005da:	463b      	mov	r3, r7
 80005dc:	4917      	ldr	r1, [pc, #92]	; (800063c <test_LCD+0xbc>)
 80005de:	4618      	mov	r0, r3
 80005e0:	f007 f89a 	bl	8007718 <Lcd_string>
	Lcd_cursor(&lcd, 1, 0);
 80005e4:	463b      	mov	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	2101      	movs	r1, #1
 80005ea:	4618      	mov	r0, r3
 80005ec:	f007 f8b4 	bl	8007758 <Lcd_cursor>
	Lcd_string(&lcd, "second row");
 80005f0:	463b      	mov	r3, r7
 80005f2:	4913      	ldr	r1, [pc, #76]	; (8000640 <test_LCD+0xc0>)
 80005f4:	4618      	mov	r0, r3
 80005f6:	f007 f88f 	bl	8007718 <Lcd_string>
	Lcd_cursor(&lcd, 2, 0);
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	2102      	movs	r1, #2
 8000600:	4618      	mov	r0, r3
 8000602:	f007 f8a9 	bl	8007758 <Lcd_cursor>
	Lcd_string(&lcd, "third row");
 8000606:	463b      	mov	r3, r7
 8000608:	490e      	ldr	r1, [pc, #56]	; (8000644 <test_LCD+0xc4>)
 800060a:	4618      	mov	r0, r3
 800060c:	f007 f884 	bl	8007718 <Lcd_string>
	Lcd_cursor(&lcd, 3, 0);
 8000610:	463b      	mov	r3, r7
 8000612:	2200      	movs	r2, #0
 8000614:	2103      	movs	r1, #3
 8000616:	4618      	mov	r0, r3
 8000618:	f007 f89e 	bl	8007758 <Lcd_cursor>
	Lcd_string(&lcd, "fourth row");
 800061c:	463b      	mov	r3, r7
 800061e:	490a      	ldr	r1, [pc, #40]	; (8000648 <test_LCD+0xc8>)
 8000620:	4618      	mov	r0, r3
 8000622:	f007 f879 	bl	8007718 <Lcd_string>
}
 8000626:	bf00      	nop
 8000628:	3748      	adds	r7, #72	; 0x48
 800062a:	46bd      	mov	sp, r7
 800062c:	bdb0      	pop	{r4, r5, r7, pc}
 800062e:	bf00      	nop
 8000630:	080079b8 	.word	0x080079b8
 8000634:	080079c8 	.word	0x080079c8
 8000638:	40020c00 	.word	0x40020c00
 800063c:	08007988 	.word	0x08007988
 8000640:	08007994 	.word	0x08007994
 8000644:	080079a0 	.word	0x080079a0
 8000648:	080079ac 	.word	0x080079ac

0800064c <DMX_Init>:
#include "DMX.h"


void DMX_Init(DMX_TypeDef* hdmx, UART_HandleTypeDef* huart, char *DMXFile_name, char *DMXInfoFile_name)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	603b      	str	r3, [r7, #0]
	memcpy(hdmx->DMXFile_name, DMXFile_name, 9);
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	f503 638c 	add.w	r3, r3, #1120	; 0x460
 8000660:	2209      	movs	r2, #9
 8000662:	6879      	ldr	r1, [r7, #4]
 8000664:	4618      	mov	r0, r3
 8000666:	f007 f95d 	bl	8007924 <memcpy>
	memcpy(hdmx->DMXInfoFile_name, DMXInfoFile_name, 13);
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	f203 4369 	addw	r3, r3, #1129	; 0x469
 8000670:	220d      	movs	r2, #13
 8000672:	6839      	ldr	r1, [r7, #0]
 8000674:	4618      	mov	r0, r3
 8000676:	f007 f955 	bl	8007924 <memcpy>
	hdmx->sending = 0;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	2200      	movs	r2, #0
 800067e:	f883 247d 	strb.w	r2, [r3, #1149]	; 0x47d
	hdmx->recording = 0;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	2200      	movs	r2, #0
 8000686:	f883 247c 	strb.w	r2, [r3, #1148]	; 0x47c
	hdmx->received_packets = 0;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	2200      	movs	r2, #0
 800068e:	f8a3 2478 	strh.w	r2, [r3, #1144]	; 0x478
	hdmx->newpacketcharacter = 1;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	2201      	movs	r2, #1
 8000696:	f883 247b 	strb.w	r2, [r3, #1147]	; 0x47b
	hdmx->uart = huart;
 800069a:	68fb      	ldr	r3, [r7, #12]
 800069c:	68ba      	ldr	r2, [r7, #8]
 800069e:	f8c3 2884 	str.w	r2, [r3, #2180]	; 0x884
	hdmx->RxComplete = 0;
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	2200      	movs	r2, #0
 80006a6:	f883 247a 	strb.w	r2, [r3, #1146]	; 0x47a
	DMX_zeroes(hdmx->TxBuffer);		//TxBuffer mit 0 beschreiben
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	f203 437e 	addw	r3, r3, #1150	; 0x47e
 80006b0:	4618      	mov	r0, r3
 80006b2:	f000 f81b 	bl	80006ec <DMX_zeroes>
	DMX_zeroes(hdmx->RxBuffer);		//RxBuffer mit 0 beschreiben
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	f203 637f 	addw	r3, r3, #1663	; 0x67f
 80006bc:	4618      	mov	r0, r3
 80006be:	f000 f815 	bl	80006ec <DMX_zeroes>
	hdmx->RxBuffer[513] = 1;			//Zeichen um neues Paket zu identifizieren (in der Datei)
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	2201      	movs	r2, #1
 80006c6:	f883 2880 	strb.w	r2, [r3, #2176]	; 0x880
	DMX_Transmit(hdmx, 513);			//Alle Kan�le mit 0 beschreiben
 80006ca:	f240 2101 	movw	r1, #513	; 0x201
 80006ce:	68f8      	ldr	r0, [r7, #12]
 80006d0:	f000 f826 	bl	8000720 <DMX_Transmit>
	HAL_GPIO_WritePin(DMX_DE_GPIO_Port, DMX_DE_Pin, GPIO_PIN_RESET);	//Treiber deaktivieren um Signal durchzuleiten
 80006d4:	2200      	movs	r2, #0
 80006d6:	2104      	movs	r1, #4
 80006d8:	4803      	ldr	r0, [pc, #12]	; (80006e8 <DMX_Init+0x9c>)
 80006da:	f001 ff9f 	bl	800261c <HAL_GPIO_WritePin>
}
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	40020000 	.word	0x40020000

080006ec <DMX_zeroes>:

static void DMX_zeroes(uint8_t* array)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < 512; i++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	e007      	b.n	800070a <DMX_zeroes+0x1e>
	{
		array[i] = 0;
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	687a      	ldr	r2, [r7, #4]
 80006fe:	4413      	add	r3, r2
 8000700:	2200      	movs	r2, #0
 8000702:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 512; i++)
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	3301      	adds	r3, #1
 8000708:	60fb      	str	r3, [r7, #12]
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000710:	dbf3      	blt.n	80006fa <DMX_zeroes+0xe>
	}
}
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	3714      	adds	r7, #20
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr

08000720 <DMX_Transmit>:
		hdmx->TxBuffer[channel] = value;
		DMX_Transmit(hdmx, 513);
		hdmx->TxBuffer[channel] = temp;
}
void DMX_Transmit(DMX_TypeDef* hdmx, uint16_t size)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	460b      	mov	r3, r1
 800072a:	807b      	strh	r3, [r7, #2]
	HAL_GPIO_WritePin(DMX_DE_GPIO_Port, DMX_DE_Pin, GPIO_PIN_SET);													//Treiber aktivieren
 800072c:	2201      	movs	r2, #1
 800072e:	2104      	movs	r1, #4
 8000730:	4813      	ldr	r0, [pc, #76]	; (8000780 <DMX_Transmit+0x60>)
 8000732:	f001 ff73 	bl	800261c <HAL_GPIO_WritePin>
	__HAL_UART_DISABLE(hdmx->uart);																																								//UART deaktivieren
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	68da      	ldr	r2, [r3, #12]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f8d3 3884 	ldr.w	r3, [r3, #2180]	; 0x884
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800074c:	60da      	str	r2, [r3, #12]
	DMX_TX_GPIO_Port->MODER = (DMX_TX_GPIO_Port->MODER &~GPIO_MODER_MODE6_Msk) | (1<< (GPIO_MODER_MODE6_Pos));		//Modus vom Ausgangspin �ndern
 800074e:	4b0c      	ldr	r3, [pc, #48]	; (8000780 <DMX_Transmit+0x60>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <DMX_Transmit+0x60>)
 8000758:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800075c:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(DMX_TX_GPIO_Port, DMX_TX_Pin, GPIO_PIN_SET);																								//Ausgang auf IDLE Pegel setzen (HIGH)
 800075e:	2201      	movs	r2, #1
 8000760:	2101      	movs	r1, #1
 8000762:	4807      	ldr	r0, [pc, #28]	; (8000780 <DMX_Transmit+0x60>)
 8000764:	f001 ff5a 	bl	800261c <HAL_GPIO_WritePin>
	htim11.Instance->CNT = 0;																																										//IDLE Timer zur�cksetzen
 8000768:	4b06      	ldr	r3, [pc, #24]	; (8000784 <DMX_Transmit+0x64>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_TIM_Base_Start_IT(&htim11);																																								//Timer starten
 8000770:	4804      	ldr	r0, [pc, #16]	; (8000784 <DMX_Transmit+0x64>)
 8000772:	f004 fa13 	bl	8004b9c <HAL_TIM_Base_Start_IT>
}
 8000776:	bf00      	nop
 8000778:	3708      	adds	r7, #8
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40020000 	.word	0x40020000
 8000784:	20000a94 	.word	0x20000a94

08000788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	4b10      	ldr	r3, [pc, #64]	; (80007d4 <MX_DMA_Init+0x4c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a0f      	ldr	r2, [pc, #60]	; (80007d4 <MX_DMA_Init+0x4c>)
 8000798:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b0d      	ldr	r3, [pc, #52]	; (80007d4 <MX_DMA_Init+0x4c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007a6:	607b      	str	r3, [r7, #4]
 80007a8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	2100      	movs	r1, #0
 80007ae:	203b      	movs	r0, #59	; 0x3b
 80007b0:	f001 f9d5 	bl	8001b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80007b4:	203b      	movs	r0, #59	; 0x3b
 80007b6:	f001 f9ee 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80007ba:	2200      	movs	r2, #0
 80007bc:	2100      	movs	r1, #0
 80007be:	2045      	movs	r0, #69	; 0x45
 80007c0:	f001 f9cd 	bl	8001b5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80007c4:	2045      	movs	r0, #69	; 0x45
 80007c6:	f001 f9e6 	bl	8001b96 <HAL_NVIC_EnableIRQ>

}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800

080007d8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08e      	sub	sp, #56	; 0x38
 80007dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e2:	2200      	movs	r2, #0
 80007e4:	601a      	str	r2, [r3, #0]
 80007e6:	605a      	str	r2, [r3, #4]
 80007e8:	609a      	str	r2, [r3, #8]
 80007ea:	60da      	str	r2, [r3, #12]
 80007ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	623b      	str	r3, [r7, #32]
 80007f2:	4ba6      	ldr	r3, [pc, #664]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4aa5      	ldr	r2, [pc, #660]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 80007f8:	f043 0310 	orr.w	r3, r3, #16
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4ba3      	ldr	r3, [pc, #652]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0310 	and.w	r3, r3, #16
 8000806:	623b      	str	r3, [r7, #32]
 8000808:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]
 800080e:	4b9f      	ldr	r3, [pc, #636]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a9e      	ldr	r2, [pc, #632]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 8000814:	f043 0304 	orr.w	r3, r3, #4
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b9c      	ldr	r3, [pc, #624]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0304 	and.w	r3, r3, #4
 8000822:	61fb      	str	r3, [r7, #28]
 8000824:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	61bb      	str	r3, [r7, #24]
 800082a:	4b98      	ldr	r3, [pc, #608]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a97      	ldr	r2, [pc, #604]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 8000830:	f043 0320 	orr.w	r3, r3, #32
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b95      	ldr	r3, [pc, #596]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0320 	and.w	r3, r3, #32
 800083e:	61bb      	str	r3, [r7, #24]
 8000840:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	617b      	str	r3, [r7, #20]
 8000846:	4b91      	ldr	r3, [pc, #580]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4a90      	ldr	r2, [pc, #576]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 800084c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b8e      	ldr	r3, [pc, #568]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b8a      	ldr	r3, [pc, #552]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a89      	ldr	r2, [pc, #548]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b87      	ldr	r3, [pc, #540]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b83      	ldr	r3, [pc, #524]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a82      	ldr	r2, [pc, #520]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b80      	ldr	r3, [pc, #512]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b7c      	ldr	r3, [pc, #496]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a7b      	ldr	r2, [pc, #492]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 80008a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b79      	ldr	r3, [pc, #484]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b75      	ldr	r3, [pc, #468]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a74      	ldr	r2, [pc, #464]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 80008bc:	f043 0308 	orr.w	r3, r3, #8
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b72      	ldr	r3, [pc, #456]	; (8000a8c <MX_GPIO_Init+0x2b4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0308 	and.w	r3, r3, #8
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_SD_Pin|LED_STATE_Pin|LED_RX_Pin|LED_TX_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	213c      	movs	r1, #60	; 0x3c
 80008d2:	486f      	ldr	r0, [pc, #444]	; (8000a90 <MX_GPIO_Init+0x2b8>)
 80008d4:	f001 fea2 	bl	800261c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DMX_DE_GPIO_Port, DMX_DE_Pin, GPIO_PIN_RESET);
 80008d8:	2200      	movs	r2, #0
 80008da:	2104      	movs	r1, #4
 80008dc:	486d      	ldr	r0, [pc, #436]	; (8000a94 <MX_GPIO_Init+0x2bc>)
 80008de:	f001 fe9d 	bl	800261c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin|LCD_E_Pin|LCD_D0_Pin|LCD_D1_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	21f0      	movs	r1, #240	; 0xf0
 80008e6:	486c      	ldr	r0, [pc, #432]	; (8000a98 <MX_GPIO_Init+0x2c0>)
 80008e8:	f001 fe98 	bl	800261c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 41fc 	mov.w	r1, #32256	; 0x7e00
 80008f2:	486a      	ldr	r0, [pc, #424]	; (8000a9c <MX_GPIO_Init+0x2c4>)
 80008f4:	f001 fe92 	bl	800261c <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED_SD_Pin|LED_STATE_Pin|LED_RX_Pin|LED_TX_Pin;
 80008f8:	233c      	movs	r3, #60	; 0x3c
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fc:	2301      	movs	r3, #1
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000904:	2300      	movs	r3, #0
 8000906:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800090c:	4619      	mov	r1, r3
 800090e:	4860      	ldr	r0, [pc, #384]	; (8000a90 <MX_GPIO_Init+0x2b8>)
 8000910:	f001 fcd8 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC14 PC15 PC0
                           PC1 PC2 PC3 PC5
                           PC6 PC7 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0
 8000914:	f64f 43ef 	movw	r3, #64751	; 0xfcef
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800091a:	2303      	movs	r3, #3
 800091c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000922:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000926:	4619      	mov	r1, r3
 8000928:	485d      	ldr	r0, [pc, #372]	; (8000aa0 <MX_GPIO_Init+0x2c8>)
 800092a:	f001 fccb 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 PF3
                           PF4 PF5 PF6 PF7
                           PF8 PF9 PF10 PF11
                           PF12 PF13 PF14 PF15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800092e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000932:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000934:	2303      	movs	r3, #3
 8000936:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000938:	2300      	movs	r3, #0
 800093a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800093c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000940:	4619      	mov	r1, r3
 8000942:	4858      	ldr	r0, [pc, #352]	; (8000aa4 <MX_GPIO_Init+0x2cc>)
 8000944:	f001 fcbe 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000948:	2303      	movs	r3, #3
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094c:	2303      	movs	r3, #3
 800094e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000954:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	4853      	ldr	r0, [pc, #332]	; (8000aa8 <MX_GPIO_Init+0x2d0>)
 800095c:	f001 fcb2 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DMX_DE_Pin;
 8000960:	2304      	movs	r3, #4
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(DMX_DE_GPIO_Port, &GPIO_InitStruct);
 8000970:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000974:	4619      	mov	r1, r3
 8000976:	4847      	ldr	r0, [pc, #284]	; (8000a94 <MX_GPIO_Init+0x2bc>)
 8000978:	f001 fca4 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA8 PA9
                           PA10 PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_8|GPIO_PIN_9
 800097c:	f249 7318 	movw	r3, #38680	; 0x9718
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000982:	2303      	movs	r3, #3
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	4840      	ldr	r0, [pc, #256]	; (8000a94 <MX_GPIO_Init+0x2bc>)
 8000992:	f001 fc97 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BTN_BACK_Pin|BTN_ENTER_Pin|BTN_DOWN_Pin;
 8000996:	23e0      	movs	r3, #224	; 0xe0
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800099e:	2301      	movs	r3, #1
 80009a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a6:	4619      	mov	r1, r3
 80009a8:	483a      	ldr	r0, [pc, #232]	; (8000a94 <MX_GPIO_Init+0x2bc>)
 80009aa:	f001 fc8b 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|SDIO_DETECT_Pin;
 80009ae:	f44f 7304 	mov.w	r3, #528	; 0x210
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b8:	2301      	movs	r3, #1
 80009ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c0:	4619      	mov	r1, r3
 80009c2:	4837      	ldr	r0, [pc, #220]	; (8000aa0 <MX_GPIO_Init+0x2c8>)
 80009c4:	f001 fc7e 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB11
                           PB14 PB15 PB3 PB4
                           PB5 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_11
 80009c8:	f64c 73fb 	movw	r3, #53243	; 0xcffb
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009ce:	2303      	movs	r3, #3
 80009d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009da:	4619      	mov	r1, r3
 80009dc:	4833      	ldr	r0, [pc, #204]	; (8000aac <MX_GPIO_Init+0x2d4>)
 80009de:	f001 fc71 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3
                           PG4 PG5 PG6 PG7
                           PG8 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009e2:	f248 13ff 	movw	r3, #33279	; 0x81ff
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7
                          |GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009e8:	2303      	movs	r3, #3
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009f4:	4619      	mov	r1, r3
 80009f6:	4829      	ldr	r0, [pc, #164]	; (8000a9c <MX_GPIO_Init+0x2c4>)
 80009f8:	f001 fc64 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80009fc:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a02:	2303      	movs	r3, #3
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a0e:	4619      	mov	r1, r3
 8000a10:	481f      	ldr	r0, [pc, #124]	; (8000a90 <MX_GPIO_Init+0x2b8>)
 8000a12:	f001 fc57 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ENC_B_Pin|ENC_A_Pin;
 8000a16:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000a1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4820      	ldr	r0, [pc, #128]	; (8000aac <MX_GPIO_Init+0x2d4>)
 8000a2c:	f001 fc4a 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000a30:	f64f 730b 	movw	r3, #65291	; 0xff0b
 8000a34:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a36:	2303      	movs	r3, #3
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a42:	4619      	mov	r1, r3
 8000a44:	4814      	ldr	r0, [pc, #80]	; (8000a98 <MX_GPIO_Init+0x2c0>)
 8000a46:	f001 fc3d 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_E_Pin|LCD_D0_Pin|LCD_D1_Pin;
 8000a4a:	23f0      	movs	r3, #240	; 0xf0
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5e:	4619      	mov	r1, r3
 8000a60:	480d      	ldr	r0, [pc, #52]	; (8000a98 <MX_GPIO_Init+0x2c0>)
 8000a62:	f001 fc2f 	bl	80022c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin
                           PGPin PGPin */
  GPIO_InitStruct.Pin = LCD_D2_Pin|LCD_D3_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000a66:	f44f 43fc 	mov.w	r3, #32256	; 0x7e00
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4807      	ldr	r0, [pc, #28]	; (8000a9c <MX_GPIO_Init+0x2c4>)
 8000a80:	f001 fc20 	bl	80022c4 <HAL_GPIO_Init>

}
 8000a84:	bf00      	nop
 8000a86:	3738      	adds	r7, #56	; 0x38
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40021000 	.word	0x40021000
 8000a94:	40020000 	.word	0x40020000
 8000a98:	40020c00 	.word	0x40020c00
 8000a9c:	40021800 	.word	0x40021800
 8000aa0:	40020800 	.word	0x40020800
 8000aa4:	40021400 	.word	0x40021400
 8000aa8:	40021c00 	.word	0x40021c00
 8000aac:	40020400 	.word	0x40020400

08000ab0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ab4:	f000 fee2 	bl	800187c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ab8:	f000 f85c 	bl	8000b74 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(1000);
 8000abc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ac0:	f000 ff4e 	bl	8001960 <HAL_Delay>

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac4:	f7ff fe88 	bl	80007d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ac8:	f7ff fe5e 	bl	8000788 <MX_DMA_Init>
  MX_SDIO_SD_Init();
 8000acc:	f000 f982 	bl	8000dd4 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000ad0:	f006 fba6 	bl	8007220 <MX_FATFS_Init>
  MX_TIM1_Init();
 8000ad4:	f000 fb4e 	bl	8001174 <MX_TIM1_Init>
  MX_TIM10_Init();
 8000ad8:	f000 fc70 	bl	80013bc <MX_TIM10_Init>
  MX_UART4_Init();
 8000adc:	f000 fe28 	bl	8001730 <MX_UART4_Init>
  MX_TIM9_Init();
 8000ae0:	f000 fc00 	bl	80012e4 <MX_TIM9_Init>
  MX_TIM14_Init();
 8000ae4:	f000 fcde 	bl	80014a4 <MX_TIM14_Init>
  MX_TIM11_Init();
 8000ae8:	f000 fc94 	bl	8001414 <MX_TIM11_Init>
  MX_TIM13_Init();
 8000aec:	f000 fcb4 	bl	8001458 <MX_TIM13_Init>
  MX_TIM7_Init();
 8000af0:	f000 fbc2 	bl	8001278 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);		//LCD
 8000af4:	210c      	movs	r1, #12
 8000af6:	4817      	ldr	r0, [pc, #92]	; (8000b54 <main+0xa4>)
 8000af8:	f004 f93e 	bl	8004d78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);		//LED
 8000afc:	2104      	movs	r1, #4
 8000afe:	4816      	ldr	r0, [pc, #88]	; (8000b58 <main+0xa8>)
 8000b00:	f004 f93a 	bl	8004d78 <HAL_TIM_PWM_Start>
//  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(LED_SD_GPIO_Port, LED_SD_Pin, GPIO_PIN_SET);
//  HAL_GPIO_WritePin(LED_STATE_GPIO_Port, LED_STATE_Pin, GPIO_PIN_SET);

  htim1.Instance->CCR4 = 500;
 8000b04:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <main+0xa4>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000b0c:	641a      	str	r2, [r3, #64]	; 0x40
  htim9.Instance->CCR2 = 1000;
 8000b0e:	4b12      	ldr	r3, [pc, #72]	; (8000b58 <main+0xa8>)
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000b16:	639a      	str	r2, [r3, #56]	; 0x38

//  test_LED();
  test_LCD();
 8000b18:	f7ff fd32 	bl	8000580 <test_LCD>
  test_Encoder();
 8000b1c:	f7ff fcf6 	bl	800050c <test_Encoder>
//  test_uart();

	DMX_Init(&Univers, &huart4, "DMX1.txt", "DMX1Info.txt");
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <main+0xac>)
 8000b22:	4a0f      	ldr	r2, [pc, #60]	; (8000b60 <main+0xb0>)
 8000b24:	490f      	ldr	r1, [pc, #60]	; (8000b64 <main+0xb4>)
 8000b26:	4810      	ldr	r0, [pc, #64]	; (8000b68 <main+0xb8>)
 8000b28:	f7ff fd90 	bl	800064c <DMX_Init>
//		  HAL_GPIO_WritePin(LED_STATE_GPIO_Port, LED_STATE_Pin, GPIO_PIN_RESET);
//		  HAL_GPIO_WritePin(LED_SD_GPIO_Port, LED_SD_Pin, GPIO_PIN_RESET);
//		  HAL_GPIO_WritePin(LED_TX_GPIO_Port, LED_TX_Pin, GPIO_PIN_RESET);
//	  }

	  if(HAL_GPIO_ReadPin(SDIO_DETECT_GPIO_Port, SDIO_DETECT_Pin) == GPIO_PIN_RESET)
 8000b2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b30:	480e      	ldr	r0, [pc, #56]	; (8000b6c <main+0xbc>)
 8000b32:	f001 fd5b 	bl	80025ec <HAL_GPIO_ReadPin>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d105      	bne.n	8000b48 <main+0x98>
		  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_SET);
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2110      	movs	r1, #16
 8000b40:	480b      	ldr	r0, [pc, #44]	; (8000b70 <main+0xc0>)
 8000b42:	f001 fd6b 	bl	800261c <HAL_GPIO_WritePin>
 8000b46:	e7f1      	b.n	8000b2c <main+0x7c>
	  else
		  HAL_GPIO_WritePin(LED_RX_GPIO_Port, LED_RX_Pin, GPIO_PIN_RESET);
 8000b48:	2200      	movs	r2, #0
 8000b4a:	2110      	movs	r1, #16
 8000b4c:	4808      	ldr	r0, [pc, #32]	; (8000b70 <main+0xc0>)
 8000b4e:	f001 fd65 	bl	800261c <HAL_GPIO_WritePin>
	  if(HAL_GPIO_ReadPin(SDIO_DETECT_GPIO_Port, SDIO_DETECT_Pin) == GPIO_PIN_RESET)
 8000b52:	e7eb      	b.n	8000b2c <main+0x7c>
 8000b54:	20000adc 	.word	0x20000adc
 8000b58:	20000b24 	.word	0x20000b24
 8000b5c:	080079e8 	.word	0x080079e8
 8000b60:	080079f8 	.word	0x080079f8
 8000b64:	20000bfc 	.word	0x20000bfc
 8000b68:	2000002c 	.word	0x2000002c
 8000b6c:	40020800 	.word	0x40020800
 8000b70:	40021000 	.word	0x40021000

08000b74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b0ac      	sub	sp, #176	; 0xb0
 8000b78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b7a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000b7e:	2234      	movs	r2, #52	; 0x34
 8000b80:	2100      	movs	r1, #0
 8000b82:	4618      	mov	r0, r3
 8000b84:	f006 fedc 	bl	8007940 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b98:	f107 030c 	add.w	r3, r7, #12
 8000b9c:	225c      	movs	r2, #92	; 0x5c
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f006 fecd 	bl	8007940 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	4b37      	ldr	r3, [pc, #220]	; (8000c88 <SystemClock_Config+0x114>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a36      	ldr	r2, [pc, #216]	; (8000c88 <SystemClock_Config+0x114>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b34      	ldr	r3, [pc, #208]	; (8000c88 <SystemClock_Config+0x114>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	60bb      	str	r3, [r7, #8]
 8000bc0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	4b31      	ldr	r3, [pc, #196]	; (8000c8c <SystemClock_Config+0x118>)
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bce:	4a2f      	ldr	r2, [pc, #188]	; (8000c8c <SystemClock_Config+0x118>)
 8000bd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	4b2d      	ldr	r3, [pc, #180]	; (8000c8c <SystemClock_Config+0x118>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bde:	607b      	str	r3, [r7, #4]
 8000be0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000be2:	2302      	movs	r3, #2
 8000be4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be6:	2301      	movs	r3, #1
 8000be8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bec:	2310      	movs	r3, #16
 8000bee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000bfe:	230f      	movs	r3, #15
 8000c00:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000c04:	23d8      	movs	r3, #216	; 0xd8
 8000c06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000c10:	2308      	movs	r3, #8
 8000c12:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c16:	2302      	movs	r3, #2
 8000c18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c1c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000c20:	4618      	mov	r0, r3
 8000c22:	f002 fab5 	bl	8003190 <HAL_RCC_OscConfig>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000c2c:	f000 f8ca 	bl	8000dc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c30:	230f      	movs	r3, #15
 8000c32:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c34:	2302      	movs	r3, #2
 8000c36:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c3c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c40:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c46:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c48:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000c4c:	2103      	movs	r1, #3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 fcfe 	bl	8002650 <HAL_RCC_ClockConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000c5a:	f000 f8b3 	bl	8000dc4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDIO|RCC_PERIPHCLK_CLK48;
 8000c5e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c62:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8000c64:	2300      	movs	r3, #0
 8000c66:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.SdioClockSelection = RCC_SDIOCLKSOURCE_CLK48;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c6c:	f107 030c 	add.w	r3, r7, #12
 8000c70:	4618      	mov	r0, r3
 8000c72:	f001 fe07 	bl	8002884 <HAL_RCCEx_PeriphCLKConfig>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <SystemClock_Config+0x10c>
  {
    Error_Handler();
 8000c7c:	f000 f8a2 	bl	8000dc4 <Error_Handler>
  }
}
 8000c80:	bf00      	nop
 8000c82:	37b0      	adds	r7, #176	; 0xb0
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	40023800 	.word	0x40023800
 8000c8c:	40007000 	.word	0x40007000

08000c90 <HAL_TIM_PeriodElapsedCallback>:
	*@brief 	Interruptfuntion f�r alle Timer. Wird aufgerufen wenn der Timer �berl�uft
	*@param 	htim: Timer handle
	*@retval 	none
	*/
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
	if(htim == &htim10)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	4a1e      	ldr	r2, [pc, #120]	; (8000d14 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d035      	beq.n	8000d0c <HAL_TIM_PeriodElapsedCallback+0x7c>
	{

	}
	else if(htim == &htim11)	//Idle Line send
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	4a1d      	ldr	r2, [pc, #116]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000ca4:	4293      	cmp	r3, r2
 8000ca6:	d119      	bne.n	8000cdc <HAL_TIM_PeriodElapsedCallback+0x4c>
	{
		HAL_TIM_Base_Stop_IT(&htim11);																																								//IDLE Timer stoppen
 8000ca8:	481b      	ldr	r0, [pc, #108]	; (8000d18 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000caa:	f003 ffe7 	bl	8004c7c <HAL_TIM_Base_Stop_IT>
		DMX_TX_GPIO_Port->MODER = (DMX_TX_GPIO_Port->MODER &~GPIO_MODER_MODE0_Msk) | (2 << (GPIO_MODER_MODE0_Pos));		//Ausgangspin Modus zur�cksetzen
 8000cae:	4b1b      	ldr	r3, [pc, #108]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f023 0303 	bic.w	r3, r3, #3
 8000cb6:	4a19      	ldr	r2, [pc, #100]	; (8000d1c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000cb8:	f043 0302 	orr.w	r3, r3, #2
 8000cbc:	6013      	str	r3, [r2, #0]
		__HAL_UART_ENABLE(&huart4);																																										//Uart Schnittstelle aktivieren
 8000cbe:	4b18      	ldr	r3, [pc, #96]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	68da      	ldr	r2, [r3, #12]
 8000cc4:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000ccc:	60da      	str	r2, [r3, #12]
		HAL_UART_Transmit_IT(&huart4, Univers.TxBuffer, 513);																													//Bytes senden
 8000cce:	f240 2201 	movw	r2, #513	; 0x201
 8000cd2:	4914      	ldr	r1, [pc, #80]	; (8000d24 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000cd4:	4812      	ldr	r0, [pc, #72]	; (8000d20 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000cd6:	f005 f862 	bl	8005d9e <HAL_UART_Transmit_IT>
 8000cda:	e017      	b.n	8000d0c <HAL_TIM_PeriodElapsedCallback+0x7c>
	}
	else if(htim == &htim13)	//Timer f�r Aufnahmefunktion - Taktung 1 s
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a12      	ldr	r2, [pc, #72]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d107      	bne.n	8000cf4 <HAL_TIM_PeriodElapsedCallback+0x64>
	{
		seconds_passed++;
 8000ce4:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	3301      	adds	r3, #1
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000cf0:	801a      	strh	r2, [r3, #0]
		return;
 8000cf2:	e00b      	b.n	8000d0c <HAL_TIM_PeriodElapsedCallback+0x7c>
	}
	else if(htim == &htim7)	//Timer f�r Wiedergabefunktion - Taktung 1 ms
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a0e      	ldr	r2, [pc, #56]	; (8000d30 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d107      	bne.n	8000d0c <HAL_TIM_PeriodElapsedCallback+0x7c>
	{
		m_seconds_passed++;
 8000cfc:	4b0d      	ldr	r3, [pc, #52]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000cfe:	881b      	ldrh	r3, [r3, #0]
 8000d00:	b29b      	uxth	r3, r3
 8000d02:	3301      	adds	r3, #1
 8000d04:	b29a      	uxth	r2, r3
 8000d06:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000d08:	801a      	strh	r2, [r3, #0]
		return;
 8000d0a:	bf00      	nop
	}
}
 8000d0c:	3708      	adds	r7, #8
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000a04 	.word	0x20000a04
 8000d18:	20000a94 	.word	0x20000a94
 8000d1c:	40020000 	.word	0x40020000
 8000d20:	20000bfc 	.word	0x20000bfc
 8000d24:	200004aa 	.word	0x200004aa
 8000d28:	20000a4c 	.word	0x20000a4c
 8000d2c:	20000028 	.word	0x20000028
 8000d30:	20000bb4 	.word	0x20000bb4
 8000d34:	2000002a 	.word	0x2000002a

08000d38 <HAL_UART_RxCpltCallback>:
	*@brief 	Interruptfunktion der UART Schnittstelle. Wird aufgerufen wenn der Empfangsvorgang beendet ist
	*@param 	huart: Pointer auf aufrufenden UART handle
	*@retval 	none
	*/
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) //Aufruf wenn DMX Paket vollst�ndig empfangen wurde
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
	if(Univers.recording == 1)							//Überprüfen ob Aufnahme aktiv ist
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_UART_RxCpltCallback+0x38>)
 8000d42:	f893 347c 	ldrb.w	r3, [r3, #1148]	; 0x47c
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d10b      	bne.n	8000d62 <HAL_UART_RxCpltCallback+0x2a>
	{
		Univers.RxComplete = 1;
 8000d4a:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_UART_RxCpltCallback+0x38>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	f883 247a 	strb.w	r2, [r3, #1146]	; 0x47a
		Univers.received_packets++;
 8000d52:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <HAL_UART_RxCpltCallback+0x38>)
 8000d54:	f8b3 3478 	ldrh.w	r3, [r3, #1144]	; 0x478
 8000d58:	3301      	adds	r3, #1
 8000d5a:	b29a      	uxth	r2, r3
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <HAL_UART_RxCpltCallback+0x38>)
 8000d5e:	f8a3 2478 	strh.w	r2, [r3, #1144]	; 0x478
	}
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	2000002c 	.word	0x2000002c

08000d74 <HAL_UART_TxCpltCallback>:
	*@brief 	Interruptfunktion der UART Schnittstelle. Wird aufgerufen wenn ein Sendevorgang abgeschlossen ist
	*@param 	huart: Pointer auf aufrufenden UART handle
	*@retval 	none
	*/
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	if(Univers.sending == 1)
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <HAL_UART_TxCpltCallback+0x44>)
 8000d7e:	f893 347d 	ldrb.w	r3, [r3, #1149]	; 0x47d
 8000d82:	2b01      	cmp	r3, #1
 8000d84:	d114      	bne.n	8000db0 <HAL_UART_TxCpltCallback+0x3c>
	{
	__HAL_UART_DISABLE(&huart4);																																									//UART Ausgang auf LOW Pegel setzen ->DMX Brake
 8000d86:	4b0d      	ldr	r3, [pc, #52]	; (8000dbc <HAL_UART_TxCpltCallback+0x48>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	68da      	ldr	r2, [r3, #12]
 8000d8c:	4b0b      	ldr	r3, [pc, #44]	; (8000dbc <HAL_UART_TxCpltCallback+0x48>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000d94:	60da      	str	r2, [r3, #12]
	DMX_TX_GPIO_Port->MODER = (DMX_TX_GPIO_Port->MODER &~GPIO_MODER_MODE0_Msk) | (1<< (GPIO_MODER_MODE0_Pos));		//Modus des Ausgangspins zum beschreiben �ndern
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_UART_TxCpltCallback+0x4c>)
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	f023 0303 	bic.w	r3, r3, #3
 8000d9e:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_UART_TxCpltCallback+0x4c>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(DMX_TX_GPIO_Port, DMX_TX_Pin, GPIO_PIN_RESET);																							//Ausgangspin mit BRAKE Pegel beschreiben (LOW)
 8000da6:	2200      	movs	r2, #0
 8000da8:	2101      	movs	r1, #1
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <HAL_UART_TxCpltCallback+0x4c>)
 8000dac:	f001 fc36 	bl	800261c <HAL_GPIO_WritePin>
	}
}
 8000db0:	bf00      	nop
 8000db2:	3708      	adds	r7, #8
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	2000002c 	.word	0x2000002c
 8000dbc:	20000bfc 	.word	0x20000bfc
 8000dc0:	40020000 	.word	0x40020000

08000dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
	...

08000dd4 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_tx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000dd8:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <MX_SDIO_SD_Init+0x38>)
 8000dda:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <MX_SDIO_SD_Init+0x3c>)
 8000ddc:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000dde:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <MX_SDIO_SD_Init+0x38>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <MX_SDIO_SD_Init+0x38>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000dea:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <MX_SDIO_SD_Init+0x38>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000df0:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <MX_SDIO_SD_Init+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000df6:	4b05      	ldr	r3, [pc, #20]	; (8000e0c <MX_SDIO_SD_Init+0x38>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <MX_SDIO_SD_Init+0x38>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	20000980 	.word	0x20000980
 8000e10:	40012c00 	.word	0x40012c00

08000e14 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b08c      	sub	sp, #48	; 0x30
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	f107 031c 	add.w	r3, r7, #28
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a77      	ldr	r2, [pc, #476]	; (8001010 <HAL_SD_MspInit+0x1fc>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	f040 80e7 	bne.w	8001006 <HAL_SD_MspInit+0x1f2>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e38:	2300      	movs	r3, #0
 8000e3a:	61bb      	str	r3, [r7, #24]
 8000e3c:	4b75      	ldr	r3, [pc, #468]	; (8001014 <HAL_SD_MspInit+0x200>)
 8000e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e40:	4a74      	ldr	r2, [pc, #464]	; (8001014 <HAL_SD_MspInit+0x200>)
 8000e42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e46:	6453      	str	r3, [r2, #68]	; 0x44
 8000e48:	4b72      	ldr	r3, [pc, #456]	; (8001014 <HAL_SD_MspInit+0x200>)
 8000e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e50:	61bb      	str	r3, [r7, #24]
 8000e52:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	4b6e      	ldr	r3, [pc, #440]	; (8001014 <HAL_SD_MspInit+0x200>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	4a6d      	ldr	r2, [pc, #436]	; (8001014 <HAL_SD_MspInit+0x200>)
 8000e5e:	f043 0302 	orr.w	r3, r3, #2
 8000e62:	6313      	str	r3, [r2, #48]	; 0x30
 8000e64:	4b6b      	ldr	r3, [pc, #428]	; (8001014 <HAL_SD_MspInit+0x200>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	f003 0302 	and.w	r3, r3, #2
 8000e6c:	617b      	str	r3, [r7, #20]
 8000e6e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]
 8000e74:	4b67      	ldr	r3, [pc, #412]	; (8001014 <HAL_SD_MspInit+0x200>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	4a66      	ldr	r2, [pc, #408]	; (8001014 <HAL_SD_MspInit+0x200>)
 8000e7a:	f043 0304 	orr.w	r3, r3, #4
 8000e7e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e80:	4b64      	ldr	r3, [pc, #400]	; (8001014 <HAL_SD_MspInit+0x200>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	4b60      	ldr	r3, [pc, #384]	; (8001014 <HAL_SD_MspInit+0x200>)
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	4a5f      	ldr	r2, [pc, #380]	; (8001014 <HAL_SD_MspInit+0x200>)
 8000e96:	f043 0308 	orr.w	r3, r3, #8
 8000e9a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e9c:	4b5d      	ldr	r3, [pc, #372]	; (8001014 <HAL_SD_MspInit+0x200>)
 8000e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea0:	f003 0308 	and.w	r3, r3, #8
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
    /**SDIO GPIO Configuration
    PB2     ------> SDIO_CK
    PC8     ------> SDIO_D0
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eb4:	2303      	movs	r3, #3
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000eb8:	230c      	movs	r3, #12
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4855      	ldr	r0, [pc, #340]	; (8001018 <HAL_SD_MspInit+0x204>)
 8000ec4:	f001 f9fe 	bl	80022c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ec8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	2302      	movs	r3, #2
 8000ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000eda:	230c      	movs	r3, #12
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ede:	f107 031c 	add.w	r3, r7, #28
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	484d      	ldr	r0, [pc, #308]	; (800101c <HAL_SD_MspInit+0x208>)
 8000ee6:	f001 f9ed 	bl	80022c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eea:	2304      	movs	r3, #4
 8000eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef6:	2303      	movs	r3, #3
 8000ef8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000efa:	230c      	movs	r3, #12
 8000efc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efe:	f107 031c 	add.w	r3, r7, #28
 8000f02:	4619      	mov	r1, r3
 8000f04:	4846      	ldr	r0, [pc, #280]	; (8001020 <HAL_SD_MspInit+0x20c>)
 8000f06:	f001 f9dd 	bl	80022c4 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream3;
 8000f0a:	4b46      	ldr	r3, [pc, #280]	; (8001024 <HAL_SD_MspInit+0x210>)
 8000f0c:	4a46      	ldr	r2, [pc, #280]	; (8001028 <HAL_SD_MspInit+0x214>)
 8000f0e:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000f10:	4b44      	ldr	r3, [pc, #272]	; (8001024 <HAL_SD_MspInit+0x210>)
 8000f12:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f16:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f18:	4b42      	ldr	r3, [pc, #264]	; (8001024 <HAL_SD_MspInit+0x210>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f1e:	4b41      	ldr	r3, [pc, #260]	; (8001024 <HAL_SD_MspInit+0x210>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f24:	4b3f      	ldr	r3, [pc, #252]	; (8001024 <HAL_SD_MspInit+0x210>)
 8000f26:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f2a:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f2c:	4b3d      	ldr	r3, [pc, #244]	; (8001024 <HAL_SD_MspInit+0x210>)
 8000f2e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f32:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f34:	4b3b      	ldr	r3, [pc, #236]	; (8001024 <HAL_SD_MspInit+0x210>)
 8000f36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f3a:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000f3c:	4b39      	ldr	r3, [pc, #228]	; (8001024 <HAL_SD_MspInit+0x210>)
 8000f3e:	2220      	movs	r2, #32
 8000f40:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f42:	4b38      	ldr	r3, [pc, #224]	; (8001024 <HAL_SD_MspInit+0x210>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f48:	4b36      	ldr	r3, [pc, #216]	; (8001024 <HAL_SD_MspInit+0x210>)
 8000f4a:	2204      	movs	r2, #4
 8000f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f4e:	4b35      	ldr	r3, [pc, #212]	; (8001024 <HAL_SD_MspInit+0x210>)
 8000f50:	2203      	movs	r2, #3
 8000f52:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000f54:	4b33      	ldr	r3, [pc, #204]	; (8001024 <HAL_SD_MspInit+0x210>)
 8000f56:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000f5c:	4b31      	ldr	r3, [pc, #196]	; (8001024 <HAL_SD_MspInit+0x210>)
 8000f5e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f62:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000f64:	482f      	ldr	r0, [pc, #188]	; (8001024 <HAL_SD_MspInit+0x210>)
 8000f66:	f000 fe31 	bl	8001bcc <HAL_DMA_Init>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d001      	beq.n	8000f74 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8000f70:	f7ff ff28 	bl	8000dc4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	4a2b      	ldr	r2, [pc, #172]	; (8001024 <HAL_SD_MspInit+0x210>)
 8000f78:	641a      	str	r2, [r3, #64]	; 0x40
 8000f7a:	4a2a      	ldr	r2, [pc, #168]	; (8001024 <HAL_SD_MspInit+0x210>)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream6;
 8000f80:	4b2a      	ldr	r3, [pc, #168]	; (800102c <HAL_SD_MspInit+0x218>)
 8000f82:	4a2b      	ldr	r2, [pc, #172]	; (8001030 <HAL_SD_MspInit+0x21c>)
 8000f84:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000f86:	4b29      	ldr	r3, [pc, #164]	; (800102c <HAL_SD_MspInit+0x218>)
 8000f88:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f8c:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f8e:	4b27      	ldr	r3, [pc, #156]	; (800102c <HAL_SD_MspInit+0x218>)
 8000f90:	2240      	movs	r2, #64	; 0x40
 8000f92:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f94:	4b25      	ldr	r3, [pc, #148]	; (800102c <HAL_SD_MspInit+0x218>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <HAL_SD_MspInit+0x218>)
 8000f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000fa0:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000fa2:	4b22      	ldr	r3, [pc, #136]	; (800102c <HAL_SD_MspInit+0x218>)
 8000fa4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000fa8:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000faa:	4b20      	ldr	r3, [pc, #128]	; (800102c <HAL_SD_MspInit+0x218>)
 8000fac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000fb0:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	; (800102c <HAL_SD_MspInit+0x218>)
 8000fb4:	2220      	movs	r2, #32
 8000fb6:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fb8:	4b1c      	ldr	r3, [pc, #112]	; (800102c <HAL_SD_MspInit+0x218>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000fbe:	4b1b      	ldr	r3, [pc, #108]	; (800102c <HAL_SD_MspInit+0x218>)
 8000fc0:	2204      	movs	r2, #4
 8000fc2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000fc4:	4b19      	ldr	r3, [pc, #100]	; (800102c <HAL_SD_MspInit+0x218>)
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000fca:	4b18      	ldr	r3, [pc, #96]	; (800102c <HAL_SD_MspInit+0x218>)
 8000fcc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fd0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000fd2:	4b16      	ldr	r3, [pc, #88]	; (800102c <HAL_SD_MspInit+0x218>)
 8000fd4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000fd8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000fda:	4814      	ldr	r0, [pc, #80]	; (800102c <HAL_SD_MspInit+0x218>)
 8000fdc:	f000 fdf6 	bl	8001bcc <HAL_DMA_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8000fe6:	f7ff feed 	bl	8000dc4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a0f      	ldr	r2, [pc, #60]	; (800102c <HAL_SD_MspInit+0x218>)
 8000fee:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ff0:	4a0e      	ldr	r2, [pc, #56]	; (800102c <HAL_SD_MspInit+0x218>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2031      	movs	r0, #49	; 0x31
 8000ffc:	f000 fdaf 	bl	8001b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8001000:	2031      	movs	r0, #49	; 0x31
 8001002:	f000 fdc8 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8001006:	bf00      	nop
 8001008:	3730      	adds	r7, #48	; 0x30
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40012c00 	.word	0x40012c00
 8001014:	40023800 	.word	0x40023800
 8001018:	40020400 	.word	0x40020400
 800101c:	40020800 	.word	0x40020800
 8001020:	40020c00 	.word	0x40020c00
 8001024:	200008c0 	.word	0x200008c0
 8001028:	40026458 	.word	0x40026458
 800102c:	20000920 	.word	0x20000920
 8001030:	400264a0 	.word	0x400264a0

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	607b      	str	r3, [r7, #4]
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <HAL_MspInit+0x4c>)
 8001040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001042:	4a0f      	ldr	r2, [pc, #60]	; (8001080 <HAL_MspInit+0x4c>)
 8001044:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001048:	6453      	str	r3, [r2, #68]	; 0x44
 800104a:	4b0d      	ldr	r3, [pc, #52]	; (8001080 <HAL_MspInit+0x4c>)
 800104c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001056:	2300      	movs	r3, #0
 8001058:	603b      	str	r3, [r7, #0]
 800105a:	4b09      	ldr	r3, [pc, #36]	; (8001080 <HAL_MspInit+0x4c>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	4a08      	ldr	r2, [pc, #32]	; (8001080 <HAL_MspInit+0x4c>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	6413      	str	r3, [r2, #64]	; 0x40
 8001066:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_MspInit+0x4c>)
 8001068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001072:	bf00      	nop
 8001074:	370c      	adds	r7, #12
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	40023800 	.word	0x40023800

08001084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001096:	e7fe      	b.n	8001096 <HardFault_Handler+0x4>

08001098 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800109c:	e7fe      	b.n	800109c <MemManage_Handler+0x4>

0800109e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800109e:	b480      	push	{r7}
 80010a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010a2:	e7fe      	b.n	80010a2 <BusFault_Handler+0x4>

080010a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <UsageFault_Handler+0x4>

080010aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr

080010c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ca:	bf00      	nop
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr

080010d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	HAL_IncTick();
 80010d8:	f000 fc22 	bl	8001920 <HAL_IncTick>

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010dc:	f000 fc20 	bl	8001920 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010e0:	bf00      	nop
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80010e8:	4802      	ldr	r0, [pc, #8]	; (80010f4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80010ea:	f003 ff67 	bl	8004fbc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000b6c 	.word	0x20000b6c

080010f8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80010fc:	4802      	ldr	r0, [pc, #8]	; (8001108 <SDIO_IRQHandler+0x10>)
 80010fe:	f002 fef7 	bl	8003ef0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 8001102:	bf00      	nop
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	20000980 	.word	0x20000980

0800110c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001110:	4802      	ldr	r0, [pc, #8]	; (800111c <UART4_IRQHandler+0x10>)
 8001112:	f004 fe89 	bl	8005e28 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000bfc 	.word	0x20000bfc

08001120 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <DMA2_Stream3_IRQHandler+0x10>)
 8001126:	f000 fe91 	bl	8001e4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200008c0 	.word	0x200008c0

08001134 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <DMA2_Stream6_IRQHandler+0x10>)
 800113a:	f000 fe87 	bl	8001e4c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000920 	.word	0x20000920

08001148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <SystemInit+0x28>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001152:	4a07      	ldr	r2, [pc, #28]	; (8001170 <SystemInit+0x28>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800115c:	4b04      	ldr	r3, [pc, #16]	; (8001170 <SystemInit+0x28>)
 800115e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001162:	609a      	str	r2, [r3, #8]
#endif
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
 800116e:	bf00      	nop
 8001170:	e000ed00 	.word	0xe000ed00

08001174 <MX_TIM1_Init>:
TIM_HandleTypeDef htim13;
TIM_HandleTypeDef htim14;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b092      	sub	sp, #72	; 0x48
 8001178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800117a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001188:	2200      	movs	r2, #0
 800118a:	601a      	str	r2, [r3, #0]
 800118c:	605a      	str	r2, [r3, #4]
 800118e:	609a      	str	r2, [r3, #8]
 8001190:	60da      	str	r2, [r3, #12]
 8001192:	611a      	str	r2, [r3, #16]
 8001194:	615a      	str	r2, [r3, #20]
 8001196:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001198:	1d3b      	adds	r3, r7, #4
 800119a:	2220      	movs	r2, #32
 800119c:	2100      	movs	r1, #0
 800119e:	4618      	mov	r0, r3
 80011a0:	f006 fbce 	bl	8007940 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011a4:	4b32      	ldr	r3, [pc, #200]	; (8001270 <MX_TIM1_Init+0xfc>)
 80011a6:	4a33      	ldr	r2, [pc, #204]	; (8001274 <MX_TIM1_Init+0x100>)
 80011a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 180;
 80011aa:	4b31      	ldr	r3, [pc, #196]	; (8001270 <MX_TIM1_Init+0xfc>)
 80011ac:	22b4      	movs	r2, #180	; 0xb4
 80011ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011b0:	4b2f      	ldr	r3, [pc, #188]	; (8001270 <MX_TIM1_Init+0xfc>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80011b6:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <MX_TIM1_Init+0xfc>)
 80011b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80011bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011be:	4b2c      	ldr	r3, [pc, #176]	; (8001270 <MX_TIM1_Init+0xfc>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011c4:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <MX_TIM1_Init+0xfc>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011ca:	4b29      	ldr	r3, [pc, #164]	; (8001270 <MX_TIM1_Init+0xfc>)
 80011cc:	2280      	movs	r2, #128	; 0x80
 80011ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011d0:	4827      	ldr	r0, [pc, #156]	; (8001270 <MX_TIM1_Init+0xfc>)
 80011d2:	f003 fd82 	bl	8004cda <HAL_TIM_PWM_Init>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d001      	beq.n	80011e0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80011dc:	f7ff fdf2 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011e0:	2300      	movs	r3, #0
 80011e2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ec:	4619      	mov	r1, r3
 80011ee:	4820      	ldr	r0, [pc, #128]	; (8001270 <MX_TIM1_Init+0xfc>)
 80011f0:	f004 fca6 	bl	8005b40 <HAL_TIMEx_MasterConfigSynchronization>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80011fa:	f7ff fde3 	bl	8000dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011fe:	2360      	movs	r3, #96	; 0x60
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001202:	2300      	movs	r3, #0
 8001204:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001206:	2300      	movs	r3, #0
 8001208:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800120e:	2300      	movs	r3, #0
 8001210:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001216:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800121a:	220c      	movs	r2, #12
 800121c:	4619      	mov	r1, r3
 800121e:	4814      	ldr	r0, [pc, #80]	; (8001270 <MX_TIM1_Init+0xfc>)
 8001220:	f003 ffd4 	bl	80051cc <HAL_TIM_PWM_ConfigChannel>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM1_Init+0xba>
  {
    Error_Handler();
 800122a:	f7ff fdcb 	bl	8000dc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001232:	2300      	movs	r3, #0
 8001234:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001242:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001246:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800124c:	1d3b      	adds	r3, r7, #4
 800124e:	4619      	mov	r1, r3
 8001250:	4807      	ldr	r0, [pc, #28]	; (8001270 <MX_TIM1_Init+0xfc>)
 8001252:	f004 fcf1 	bl	8005c38 <HAL_TIMEx_ConfigBreakDeadTime>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 800125c:	f7ff fdb2 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001260:	4803      	ldr	r0, [pc, #12]	; (8001270 <MX_TIM1_Init+0xfc>)
 8001262:	f000 fa03 	bl	800166c <HAL_TIM_MspPostInit>

}
 8001266:	bf00      	nop
 8001268:	3748      	adds	r7, #72	; 0x48
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000adc 	.word	0x20000adc
 8001274:	40010000 	.word	0x40010000

08001278 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800127e:	463b      	mov	r3, r7
 8001280:	2200      	movs	r2, #0
 8001282:	601a      	str	r2, [r3, #0]
 8001284:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001286:	4b15      	ldr	r3, [pc, #84]	; (80012dc <MX_TIM7_Init+0x64>)
 8001288:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <MX_TIM7_Init+0x68>)
 800128a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 180;
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <MX_TIM7_Init+0x64>)
 800128e:	22b4      	movs	r2, #180	; 0xb4
 8001290:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <MX_TIM7_Init+0x64>)
 8001294:	2200      	movs	r2, #0
 8001296:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000;
 8001298:	4b10      	ldr	r3, [pc, #64]	; (80012dc <MX_TIM7_Init+0x64>)
 800129a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800129e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012a0:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_TIM7_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80012a6:	480d      	ldr	r0, [pc, #52]	; (80012dc <MX_TIM7_Init+0x64>)
 80012a8:	f003 fc28 	bl	8004afc <HAL_TIM_Base_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80012b2:	f7ff fd87 	bl	8000dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ba:	2300      	movs	r3, #0
 80012bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80012be:	463b      	mov	r3, r7
 80012c0:	4619      	mov	r1, r3
 80012c2:	4806      	ldr	r0, [pc, #24]	; (80012dc <MX_TIM7_Init+0x64>)
 80012c4:	f004 fc3c 	bl	8005b40 <HAL_TIMEx_MasterConfigSynchronization>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80012ce:	f7ff fd79 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	20000bb4 	.word	0x20000bb4
 80012e0:	40001400 	.word	0x40001400

080012e4 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b08c      	sub	sp, #48	; 0x30
 80012e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ea:	f107 0320 	add.w	r3, r7, #32
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012f8:	1d3b      	adds	r3, r7, #4
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
 8001304:	611a      	str	r2, [r3, #16]
 8001306:	615a      	str	r2, [r3, #20]
 8001308:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800130a:	4b2a      	ldr	r3, [pc, #168]	; (80013b4 <MX_TIM9_Init+0xd0>)
 800130c:	4a2a      	ldr	r2, [pc, #168]	; (80013b8 <MX_TIM9_Init+0xd4>)
 800130e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 180;
 8001310:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <MX_TIM9_Init+0xd0>)
 8001312:	22b4      	movs	r2, #180	; 0xb4
 8001314:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001316:	4b27      	ldr	r3, [pc, #156]	; (80013b4 <MX_TIM9_Init+0xd0>)
 8001318:	2200      	movs	r2, #0
 800131a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 100;
 800131c:	4b25      	ldr	r3, [pc, #148]	; (80013b4 <MX_TIM9_Init+0xd0>)
 800131e:	2264      	movs	r2, #100	; 0x64
 8001320:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001322:	4b24      	ldr	r3, [pc, #144]	; (80013b4 <MX_TIM9_Init+0xd0>)
 8001324:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001328:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800132a:	4b22      	ldr	r3, [pc, #136]	; (80013b4 <MX_TIM9_Init+0xd0>)
 800132c:	2280      	movs	r2, #128	; 0x80
 800132e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001330:	4820      	ldr	r0, [pc, #128]	; (80013b4 <MX_TIM9_Init+0xd0>)
 8001332:	f003 fbe3 	bl	8004afc <HAL_TIM_Base_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800133c:	f7ff fd42 	bl	8000dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001340:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001344:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001346:	f107 0320 	add.w	r3, r7, #32
 800134a:	4619      	mov	r1, r3
 800134c:	4819      	ldr	r0, [pc, #100]	; (80013b4 <MX_TIM9_Init+0xd0>)
 800134e:	f003 fffb 	bl	8005348 <HAL_TIM_ConfigClockSource>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001358:	f7ff fd34 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800135c:	4815      	ldr	r0, [pc, #84]	; (80013b4 <MX_TIM9_Init+0xd0>)
 800135e:	f003 fcbc 	bl	8004cda <HAL_TIM_PWM_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001368:	f7ff fd2c 	bl	8000dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136c:	2360      	movs	r3, #96	; 0x60
 800136e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8001370:	f242 7310 	movw	r3, #10000	; 0x2710
 8001374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2204      	movs	r2, #4
 8001382:	4619      	mov	r1, r3
 8001384:	480b      	ldr	r0, [pc, #44]	; (80013b4 <MX_TIM9_Init+0xd0>)
 8001386:	f003 ff21 	bl	80051cc <HAL_TIM_PWM_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8001390:	f7ff fd18 	bl	8000dc4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim9, TIM_CHANNEL_2);
 8001394:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <MX_TIM9_Init+0xd0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	699a      	ldr	r2, [r3, #24]
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_TIM9_Init+0xd0>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80013a2:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80013a4:	4803      	ldr	r0, [pc, #12]	; (80013b4 <MX_TIM9_Init+0xd0>)
 80013a6:	f000 f961 	bl	800166c <HAL_TIM_MspPostInit>

}
 80013aa:	bf00      	nop
 80013ac:	3730      	adds	r7, #48	; 0x30
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000b24 	.word	0x20000b24
 80013b8:	40014000 	.word	0x40014000

080013bc <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80013c0:	4b12      	ldr	r3, [pc, #72]	; (800140c <MX_TIM10_Init+0x50>)
 80013c2:	4a13      	ldr	r2, [pc, #76]	; (8001410 <MX_TIM10_Init+0x54>)
 80013c4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <MX_TIM10_Init+0x50>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <MX_TIM10_Init+0x50>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 65535;
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <MX_TIM10_Init+0x50>)
 80013d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b0c      	ldr	r3, [pc, #48]	; (800140c <MX_TIM10_Init+0x50>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	4b0a      	ldr	r3, [pc, #40]	; (800140c <MX_TIM10_Init+0x50>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80013e6:	4809      	ldr	r0, [pc, #36]	; (800140c <MX_TIM10_Init+0x50>)
 80013e8:	f003 fb88 	bl	8004afc <HAL_TIM_Base_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80013f2:	f7ff fce7 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim10, TIM_OPMODE_SINGLE) != HAL_OK)
 80013f6:	2108      	movs	r1, #8
 80013f8:	4804      	ldr	r0, [pc, #16]	; (800140c <MX_TIM10_Init+0x50>)
 80013fa:	f003 fd85 	bl	8004f08 <HAL_TIM_OnePulse_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM10_Init+0x4c>
  {
    Error_Handler();
 8001404:	f7ff fcde 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}
 800140c:	20000a04 	.word	0x20000a04
 8001410:	40014400 	.word	0x40014400

08001414 <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001418:	4b0d      	ldr	r3, [pc, #52]	; (8001450 <MX_TIM11_Init+0x3c>)
 800141a:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <MX_TIM11_Init+0x40>)
 800141c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 180;
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <MX_TIM11_Init+0x3c>)
 8001420:	22b4      	movs	r2, #180	; 0xb4
 8001422:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	4b0a      	ldr	r3, [pc, #40]	; (8001450 <MX_TIM11_Init+0x3c>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 10;
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <MX_TIM11_Init+0x3c>)
 800142c:	220a      	movs	r2, #10
 800142e:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001430:	4b07      	ldr	r3, [pc, #28]	; (8001450 <MX_TIM11_Init+0x3c>)
 8001432:	2200      	movs	r2, #0
 8001434:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <MX_TIM11_Init+0x3c>)
 8001438:	2280      	movs	r2, #128	; 0x80
 800143a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800143c:	4804      	ldr	r0, [pc, #16]	; (8001450 <MX_TIM11_Init+0x3c>)
 800143e:	f003 fb5d 	bl	8004afc <HAL_TIM_Base_Init>
 8001442:	4603      	mov	r3, r0
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <MX_TIM11_Init+0x38>
  {
    Error_Handler();
 8001448:	f7ff fcbc 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000a94 	.word	0x20000a94
 8001454:	40014800 	.word	0x40014800

08001458 <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 800145c:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_TIM13_Init+0x44>)
 800145e:	4a10      	ldr	r2, [pc, #64]	; (80014a0 <MX_TIM13_Init+0x48>)
 8001460:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 45000;
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <MX_TIM13_Init+0x44>)
 8001464:	f64a 72c8 	movw	r2, #45000	; 0xafc8
 8001468:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b0c      	ldr	r3, [pc, #48]	; (800149c <MX_TIM13_Init+0x44>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 1000;
 8001470:	4b0a      	ldr	r3, [pc, #40]	; (800149c <MX_TIM13_Init+0x44>)
 8001472:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001476:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8001478:	4b08      	ldr	r3, [pc, #32]	; (800149c <MX_TIM13_Init+0x44>)
 800147a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800147e:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001480:	4b06      	ldr	r3, [pc, #24]	; (800149c <MX_TIM13_Init+0x44>)
 8001482:	2200      	movs	r2, #0
 8001484:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <MX_TIM13_Init+0x44>)
 8001488:	f003 fb38 	bl	8004afc <HAL_TIM_Base_Init>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM13_Init+0x3e>
  {
    Error_Handler();
 8001492:	f7ff fc97 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	20000a4c 	.word	0x20000a4c
 80014a0:	40001c00 	.word	0x40001c00

080014a4 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80014a8:	4b12      	ldr	r3, [pc, #72]	; (80014f4 <MX_TIM14_Init+0x50>)
 80014aa:	4a13      	ldr	r2, [pc, #76]	; (80014f8 <MX_TIM14_Init+0x54>)
 80014ac:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 180-1;
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <MX_TIM14_Init+0x50>)
 80014b0:	22b3      	movs	r2, #179	; 0xb3
 80014b2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b4:	4b0f      	ldr	r3, [pc, #60]	; (80014f4 <MX_TIM14_Init+0x50>)
 80014b6:	2200      	movs	r2, #0
 80014b8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 10-1;
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <MX_TIM14_Init+0x50>)
 80014bc:	2209      	movs	r2, #9
 80014be:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <MX_TIM14_Init+0x50>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014c6:	4b0b      	ldr	r3, [pc, #44]	; (80014f4 <MX_TIM14_Init+0x50>)
 80014c8:	2280      	movs	r2, #128	; 0x80
 80014ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80014cc:	4809      	ldr	r0, [pc, #36]	; (80014f4 <MX_TIM14_Init+0x50>)
 80014ce:	f003 fb15 	bl	8004afc <HAL_TIM_Base_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 80014d8:	f7ff fc74 	bl	8000dc4 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim14, TIM_OPMODE_SINGLE) != HAL_OK)
 80014dc:	2108      	movs	r1, #8
 80014de:	4805      	ldr	r0, [pc, #20]	; (80014f4 <MX_TIM14_Init+0x50>)
 80014e0:	f003 fd12 	bl	8004f08 <HAL_TIM_OnePulse_Init>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM14_Init+0x4a>
  {
    Error_Handler();
 80014ea:	f7ff fc6b 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	20000b6c 	.word	0x20000b6c
 80014f8:	40002000 	.word	0x40002000

080014fc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a0b      	ldr	r2, [pc, #44]	; (8001538 <HAL_TIM_PWM_MspInit+0x3c>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d10d      	bne.n	800152a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_TIM_PWM_MspInit+0x40>)
 8001514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001516:	4a09      	ldr	r2, [pc, #36]	; (800153c <HAL_TIM_PWM_MspInit+0x40>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6453      	str	r3, [r2, #68]	; 0x44
 800151e:	4b07      	ldr	r3, [pc, #28]	; (800153c <HAL_TIM_PWM_MspInit+0x40>)
 8001520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800152a:	bf00      	nop
 800152c:	3714      	adds	r7, #20
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40010000 	.word	0x40010000
 800153c:	40023800 	.word	0x40023800

08001540 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b088      	sub	sp, #32
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a40      	ldr	r2, [pc, #256]	; (8001650 <HAL_TIM_Base_MspInit+0x110>)
 800154e:	4293      	cmp	r3, r2
 8001550:	d10e      	bne.n	8001570 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001552:	2300      	movs	r3, #0
 8001554:	61fb      	str	r3, [r7, #28]
 8001556:	4b3f      	ldr	r3, [pc, #252]	; (8001654 <HAL_TIM_Base_MspInit+0x114>)
 8001558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155a:	4a3e      	ldr	r2, [pc, #248]	; (8001654 <HAL_TIM_Base_MspInit+0x114>)
 800155c:	f043 0320 	orr.w	r3, r3, #32
 8001560:	6413      	str	r3, [r2, #64]	; 0x40
 8001562:	4b3c      	ldr	r3, [pc, #240]	; (8001654 <HAL_TIM_Base_MspInit+0x114>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	f003 0320 	and.w	r3, r3, #32
 800156a:	61fb      	str	r3, [r7, #28]
 800156c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }
}
 800156e:	e06a      	b.n	8001646 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM9)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a38      	ldr	r2, [pc, #224]	; (8001658 <HAL_TIM_Base_MspInit+0x118>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d10e      	bne.n	8001598 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
 800157e:	4b35      	ldr	r3, [pc, #212]	; (8001654 <HAL_TIM_Base_MspInit+0x114>)
 8001580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001582:	4a34      	ldr	r2, [pc, #208]	; (8001654 <HAL_TIM_Base_MspInit+0x114>)
 8001584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001588:	6453      	str	r3, [r2, #68]	; 0x44
 800158a:	4b32      	ldr	r3, [pc, #200]	; (8001654 <HAL_TIM_Base_MspInit+0x114>)
 800158c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001592:	61bb      	str	r3, [r7, #24]
 8001594:	69bb      	ldr	r3, [r7, #24]
}
 8001596:	e056      	b.n	8001646 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM10)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a2f      	ldr	r2, [pc, #188]	; (800165c <HAL_TIM_Base_MspInit+0x11c>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d10e      	bne.n	80015c0 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
 80015a6:	4b2b      	ldr	r3, [pc, #172]	; (8001654 <HAL_TIM_Base_MspInit+0x114>)
 80015a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015aa:	4a2a      	ldr	r2, [pc, #168]	; (8001654 <HAL_TIM_Base_MspInit+0x114>)
 80015ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b0:	6453      	str	r3, [r2, #68]	; 0x44
 80015b2:	4b28      	ldr	r3, [pc, #160]	; (8001654 <HAL_TIM_Base_MspInit+0x114>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697b      	ldr	r3, [r7, #20]
}
 80015be:	e042      	b.n	8001646 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM11)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a26      	ldr	r2, [pc, #152]	; (8001660 <HAL_TIM_Base_MspInit+0x120>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d10e      	bne.n	80015e8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b21      	ldr	r3, [pc, #132]	; (8001654 <HAL_TIM_Base_MspInit+0x114>)
 80015d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d2:	4a20      	ldr	r2, [pc, #128]	; (8001654 <HAL_TIM_Base_MspInit+0x114>)
 80015d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015d8:	6453      	str	r3, [r2, #68]	; 0x44
 80015da:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <HAL_TIM_Base_MspInit+0x114>)
 80015dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]
}
 80015e6:	e02e      	b.n	8001646 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM13)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a1d      	ldr	r2, [pc, #116]	; (8001664 <HAL_TIM_Base_MspInit+0x124>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d10e      	bne.n	8001610 <HAL_TIM_Base_MspInit+0xd0>
    __HAL_RCC_TIM13_CLK_ENABLE();
 80015f2:	2300      	movs	r3, #0
 80015f4:	60fb      	str	r3, [r7, #12]
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_TIM_Base_MspInit+0x114>)
 80015f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fa:	4a16      	ldr	r2, [pc, #88]	; (8001654 <HAL_TIM_Base_MspInit+0x114>)
 80015fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001600:	6413      	str	r3, [r2, #64]	; 0x40
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_TIM_Base_MspInit+0x114>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	68fb      	ldr	r3, [r7, #12]
}
 800160e:	e01a      	b.n	8001646 <HAL_TIM_Base_MspInit+0x106>
  else if(tim_baseHandle->Instance==TIM14)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a14      	ldr	r2, [pc, #80]	; (8001668 <HAL_TIM_Base_MspInit+0x128>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d115      	bne.n	8001646 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM14_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	4b0d      	ldr	r3, [pc, #52]	; (8001654 <HAL_TIM_Base_MspInit+0x114>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001622:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <HAL_TIM_Base_MspInit+0x114>)
 8001624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001628:	6413      	str	r3, [r2, #64]	; 0x40
 800162a:	4b0a      	ldr	r3, [pc, #40]	; (8001654 <HAL_TIM_Base_MspInit+0x114>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001636:	2200      	movs	r2, #0
 8001638:	2100      	movs	r1, #0
 800163a:	202d      	movs	r0, #45	; 0x2d
 800163c:	f000 fa8f 	bl	8001b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001640:	202d      	movs	r0, #45	; 0x2d
 8001642:	f000 faa8 	bl	8001b96 <HAL_NVIC_EnableIRQ>
}
 8001646:	bf00      	nop
 8001648:	3720      	adds	r7, #32
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	40001400 	.word	0x40001400
 8001654:	40023800 	.word	0x40023800
 8001658:	40014000 	.word	0x40014000
 800165c:	40014400 	.word	0x40014400
 8001660:	40014800 	.word	0x40014800
 8001664:	40001c00 	.word	0x40001c00
 8001668:	40002000 	.word	0x40002000

0800166c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a24      	ldr	r2, [pc, #144]	; (800171c <HAL_TIM_MspPostInit+0xb0>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d11f      	bne.n	80016ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b23      	ldr	r3, [pc, #140]	; (8001720 <HAL_TIM_MspPostInit+0xb4>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	4a22      	ldr	r2, [pc, #136]	; (8001720 <HAL_TIM_MspPostInit+0xb4>)
 8001698:	f043 0301 	orr.w	r3, r3, #1
 800169c:	6313      	str	r3, [r2, #48]	; 0x30
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_TIM_MspPostInit+0xb4>)
 80016a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a2:	f003 0301 	and.w	r3, r3, #1
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = LCD_PWM_Pin;
 80016aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80016ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b0:	2302      	movs	r3, #2
 80016b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b4:	2300      	movs	r3, #0
 80016b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b8:	2300      	movs	r3, #0
 80016ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80016bc:	2301      	movs	r3, #1
 80016be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LCD_PWM_GPIO_Port, &GPIO_InitStruct);
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	4619      	mov	r1, r3
 80016c6:	4817      	ldr	r0, [pc, #92]	; (8001724 <HAL_TIM_MspPostInit+0xb8>)
 80016c8:	f000 fdfc 	bl	80022c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80016cc:	e022      	b.n	8001714 <HAL_TIM_MspPostInit+0xa8>
  else if(timHandle->Instance==TIM9)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a15      	ldr	r2, [pc, #84]	; (8001728 <HAL_TIM_MspPostInit+0xbc>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d11d      	bne.n	8001714 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016d8:	2300      	movs	r3, #0
 80016da:	60fb      	str	r3, [r7, #12]
 80016dc:	4b10      	ldr	r3, [pc, #64]	; (8001720 <HAL_TIM_MspPostInit+0xb4>)
 80016de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e0:	4a0f      	ldr	r2, [pc, #60]	; (8001720 <HAL_TIM_MspPostInit+0xb4>)
 80016e2:	f043 0310 	orr.w	r3, r3, #16
 80016e6:	6313      	str	r3, [r2, #48]	; 0x30
 80016e8:	4b0d      	ldr	r3, [pc, #52]	; (8001720 <HAL_TIM_MspPostInit+0xb4>)
 80016ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED_PWM_Pin;
 80016f4:	2340      	movs	r3, #64	; 0x40
 80016f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001704:	2303      	movs	r3, #3
 8001706:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_PWM_GPIO_Port, &GPIO_InitStruct);
 8001708:	f107 0314 	add.w	r3, r7, #20
 800170c:	4619      	mov	r1, r3
 800170e:	4807      	ldr	r0, [pc, #28]	; (800172c <HAL_TIM_MspPostInit+0xc0>)
 8001710:	f000 fdd8 	bl	80022c4 <HAL_GPIO_Init>
}
 8001714:	bf00      	nop
 8001716:	3728      	adds	r7, #40	; 0x28
 8001718:	46bd      	mov	sp, r7
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40010000 	.word	0x40010000
 8001720:	40023800 	.word	0x40023800
 8001724:	40020000 	.word	0x40020000
 8001728:	40014000 	.word	0x40014000
 800172c:	40021000 	.word	0x40021000

08001730 <MX_UART4_Init>:

UART_HandleTypeDef huart4;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <MX_UART4_Init+0x4c>)
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <MX_UART4_Init+0x50>)
 8001738:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 250000;
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <MX_UART4_Init+0x4c>)
 800173c:	4a11      	ldr	r2, [pc, #68]	; (8001784 <MX_UART4_Init+0x54>)
 800173e:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001740:	4b0e      	ldr	r3, [pc, #56]	; (800177c <MX_UART4_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_2;
 8001746:	4b0d      	ldr	r3, [pc, #52]	; (800177c <MX_UART4_Init+0x4c>)
 8001748:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800174c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800174e:	4b0b      	ldr	r3, [pc, #44]	; (800177c <MX_UART4_Init+0x4c>)
 8001750:	2200      	movs	r2, #0
 8001752:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001754:	4b09      	ldr	r3, [pc, #36]	; (800177c <MX_UART4_Init+0x4c>)
 8001756:	220c      	movs	r2, #12
 8001758:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175a:	4b08      	ldr	r3, [pc, #32]	; (800177c <MX_UART4_Init+0x4c>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001760:	4b06      	ldr	r3, [pc, #24]	; (800177c <MX_UART4_Init+0x4c>)
 8001762:	2200      	movs	r2, #0
 8001764:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001766:	4805      	ldr	r0, [pc, #20]	; (800177c <MX_UART4_Init+0x4c>)
 8001768:	f004 facc 	bl	8005d04 <HAL_UART_Init>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001772:	f7ff fb27 	bl	8000dc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000bfc 	.word	0x20000bfc
 8001780:	40004c00 	.word	0x40004c00
 8001784:	0003d090 	.word	0x0003d090

08001788 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b08a      	sub	sp, #40	; 0x28
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001790:	f107 0314 	add.w	r3, r7, #20
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	609a      	str	r2, [r3, #8]
 800179c:	60da      	str	r2, [r3, #12]
 800179e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a1d      	ldr	r2, [pc, #116]	; (800181c <HAL_UART_MspInit+0x94>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d133      	bne.n	8001812 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	613b      	str	r3, [r7, #16]
 80017ae:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <HAL_UART_MspInit+0x98>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	4a1b      	ldr	r2, [pc, #108]	; (8001820 <HAL_UART_MspInit+0x98>)
 80017b4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80017b8:	6413      	str	r3, [r2, #64]	; 0x40
 80017ba:	4b19      	ldr	r3, [pc, #100]	; (8001820 <HAL_UART_MspInit+0x98>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017c2:	613b      	str	r3, [r7, #16]
 80017c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b15      	ldr	r3, [pc, #84]	; (8001820 <HAL_UART_MspInit+0x98>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a14      	ldr	r2, [pc, #80]	; (8001820 <HAL_UART_MspInit+0x98>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_UART_MspInit+0x98>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = DMX_TX_Pin|DMX_RX_Pin;
 80017e2:	2303      	movs	r3, #3
 80017e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017e6:	2302      	movs	r3, #2
 80017e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017ea:	2301      	movs	r3, #1
 80017ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017ee:	2303      	movs	r3, #3
 80017f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80017f2:	2308      	movs	r3, #8
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017f6:	f107 0314 	add.w	r3, r7, #20
 80017fa:	4619      	mov	r1, r3
 80017fc:	4809      	ldr	r0, [pc, #36]	; (8001824 <HAL_UART_MspInit+0x9c>)
 80017fe:	f000 fd61 	bl	80022c4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8001802:	2200      	movs	r2, #0
 8001804:	2100      	movs	r1, #0
 8001806:	2034      	movs	r0, #52	; 0x34
 8001808:	f000 f9a9 	bl	8001b5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800180c:	2034      	movs	r0, #52	; 0x34
 800180e:	f000 f9c2 	bl	8001b96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }
}
 8001812:	bf00      	nop
 8001814:	3728      	adds	r7, #40	; 0x28
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40004c00 	.word	0x40004c00
 8001820:	40023800 	.word	0x40023800
 8001824:	40020000 	.word	0x40020000

08001828 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001828:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001860 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800182c:	480d      	ldr	r0, [pc, #52]	; (8001864 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800182e:	490e      	ldr	r1, [pc, #56]	; (8001868 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001830:	4a0e      	ldr	r2, [pc, #56]	; (800186c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001832:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001834:	e002      	b.n	800183c <LoopCopyDataInit>

08001836 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001836:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001838:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800183a:	3304      	adds	r3, #4

0800183c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800183c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800183e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001840:	d3f9      	bcc.n	8001836 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001842:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001844:	4c0b      	ldr	r4, [pc, #44]	; (8001874 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001846:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001848:	e001      	b.n	800184e <LoopFillZerobss>

0800184a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800184a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800184c:	3204      	adds	r2, #4

0800184e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800184e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001850:	d3fb      	bcc.n	800184a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001852:	f7ff fc79 	bl	8001148 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001856:	f006 f841 	bl	80078dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800185a:	f7ff f929 	bl	8000ab0 <main>
  bx  lr    
 800185e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001860:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001864:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001868:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 800186c:	08007a4c 	.word	0x08007a4c
  ldr r2, =_sbss
 8001870:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001874:	200010ac 	.word	0x200010ac

08001878 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001878:	e7fe      	b.n	8001878 <ADC_IRQHandler>
	...

0800187c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <HAL_Init+0x40>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a0d      	ldr	r2, [pc, #52]	; (80018bc <HAL_Init+0x40>)
 8001886:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800188a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800188c:	4b0b      	ldr	r3, [pc, #44]	; (80018bc <HAL_Init+0x40>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0a      	ldr	r2, [pc, #40]	; (80018bc <HAL_Init+0x40>)
 8001892:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001896:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001898:	4b08      	ldr	r3, [pc, #32]	; (80018bc <HAL_Init+0x40>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a07      	ldr	r2, [pc, #28]	; (80018bc <HAL_Init+0x40>)
 800189e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a4:	2003      	movs	r0, #3
 80018a6:	f000 f94f 	bl	8001b48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018aa:	2000      	movs	r0, #0
 80018ac:	f000 f808 	bl	80018c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b0:	f7ff fbc0 	bl	8001034 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b4:	2300      	movs	r3, #0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023c00 	.word	0x40023c00

080018c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018c8:	4b12      	ldr	r3, [pc, #72]	; (8001914 <HAL_InitTick+0x54>)
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	4b12      	ldr	r3, [pc, #72]	; (8001918 <HAL_InitTick+0x58>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	4619      	mov	r1, r3
 80018d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80018da:	fbb2 f3f3 	udiv	r3, r2, r3
 80018de:	4618      	mov	r0, r3
 80018e0:	f000 f967 	bl	8001bb2 <HAL_SYSTICK_Config>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e00e      	b.n	800190c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b0f      	cmp	r3, #15
 80018f2:	d80a      	bhi.n	800190a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f4:	2200      	movs	r2, #0
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018fc:	f000 f92f 	bl	8001b5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001900:	4a06      	ldr	r2, [pc, #24]	; (800191c <HAL_InitTick+0x5c>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	e000      	b.n	800190c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190a:	2301      	movs	r3, #1
}
 800190c:	4618      	mov	r0, r3
 800190e:	3708      	adds	r7, #8
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	20000000 	.word	0x20000000
 8001918:	20000008 	.word	0x20000008
 800191c:	20000004 	.word	0x20000004

08001920 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <HAL_IncTick+0x20>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <HAL_IncTick+0x24>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4413      	add	r3, r2
 8001930:	4a04      	ldr	r2, [pc, #16]	; (8001944 <HAL_IncTick+0x24>)
 8001932:	6013      	str	r3, [r2, #0]
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	20000008 	.word	0x20000008
 8001944:	20000c40 	.word	0x20000c40

08001948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return uwTick;
 800194c:	4b03      	ldr	r3, [pc, #12]	; (800195c <HAL_GetTick+0x14>)
 800194e:	681b      	ldr	r3, [r3, #0]
}
 8001950:	4618      	mov	r0, r3
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	20000c40 	.word	0x20000c40

08001960 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b084      	sub	sp, #16
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001968:	f7ff ffee 	bl	8001948 <HAL_GetTick>
 800196c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001978:	d005      	beq.n	8001986 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800197a:	4b0a      	ldr	r3, [pc, #40]	; (80019a4 <HAL_Delay+0x44>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	461a      	mov	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	4413      	add	r3, r2
 8001984:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001986:	bf00      	nop
 8001988:	f7ff ffde 	bl	8001948 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	429a      	cmp	r2, r3
 8001996:	d8f7      	bhi.n	8001988 <HAL_Delay+0x28>
  {
  }
}
 8001998:	bf00      	nop
 800199a:	bf00      	nop
 800199c:	3710      	adds	r7, #16
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	20000008 	.word	0x20000008

080019a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f003 0307 	and.w	r3, r3, #7
 80019b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b8:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019ba:	68db      	ldr	r3, [r3, #12]
 80019bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019be:	68ba      	ldr	r2, [r7, #8]
 80019c0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019c4:	4013      	ands	r3, r2
 80019c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019da:	4a04      	ldr	r2, [pc, #16]	; (80019ec <__NVIC_SetPriorityGrouping+0x44>)
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	60d3      	str	r3, [r2, #12]
}
 80019e0:	bf00      	nop
 80019e2:	3714      	adds	r7, #20
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f0:	b480      	push	{r7}
 80019f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019f4:	4b04      	ldr	r3, [pc, #16]	; (8001a08 <__NVIC_GetPriorityGrouping+0x18>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	0a1b      	lsrs	r3, r3, #8
 80019fa:	f003 0307 	and.w	r3, r3, #7
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	e000ed00 	.word	0xe000ed00

08001a0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	db0b      	blt.n	8001a36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	f003 021f 	and.w	r2, r3, #31
 8001a24:	4907      	ldr	r1, [pc, #28]	; (8001a44 <__NVIC_EnableIRQ+0x38>)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	095b      	lsrs	r3, r3, #5
 8001a2c:	2001      	movs	r0, #1
 8001a2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a36:	bf00      	nop
 8001a38:	370c      	adds	r7, #12
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	e000e100 	.word	0xe000e100

08001a48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	6039      	str	r1, [r7, #0]
 8001a52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	db0a      	blt.n	8001a72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	490c      	ldr	r1, [pc, #48]	; (8001a94 <__NVIC_SetPriority+0x4c>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	0112      	lsls	r2, r2, #4
 8001a68:	b2d2      	uxtb	r2, r2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a70:	e00a      	b.n	8001a88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	b2da      	uxtb	r2, r3
 8001a76:	4908      	ldr	r1, [pc, #32]	; (8001a98 <__NVIC_SetPriority+0x50>)
 8001a78:	79fb      	ldrb	r3, [r7, #7]
 8001a7a:	f003 030f 	and.w	r3, r3, #15
 8001a7e:	3b04      	subs	r3, #4
 8001a80:	0112      	lsls	r2, r2, #4
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	440b      	add	r3, r1
 8001a86:	761a      	strb	r2, [r3, #24]
}
 8001a88:	bf00      	nop
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000e100 	.word	0xe000e100
 8001a98:	e000ed00 	.word	0xe000ed00

08001a9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	; 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	f1c3 0307 	rsb	r3, r3, #7
 8001ab6:	2b04      	cmp	r3, #4
 8001ab8:	bf28      	it	cs
 8001aba:	2304      	movcs	r3, #4
 8001abc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	2b06      	cmp	r3, #6
 8001ac4:	d902      	bls.n	8001acc <NVIC_EncodePriority+0x30>
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3b03      	subs	r3, #3
 8001aca:	e000      	b.n	8001ace <NVIC_EncodePriority+0x32>
 8001acc:	2300      	movs	r3, #0
 8001ace:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43da      	mvns	r2, r3
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	401a      	ands	r2, r3
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ae4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	fa01 f303 	lsl.w	r3, r1, r3
 8001aee:	43d9      	mvns	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	4313      	orrs	r3, r2
         );
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3724      	adds	r7, #36	; 0x24
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b14:	d301      	bcc.n	8001b1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b16:	2301      	movs	r3, #1
 8001b18:	e00f      	b.n	8001b3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <SysTick_Config+0x40>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b22:	210f      	movs	r1, #15
 8001b24:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b28:	f7ff ff8e 	bl	8001a48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b2c:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <SysTick_Config+0x40>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b32:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <SysTick_Config+0x40>)
 8001b34:	2207      	movs	r2, #7
 8001b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	e000e010 	.word	0xe000e010

08001b48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	f7ff ff29 	bl	80019a8 <__NVIC_SetPriorityGrouping>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}

08001b5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b086      	sub	sp, #24
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	4603      	mov	r3, r0
 8001b66:	60b9      	str	r1, [r7, #8]
 8001b68:	607a      	str	r2, [r7, #4]
 8001b6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b70:	f7ff ff3e 	bl	80019f0 <__NVIC_GetPriorityGrouping>
 8001b74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	68b9      	ldr	r1, [r7, #8]
 8001b7a:	6978      	ldr	r0, [r7, #20]
 8001b7c:	f7ff ff8e 	bl	8001a9c <NVIC_EncodePriority>
 8001b80:	4602      	mov	r2, r0
 8001b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b86:	4611      	mov	r1, r2
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff5d 	bl	8001a48 <__NVIC_SetPriority>
}
 8001b8e:	bf00      	nop
 8001b90:	3718      	adds	r7, #24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}

08001b96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b96:	b580      	push	{r7, lr}
 8001b98:	b082      	sub	sp, #8
 8001b9a:	af00      	add	r7, sp, #0
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f7ff ff31 	bl	8001a0c <__NVIC_EnableIRQ>
}
 8001baa:	bf00      	nop
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f7ff ffa2 	bl	8001b04 <SysTick_Config>
 8001bc0:	4603      	mov	r3, r0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
	...

08001bcc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bd8:	f7ff feb6 	bl	8001948 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e099      	b.n	8001d1c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f022 0201 	bic.w	r2, r2, #1
 8001c06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c08:	e00f      	b.n	8001c2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c0a:	f7ff fe9d 	bl	8001948 <HAL_GetTick>
 8001c0e:	4602      	mov	r2, r0
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	1ad3      	subs	r3, r2, r3
 8001c14:	2b05      	cmp	r3, #5
 8001c16:	d908      	bls.n	8001c2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2203      	movs	r2, #3
 8001c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e078      	b.n	8001d1c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0301 	and.w	r3, r3, #1
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1e8      	bne.n	8001c0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	4b38      	ldr	r3, [pc, #224]	; (8001d24 <HAL_DMA_Init+0x158>)
 8001c44:	4013      	ands	r3, r2
 8001c46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	685a      	ldr	r2, [r3, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689b      	ldr	r3, [r3, #8]
 8001c50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6a1b      	ldr	r3, [r3, #32]
 8001c74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c80:	2b04      	cmp	r3, #4
 8001c82:	d107      	bne.n	8001c94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	697a      	ldr	r2, [r7, #20]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	f023 0307 	bic.w	r3, r3, #7
 8001caa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb0:	697a      	ldr	r2, [r7, #20]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d117      	bne.n	8001cee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc2:	697a      	ldr	r2, [r7, #20]
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d00e      	beq.n	8001cee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f000 fa7b 	bl	80021cc <DMA_CheckFifoParam>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d008      	beq.n	8001cee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2240      	movs	r2, #64	; 0x40
 8001ce0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cea:	2301      	movs	r3, #1
 8001cec:	e016      	b.n	8001d1c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 fa32 	bl	8002160 <DMA_CalcBaseAndBitshift>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d04:	223f      	movs	r2, #63	; 0x3f
 8001d06:	409a      	lsls	r2, r3
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2200      	movs	r2, #0
 8001d10:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3718      	adds	r7, #24
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	f010803f 	.word	0xf010803f

08001d28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d34:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001d36:	f7ff fe07 	bl	8001948 <HAL_GetTick>
 8001d3a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d008      	beq.n	8001d5a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2280      	movs	r2, #128	; 0x80
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e052      	b.n	8001e00 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f022 0216 	bic.w	r2, r2, #22
 8001d68:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d78:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d103      	bne.n	8001d8a <HAL_DMA_Abort+0x62>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d007      	beq.n	8001d9a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f022 0208 	bic.w	r2, r2, #8
 8001d98:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f022 0201 	bic.w	r2, r2, #1
 8001da8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001daa:	e013      	b.n	8001dd4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001dac:	f7ff fdcc 	bl	8001948 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b05      	cmp	r3, #5
 8001db8:	d90c      	bls.n	8001dd4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2220      	movs	r2, #32
 8001dbe:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2203      	movs	r2, #3
 8001dcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	e015      	b.n	8001e00 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0301 	and.w	r3, r3, #1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1e4      	bne.n	8001dac <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de6:	223f      	movs	r2, #63	; 0x3f
 8001de8:	409a      	lsls	r2, r3
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2200      	movs	r2, #0
 8001df2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3710      	adds	r7, #16
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b083      	sub	sp, #12
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b02      	cmp	r3, #2
 8001e1a:	d004      	beq.n	8001e26 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2280      	movs	r2, #128	; 0x80
 8001e20:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00c      	b.n	8001e40 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2205      	movs	r2, #5
 8001e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 0201 	bic.w	r2, r2, #1
 8001e3c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	370c      	adds	r7, #12
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b086      	sub	sp, #24
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e54:	2300      	movs	r3, #0
 8001e56:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e58:	4b92      	ldr	r3, [pc, #584]	; (80020a4 <HAL_DMA_IRQHandler+0x258>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a92      	ldr	r2, [pc, #584]	; (80020a8 <HAL_DMA_IRQHandler+0x25c>)
 8001e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e62:	0a9b      	lsrs	r3, r3, #10
 8001e64:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e76:	2208      	movs	r2, #8
 8001e78:	409a      	lsls	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d01a      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0304 	and.w	r3, r3, #4
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d013      	beq.n	8001eb8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f022 0204 	bic.w	r2, r2, #4
 8001e9e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea4:	2208      	movs	r2, #8
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb0:	f043 0201 	orr.w	r2, r3, #1
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	409a      	lsls	r2, r3
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d012      	beq.n	8001eee <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	695b      	ldr	r3, [r3, #20]
 8001ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d00b      	beq.n	8001eee <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eda:	2201      	movs	r2, #1
 8001edc:	409a      	lsls	r2, r3
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee6:	f043 0202 	orr.w	r2, r3, #2
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef2:	2204      	movs	r2, #4
 8001ef4:	409a      	lsls	r2, r3
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d012      	beq.n	8001f24 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00b      	beq.n	8001f24 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f10:	2204      	movs	r2, #4
 8001f12:	409a      	lsls	r2, r3
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f1c:	f043 0204 	orr.w	r2, r3, #4
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f28:	2210      	movs	r2, #16
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d043      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0308 	and.w	r3, r3, #8
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d03c      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f46:	2210      	movs	r2, #16
 8001f48:	409a      	lsls	r2, r3
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d018      	beq.n	8001f8e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d108      	bne.n	8001f7c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d024      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	4798      	blx	r3
 8001f7a:	e01f      	b.n	8001fbc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d01b      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	4798      	blx	r3
 8001f8c:	e016      	b.n	8001fbc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d107      	bne.n	8001fac <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0208 	bic.w	r2, r2, #8
 8001faa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d003      	beq.n	8001fbc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb8:	6878      	ldr	r0, [r7, #4]
 8001fba:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fc0:	2220      	movs	r2, #32
 8001fc2:	409a      	lsls	r2, r3
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	f000 808e 	beq.w	80020ea <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0310 	and.w	r3, r3, #16
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f000 8086 	beq.w	80020ea <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	2220      	movs	r2, #32
 8001fe4:	409a      	lsls	r2, r3
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	2b05      	cmp	r3, #5
 8001ff4:	d136      	bne.n	8002064 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f022 0216 	bic.w	r2, r2, #22
 8002004:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	695a      	ldr	r2, [r3, #20]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002014:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	2b00      	cmp	r3, #0
 800201c:	d103      	bne.n	8002026 <HAL_DMA_IRQHandler+0x1da>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002022:	2b00      	cmp	r3, #0
 8002024:	d007      	beq.n	8002036 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f022 0208 	bic.w	r2, r2, #8
 8002034:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	223f      	movs	r2, #63	; 0x3f
 800203c:	409a      	lsls	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002056:	2b00      	cmp	r3, #0
 8002058:	d07d      	beq.n	8002156 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	4798      	blx	r3
        }
        return;
 8002062:	e078      	b.n	8002156 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d01c      	beq.n	80020ac <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d108      	bne.n	8002092 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002084:	2b00      	cmp	r3, #0
 8002086:	d030      	beq.n	80020ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	4798      	blx	r3
 8002090:	e02b      	b.n	80020ea <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002096:	2b00      	cmp	r3, #0
 8002098:	d027      	beq.n	80020ea <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	4798      	blx	r3
 80020a2:	e022      	b.n	80020ea <HAL_DMA_IRQHandler+0x29e>
 80020a4:	20000000 	.word	0x20000000
 80020a8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10f      	bne.n	80020da <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681a      	ldr	r2, [r3, #0]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f022 0210 	bic.w	r2, r2, #16
 80020c8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d003      	beq.n	80020ea <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d032      	beq.n	8002158 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f6:	f003 0301 	and.w	r3, r3, #1
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d022      	beq.n	8002144 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2205      	movs	r2, #5
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0201 	bic.w	r2, r2, #1
 8002114:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	3301      	adds	r3, #1
 800211a:	60bb      	str	r3, [r7, #8]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	429a      	cmp	r2, r3
 8002120:	d307      	bcc.n	8002132 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0301 	and.w	r3, r3, #1
 800212c:	2b00      	cmp	r3, #0
 800212e:	d1f2      	bne.n	8002116 <HAL_DMA_IRQHandler+0x2ca>
 8002130:	e000      	b.n	8002134 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002132:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2201      	movs	r2, #1
 8002140:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	4798      	blx	r3
 8002154:	e000      	b.n	8002158 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002156:	bf00      	nop
    }
  }
}
 8002158:	3718      	adds	r7, #24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
 800215e:	bf00      	nop

08002160 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002160:	b480      	push	{r7}
 8002162:	b085      	sub	sp, #20
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	b2db      	uxtb	r3, r3
 800216e:	3b10      	subs	r3, #16
 8002170:	4a14      	ldr	r2, [pc, #80]	; (80021c4 <DMA_CalcBaseAndBitshift+0x64>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	091b      	lsrs	r3, r3, #4
 8002178:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800217a:	4a13      	ldr	r2, [pc, #76]	; (80021c8 <DMA_CalcBaseAndBitshift+0x68>)
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	4413      	add	r3, r2
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	2b03      	cmp	r3, #3
 800218c:	d909      	bls.n	80021a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002196:	f023 0303 	bic.w	r3, r3, #3
 800219a:	1d1a      	adds	r2, r3, #4
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	659a      	str	r2, [r3, #88]	; 0x58
 80021a0:	e007      	b.n	80021b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021aa:	f023 0303 	bic.w	r3, r3, #3
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3714      	adds	r7, #20
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	aaaaaaab 	.word	0xaaaaaaab
 80021c8:	08007a1c 	.word	0x08007a1c

080021cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021d4:	2300      	movs	r3, #0
 80021d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d11f      	bne.n	8002226 <DMA_CheckFifoParam+0x5a>
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	2b03      	cmp	r3, #3
 80021ea:	d856      	bhi.n	800229a <DMA_CheckFifoParam+0xce>
 80021ec:	a201      	add	r2, pc, #4	; (adr r2, 80021f4 <DMA_CheckFifoParam+0x28>)
 80021ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f2:	bf00      	nop
 80021f4:	08002205 	.word	0x08002205
 80021f8:	08002217 	.word	0x08002217
 80021fc:	08002205 	.word	0x08002205
 8002200:	0800229b 	.word	0x0800229b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002208:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d046      	beq.n	800229e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002214:	e043      	b.n	800229e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800221e:	d140      	bne.n	80022a2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002224:	e03d      	b.n	80022a2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	699b      	ldr	r3, [r3, #24]
 800222a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800222e:	d121      	bne.n	8002274 <DMA_CheckFifoParam+0xa8>
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b03      	cmp	r3, #3
 8002234:	d837      	bhi.n	80022a6 <DMA_CheckFifoParam+0xda>
 8002236:	a201      	add	r2, pc, #4	; (adr r2, 800223c <DMA_CheckFifoParam+0x70>)
 8002238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223c:	0800224d 	.word	0x0800224d
 8002240:	08002253 	.word	0x08002253
 8002244:	0800224d 	.word	0x0800224d
 8002248:	08002265 	.word	0x08002265
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
      break;
 8002250:	e030      	b.n	80022b4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002256:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d025      	beq.n	80022aa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002262:	e022      	b.n	80022aa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800226c:	d11f      	bne.n	80022ae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002272:	e01c      	b.n	80022ae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d903      	bls.n	8002282 <DMA_CheckFifoParam+0xb6>
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	2b03      	cmp	r3, #3
 800227e:	d003      	beq.n	8002288 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002280:	e018      	b.n	80022b4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	73fb      	strb	r3, [r7, #15]
      break;
 8002286:	e015      	b.n	80022b4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d00e      	beq.n	80022b2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	73fb      	strb	r3, [r7, #15]
      break;
 8002298:	e00b      	b.n	80022b2 <DMA_CheckFifoParam+0xe6>
      break;
 800229a:	bf00      	nop
 800229c:	e00a      	b.n	80022b4 <DMA_CheckFifoParam+0xe8>
      break;
 800229e:	bf00      	nop
 80022a0:	e008      	b.n	80022b4 <DMA_CheckFifoParam+0xe8>
      break;
 80022a2:	bf00      	nop
 80022a4:	e006      	b.n	80022b4 <DMA_CheckFifoParam+0xe8>
      break;
 80022a6:	bf00      	nop
 80022a8:	e004      	b.n	80022b4 <DMA_CheckFifoParam+0xe8>
      break;
 80022aa:	bf00      	nop
 80022ac:	e002      	b.n	80022b4 <DMA_CheckFifoParam+0xe8>
      break;   
 80022ae:	bf00      	nop
 80022b0:	e000      	b.n	80022b4 <DMA_CheckFifoParam+0xe8>
      break;
 80022b2:	bf00      	nop
    }
  } 
  
  return status; 
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop

080022c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b089      	sub	sp, #36	; 0x24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ce:	2300      	movs	r3, #0
 80022d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022d2:	2300      	movs	r3, #0
 80022d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022d6:	2300      	movs	r3, #0
 80022d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
 80022de:	e165      	b.n	80025ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022e0:	2201      	movs	r2, #1
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4013      	ands	r3, r2
 80022f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022f4:	693a      	ldr	r2, [r7, #16]
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	f040 8154 	bne.w	80025a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022fe:	683b      	ldr	r3, [r7, #0]
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	2b01      	cmp	r3, #1
 8002308:	d005      	beq.n	8002316 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002312:	2b02      	cmp	r3, #2
 8002314:	d130      	bne.n	8002378 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	2203      	movs	r2, #3
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43db      	mvns	r3, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4013      	ands	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	68da      	ldr	r2, [r3, #12]
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	005b      	lsls	r3, r3, #1
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4313      	orrs	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800234c:	2201      	movs	r2, #1
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	f003 0201 	and.w	r2, r3, #1
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b03      	cmp	r3, #3
 8002382:	d017      	beq.n	80023b4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	2203      	movs	r2, #3
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	689a      	ldr	r2, [r3, #8]
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	fa02 f303 	lsl.w	r3, r2, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 0303 	and.w	r3, r3, #3
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d123      	bne.n	8002408 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	08da      	lsrs	r2, r3, #3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	3208      	adds	r2, #8
 80023c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	f003 0307 	and.w	r3, r3, #7
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	220f      	movs	r2, #15
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	691a      	ldr	r2, [r3, #16]
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	08da      	lsrs	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	3208      	adds	r2, #8
 8002402:	69b9      	ldr	r1, [r7, #24]
 8002404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	2203      	movs	r2, #3
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f003 0203 	and.w	r2, r3, #3
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	fa02 f303 	lsl.w	r3, r2, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4313      	orrs	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002444:	2b00      	cmp	r3, #0
 8002446:	f000 80ae 	beq.w	80025a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60fb      	str	r3, [r7, #12]
 800244e:	4b5d      	ldr	r3, [pc, #372]	; (80025c4 <HAL_GPIO_Init+0x300>)
 8002450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002452:	4a5c      	ldr	r2, [pc, #368]	; (80025c4 <HAL_GPIO_Init+0x300>)
 8002454:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002458:	6453      	str	r3, [r2, #68]	; 0x44
 800245a:	4b5a      	ldr	r3, [pc, #360]	; (80025c4 <HAL_GPIO_Init+0x300>)
 800245c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800245e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002466:	4a58      	ldr	r2, [pc, #352]	; (80025c8 <HAL_GPIO_Init+0x304>)
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	089b      	lsrs	r3, r3, #2
 800246c:	3302      	adds	r3, #2
 800246e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f003 0303 	and.w	r3, r3, #3
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	220f      	movs	r2, #15
 800247e:	fa02 f303 	lsl.w	r3, r2, r3
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	4a4f      	ldr	r2, [pc, #316]	; (80025cc <HAL_GPIO_Init+0x308>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d025      	beq.n	80024de <HAL_GPIO_Init+0x21a>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	4a4e      	ldr	r2, [pc, #312]	; (80025d0 <HAL_GPIO_Init+0x30c>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d01f      	beq.n	80024da <HAL_GPIO_Init+0x216>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	4a4d      	ldr	r2, [pc, #308]	; (80025d4 <HAL_GPIO_Init+0x310>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d019      	beq.n	80024d6 <HAL_GPIO_Init+0x212>
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4a4c      	ldr	r2, [pc, #304]	; (80025d8 <HAL_GPIO_Init+0x314>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <HAL_GPIO_Init+0x20e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4a4b      	ldr	r2, [pc, #300]	; (80025dc <HAL_GPIO_Init+0x318>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d00d      	beq.n	80024ce <HAL_GPIO_Init+0x20a>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4a4a      	ldr	r2, [pc, #296]	; (80025e0 <HAL_GPIO_Init+0x31c>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d007      	beq.n	80024ca <HAL_GPIO_Init+0x206>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	4a49      	ldr	r2, [pc, #292]	; (80025e4 <HAL_GPIO_Init+0x320>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d101      	bne.n	80024c6 <HAL_GPIO_Init+0x202>
 80024c2:	2306      	movs	r3, #6
 80024c4:	e00c      	b.n	80024e0 <HAL_GPIO_Init+0x21c>
 80024c6:	2307      	movs	r3, #7
 80024c8:	e00a      	b.n	80024e0 <HAL_GPIO_Init+0x21c>
 80024ca:	2305      	movs	r3, #5
 80024cc:	e008      	b.n	80024e0 <HAL_GPIO_Init+0x21c>
 80024ce:	2304      	movs	r3, #4
 80024d0:	e006      	b.n	80024e0 <HAL_GPIO_Init+0x21c>
 80024d2:	2303      	movs	r3, #3
 80024d4:	e004      	b.n	80024e0 <HAL_GPIO_Init+0x21c>
 80024d6:	2302      	movs	r3, #2
 80024d8:	e002      	b.n	80024e0 <HAL_GPIO_Init+0x21c>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_GPIO_Init+0x21c>
 80024de:	2300      	movs	r3, #0
 80024e0:	69fa      	ldr	r2, [r7, #28]
 80024e2:	f002 0203 	and.w	r2, r2, #3
 80024e6:	0092      	lsls	r2, r2, #2
 80024e8:	4093      	lsls	r3, r2
 80024ea:	69ba      	ldr	r2, [r7, #24]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024f0:	4935      	ldr	r1, [pc, #212]	; (80025c8 <HAL_GPIO_Init+0x304>)
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	089b      	lsrs	r3, r3, #2
 80024f6:	3302      	adds	r3, #2
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024fe:	4b3a      	ldr	r3, [pc, #232]	; (80025e8 <HAL_GPIO_Init+0x324>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	4313      	orrs	r3, r2
 8002520:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002522:	4a31      	ldr	r2, [pc, #196]	; (80025e8 <HAL_GPIO_Init+0x324>)
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002528:	4b2f      	ldr	r3, [pc, #188]	; (80025e8 <HAL_GPIO_Init+0x324>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	43db      	mvns	r3, r3
 8002532:	69ba      	ldr	r2, [r7, #24]
 8002534:	4013      	ands	r3, r2
 8002536:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d003      	beq.n	800254c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	4313      	orrs	r3, r2
 800254a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254c:	4a26      	ldr	r2, [pc, #152]	; (80025e8 <HAL_GPIO_Init+0x324>)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002552:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <HAL_GPIO_Init+0x324>)
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	43db      	mvns	r3, r3
 800255c:	69ba      	ldr	r2, [r7, #24]
 800255e:	4013      	ands	r3, r2
 8002560:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	4313      	orrs	r3, r2
 8002574:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002576:	4a1c      	ldr	r2, [pc, #112]	; (80025e8 <HAL_GPIO_Init+0x324>)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800257c:	4b1a      	ldr	r3, [pc, #104]	; (80025e8 <HAL_GPIO_Init+0x324>)
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	43db      	mvns	r3, r3
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	4013      	ands	r3, r2
 800258a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d003      	beq.n	80025a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002598:	69ba      	ldr	r2, [r7, #24]
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025a0:	4a11      	ldr	r2, [pc, #68]	; (80025e8 <HAL_GPIO_Init+0x324>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	3301      	adds	r3, #1
 80025aa:	61fb      	str	r3, [r7, #28]
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2b0f      	cmp	r3, #15
 80025b0:	f67f ae96 	bls.w	80022e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025b4:	bf00      	nop
 80025b6:	bf00      	nop
 80025b8:	3724      	adds	r7, #36	; 0x24
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40013800 	.word	0x40013800
 80025cc:	40020000 	.word	0x40020000
 80025d0:	40020400 	.word	0x40020400
 80025d4:	40020800 	.word	0x40020800
 80025d8:	40020c00 	.word	0x40020c00
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40021400 	.word	0x40021400
 80025e4:	40021800 	.word	0x40021800
 80025e8:	40013c00 	.word	0x40013c00

080025ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
 80025f4:	460b      	mov	r3, r1
 80025f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691a      	ldr	r2, [r3, #16]
 80025fc:	887b      	ldrh	r3, [r7, #2]
 80025fe:	4013      	ands	r3, r2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d002      	beq.n	800260a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
 8002608:	e001      	b.n	800260e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800260e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002610:	4618      	mov	r0, r3
 8002612:	3714      	adds	r7, #20
 8002614:	46bd      	mov	sp, r7
 8002616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261a:	4770      	bx	lr

0800261c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	807b      	strh	r3, [r7, #2]
 8002628:	4613      	mov	r3, r2
 800262a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800262c:	787b      	ldrb	r3, [r7, #1]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002638:	e003      	b.n	8002642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800263a:	887b      	ldrh	r3, [r7, #2]
 800263c:	041a      	lsls	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	619a      	str	r2, [r3, #24]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr
	...

08002650 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b084      	sub	sp, #16
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002660:	2301      	movs	r3, #1
 8002662:	e0cc      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002664:	4b68      	ldr	r3, [pc, #416]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 030f 	and.w	r3, r3, #15
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	429a      	cmp	r2, r3
 8002670:	d90c      	bls.n	800268c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002672:	4b65      	ldr	r3, [pc, #404]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002674:	683a      	ldr	r2, [r7, #0]
 8002676:	b2d2      	uxtb	r2, r2
 8002678:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800267a:	4b63      	ldr	r3, [pc, #396]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	683a      	ldr	r2, [r7, #0]
 8002684:	429a      	cmp	r2, r3
 8002686:	d001      	beq.n	800268c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e0b8      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0302 	and.w	r3, r3, #2
 8002694:	2b00      	cmp	r3, #0
 8002696:	d020      	beq.n	80026da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80026a4:	4b59      	ldr	r3, [pc, #356]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	4a58      	ldr	r2, [pc, #352]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80026ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026bc:	4b53      	ldr	r3, [pc, #332]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	4a52      	ldr	r2, [pc, #328]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80026c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026c8:	4b50      	ldr	r3, [pc, #320]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	494d      	ldr	r1, [pc, #308]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d044      	beq.n	8002770 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ee:	4b47      	ldr	r3, [pc, #284]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d119      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e07f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	2b02      	cmp	r3, #2
 8002704:	d003      	beq.n	800270e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800270a:	2b03      	cmp	r3, #3
 800270c:	d107      	bne.n	800271e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800270e:	4b3f      	ldr	r3, [pc, #252]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d109      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e06f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800271e:	4b3b      	ldr	r3, [pc, #236]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d101      	bne.n	800272e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800272a:	2301      	movs	r3, #1
 800272c:	e067      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800272e:	4b37      	ldr	r3, [pc, #220]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002730:	689b      	ldr	r3, [r3, #8]
 8002732:	f023 0203 	bic.w	r2, r3, #3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	4934      	ldr	r1, [pc, #208]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 800273c:	4313      	orrs	r3, r2
 800273e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002740:	f7ff f902 	bl	8001948 <HAL_GetTick>
 8002744:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002746:	e00a      	b.n	800275e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002748:	f7ff f8fe 	bl	8001948 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	f241 3288 	movw	r2, #5000	; 0x1388
 8002756:	4293      	cmp	r3, r2
 8002758:	d901      	bls.n	800275e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e04f      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800275e:	4b2b      	ldr	r3, [pc, #172]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	f003 020c 	and.w	r2, r3, #12
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	429a      	cmp	r2, r3
 800276e:	d1eb      	bne.n	8002748 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002770:	4b25      	ldr	r3, [pc, #148]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	683a      	ldr	r2, [r7, #0]
 800277a:	429a      	cmp	r2, r3
 800277c:	d20c      	bcs.n	8002798 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800277e:	4b22      	ldr	r3, [pc, #136]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	b2d2      	uxtb	r2, r2
 8002784:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002786:	4b20      	ldr	r3, [pc, #128]	; (8002808 <HAL_RCC_ClockConfig+0x1b8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	683a      	ldr	r2, [r7, #0]
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e032      	b.n	80027fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d008      	beq.n	80027b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	4916      	ldr	r1, [pc, #88]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0308 	and.w	r3, r3, #8
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d009      	beq.n	80027d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80027c2:	4b12      	ldr	r3, [pc, #72]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	00db      	lsls	r3, r3, #3
 80027d0:	490e      	ldr	r1, [pc, #56]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80027d6:	f000 fb7f 	bl	8002ed8 <HAL_RCC_GetSysClockFreq>
 80027da:	4602      	mov	r2, r0
 80027dc:	4b0b      	ldr	r3, [pc, #44]	; (800280c <HAL_RCC_ClockConfig+0x1bc>)
 80027de:	689b      	ldr	r3, [r3, #8]
 80027e0:	091b      	lsrs	r3, r3, #4
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	490a      	ldr	r1, [pc, #40]	; (8002810 <HAL_RCC_ClockConfig+0x1c0>)
 80027e8:	5ccb      	ldrb	r3, [r1, r3]
 80027ea:	fa22 f303 	lsr.w	r3, r2, r3
 80027ee:	4a09      	ldr	r2, [pc, #36]	; (8002814 <HAL_RCC_ClockConfig+0x1c4>)
 80027f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80027f2:	4b09      	ldr	r3, [pc, #36]	; (8002818 <HAL_RCC_ClockConfig+0x1c8>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff f862 	bl	80018c0 <HAL_InitTick>

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3710      	adds	r7, #16
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023c00 	.word	0x40023c00
 800280c:	40023800 	.word	0x40023800
 8002810:	08007a04 	.word	0x08007a04
 8002814:	20000000 	.word	0x20000000
 8002818:	20000004 	.word	0x20000004

0800281c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002820:	4b03      	ldr	r3, [pc, #12]	; (8002830 <HAL_RCC_GetHCLKFreq+0x14>)
 8002822:	681b      	ldr	r3, [r3, #0]
}
 8002824:	4618      	mov	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000000 	.word	0x20000000

08002834 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002838:	f7ff fff0 	bl	800281c <HAL_RCC_GetHCLKFreq>
 800283c:	4602      	mov	r2, r0
 800283e:	4b05      	ldr	r3, [pc, #20]	; (8002854 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	0a9b      	lsrs	r3, r3, #10
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	4903      	ldr	r1, [pc, #12]	; (8002858 <HAL_RCC_GetPCLK1Freq+0x24>)
 800284a:	5ccb      	ldrb	r3, [r1, r3]
 800284c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002850:	4618      	mov	r0, r3
 8002852:	bd80      	pop	{r7, pc}
 8002854:	40023800 	.word	0x40023800
 8002858:	08007a14 	.word	0x08007a14

0800285c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002860:	f7ff ffdc 	bl	800281c <HAL_RCC_GetHCLKFreq>
 8002864:	4602      	mov	r2, r0
 8002866:	4b05      	ldr	r3, [pc, #20]	; (800287c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	0b5b      	lsrs	r3, r3, #13
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4903      	ldr	r1, [pc, #12]	; (8002880 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002872:	5ccb      	ldrb	r3, [r1, r3]
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40023800 	.word	0x40023800
 8002880:	08007a14 	.word	0x08007a14

08002884 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b08c      	sub	sp, #48	; 0x30
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800288c:	2300      	movs	r3, #0
 800288e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8002890:	2300      	movs	r3, #0
 8002892:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002894:	2300      	movs	r3, #0
 8002896:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002898:	2300      	movs	r3, #0
 800289a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 80028a0:	2300      	movs	r3, #0
 80028a2:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 80028ac:	2300      	movs	r3, #0
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 0301 	and.w	r3, r3, #1
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d010      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 80028bc:	4b6f      	ldr	r3, [pc, #444]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028c2:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ca:	496c      	ldr	r1, [pc, #432]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028cc:	4313      	orrs	r3, r2
 80028ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 80028da:	2301      	movs	r3, #1
 80028dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0302 	and.w	r3, r3, #2
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d010      	beq.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80028ea:	4b64      	ldr	r3, [pc, #400]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80028f0:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f8:	4960      	ldr	r1, [pc, #384]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002904:	2b00      	cmp	r3, #0
 8002906:	d101      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8002908:	2301      	movs	r3, #1
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d017      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002918:	4b58      	ldr	r3, [pc, #352]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800291a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800291e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	4955      	ldr	r1, [pc, #340]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002932:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002936:	d101      	bne.n	800293c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8002938:	2301      	movs	r3, #1
 800293a:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002944:	2301      	movs	r3, #1
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d017      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002954:	4b49      	ldr	r3, [pc, #292]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800295a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002962:	4946      	ldr	r1, [pc, #280]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002972:	d101      	bne.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002974:	2301      	movs	r3, #1
 8002976:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297c:	2b00      	cmp	r3, #0
 800297e:	d101      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002980:	2301      	movs	r3, #1
 8002982:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b00      	cmp	r3, #0
 800298e:	f000 808a 	beq.w	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	60bb      	str	r3, [r7, #8]
 8002996:	4b39      	ldr	r3, [pc, #228]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	4a38      	ldr	r2, [pc, #224]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800299c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029a0:	6413      	str	r3, [r2, #64]	; 0x40
 80029a2:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029aa:	60bb      	str	r3, [r7, #8]
 80029ac:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80029ae:	4b34      	ldr	r3, [pc, #208]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a33      	ldr	r2, [pc, #204]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80029ba:	f7fe ffc5 	bl	8001948 <HAL_GetTick>
 80029be:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80029c0:	e008      	b.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80029c2:	f7fe ffc1 	bl	8001948 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e278      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80029d4:	4b2a      	ldr	r3, [pc, #168]	; (8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0f0      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029e0:	4b26      	ldr	r3, [pc, #152]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80029e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029e8:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d02f      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f8:	6a3a      	ldr	r2, [r7, #32]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d028      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029fe:	4b1f      	ldr	r3, [pc, #124]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a06:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a08:	4b1e      	ldr	r3, [pc, #120]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a0e:	4b1d      	ldr	r3, [pc, #116]	; (8002a84 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002a14:	4a19      	ldr	r2, [pc, #100]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002a1a:	4b18      	ldr	r3, [pc, #96]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d114      	bne.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002a26:	f7fe ff8f 	bl	8001948 <HAL_GetTick>
 8002a2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a2c:	e00a      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a2e:	f7fe ff8b 	bl	8001948 <HAL_GetTick>
 8002a32:	4602      	mov	r2, r0
 8002a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a36:	1ad3      	subs	r3, r2, r3
 8002a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e240      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a44:	4b0d      	ldr	r3, [pc, #52]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0ee      	beq.n	8002a2e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a5c:	d114      	bne.n	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8002a5e:	4b07      	ldr	r3, [pc, #28]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002a6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a72:	4902      	ldr	r1, [pc, #8]	; (8002a7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002a74:	4313      	orrs	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]
 8002a78:	e00c      	b.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002a7a:	bf00      	nop
 8002a7c:	40023800 	.word	0x40023800
 8002a80:	40007000 	.word	0x40007000
 8002a84:	42470e40 	.word	0x42470e40
 8002a88:	4b4a      	ldr	r3, [pc, #296]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4a49      	ldr	r2, [pc, #292]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a8e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002a92:	6093      	str	r3, [r2, #8]
 8002a94:	4b47      	ldr	r3, [pc, #284]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002a96:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aa0:	4944      	ldr	r1, [pc, #272]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0310 	and.w	r3, r3, #16
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d004      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8002ab8:	4b3f      	ldr	r3, [pc, #252]	; (8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002aba:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00a      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002ac8:	4b3a      	ldr	r3, [pc, #232]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ace:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad6:	4937      	ldr	r1, [pc, #220]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002aea:	4b32      	ldr	r3, [pc, #200]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002aec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af0:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af8:	492e      	ldr	r1, [pc, #184]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d011      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002b0c:	4b29      	ldr	r3, [pc, #164]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b12:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1a:	4926      	ldr	r1, [pc, #152]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b2a:	d101      	bne.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8002b3c:	4b1d      	ldr	r3, [pc, #116]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4a:	491a      	ldr	r1, [pc, #104]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d011      	beq.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b64:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6c:	4911      	ldr	r1, [pc, #68]	; (8002bb4 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002b7c:	d101      	bne.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d005      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002b90:	f040 80ff 	bne.w	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002b9a:	f7fe fed5 	bl	8001948 <HAL_GetTick>
 8002b9e:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002ba0:	e00e      	b.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002ba2:	f7fe fed1 	bl	8001948 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d907      	bls.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e188      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002bb4:	40023800 	.word	0x40023800
 8002bb8:	424711e0 	.word	0x424711e0
 8002bbc:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002bc0:	4b7e      	ldr	r3, [pc, #504]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d1ea      	bne.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0301 	and.w	r3, r3, #1
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d003      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d009      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d028      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d124      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002bf4:	4b71      	ldr	r3, [pc, #452]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002bf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002bfa:	0c1b      	lsrs	r3, r3, #16
 8002bfc:	f003 0303 	and.w	r3, r3, #3
 8002c00:	3301      	adds	r3, #1
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002c06:	4b6d      	ldr	r3, [pc, #436]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c0c:	0e1b      	lsrs	r3, r3, #24
 8002c0e:	f003 030f 	and.w	r3, r3, #15
 8002c12:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	019b      	lsls	r3, r3, #6
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	085b      	lsrs	r3, r3, #1
 8002c24:	3b01      	subs	r3, #1
 8002c26:	041b      	lsls	r3, r3, #16
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	061b      	lsls	r3, r3, #24
 8002c2e:	431a      	orrs	r2, r3
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	695b      	ldr	r3, [r3, #20]
 8002c34:	071b      	lsls	r3, r3, #28
 8002c36:	4961      	ldr	r1, [pc, #388]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c38:	4313      	orrs	r3, r2
 8002c3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d004      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c52:	d00a      	beq.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d035      	beq.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c68:	d130      	bne.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002c6a:	4b54      	ldr	r3, [pc, #336]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c70:	0c1b      	lsrs	r3, r3, #16
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	3301      	adds	r3, #1
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002c7c:	4b4f      	ldr	r3, [pc, #316]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002c7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c82:	0f1b      	lsrs	r3, r3, #28
 8002c84:	f003 0307 	and.w	r3, r3, #7
 8002c88:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	019b      	lsls	r3, r3, #6
 8002c94:	431a      	orrs	r2, r3
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	085b      	lsrs	r3, r3, #1
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	041b      	lsls	r3, r3, #16
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	061b      	lsls	r3, r3, #24
 8002ca6:	431a      	orrs	r2, r3
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	071b      	lsls	r3, r3, #28
 8002cac:	4943      	ldr	r1, [pc, #268]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002cb4:	4b41      	ldr	r3, [pc, #260]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cba:	f023 021f 	bic.w	r2, r3, #31
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	493d      	ldr	r1, [pc, #244]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d029      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ce0:	d124      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002ce2:	4b36      	ldr	r3, [pc, #216]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002ce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ce8:	0c1b      	lsrs	r3, r3, #16
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002cf4:	4b31      	ldr	r3, [pc, #196]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002cfa:	0f1b      	lsrs	r3, r3, #28
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	019b      	lsls	r3, r3, #6
 8002d0c:	431a      	orrs	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	085b      	lsrs	r3, r3, #1
 8002d14:	3b01      	subs	r3, #1
 8002d16:	041b      	lsls	r3, r3, #16
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	061b      	lsls	r3, r3, #24
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	071b      	lsls	r3, r3, #28
 8002d24:	4925      	ldr	r1, [pc, #148]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d016      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	019b      	lsls	r3, r3, #6
 8002d42:	431a      	orrs	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	085b      	lsrs	r3, r3, #1
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	041b      	lsls	r3, r3, #16
 8002d4e:	431a      	orrs	r2, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	061b      	lsls	r3, r3, #24
 8002d56:	431a      	orrs	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	695b      	ldr	r3, [r3, #20]
 8002d5c:	071b      	lsls	r3, r3, #28
 8002d5e:	4917      	ldr	r1, [pc, #92]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d66:	4b16      	ldr	r3, [pc, #88]	; (8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002d68:	2201      	movs	r2, #1
 8002d6a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d6c:	f7fe fdec 	bl	8001948 <HAL_GetTick>
 8002d70:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d74:	f7fe fde8 	bl	8001948 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d901      	bls.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e09f      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d86:	4b0d      	ldr	r3, [pc, #52]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d0f0      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	f040 8095 	bne.w	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002da0:	f7fe fdd2 	bl	8001948 <HAL_GetTick>
 8002da4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002da6:	e00f      	b.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002da8:	f7fe fdce 	bl	8001948 <HAL_GetTick>
 8002dac:	4602      	mov	r2, r0
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	1ad3      	subs	r3, r2, r3
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d908      	bls.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002db6:	2303      	movs	r3, #3
 8002db8:	e085      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002dba:	bf00      	nop
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	42470068 	.word	0x42470068
 8002dc4:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002dc8:	4b41      	ldr	r3, [pc, #260]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dd4:	d0e8      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f003 0304 	and.w	r3, r3, #4
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d003      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x566>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d009      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d02b      	beq.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d127      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8002dfe:	4b34      	ldr	r3, [pc, #208]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e04:	0c1b      	lsrs	r3, r3, #16
 8002e06:	f003 0303 	and.w	r3, r3, #3
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	005b      	lsls	r3, r3, #1
 8002e0e:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	699a      	ldr	r2, [r3, #24]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	69db      	ldr	r3, [r3, #28]
 8002e18:	019b      	lsls	r3, r3, #6
 8002e1a:	431a      	orrs	r2, r3
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	085b      	lsrs	r3, r3, #1
 8002e20:	3b01      	subs	r3, #1
 8002e22:	041b      	lsls	r3, r3, #16
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	061b      	lsls	r3, r3, #24
 8002e2c:	4928      	ldr	r1, [pc, #160]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002e34:	4b26      	ldr	r3, [pc, #152]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e3a:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e42:	3b01      	subs	r3, #1
 8002e44:	021b      	lsls	r3, r3, #8
 8002e46:	4922      	ldr	r1, [pc, #136]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01d      	beq.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x612>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e62:	d118      	bne.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002e64:	4b1a      	ldr	r3, [pc, #104]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6a:	0e1b      	lsrs	r3, r3, #24
 8002e6c:	f003 030f 	and.w	r3, r3, #15
 8002e70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699a      	ldr	r2, [r3, #24]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	69db      	ldr	r3, [r3, #28]
 8002e7a:	019b      	lsls	r3, r3, #6
 8002e7c:	431a      	orrs	r2, r3
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a1b      	ldr	r3, [r3, #32]
 8002e82:	085b      	lsrs	r3, r3, #1
 8002e84:	3b01      	subs	r3, #1
 8002e86:	041b      	lsls	r3, r3, #16
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	061b      	lsls	r3, r3, #24
 8002e8e:	4910      	ldr	r1, [pc, #64]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002e90:	4313      	orrs	r3, r2
 8002e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002e96:	4b0f      	ldr	r3, [pc, #60]	; (8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e9c:	f7fe fd54 	bl	8001948 <HAL_GetTick>
 8002ea0:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002ea2:	e008      	b.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8002ea4:	f7fe fd50 	bl	8001948 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d901      	bls.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	e007      	b.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ebe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ec2:	d1ef      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3730      	adds	r7, #48	; 0x30
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	42470070 	.word	0x42470070

08002ed8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002edc:	b087      	sub	sp, #28
 8002ede:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002ee0:	2600      	movs	r6, #0
 8002ee2:	60fe      	str	r6, [r7, #12]
  uint32_t pllvco = 0U;
 8002ee4:	2600      	movs	r6, #0
 8002ee6:	617e      	str	r6, [r7, #20]
  uint32_t pllp = 0U;
 8002ee8:	2600      	movs	r6, #0
 8002eea:	60be      	str	r6, [r7, #8]
  uint32_t pllr = 0U;
 8002eec:	2600      	movs	r6, #0
 8002eee:	607e      	str	r6, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002ef0:	2600      	movs	r6, #0
 8002ef2:	613e      	str	r6, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ef4:	4ea3      	ldr	r6, [pc, #652]	; (8003184 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002ef6:	68b6      	ldr	r6, [r6, #8]
 8002ef8:	f006 060c 	and.w	r6, r6, #12
 8002efc:	2e0c      	cmp	r6, #12
 8002efe:	f200 8137 	bhi.w	8003170 <HAL_RCC_GetSysClockFreq+0x298>
 8002f02:	f20f 0c08 	addw	ip, pc, #8
 8002f06:	f85c f026 	ldr.w	pc, [ip, r6, lsl #2]
 8002f0a:	bf00      	nop
 8002f0c:	08002f41 	.word	0x08002f41
 8002f10:	08003171 	.word	0x08003171
 8002f14:	08003171 	.word	0x08003171
 8002f18:	08003171 	.word	0x08003171
 8002f1c:	08002f47 	.word	0x08002f47
 8002f20:	08003171 	.word	0x08003171
 8002f24:	08003171 	.word	0x08003171
 8002f28:	08003171 	.word	0x08003171
 8002f2c:	08002f4d 	.word	0x08002f4d
 8002f30:	08003171 	.word	0x08003171
 8002f34:	08003171 	.word	0x08003171
 8002f38:	08003171 	.word	0x08003171
 8002f3c:	08003063 	.word	0x08003063
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002f40:	4b91      	ldr	r3, [pc, #580]	; (8003188 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8002f42:	613b      	str	r3, [r7, #16]
       break;
 8002f44:	e117      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002f46:	4b91      	ldr	r3, [pc, #580]	; (800318c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002f48:	613b      	str	r3, [r7, #16]
      break;
 8002f4a:	e114      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f4c:	4b8d      	ldr	r3, [pc, #564]	; (8003184 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f54:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f56:	4b8b      	ldr	r3, [pc, #556]	; (8003184 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d024      	beq.n	8002fac <HAL_RCC_GetSysClockFreq+0xd4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f62:	4b88      	ldr	r3, [pc, #544]	; (8003184 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	099b      	lsrs	r3, r3, #6
 8002f68:	461a      	mov	r2, r3
 8002f6a:	f04f 0300 	mov.w	r3, #0
 8002f6e:	f240 14ff 	movw	r4, #511	; 0x1ff
 8002f72:	f04f 0500 	mov.w	r5, #0
 8002f76:	ea02 0004 	and.w	r0, r2, r4
 8002f7a:	ea03 0105 	and.w	r1, r3, r5
 8002f7e:	4b83      	ldr	r3, [pc, #524]	; (800318c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002f80:	fb03 f201 	mul.w	r2, r3, r1
 8002f84:	2300      	movs	r3, #0
 8002f86:	fb03 f300 	mul.w	r3, r3, r0
 8002f8a:	4413      	add	r3, r2
 8002f8c:	4a7f      	ldr	r2, [pc, #508]	; (800318c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8002f8e:	fba0 0102 	umull	r0, r1, r0, r2
 8002f92:	440b      	add	r3, r1
 8002f94:	4619      	mov	r1, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	461a      	mov	r2, r3
 8002f9a:	f04f 0300 	mov.w	r3, #0
 8002f9e:	f7fd f939 	bl	8000214 <__aeabi_uldivmod>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	617b      	str	r3, [r7, #20]
 8002faa:	e04c      	b.n	8003046 <HAL_RCC_GetSysClockFreq+0x16e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fac:	4b75      	ldr	r3, [pc, #468]	; (8003184 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	099b      	lsrs	r3, r3, #6
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	f04f 0300 	mov.w	r3, #0
 8002fb8:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002fbc:	f04f 0100 	mov.w	r1, #0
 8002fc0:	ea02 0800 	and.w	r8, r2, r0
 8002fc4:	ea03 0901 	and.w	r9, r3, r1
 8002fc8:	4640      	mov	r0, r8
 8002fca:	4649      	mov	r1, r9
 8002fcc:	f04f 0200 	mov.w	r2, #0
 8002fd0:	f04f 0300 	mov.w	r3, #0
 8002fd4:	014b      	lsls	r3, r1, #5
 8002fd6:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002fda:	0142      	lsls	r2, r0, #5
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	ebb0 0008 	subs.w	r0, r0, r8
 8002fe4:	eb61 0109 	sbc.w	r1, r1, r9
 8002fe8:	f04f 0200 	mov.w	r2, #0
 8002fec:	f04f 0300 	mov.w	r3, #0
 8002ff0:	018b      	lsls	r3, r1, #6
 8002ff2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002ff6:	0182      	lsls	r2, r0, #6
 8002ff8:	1a12      	subs	r2, r2, r0
 8002ffa:	eb63 0301 	sbc.w	r3, r3, r1
 8002ffe:	f04f 0000 	mov.w	r0, #0
 8003002:	f04f 0100 	mov.w	r1, #0
 8003006:	00d9      	lsls	r1, r3, #3
 8003008:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800300c:	00d0      	lsls	r0, r2, #3
 800300e:	4602      	mov	r2, r0
 8003010:	460b      	mov	r3, r1
 8003012:	eb12 0208 	adds.w	r2, r2, r8
 8003016:	eb43 0309 	adc.w	r3, r3, r9
 800301a:	f04f 0000 	mov.w	r0, #0
 800301e:	f04f 0100 	mov.w	r1, #0
 8003022:	0299      	lsls	r1, r3, #10
 8003024:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003028:	0290      	lsls	r0, r2, #10
 800302a:	4602      	mov	r2, r0
 800302c:	460b      	mov	r3, r1
 800302e:	4610      	mov	r0, r2
 8003030:	4619      	mov	r1, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	461a      	mov	r2, r3
 8003036:	f04f 0300 	mov.w	r3, #0
 800303a:	f7fd f8eb 	bl	8000214 <__aeabi_uldivmod>
 800303e:	4602      	mov	r2, r0
 8003040:	460b      	mov	r3, r1
 8003042:	4613      	mov	r3, r2
 8003044:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003046:	4b4f      	ldr	r3, [pc, #316]	; (8003184 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	0c1b      	lsrs	r3, r3, #16
 800304c:	f003 0303 	and.w	r3, r3, #3
 8003050:	3301      	adds	r3, #1
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	fbb2 f3f3 	udiv	r3, r2, r3
 800305e:	613b      	str	r3, [r7, #16]
      break;
 8003060:	e089      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003062:	4948      	ldr	r1, [pc, #288]	; (8003184 <HAL_RCC_GetSysClockFreq+0x2ac>)
 8003064:	6849      	ldr	r1, [r1, #4]
 8003066:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 800306a:	60f9      	str	r1, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800306c:	4945      	ldr	r1, [pc, #276]	; (8003184 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800306e:	6849      	ldr	r1, [r1, #4]
 8003070:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8003074:	2900      	cmp	r1, #0
 8003076:	d024      	beq.n	80030c2 <HAL_RCC_GetSysClockFreq+0x1ea>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003078:	4942      	ldr	r1, [pc, #264]	; (8003184 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800307a:	6849      	ldr	r1, [r1, #4]
 800307c:	0989      	lsrs	r1, r1, #6
 800307e:	4608      	mov	r0, r1
 8003080:	f04f 0100 	mov.w	r1, #0
 8003084:	f240 14ff 	movw	r4, #511	; 0x1ff
 8003088:	f04f 0500 	mov.w	r5, #0
 800308c:	ea00 0204 	and.w	r2, r0, r4
 8003090:	ea01 0305 	and.w	r3, r1, r5
 8003094:	493d      	ldr	r1, [pc, #244]	; (800318c <HAL_RCC_GetSysClockFreq+0x2b4>)
 8003096:	fb01 f003 	mul.w	r0, r1, r3
 800309a:	2100      	movs	r1, #0
 800309c:	fb01 f102 	mul.w	r1, r1, r2
 80030a0:	1844      	adds	r4, r0, r1
 80030a2:	493a      	ldr	r1, [pc, #232]	; (800318c <HAL_RCC_GetSysClockFreq+0x2b4>)
 80030a4:	fba2 0101 	umull	r0, r1, r2, r1
 80030a8:	1863      	adds	r3, r4, r1
 80030aa:	4619      	mov	r1, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	461a      	mov	r2, r3
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	f7fd f8ae 	bl	8000214 <__aeabi_uldivmod>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	4613      	mov	r3, r2
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	e04a      	b.n	8003158 <HAL_RCC_GetSysClockFreq+0x280>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030c2:	4b30      	ldr	r3, [pc, #192]	; (8003184 <HAL_RCC_GetSysClockFreq+0x2ac>)
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	099b      	lsrs	r3, r3, #6
 80030c8:	461a      	mov	r2, r3
 80030ca:	f04f 0300 	mov.w	r3, #0
 80030ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030d2:	f04f 0100 	mov.w	r1, #0
 80030d6:	ea02 0400 	and.w	r4, r2, r0
 80030da:	ea03 0501 	and.w	r5, r3, r1
 80030de:	4620      	mov	r0, r4
 80030e0:	4629      	mov	r1, r5
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	014b      	lsls	r3, r1, #5
 80030ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80030f0:	0142      	lsls	r2, r0, #5
 80030f2:	4610      	mov	r0, r2
 80030f4:	4619      	mov	r1, r3
 80030f6:	1b00      	subs	r0, r0, r4
 80030f8:	eb61 0105 	sbc.w	r1, r1, r5
 80030fc:	f04f 0200 	mov.w	r2, #0
 8003100:	f04f 0300 	mov.w	r3, #0
 8003104:	018b      	lsls	r3, r1, #6
 8003106:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800310a:	0182      	lsls	r2, r0, #6
 800310c:	1a12      	subs	r2, r2, r0
 800310e:	eb63 0301 	sbc.w	r3, r3, r1
 8003112:	f04f 0000 	mov.w	r0, #0
 8003116:	f04f 0100 	mov.w	r1, #0
 800311a:	00d9      	lsls	r1, r3, #3
 800311c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003120:	00d0      	lsls	r0, r2, #3
 8003122:	4602      	mov	r2, r0
 8003124:	460b      	mov	r3, r1
 8003126:	1912      	adds	r2, r2, r4
 8003128:	eb45 0303 	adc.w	r3, r5, r3
 800312c:	f04f 0000 	mov.w	r0, #0
 8003130:	f04f 0100 	mov.w	r1, #0
 8003134:	0299      	lsls	r1, r3, #10
 8003136:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800313a:	0290      	lsls	r0, r2, #10
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	4610      	mov	r0, r2
 8003142:	4619      	mov	r1, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	461a      	mov	r2, r3
 8003148:	f04f 0300 	mov.w	r3, #0
 800314c:	f7fd f862 	bl	8000214 <__aeabi_uldivmod>
 8003150:	4602      	mov	r2, r0
 8003152:	460b      	mov	r3, r1
 8003154:	4613      	mov	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003158:	4b0a      	ldr	r3, [pc, #40]	; (8003184 <HAL_RCC_GetSysClockFreq+0x2ac>)
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	0f1b      	lsrs	r3, r3, #28
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8003164:	697a      	ldr	r2, [r7, #20]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	fbb2 f3f3 	udiv	r3, r2, r3
 800316c:	613b      	str	r3, [r7, #16]
      break;
 800316e:	e002      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x29e>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003170:	4b05      	ldr	r3, [pc, #20]	; (8003188 <HAL_RCC_GetSysClockFreq+0x2b0>)
 8003172:	613b      	str	r3, [r7, #16]
      break;
 8003174:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003176:	693b      	ldr	r3, [r7, #16]
}
 8003178:	4618      	mov	r0, r3
 800317a:	371c      	adds	r7, #28
 800317c:	46bd      	mov	sp, r7
 800317e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003182:	bf00      	nop
 8003184:	40023800 	.word	0x40023800
 8003188:	00f42400 	.word	0x00f42400
 800318c:	017d7840 	.word	0x017d7840

08003190 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d101      	bne.n	80031a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e28d      	b.n	80036be <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 8083 	beq.w	80032b6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031b0:	4b94      	ldr	r3, [pc, #592]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f003 030c 	and.w	r3, r3, #12
 80031b8:	2b04      	cmp	r3, #4
 80031ba:	d019      	beq.n	80031f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031bc:	4b91      	ldr	r3, [pc, #580]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d106      	bne.n	80031d6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031c8:	4b8e      	ldr	r3, [pc, #568]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031d4:	d00c      	beq.n	80031f0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031d6:	4b8b      	ldr	r3, [pc, #556]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80031de:	2b0c      	cmp	r3, #12
 80031e0:	d112      	bne.n	8003208 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e2:	4b88      	ldr	r3, [pc, #544]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 80031e4:	685b      	ldr	r3, [r3, #4]
 80031e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ee:	d10b      	bne.n	8003208 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f0:	4b84      	ldr	r3, [pc, #528]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d05b      	beq.n	80032b4 <HAL_RCC_OscConfig+0x124>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d157      	bne.n	80032b4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003204:	2301      	movs	r3, #1
 8003206:	e25a      	b.n	80036be <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003210:	d106      	bne.n	8003220 <HAL_RCC_OscConfig+0x90>
 8003212:	4b7c      	ldr	r3, [pc, #496]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a7b      	ldr	r2, [pc, #492]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 8003218:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321c:	6013      	str	r3, [r2, #0]
 800321e:	e01d      	b.n	800325c <HAL_RCC_OscConfig+0xcc>
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0xb4>
 800322a:	4b76      	ldr	r3, [pc, #472]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a75      	ldr	r2, [pc, #468]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 8003230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b73      	ldr	r3, [pc, #460]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a72      	ldr	r2, [pc, #456]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 800323c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e00b      	b.n	800325c <HAL_RCC_OscConfig+0xcc>
 8003244:	4b6f      	ldr	r3, [pc, #444]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a6e      	ldr	r2, [pc, #440]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 800324a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800324e:	6013      	str	r3, [r2, #0]
 8003250:	4b6c      	ldr	r3, [pc, #432]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a6b      	ldr	r2, [pc, #428]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 8003256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800325a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d013      	beq.n	800328c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003264:	f7fe fb70 	bl	8001948 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326a:	e008      	b.n	800327e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800326c:	f7fe fb6c 	bl	8001948 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b64      	cmp	r3, #100	; 0x64
 8003278:	d901      	bls.n	800327e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e21f      	b.n	80036be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b61      	ldr	r3, [pc, #388]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d0f0      	beq.n	800326c <HAL_RCC_OscConfig+0xdc>
 800328a:	e014      	b.n	80032b6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800328c:	f7fe fb5c 	bl	8001948 <HAL_GetTick>
 8003290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003292:	e008      	b.n	80032a6 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003294:	f7fe fb58 	bl	8001948 <HAL_GetTick>
 8003298:	4602      	mov	r2, r0
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	1ad3      	subs	r3, r2, r3
 800329e:	2b64      	cmp	r3, #100	; 0x64
 80032a0:	d901      	bls.n	80032a6 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80032a2:	2303      	movs	r3, #3
 80032a4:	e20b      	b.n	80036be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a6:	4b57      	ldr	r3, [pc, #348]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d1f0      	bne.n	8003294 <HAL_RCC_OscConfig+0x104>
 80032b2:	e000      	b.n	80032b6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0302 	and.w	r3, r3, #2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d06f      	beq.n	80033a2 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032c2:	4b50      	ldr	r3, [pc, #320]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d017      	beq.n	80032fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032ce:	4b4d      	ldr	r3, [pc, #308]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80032d6:	2b08      	cmp	r3, #8
 80032d8:	d105      	bne.n	80032e6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032da:	4b4a      	ldr	r3, [pc, #296]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00b      	beq.n	80032fe <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e6:	4b47      	ldr	r3, [pc, #284]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80032ee:	2b0c      	cmp	r3, #12
 80032f0:	d11c      	bne.n	800332c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032f2:	4b44      	ldr	r3, [pc, #272]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d116      	bne.n	800332c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032fe:	4b41      	ldr	r3, [pc, #260]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d005      	beq.n	8003316 <HAL_RCC_OscConfig+0x186>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d001      	beq.n	8003316 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e1d3      	b.n	80036be <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003316:	4b3b      	ldr	r3, [pc, #236]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	00db      	lsls	r3, r3, #3
 8003324:	4937      	ldr	r1, [pc, #220]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 8003326:	4313      	orrs	r3, r2
 8003328:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800332a:	e03a      	b.n	80033a2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d020      	beq.n	8003376 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003334:	4b34      	ldr	r3, [pc, #208]	; (8003408 <HAL_RCC_OscConfig+0x278>)
 8003336:	2201      	movs	r2, #1
 8003338:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333a:	f7fe fb05 	bl	8001948 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003340:	e008      	b.n	8003354 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003342:	f7fe fb01 	bl	8001948 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	2b02      	cmp	r3, #2
 800334e:	d901      	bls.n	8003354 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003350:	2303      	movs	r3, #3
 8003352:	e1b4      	b.n	80036be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003354:	4b2b      	ldr	r3, [pc, #172]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b00      	cmp	r3, #0
 800335e:	d0f0      	beq.n	8003342 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003360:	4b28      	ldr	r3, [pc, #160]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	691b      	ldr	r3, [r3, #16]
 800336c:	00db      	lsls	r3, r3, #3
 800336e:	4925      	ldr	r1, [pc, #148]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 8003370:	4313      	orrs	r3, r2
 8003372:	600b      	str	r3, [r1, #0]
 8003374:	e015      	b.n	80033a2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003376:	4b24      	ldr	r3, [pc, #144]	; (8003408 <HAL_RCC_OscConfig+0x278>)
 8003378:	2200      	movs	r2, #0
 800337a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800337c:	f7fe fae4 	bl	8001948 <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003384:	f7fe fae0 	bl	8001948 <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b02      	cmp	r3, #2
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e193      	b.n	80036be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003396:	4b1b      	ldr	r3, [pc, #108]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0302 	and.w	r3, r3, #2
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d036      	beq.n	800341c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d016      	beq.n	80033e4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033b6:	4b15      	ldr	r3, [pc, #84]	; (800340c <HAL_RCC_OscConfig+0x27c>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033bc:	f7fe fac4 	bl	8001948 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033c4:	f7fe fac0 	bl	8001948 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e173      	b.n	80036be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033d6:	4b0b      	ldr	r3, [pc, #44]	; (8003404 <HAL_RCC_OscConfig+0x274>)
 80033d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x234>
 80033e2:	e01b      	b.n	800341c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033e4:	4b09      	ldr	r3, [pc, #36]	; (800340c <HAL_RCC_OscConfig+0x27c>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ea:	f7fe faad 	bl	8001948 <HAL_GetTick>
 80033ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033f0:	e00e      	b.n	8003410 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033f2:	f7fe faa9 	bl	8001948 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d907      	bls.n	8003410 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e15c      	b.n	80036be <HAL_RCC_OscConfig+0x52e>
 8003404:	40023800 	.word	0x40023800
 8003408:	42470000 	.word	0x42470000
 800340c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003410:	4b8a      	ldr	r3, [pc, #552]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 8003412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	2b00      	cmp	r3, #0
 800341a:	d1ea      	bne.n	80033f2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0304 	and.w	r3, r3, #4
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8097 	beq.w	8003558 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800342a:	2300      	movs	r3, #0
 800342c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800342e:	4b83      	ldr	r3, [pc, #524]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10f      	bne.n	800345a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800343a:	2300      	movs	r3, #0
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	4b7f      	ldr	r3, [pc, #508]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	4a7e      	ldr	r2, [pc, #504]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 8003444:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003448:	6413      	str	r3, [r2, #64]	; 0x40
 800344a:	4b7c      	ldr	r3, [pc, #496]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003452:	60bb      	str	r3, [r7, #8]
 8003454:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003456:	2301      	movs	r3, #1
 8003458:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800345a:	4b79      	ldr	r3, [pc, #484]	; (8003640 <HAL_RCC_OscConfig+0x4b0>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003462:	2b00      	cmp	r3, #0
 8003464:	d118      	bne.n	8003498 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003466:	4b76      	ldr	r3, [pc, #472]	; (8003640 <HAL_RCC_OscConfig+0x4b0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a75      	ldr	r2, [pc, #468]	; (8003640 <HAL_RCC_OscConfig+0x4b0>)
 800346c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003470:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003472:	f7fe fa69 	bl	8001948 <HAL_GetTick>
 8003476:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003478:	e008      	b.n	800348c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800347a:	f7fe fa65 	bl	8001948 <HAL_GetTick>
 800347e:	4602      	mov	r2, r0
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d901      	bls.n	800348c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e118      	b.n	80036be <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800348c:	4b6c      	ldr	r3, [pc, #432]	; (8003640 <HAL_RCC_OscConfig+0x4b0>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d0f0      	beq.n	800347a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d106      	bne.n	80034ae <HAL_RCC_OscConfig+0x31e>
 80034a0:	4b66      	ldr	r3, [pc, #408]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 80034a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a4:	4a65      	ldr	r2, [pc, #404]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 80034a6:	f043 0301 	orr.w	r3, r3, #1
 80034aa:	6713      	str	r3, [r2, #112]	; 0x70
 80034ac:	e01c      	b.n	80034e8 <HAL_RCC_OscConfig+0x358>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	689b      	ldr	r3, [r3, #8]
 80034b2:	2b05      	cmp	r3, #5
 80034b4:	d10c      	bne.n	80034d0 <HAL_RCC_OscConfig+0x340>
 80034b6:	4b61      	ldr	r3, [pc, #388]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 80034b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ba:	4a60      	ldr	r2, [pc, #384]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 80034bc:	f043 0304 	orr.w	r3, r3, #4
 80034c0:	6713      	str	r3, [r2, #112]	; 0x70
 80034c2:	4b5e      	ldr	r3, [pc, #376]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 80034c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c6:	4a5d      	ldr	r2, [pc, #372]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 80034c8:	f043 0301 	orr.w	r3, r3, #1
 80034cc:	6713      	str	r3, [r2, #112]	; 0x70
 80034ce:	e00b      	b.n	80034e8 <HAL_RCC_OscConfig+0x358>
 80034d0:	4b5a      	ldr	r3, [pc, #360]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	4a59      	ldr	r2, [pc, #356]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 80034d6:	f023 0301 	bic.w	r3, r3, #1
 80034da:	6713      	str	r3, [r2, #112]	; 0x70
 80034dc:	4b57      	ldr	r3, [pc, #348]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	4a56      	ldr	r2, [pc, #344]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 80034e2:	f023 0304 	bic.w	r3, r3, #4
 80034e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d015      	beq.n	800351c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f0:	f7fe fa2a 	bl	8001948 <HAL_GetTick>
 80034f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034f6:	e00a      	b.n	800350e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f8:	f7fe fa26 	bl	8001948 <HAL_GetTick>
 80034fc:	4602      	mov	r2, r0
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	1ad3      	subs	r3, r2, r3
 8003502:	f241 3288 	movw	r2, #5000	; 0x1388
 8003506:	4293      	cmp	r3, r2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e0d7      	b.n	80036be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800350e:	4b4b      	ldr	r3, [pc, #300]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 8003510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d0ee      	beq.n	80034f8 <HAL_RCC_OscConfig+0x368>
 800351a:	e014      	b.n	8003546 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800351c:	f7fe fa14 	bl	8001948 <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003522:	e00a      	b.n	800353a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003524:	f7fe fa10 	bl	8001948 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003532:	4293      	cmp	r3, r2
 8003534:	d901      	bls.n	800353a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e0c1      	b.n	80036be <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800353a:	4b40      	ldr	r3, [pc, #256]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 800353c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1ee      	bne.n	8003524 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003546:	7dfb      	ldrb	r3, [r7, #23]
 8003548:	2b01      	cmp	r3, #1
 800354a:	d105      	bne.n	8003558 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800354c:	4b3b      	ldr	r3, [pc, #236]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 800354e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003550:	4a3a      	ldr	r2, [pc, #232]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 8003552:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003556:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80ad 	beq.w	80036bc <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003562:	4b36      	ldr	r3, [pc, #216]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 8003564:	689b      	ldr	r3, [r3, #8]
 8003566:	f003 030c 	and.w	r3, r3, #12
 800356a:	2b08      	cmp	r3, #8
 800356c:	d060      	beq.n	8003630 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	2b02      	cmp	r3, #2
 8003574:	d145      	bne.n	8003602 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003576:	4b33      	ldr	r3, [pc, #204]	; (8003644 <HAL_RCC_OscConfig+0x4b4>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800357c:	f7fe f9e4 	bl	8001948 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003584:	f7fe f9e0 	bl	8001948 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e093      	b.n	80036be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003596:	4b29      	ldr	r3, [pc, #164]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69da      	ldr	r2, [r3, #28]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b0:	019b      	lsls	r3, r3, #6
 80035b2:	431a      	orrs	r2, r3
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b8:	085b      	lsrs	r3, r3, #1
 80035ba:	3b01      	subs	r3, #1
 80035bc:	041b      	lsls	r3, r3, #16
 80035be:	431a      	orrs	r2, r3
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c4:	061b      	lsls	r3, r3, #24
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035cc:	071b      	lsls	r3, r3, #28
 80035ce:	491b      	ldr	r1, [pc, #108]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035d4:	4b1b      	ldr	r3, [pc, #108]	; (8003644 <HAL_RCC_OscConfig+0x4b4>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035da:	f7fe f9b5 	bl	8001948 <HAL_GetTick>
 80035de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e0:	e008      	b.n	80035f4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e2:	f7fe f9b1 	bl	8001948 <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	1ad3      	subs	r3, r2, r3
 80035ec:	2b02      	cmp	r3, #2
 80035ee:	d901      	bls.n	80035f4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80035f0:	2303      	movs	r3, #3
 80035f2:	e064      	b.n	80036be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d0f0      	beq.n	80035e2 <HAL_RCC_OscConfig+0x452>
 8003600:	e05c      	b.n	80036bc <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003602:	4b10      	ldr	r3, [pc, #64]	; (8003644 <HAL_RCC_OscConfig+0x4b4>)
 8003604:	2200      	movs	r2, #0
 8003606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003608:	f7fe f99e 	bl	8001948 <HAL_GetTick>
 800360c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360e:	e008      	b.n	8003622 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003610:	f7fe f99a 	bl	8001948 <HAL_GetTick>
 8003614:	4602      	mov	r2, r0
 8003616:	693b      	ldr	r3, [r7, #16]
 8003618:	1ad3      	subs	r3, r2, r3
 800361a:	2b02      	cmp	r3, #2
 800361c:	d901      	bls.n	8003622 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800361e:	2303      	movs	r3, #3
 8003620:	e04d      	b.n	80036be <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003622:	4b06      	ldr	r3, [pc, #24]	; (800363c <HAL_RCC_OscConfig+0x4ac>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d1f0      	bne.n	8003610 <HAL_RCC_OscConfig+0x480>
 800362e:	e045      	b.n	80036bc <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	699b      	ldr	r3, [r3, #24]
 8003634:	2b01      	cmp	r3, #1
 8003636:	d107      	bne.n	8003648 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e040      	b.n	80036be <HAL_RCC_OscConfig+0x52e>
 800363c:	40023800 	.word	0x40023800
 8003640:	40007000 	.word	0x40007000
 8003644:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003648:	4b1f      	ldr	r3, [pc, #124]	; (80036c8 <HAL_RCC_OscConfig+0x538>)
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d030      	beq.n	80036b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003660:	429a      	cmp	r2, r3
 8003662:	d129      	bne.n	80036b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800366e:	429a      	cmp	r2, r3
 8003670:	d122      	bne.n	80036b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003672:	68fa      	ldr	r2, [r7, #12]
 8003674:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003678:	4013      	ands	r3, r2
 800367a:	687a      	ldr	r2, [r7, #4]
 800367c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800367e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003680:	4293      	cmp	r3, r2
 8003682:	d119      	bne.n	80036b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368e:	085b      	lsrs	r3, r3, #1
 8003690:	3b01      	subs	r3, #1
 8003692:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d10f      	bne.n	80036b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d107      	bne.n	80036b8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d001      	beq.n	80036bc <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e000      	b.n	80036be <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3718      	adds	r7, #24
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40023800 	.word	0x40023800

080036cc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d101      	bne.n	80036de <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e022      	b.n	8003724 <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d105      	bne.n	80036f6 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80036f0:	6878      	ldr	r0, [r7, #4]
 80036f2:	f7fd fb8f 	bl	8000e14 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2203      	movs	r2, #3
 80036fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80036fe:	6878      	ldr	r0, [r7, #4]
 8003700:	f000 f814 	bl	800372c <HAL_SD_InitCard>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e00a      	b.n	8003724 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2200      	movs	r2, #0
 8003712:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003722:	2300      	movs	r3, #0
}
 8003724:	4618      	mov	r0, r3
 8003726:	3708      	adds	r7, #8
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}

0800372c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800372c:	b5b0      	push	{r4, r5, r7, lr}
 800372e:	b08e      	sub	sp, #56	; 0x38
 8003730:	af04      	add	r7, sp, #16
 8003732:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 8003734:	2300      	movs	r3, #0
 8003736:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8003738:	2300      	movs	r3, #0
 800373a:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800373c:	2300      	movs	r3, #0
 800373e:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8003740:	2300      	movs	r3, #0
 8003742:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8003748:	2376      	movs	r3, #118	; 0x76
 800374a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681d      	ldr	r5, [r3, #0]
 8003750:	466c      	mov	r4, sp
 8003752:	f107 0314 	add.w	r3, r7, #20
 8003756:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800375a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800375e:	f107 0308 	add.w	r3, r7, #8
 8003762:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003764:	4628      	mov	r0, r5
 8003766:	f003 f829 	bl	80067bc <SDIO_Init>
 800376a:	4603      	mov	r3, r0
 800376c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8003770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e04c      	b.n	8003816 <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 800377c:	4b28      	ldr	r3, [pc, #160]	; (8003820 <HAL_SD_InitCard+0xf4>)
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f003 f861 	bl	800684e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 800378c:	4b24      	ldr	r3, [pc, #144]	; (8003820 <HAL_SD_InitCard+0xf4>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f001 f856 	bl	8004844 <SD_PowerON>
 8003798:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800379a:	6a3b      	ldr	r3, [r7, #32]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d00b      	beq.n	80037b8 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2201      	movs	r2, #1
 80037a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	431a      	orrs	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e02e      	b.n	8003816 <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 ff77 	bl	80046ac <SD_InitCard>
 80037be:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d00b      	beq.n	80037de <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e01b      	b.n	8003816 <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80037e6:	4618      	mov	r0, r3
 80037e8:	f003 f8c4 	bl	8006974 <SDMMC_CmdBlockLength>
 80037ec:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00f      	beq.n	8003814 <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a0a      	ldr	r2, [pc, #40]	; (8003824 <HAL_SD_InitCard+0xf8>)
 80037fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003800:	6a3b      	ldr	r3, [r7, #32]
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8003810:	2301      	movs	r3, #1
 8003812:	e000      	b.n	8003816 <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3728      	adds	r7, #40	; 0x28
 800381a:	46bd      	mov	sp, r7
 800381c:	bdb0      	pop	{r4, r5, r7, pc}
 800381e:	bf00      	nop
 8003820:	422580a0 	.word	0x422580a0
 8003824:	004005ff 	.word	0x004005ff

08003828 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b092      	sub	sp, #72	; 0x48
 800382c:	af00      	add	r7, sp, #0
 800382e:	60f8      	str	r0, [r7, #12]
 8003830:	60b9      	str	r1, [r7, #8]
 8003832:	607a      	str	r2, [r7, #4]
 8003834:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003836:	f7fe f887 	bl	8001948 <HAL_GetTick>
 800383a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d107      	bne.n	800385a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e1bd      	b.n	8003bd6 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b01      	cmp	r3, #1
 8003864:	f040 81b0 	bne.w	8003bc8 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	2200      	movs	r2, #0
 800386c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800386e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	441a      	add	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003878:	429a      	cmp	r2, r3
 800387a:	d907      	bls.n	800388c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003880:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	e1a4      	b.n	8003bd6 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2203      	movs	r2, #3
 8003890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2200      	movs	r2, #0
 800389a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d002      	beq.n	80038aa <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80038a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038a6:	025b      	lsls	r3, r3, #9
 80038a8:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80038aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80038ae:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	025b      	lsls	r3, r3, #9
 80038b4:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80038b6:	2390      	movs	r3, #144	; 0x90
 80038b8:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80038ba:	2302      	movs	r3, #2
 80038bc:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80038be:	2300      	movs	r3, #0
 80038c0:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80038c2:	2301      	movs	r3, #1
 80038c4:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f107 0214 	add.w	r2, r7, #20
 80038ce:	4611      	mov	r1, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	f003 f823 	bl	800691c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	2b01      	cmp	r3, #1
 80038da:	d90a      	bls.n	80038f2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2202      	movs	r2, #2
 80038e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038e8:	4618      	mov	r0, r3
 80038ea:	f003 f887 	bl	80069fc <SDMMC_CmdReadMultiBlock>
 80038ee:	6478      	str	r0, [r7, #68]	; 0x44
 80038f0:	e009      	b.n	8003906 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2201      	movs	r2, #1
 80038f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038fe:	4618      	mov	r0, r3
 8003900:	f003 f85a 	bl	80069b8 <SDMMC_CmdReadSingleBlock>
 8003904:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003908:	2b00      	cmp	r3, #0
 800390a:	d012      	beq.n	8003932 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a7a      	ldr	r2, [pc, #488]	; (8003afc <HAL_SD_ReadBlocks+0x2d4>)
 8003912:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800391a:	431a      	orrs	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e151      	b.n	8003bd6 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8003932:	69bb      	ldr	r3, [r7, #24]
 8003934:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003936:	e061      	b.n	80039fc <HAL_SD_ReadBlocks+0x1d4>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800393e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d03c      	beq.n	80039c0 <HAL_SD_ReadBlocks+0x198>
 8003946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d039      	beq.n	80039c0 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800394c:	2300      	movs	r3, #0
 800394e:	643b      	str	r3, [r7, #64]	; 0x40
 8003950:	e033      	b.n	80039ba <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4618      	mov	r0, r3
 8003958:	f002 ff5b 	bl	8006812 <SDIO_ReadFIFO>
 800395c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800395e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003960:	b2da      	uxtb	r2, r3
 8003962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003964:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003966:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003968:	3301      	adds	r3, #1
 800396a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800396c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800396e:	3b01      	subs	r3, #1
 8003970:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003974:	0a1b      	lsrs	r3, r3, #8
 8003976:	b2da      	uxtb	r2, r3
 8003978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397e:	3301      	adds	r3, #1
 8003980:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003982:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003984:	3b01      	subs	r3, #1
 8003986:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800398a:	0c1b      	lsrs	r3, r3, #16
 800398c:	b2da      	uxtb	r2, r3
 800398e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003990:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8003992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003994:	3301      	adds	r3, #1
 8003996:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003998:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800399a:	3b01      	subs	r3, #1
 800399c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800399e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039a0:	0e1b      	lsrs	r3, r3, #24
 80039a2:	b2da      	uxtb	r2, r3
 80039a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a6:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80039a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039aa:	3301      	adds	r3, #1
 80039ac:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80039ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039b0:	3b01      	subs	r3, #1
 80039b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80039b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b6:	3301      	adds	r3, #1
 80039b8:	643b      	str	r3, [r7, #64]	; 0x40
 80039ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039bc:	2b07      	cmp	r3, #7
 80039be:	d9c8      	bls.n	8003952 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80039c0:	f7fd ffc2 	bl	8001948 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80039cc:	429a      	cmp	r2, r3
 80039ce:	d902      	bls.n	80039d6 <HAL_SD_ReadBlocks+0x1ae>
 80039d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d112      	bne.n	80039fc <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a48      	ldr	r2, [pc, #288]	; (8003afc <HAL_SD_ReadBlocks+0x2d4>)
 80039dc:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2200      	movs	r2, #0
 80039f6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e0ec      	b.n	8003bd6 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a02:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d096      	beq.n	8003938 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d022      	beq.n	8003a5e <HAL_SD_ReadBlocks+0x236>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2b01      	cmp	r3, #1
 8003a1c:	d91f      	bls.n	8003a5e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a22:	2b03      	cmp	r3, #3
 8003a24:	d01b      	beq.n	8003a5e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f003 f84c 	bl	8006ac8 <SDMMC_CmdStopTransfer>
 8003a30:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003a32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d012      	beq.n	8003a5e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a2f      	ldr	r2, [pc, #188]	; (8003afc <HAL_SD_ReadBlocks+0x2d4>)
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a46:	431a      	orrs	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e0bb      	b.n	8003bd6 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d012      	beq.n	8003a92 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a22      	ldr	r2, [pc, #136]	; (8003afc <HAL_SD_ReadBlocks+0x2d4>)
 8003a72:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a78:	f043 0208 	orr.w	r2, r3, #8
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e0a1      	b.n	8003bd6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d012      	beq.n	8003ac6 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a15      	ldr	r2, [pc, #84]	; (8003afc <HAL_SD_ReadBlocks+0x2d4>)
 8003aa6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aac:	f043 0202 	orr.w	r2, r3, #2
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e087      	b.n	8003bd6 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003acc:	f003 0320 	and.w	r3, r3, #32
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d064      	beq.n	8003b9e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a08      	ldr	r2, [pc, #32]	; (8003afc <HAL_SD_ReadBlocks+0x2d4>)
 8003ada:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae0:	f043 0220 	orr.w	r2, r3, #32
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2201      	movs	r2, #1
 8003aec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e06d      	b.n	8003bd6 <HAL_SD_ReadBlocks+0x3ae>
 8003afa:	bf00      	nop
 8003afc:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f002 fe84 	bl	8006812 <SDIO_ReadFIFO>
 8003b0a:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8003b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b0e:	b2da      	uxtb	r2, r3
 8003b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b12:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003b14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b16:	3301      	adds	r3, #1
 8003b18:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b1c:	3b01      	subs	r3, #1
 8003b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8003b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b22:	0a1b      	lsrs	r3, r3, #8
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b28:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b32:	3b01      	subs	r3, #1
 8003b34:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8003b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b38:	0c1b      	lsrs	r3, r3, #16
 8003b3a:	b2da      	uxtb	r2, r3
 8003b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3e:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b42:	3301      	adds	r3, #1
 8003b44:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003b46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b48:	3b01      	subs	r3, #1
 8003b4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	0e1b      	lsrs	r3, r3, #24
 8003b50:	b2da      	uxtb	r2, r3
 8003b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b54:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8003b56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b58:	3301      	adds	r3, #1
 8003b5a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8003b5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003b62:	f7fd fef1 	bl	8001948 <HAL_GetTick>
 8003b66:	4602      	mov	r2, r0
 8003b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b6e:	429a      	cmp	r2, r3
 8003b70:	d902      	bls.n	8003b78 <HAL_SD_ReadBlocks+0x350>
 8003b72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d112      	bne.n	8003b9e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a18      	ldr	r2, [pc, #96]	; (8003be0 <HAL_SD_ReadBlocks+0x3b8>)
 8003b7e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b84:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e01b      	b.n	8003bd6 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d002      	beq.n	8003bb2 <HAL_SD_ReadBlocks+0x38a>
 8003bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1a6      	bne.n	8003b00 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f240 523a 	movw	r2, #1338	; 0x53a
 8003bba:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	e006      	b.n	8003bd6 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bcc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
  }
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3748      	adds	r7, #72	; 0x48
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	004005ff 	.word	0x004005ff

08003be4 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b092      	sub	sp, #72	; 0x48
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003bf2:	f7fd fea9 	bl	8001948 <HAL_GetTick>
 8003bf6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d107      	bne.n	8003c16 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e165      	b.n	8003ee2 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	f040 8158 	bne.w	8003ed4 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8003c2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	441a      	add	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d907      	bls.n	8003c48 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c3c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e14c      	b.n	8003ee2 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	2203      	movs	r2, #3
 8003c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2200      	movs	r2, #0
 8003c56:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d002      	beq.n	8003c66 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8003c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c62:	025b      	lsls	r3, r3, #9
 8003c64:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003c66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003c6a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	025b      	lsls	r3, r3, #9
 8003c70:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8003c72:	2390      	movs	r3, #144	; 0x90
 8003c74:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8003c76:	2300      	movs	r3, #0
 8003c78:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f107 0218 	add.w	r2, r7, #24
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f002 fe45 	bl	800691c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d90a      	bls.n	8003cae <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f002 feed 	bl	8006a84 <SDMMC_CmdWriteMultiBlock>
 8003caa:	6478      	str	r0, [r7, #68]	; 0x44
 8003cac:	e009      	b.n	8003cc2 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2210      	movs	r2, #16
 8003cb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f002 fec0 	bl	8006a40 <SDMMC_CmdWriteSingleBlock>
 8003cc0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8003cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d012      	beq.n	8003cee <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a87      	ldr	r2, [pc, #540]	; (8003eec <HAL_SD_WriteBlocks+0x308>)
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cd6:	431a      	orrs	r2, r3
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e0f9      	b.n	8003ee2 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003cf2:	e065      	b.n	8003dc0 <HAL_SD_WriteBlocks+0x1dc>
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d040      	beq.n	8003d84 <HAL_SD_WriteBlocks+0x1a0>
 8003d02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d03d      	beq.n	8003d84 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8003d08:	2300      	movs	r3, #0
 8003d0a:	643b      	str	r3, [r7, #64]	; 0x40
 8003d0c:	e037      	b.n	8003d7e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8003d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d10:	781b      	ldrb	r3, [r3, #0]
 8003d12:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d16:	3301      	adds	r3, #1
 8003d18:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d1c:	3b01      	subs	r3, #1
 8003d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8003d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	021a      	lsls	r2, r3, #8
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2e:	3301      	adds	r3, #1
 8003d30:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d34:	3b01      	subs	r3, #1
 8003d36:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8003d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	041a      	lsls	r2, r3, #16
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d46:	3301      	adds	r3, #1
 8003d48:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8003d50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d52:	781b      	ldrb	r3, [r3, #0]
 8003d54:	061a      	lsls	r2, r3, #24
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8003d5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5e:	3301      	adds	r3, #1
 8003d60:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8003d62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d64:	3b01      	subs	r3, #1
 8003d66:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f107 0214 	add.w	r2, r7, #20
 8003d70:	4611      	mov	r1, r2
 8003d72:	4618      	mov	r0, r3
 8003d74:	f002 fd5a 	bl	800682c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8003d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d80:	2b07      	cmp	r3, #7
 8003d82:	d9c4      	bls.n	8003d0e <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8003d84:	f7fd fde0 	bl	8001948 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d902      	bls.n	8003d9a <HAL_SD_WriteBlocks+0x1b6>
 8003d94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d112      	bne.n	8003dc0 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a53      	ldr	r2, [pc, #332]	; (8003eec <HAL_SD_WriteBlocks+0x308>)
 8003da0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da8:	431a      	orrs	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2201      	movs	r2, #1
 8003db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2200      	movs	r2, #0
 8003dba:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e090      	b.n	8003ee2 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc6:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d092      	beq.n	8003cf4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d022      	beq.n	8003e22 <HAL_SD_WriteBlocks+0x23e>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	d91f      	bls.n	8003e22 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003de6:	2b03      	cmp	r3, #3
 8003de8:	d01b      	beq.n	8003e22 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f002 fe6a 	bl	8006ac8 <SDMMC_CmdStopTransfer>
 8003df4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8003df6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d012      	beq.n	8003e22 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a3a      	ldr	r2, [pc, #232]	; (8003eec <HAL_SD_WriteBlocks+0x308>)
 8003e02:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e0a:	431a      	orrs	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	2201      	movs	r2, #1
 8003e14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e05f      	b.n	8003ee2 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d012      	beq.n	8003e56 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a2d      	ldr	r2, [pc, #180]	; (8003eec <HAL_SD_WriteBlocks+0x308>)
 8003e36:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3c:	f043 0208 	orr.w	r2, r3, #8
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	e045      	b.n	8003ee2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e5c:	f003 0302 	and.w	r3, r3, #2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d012      	beq.n	8003e8a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a20      	ldr	r2, [pc, #128]	; (8003eec <HAL_SD_WriteBlocks+0x308>)
 8003e6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e70:	f043 0202 	orr.w	r2, r3, #2
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e02b      	b.n	8003ee2 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e90:	f003 0310 	and.w	r3, r3, #16
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d012      	beq.n	8003ebe <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a13      	ldr	r2, [pc, #76]	; (8003eec <HAL_SD_WriteBlocks+0x308>)
 8003e9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ea4:	f043 0210 	orr.w	r2, r3, #16
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e011      	b.n	8003ee2 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f240 523a 	movw	r2, #1338	; 0x53a
 8003ec6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	e006      	b.n	8003ee2 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
  }
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3748      	adds	r7, #72	; 0x48
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	004005ff 	.word	0x004005ff

08003ef0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b084      	sub	sp, #16
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d008      	beq.n	8003f1e <HAL_SD_IRQHandler+0x2e>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f003 0308 	and.w	r3, r3, #8
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fd4a 	bl	80049b0 <SD_Read_IT>
 8003f1c:	e155      	b.n	80041ca <HAL_SD_IRQHandler+0x2da>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 808f 	beq.w	800404c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f36:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF | SDIO_IT_STBITERR);
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	6812      	ldr	r2, [r2, #0]
 8003f42:	f423 4341 	bic.w	r3, r3, #49408	; 0xc100
 8003f46:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 8003f4a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0201 	bic.w	r2, r2, #1
 8003f5a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f003 0308 	and.w	r3, r3, #8
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d039      	beq.n	8003fda <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d104      	bne.n	8003f7a <HAL_SD_IRQHandler+0x8a>
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 0320 	and.w	r3, r3, #32
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d011      	beq.n	8003f9e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f002 fda2 	bl	8006ac8 <SDMMC_CmdStopTransfer>
 8003f84:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d008      	beq.n	8003f9e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	431a      	orrs	r2, r3
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8003f98:	6878      	ldr	r0, [r7, #4]
 8003f9a:	f000 f91f 	bl	80041dc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f240 523a 	movw	r2, #1338	; 0x53a
 8003fa6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d104      	bne.n	8003fca <HAL_SD_IRQHandler+0xda>
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f003 0302 	and.w	r3, r3, #2
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d003      	beq.n	8003fd2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f003 f9c0 	bl	8007350 <HAL_SD_RxCpltCallback>
 8003fd0:	e0fb      	b.n	80041ca <HAL_SD_IRQHandler+0x2da>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f003 f9b2 	bl	800733c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003fd8:	e0f7      	b.n	80041ca <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80f2 	beq.w	80041ca <HAL_SD_IRQHandler+0x2da>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f003 0320 	and.w	r3, r3, #32
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d011      	beq.n	8004014 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f002 fd67 	bl	8006ac8 <SDMMC_CmdStopTransfer>
 8003ffa:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d008      	beq.n	8004014 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004006:	68bb      	ldr	r3, [r7, #8]
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f8e4 	bl	80041dc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	f040 80d5 	bne.w	80041ca <HAL_SD_IRQHandler+0x2da>
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	f040 80cf 	bne.w	80041ca <HAL_SD_IRQHandler+0x2da>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f022 0208 	bic.w	r2, r2, #8
 800403a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2201      	movs	r2, #1
 8004040:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f003 f979 	bl	800733c <HAL_SD_TxCpltCallback>
}
 800404a:	e0be      	b.n	80041ca <HAL_SD_IRQHandler+0x2da>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004052:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d008      	beq.n	800406c <HAL_SD_IRQHandler+0x17c>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f003 0308 	and.w	r3, r3, #8
 8004060:	2b00      	cmp	r3, #0
 8004062:	d003      	beq.n	800406c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 fcf4 	bl	8004a52 <SD_Write_IT>
 800406a:	e0ae      	b.n	80041ca <HAL_SD_IRQHandler+0x2da>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004072:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 80a7 	beq.w	80041ca <HAL_SD_IRQHandler+0x2da>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d005      	beq.n	8004096 <HAL_SD_IRQHandler+0x1a6>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408e:	f043 0202 	orr.w	r2, r3, #2
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800409c:	f003 0308 	and.w	r3, r3, #8
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d005      	beq.n	80040b0 <HAL_SD_IRQHandler+0x1c0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	f043 0208 	orr.w	r2, r3, #8
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_SD_IRQHandler+0x1da>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c2:	f043 0220 	orr.w	r2, r3, #32
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040d0:	f003 0310 	and.w	r3, r3, #16
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d005      	beq.n	80040e4 <HAL_SD_IRQHandler+0x1f4>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040dc:	f043 0210 	orr.w	r2, r3, #16
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f240 523a 	movw	r2, #1338	; 0x53a
 80040ec:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80040fc:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4618      	mov	r0, r3
 8004104:	f002 fce0 	bl	8006ac8 <SDMMC_CmdStopTransfer>
 8004108:	4602      	mov	r2, r0
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00a      	beq.n	8004134 <HAL_SD_IRQHandler+0x244>
      hsd->State = HAL_SD_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f855 	bl	80041dc <HAL_SD_ErrorCallback>
}
 8004132:	e04a      	b.n	80041ca <HAL_SD_IRQHandler+0x2da>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800413a:	2b00      	cmp	r3, #0
 800413c:	d045      	beq.n	80041ca <HAL_SD_IRQHandler+0x2da>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	f003 0310 	and.w	r3, r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	d104      	bne.n	8004152 <HAL_SD_IRQHandler+0x262>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f003 0320 	and.w	r3, r3, #32
 800414e:	2b00      	cmp	r3, #0
 8004150:	d011      	beq.n	8004176 <HAL_SD_IRQHandler+0x286>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004156:	4a1f      	ldr	r2, [pc, #124]	; (80041d4 <HAL_SD_IRQHandler+0x2e4>)
 8004158:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415e:	4618      	mov	r0, r3
 8004160:	f7fd fe52 	bl	8001e08 <HAL_DMA_Abort_IT>
 8004164:	4603      	mov	r3, r0
 8004166:	2b00      	cmp	r3, #0
 8004168:	d02f      	beq.n	80041ca <HAL_SD_IRQHandler+0x2da>
          SD_DMATxAbort(hsd->hdmatx);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800416e:	4618      	mov	r0, r3
 8004170:	f000 fa2e 	bl	80045d0 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8004174:	e029      	b.n	80041ca <HAL_SD_IRQHandler+0x2da>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f003 0301 	and.w	r3, r3, #1
 800417c:	2b00      	cmp	r3, #0
 800417e:	d104      	bne.n	800418a <HAL_SD_IRQHandler+0x29a>
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f003 0302 	and.w	r3, r3, #2
 8004186:	2b00      	cmp	r3, #0
 8004188:	d011      	beq.n	80041ae <HAL_SD_IRQHandler+0x2be>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800418e:	4a12      	ldr	r2, [pc, #72]	; (80041d8 <HAL_SD_IRQHandler+0x2e8>)
 8004190:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	4618      	mov	r0, r3
 8004198:	f7fd fe36 	bl	8001e08 <HAL_DMA_Abort_IT>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d013      	beq.n	80041ca <HAL_SD_IRQHandler+0x2da>
          SD_DMARxAbort(hsd->hdmarx);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fa49 	bl	800463e <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80041ac:	e00d      	b.n	80041ca <HAL_SD_IRQHandler+0x2da>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80041c2:	6878      	ldr	r0, [r7, #4]
 80041c4:	f003 f8b0 	bl	8007328 <HAL_SD_AbortCallback>
}
 80041c8:	e7ff      	b.n	80041ca <HAL_SD_IRQHandler+0x2da>
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}
 80041d2:	bf00      	nop
 80041d4:	080045d1 	.word	0x080045d1
 80041d8:	0800463f 	.word	0x0800463f

080041dc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80041e4:	bf00      	nop
 80041e6:	370c      	adds	r7, #12
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80041fe:	0f9b      	lsrs	r3, r3, #30
 8004200:	b2da      	uxtb	r2, r3
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800420a:	0e9b      	lsrs	r3, r3, #26
 800420c:	b2db      	uxtb	r3, r3
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	b2da      	uxtb	r2, r3
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800421c:	0e1b      	lsrs	r3, r3, #24
 800421e:	b2db      	uxtb	r3, r3
 8004220:	f003 0303 	and.w	r3, r3, #3
 8004224:	b2da      	uxtb	r2, r3
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800422e:	0c1b      	lsrs	r3, r3, #16
 8004230:	b2da      	uxtb	r2, r3
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800423a:	0a1b      	lsrs	r3, r3, #8
 800423c:	b2da      	uxtb	r2, r3
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004246:	b2da      	uxtb	r2, r3
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004250:	0d1b      	lsrs	r3, r3, #20
 8004252:	b29a      	uxth	r2, r3
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800425c:	0c1b      	lsrs	r3, r3, #16
 800425e:	b2db      	uxtb	r3, r3
 8004260:	f003 030f 	and.w	r3, r3, #15
 8004264:	b2da      	uxtb	r2, r3
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800426e:	0bdb      	lsrs	r3, r3, #15
 8004270:	b2db      	uxtb	r3, r3
 8004272:	f003 0301 	and.w	r3, r3, #1
 8004276:	b2da      	uxtb	r2, r3
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004280:	0b9b      	lsrs	r3, r3, #14
 8004282:	b2db      	uxtb	r3, r3
 8004284:	f003 0301 	and.w	r3, r3, #1
 8004288:	b2da      	uxtb	r2, r3
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004292:	0b5b      	lsrs	r3, r3, #13
 8004294:	b2db      	uxtb	r3, r3
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	b2da      	uxtb	r2, r3
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042a4:	0b1b      	lsrs	r3, r3, #12
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	f003 0301 	and.w	r3, r3, #1
 80042ac:	b2da      	uxtb	r2, r3
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2200      	movs	r2, #0
 80042b6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d163      	bne.n	8004388 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042c4:	009a      	lsls	r2, r3, #2
 80042c6:	f640 73fc 	movw	r3, #4092	; 0xffc
 80042ca:	4013      	ands	r3, r2
 80042cc:	687a      	ldr	r2, [r7, #4]
 80042ce:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80042d0:	0f92      	lsrs	r2, r2, #30
 80042d2:	431a      	orrs	r2, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042dc:	0edb      	lsrs	r3, r3, #27
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	f003 0307 	and.w	r3, r3, #7
 80042e4:	b2da      	uxtb	r2, r3
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ee:	0e1b      	lsrs	r3, r3, #24
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f003 0307 	and.w	r3, r3, #7
 80042f6:	b2da      	uxtb	r2, r3
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004300:	0d5b      	lsrs	r3, r3, #21
 8004302:	b2db      	uxtb	r3, r3
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	b2da      	uxtb	r2, r3
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004312:	0c9b      	lsrs	r3, r3, #18
 8004314:	b2db      	uxtb	r3, r3
 8004316:	f003 0307 	and.w	r3, r3, #7
 800431a:	b2da      	uxtb	r2, r3
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004324:	0bdb      	lsrs	r3, r3, #15
 8004326:	b2db      	uxtb	r3, r3
 8004328:	f003 0307 	and.w	r3, r3, #7
 800432c:	b2da      	uxtb	r2, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	691b      	ldr	r3, [r3, #16]
 8004336:	1c5a      	adds	r2, r3, #1
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	7e1b      	ldrb	r3, [r3, #24]
 8004340:	b2db      	uxtb	r3, r3
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	3302      	adds	r3, #2
 8004348:	2201      	movs	r2, #1
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8004352:	fb02 f203 	mul.w	r2, r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	7a1b      	ldrb	r3, [r3, #8]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	2201      	movs	r2, #1
 8004366:	409a      	lsls	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004374:	0a52      	lsrs	r2, r2, #9
 8004376:	fb02 f203 	mul.w	r2, r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004384:	661a      	str	r2, [r3, #96]	; 0x60
 8004386:	e031      	b.n	80043ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438c:	2b01      	cmp	r3, #1
 800438e:	d11d      	bne.n	80043cc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004394:	041b      	lsls	r3, r3, #16
 8004396:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800439e:	0c1b      	lsrs	r3, r3, #16
 80043a0:	431a      	orrs	r2, r3
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	3301      	adds	r3, #1
 80043ac:	029a      	lsls	r2, r3, #10
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043c0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	661a      	str	r2, [r3, #96]	; 0x60
 80043ca:	e00f      	b.n	80043ec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a58      	ldr	r2, [pc, #352]	; (8004534 <HAL_SD_GetCardCSD+0x344>)
 80043d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e09d      	b.n	8004528 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043f0:	0b9b      	lsrs	r3, r3, #14
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f003 0301 	and.w	r3, r3, #1
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004402:	09db      	lsrs	r3, r3, #7
 8004404:	b2db      	uxtb	r3, r3
 8004406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800440a:	b2da      	uxtb	r2, r3
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004414:	b2db      	uxtb	r3, r3
 8004416:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800441a:	b2da      	uxtb	r2, r3
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004424:	0fdb      	lsrs	r3, r3, #31
 8004426:	b2da      	uxtb	r2, r3
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	0f5b      	lsrs	r3, r3, #29
 8004432:	b2db      	uxtb	r3, r3
 8004434:	f003 0303 	and.w	r3, r3, #3
 8004438:	b2da      	uxtb	r2, r3
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004442:	0e9b      	lsrs	r3, r3, #26
 8004444:	b2db      	uxtb	r3, r3
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	b2da      	uxtb	r2, r3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004454:	0d9b      	lsrs	r3, r3, #22
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f003 030f 	and.w	r3, r3, #15
 800445c:	b2da      	uxtb	r2, r3
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004466:	0d5b      	lsrs	r3, r3, #21
 8004468:	b2db      	uxtb	r3, r3
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	b2da      	uxtb	r2, r3
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004482:	0c1b      	lsrs	r3, r3, #16
 8004484:	b2db      	uxtb	r3, r3
 8004486:	f003 0301 	and.w	r3, r3, #1
 800448a:	b2da      	uxtb	r2, r3
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004496:	0bdb      	lsrs	r3, r3, #15
 8004498:	b2db      	uxtb	r3, r3
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	b2da      	uxtb	r2, r3
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044aa:	0b9b      	lsrs	r3, r3, #14
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	f003 0301 	and.w	r3, r3, #1
 80044b2:	b2da      	uxtb	r2, r3
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044be:	0b5b      	lsrs	r3, r3, #13
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	f003 0301 	and.w	r3, r3, #1
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d2:	0b1b      	lsrs	r3, r3, #12
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	f003 0301 	and.w	r3, r3, #1
 80044da:	b2da      	uxtb	r2, r3
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	0a9b      	lsrs	r3, r3, #10
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	f003 0303 	and.w	r3, r3, #3
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	f003 0303 	and.w	r3, r3, #3
 8004502:	b2da      	uxtb	r2, r3
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800450e:	085b      	lsrs	r3, r3, #1
 8004510:	b2db      	uxtb	r3, r3
 8004512:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004516:	b2da      	uxtb	r2, r3
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2201      	movs	r2, #1
 8004522:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	370c      	adds	r7, #12
 800452c:	46bd      	mov	sp, r7
 800452e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004532:	4770      	bx	lr
 8004534:	004005ff 	.word	0x004005ff

08004538 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b086      	sub	sp, #24
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8004598:	2300      	movs	r3, #0
 800459a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800459c:	f107 030c 	add.w	r3, r7, #12
 80045a0:	4619      	mov	r1, r3
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f9dc 	bl	8004960 <SD_SendStatus>
 80045a8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d005      	beq.n	80045bc <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b4:	697b      	ldr	r3, [r7, #20]
 80045b6:	431a      	orrs	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	0a5b      	lsrs	r3, r3, #9
 80045c0:	f003 030f 	and.w	r3, r3, #15
 80045c4:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80045c6:	693b      	ldr	r3, [r7, #16]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f240 523a 	movw	r2, #1338	; 0x53a
 80045e6:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7ff ffd1 	bl	8004590 <HAL_SD_GetCardState>
 80045ee:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2200      	movs	r2, #0
 80045fc:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b06      	cmp	r3, #6
 8004602:	d002      	beq.n	800460a <SD_DMATxAbort+0x3a>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	2b05      	cmp	r3, #5
 8004608:	d10a      	bne.n	8004620 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f002 fa5a 	bl	8006ac8 <SDMMC_CmdStopTransfer>
 8004614:	4602      	mov	r2, r0
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	431a      	orrs	r2, r3
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004624:	2b00      	cmp	r3, #0
 8004626:	d103      	bne.n	8004630 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004628:	68f8      	ldr	r0, [r7, #12]
 800462a:	f002 fe7d 	bl	8007328 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800462e:	e002      	b.n	8004636 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8004630:	68f8      	ldr	r0, [r7, #12]
 8004632:	f7ff fdd3 	bl	80041dc <HAL_SD_ErrorCallback>
}
 8004636:	bf00      	nop
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}

0800463e <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b084      	sub	sp, #16
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800464a:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f240 523a 	movw	r2, #1338	; 0x53a
 8004654:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f7ff ff9a 	bl	8004590 <HAL_SD_GetCardState>
 800465c:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b06      	cmp	r3, #6
 8004670:	d002      	beq.n	8004678 <SD_DMARxAbort+0x3a>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	2b05      	cmp	r3, #5
 8004676:	d10a      	bne.n	800468e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4618      	mov	r0, r3
 800467e:	f002 fa23 	bl	8006ac8 <SDMMC_CmdStopTransfer>
 8004682:	4602      	mov	r2, r0
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004688:	431a      	orrs	r2, r3
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004692:	2b00      	cmp	r3, #0
 8004694:	d103      	bne.n	800469e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f002 fe46 	bl	8007328 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800469c:	e002      	b.n	80046a4 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f7ff fd9c 	bl	80041dc <HAL_SD_ErrorCallback>
}
 80046a4:	bf00      	nop
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80046ac:	b5b0      	push	{r4, r5, r7, lr}
 80046ae:	b094      	sub	sp, #80	; 0x50
 80046b0:	af04      	add	r7, sp, #16
 80046b2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80046b4:	2301      	movs	r3, #1
 80046b6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f002 f8d5 	bl	800686c <SDIO_GetPowerState>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d102      	bne.n	80046ce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80046c8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80046cc:	e0b6      	b.n	800483c <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d02f      	beq.n	8004736 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f002 fabb 	bl	8006c56 <SDMMC_CmdSendCID>
 80046e0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80046e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d001      	beq.n	80046ec <SD_InitCard+0x40>
    {
      return errorstate;
 80046e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ea:	e0a7      	b.n	800483c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	2100      	movs	r1, #0
 80046f2:	4618      	mov	r0, r3
 80046f4:	f002 f8ff 	bl	80068f6 <SDIO_GetResponse>
 80046f8:	4602      	mov	r2, r0
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	2104      	movs	r1, #4
 8004704:	4618      	mov	r0, r3
 8004706:	f002 f8f6 	bl	80068f6 <SDIO_GetResponse>
 800470a:	4602      	mov	r2, r0
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2108      	movs	r1, #8
 8004716:	4618      	mov	r0, r3
 8004718:	f002 f8ed 	bl	80068f6 <SDIO_GetResponse>
 800471c:	4602      	mov	r2, r0
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	210c      	movs	r1, #12
 8004728:	4618      	mov	r0, r3
 800472a:	f002 f8e4 	bl	80068f6 <SDIO_GetResponse>
 800472e:	4602      	mov	r2, r0
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473a:	2b03      	cmp	r3, #3
 800473c:	d00d      	beq.n	800475a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	f107 020e 	add.w	r2, r7, #14
 8004746:	4611      	mov	r1, r2
 8004748:	4618      	mov	r0, r3
 800474a:	f002 fac1 	bl	8006cd0 <SDMMC_CmdSetRelAdd>
 800474e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8004750:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <SD_InitCard+0xae>
    {
      return errorstate;
 8004756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004758:	e070      	b.n	800483c <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475e:	2b03      	cmp	r3, #3
 8004760:	d036      	beq.n	80047d0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8004762:	89fb      	ldrh	r3, [r7, #14]
 8004764:	461a      	mov	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004772:	041b      	lsls	r3, r3, #16
 8004774:	4619      	mov	r1, r3
 8004776:	4610      	mov	r0, r2
 8004778:	f002 fa8b 	bl	8006c92 <SDMMC_CmdSendCSD>
 800477c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800477e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <SD_InitCard+0xdc>
    {
      return errorstate;
 8004784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004786:	e059      	b.n	800483c <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	2100      	movs	r1, #0
 800478e:	4618      	mov	r0, r3
 8004790:	f002 f8b1 	bl	80068f6 <SDIO_GetResponse>
 8004794:	4602      	mov	r2, r0
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2104      	movs	r1, #4
 80047a0:	4618      	mov	r0, r3
 80047a2:	f002 f8a8 	bl	80068f6 <SDIO_GetResponse>
 80047a6:	4602      	mov	r2, r0
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2108      	movs	r1, #8
 80047b2:	4618      	mov	r0, r3
 80047b4:	f002 f89f 	bl	80068f6 <SDIO_GetResponse>
 80047b8:	4602      	mov	r2, r0
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	210c      	movs	r1, #12
 80047c4:	4618      	mov	r0, r3
 80047c6:	f002 f896 	bl	80068f6 <SDIO_GetResponse>
 80047ca:	4602      	mov	r2, r0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2104      	movs	r1, #4
 80047d6:	4618      	mov	r0, r3
 80047d8:	f002 f88d 	bl	80068f6 <SDIO_GetResponse>
 80047dc:	4603      	mov	r3, r0
 80047de:	0d1a      	lsrs	r2, r3, #20
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80047e4:	f107 0310 	add.w	r3, r7, #16
 80047e8:	4619      	mov	r1, r3
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f7ff fd00 	bl	80041f0 <HAL_SD_GetCardCSD>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d002      	beq.n	80047fc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80047f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80047fa:	e01f      	b.n	800483c <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6819      	ldr	r1, [r3, #0]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004804:	041b      	lsls	r3, r3, #16
 8004806:	461a      	mov	r2, r3
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	4608      	mov	r0, r1
 800480e:	f002 f97d 	bl	8006b0c <SDMMC_CmdSelDesel>
 8004812:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8004814:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <SD_InitCard+0x172>
  {
    return errorstate;
 800481a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800481c:	e00e      	b.n	800483c <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681d      	ldr	r5, [r3, #0]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	466c      	mov	r4, sp
 8004826:	f103 0210 	add.w	r2, r3, #16
 800482a:	ca07      	ldmia	r2, {r0, r1, r2}
 800482c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8004830:	3304      	adds	r3, #4
 8004832:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004834:	4628      	mov	r0, r5
 8004836:	f001 ffc1 	bl	80067bc <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800483a:	2300      	movs	r3, #0
}
 800483c:	4618      	mov	r0, r3
 800483e:	3740      	adds	r7, #64	; 0x40
 8004840:	46bd      	mov	sp, r7
 8004842:	bdb0      	pop	{r4, r5, r7, pc}

08004844 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b086      	sub	sp, #24
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800484c:	2300      	movs	r3, #0
 800484e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	2300      	movs	r3, #0
 8004856:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4618      	mov	r0, r3
 800485e:	f002 f978 	bl	8006b52 <SDMMC_CmdGoIdleState>
 8004862:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <SD_PowerON+0x2a>
  {
    return errorstate;
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	e072      	b.n	8004954 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4618      	mov	r0, r3
 8004874:	f002 f98b 	bl	8006b8e <SDMMC_CmdOperCond>
 8004878:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00d      	beq.n	800489c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2200      	movs	r2, #0
 8004884:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f002 f961 	bl	8006b52 <SDMMC_CmdGoIdleState>
 8004890:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d004      	beq.n	80048a2 <SD_PowerON+0x5e>
    {
      return errorstate;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	e05b      	b.n	8004954 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2201      	movs	r2, #1
 80048a0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d137      	bne.n	800491a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2100      	movs	r1, #0
 80048b0:	4618      	mov	r0, r3
 80048b2:	f002 f98b 	bl	8006bcc <SDMMC_CmdAppCommand>
 80048b6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d02d      	beq.n	800491a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048be:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80048c2:	e047      	b.n	8004954 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2100      	movs	r1, #0
 80048ca:	4618      	mov	r0, r3
 80048cc:	f002 f97e 	bl	8006bcc <SDMMC_CmdAppCommand>
 80048d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d001      	beq.n	80048dc <SD_PowerON+0x98>
    {
      return errorstate;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	e03b      	b.n	8004954 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	491e      	ldr	r1, [pc, #120]	; (800495c <SD_PowerON+0x118>)
 80048e2:	4618      	mov	r0, r3
 80048e4:	f002 f994 	bl	8006c10 <SDMMC_CmdAppOperCommand>
 80048e8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d002      	beq.n	80048f6 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80048f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80048f4:	e02e      	b.n	8004954 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2100      	movs	r1, #0
 80048fc:	4618      	mov	r0, r3
 80048fe:	f001 fffa 	bl	80068f6 <SDIO_GetResponse>
 8004902:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	0fdb      	lsrs	r3, r3, #31
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <SD_PowerON+0xcc>
 800490c:	2301      	movs	r3, #1
 800490e:	e000      	b.n	8004912 <SD_PowerON+0xce>
 8004910:	2300      	movs	r3, #0
 8004912:	613b      	str	r3, [r7, #16]

    count++;
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	3301      	adds	r3, #1
 8004918:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004920:	4293      	cmp	r3, r2
 8004922:	d802      	bhi.n	800492a <SD_PowerON+0xe6>
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0cc      	beq.n	80048c4 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8004930:	4293      	cmp	r3, r2
 8004932:	d902      	bls.n	800493a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8004934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004938:	e00c      	b.n	8004954 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800493a:	697b      	ldr	r3, [r7, #20]
 800493c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004940:	2b00      	cmp	r3, #0
 8004942:	d003      	beq.n	800494c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	645a      	str	r2, [r3, #68]	; 0x44
 800494a:	e002      	b.n	8004952 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8004952:	2300      	movs	r3, #0
}
 8004954:	4618      	mov	r0, r3
 8004956:	3718      	adds	r7, #24
 8004958:	46bd      	mov	sp, r7
 800495a:	bd80      	pop	{r7, pc}
 800495c:	c1100000 	.word	0xc1100000

08004960 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d102      	bne.n	8004976 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8004970:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004974:	e018      	b.n	80049a8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800497e:	041b      	lsls	r3, r3, #16
 8004980:	4619      	mov	r1, r3
 8004982:	4610      	mov	r0, r2
 8004984:	f002 f9c5 	bl	8006d12 <SDMMC_CmdSendStatus>
 8004988:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d001      	beq.n	8004994 <SD_SendStatus+0x34>
  {
    return errorstate;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	e009      	b.n	80049a8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	2100      	movs	r1, #0
 800499a:	4618      	mov	r0, r3
 800499c:	f001 ffab 	bl	80068f6 <SDIO_GetResponse>
 80049a0:	4602      	mov	r2, r0
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b086      	sub	sp, #24
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c2:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d03f      	beq.n	8004a4a <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
 80049ce:	e033      	b.n	8004a38 <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4618      	mov	r0, r3
 80049d6:	f001 ff1c 	bl	8006812 <SDIO_ReadFIFO>
 80049da:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	701a      	strb	r2, [r3, #0]
      tmp++;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	3301      	adds	r3, #1
 80049e8:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	3b01      	subs	r3, #1
 80049ee:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	0a1b      	lsrs	r3, r3, #8
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	701a      	strb	r2, [r3, #0]
      tmp++;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3301      	adds	r3, #1
 80049fe:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	0c1b      	lsrs	r3, r3, #16
 8004a0a:	b2da      	uxtb	r2, r3
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	3301      	adds	r3, #1
 8004a14:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8004a1c:	68bb      	ldr	r3, [r7, #8]
 8004a1e:	0e1b      	lsrs	r3, r3, #24
 8004a20:	b2da      	uxtb	r2, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	3b01      	subs	r3, #1
 8004a30:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004a32:	697b      	ldr	r3, [r7, #20]
 8004a34:	3301      	adds	r3, #1
 8004a36:	617b      	str	r3, [r7, #20]
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	2b07      	cmp	r3, #7
 8004a3c:	d9c8      	bls.n	80049d0 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8004a4a:	bf00      	nop
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b086      	sub	sp, #24
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6a1b      	ldr	r3, [r3, #32]
 8004a5e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d043      	beq.n	8004af4 <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	e037      	b.n	8004ae2 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	3b01      	subs	r3, #1
 8004a82:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	781b      	ldrb	r3, [r3, #0]
 8004a88:	021a      	lsls	r2, r3, #8
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	4313      	orrs	r3, r2
 8004a8e:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	3301      	adds	r3, #1
 8004a94:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004a96:	693b      	ldr	r3, [r7, #16]
 8004a98:	3b01      	subs	r3, #1
 8004a9a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	041a      	lsls	r2, r3, #16
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	3b01      	subs	r3, #1
 8004ab2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	781b      	ldrb	r3, [r3, #0]
 8004ab8:	061a      	lsls	r2, r3, #24
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f107 0208 	add.w	r2, r7, #8
 8004ad4:	4611      	mov	r1, r2
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f001 fea8 	bl	800682c <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	617b      	str	r3, [r7, #20]
 8004ae2:	697b      	ldr	r3, [r7, #20]
 8004ae4:	2b07      	cmp	r3, #7
 8004ae6:	d9c4      	bls.n	8004a72 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004af4:	bf00      	nop
 8004af6:	3718      	adds	r7, #24
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bd80      	pop	{r7, pc}

08004afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e041      	b.n	8004b92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d106      	bne.n	8004b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f7fc fd0c 	bl	8001540 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2202      	movs	r2, #2
 8004b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	3304      	adds	r3, #4
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4610      	mov	r0, r2
 8004b3c:	f000 fcf0 	bl	8005520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2201      	movs	r2, #1
 8004b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2201      	movs	r2, #1
 8004b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
	...

08004b9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b085      	sub	sp, #20
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d001      	beq.n	8004bb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e04e      	b.n	8004c52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2202      	movs	r2, #2
 8004bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68da      	ldr	r2, [r3, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f042 0201 	orr.w	r2, r2, #1
 8004bca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a23      	ldr	r2, [pc, #140]	; (8004c60 <HAL_TIM_Base_Start_IT+0xc4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d022      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bde:	d01d      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a1f      	ldr	r2, [pc, #124]	; (8004c64 <HAL_TIM_Base_Start_IT+0xc8>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d018      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a1e      	ldr	r2, [pc, #120]	; (8004c68 <HAL_TIM_Base_Start_IT+0xcc>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d013      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a1c      	ldr	r2, [pc, #112]	; (8004c6c <HAL_TIM_Base_Start_IT+0xd0>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d00e      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4a1b      	ldr	r2, [pc, #108]	; (8004c70 <HAL_TIM_Base_Start_IT+0xd4>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d009      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a19      	ldr	r2, [pc, #100]	; (8004c74 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d004      	beq.n	8004c1c <HAL_TIM_Base_Start_IT+0x80>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a18      	ldr	r2, [pc, #96]	; (8004c78 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c18:	4293      	cmp	r3, r2
 8004c1a:	d111      	bne.n	8004c40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2b06      	cmp	r3, #6
 8004c2c:	d010      	beq.n	8004c50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	681a      	ldr	r2, [r3, #0]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f042 0201 	orr.w	r2, r2, #1
 8004c3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c3e:	e007      	b.n	8004c50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f042 0201 	orr.w	r2, r2, #1
 8004c4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3714      	adds	r7, #20
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40010000 	.word	0x40010000
 8004c64:	40000400 	.word	0x40000400
 8004c68:	40000800 	.word	0x40000800
 8004c6c:	40000c00 	.word	0x40000c00
 8004c70:	40010400 	.word	0x40010400
 8004c74:	40014000 	.word	0x40014000
 8004c78:	40001800 	.word	0x40001800

08004c7c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0201 	bic.w	r2, r2, #1
 8004c92:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	6a1a      	ldr	r2, [r3, #32]
 8004c9a:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d10f      	bne.n	8004cc4 <HAL_TIM_Base_Stop_IT+0x48>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6a1a      	ldr	r2, [r3, #32]
 8004caa:	f240 4344 	movw	r3, #1092	; 0x444
 8004cae:	4013      	ands	r3, r2
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d107      	bne.n	8004cc4 <HAL_TIM_Base_Stop_IT+0x48>
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f022 0201 	bic.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004ccc:	2300      	movs	r3, #0
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b082      	sub	sp, #8
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d101      	bne.n	8004cec <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e041      	b.n	8004d70 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cf2:	b2db      	uxtb	r3, r3
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d106      	bne.n	8004d06 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7fc fbfb 	bl	80014fc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2202      	movs	r2, #2
 8004d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681a      	ldr	r2, [r3, #0]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	3304      	adds	r3, #4
 8004d16:	4619      	mov	r1, r3
 8004d18:	4610      	mov	r0, r2
 8004d1a:	f000 fc01 	bl	8005520 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2201      	movs	r2, #1
 8004d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3708      	adds	r7, #8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d109      	bne.n	8004d9c <HAL_TIM_PWM_Start+0x24>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	bf14      	ite	ne
 8004d94:	2301      	movne	r3, #1
 8004d96:	2300      	moveq	r3, #0
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	e022      	b.n	8004de2 <HAL_TIM_PWM_Start+0x6a>
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	2b04      	cmp	r3, #4
 8004da0:	d109      	bne.n	8004db6 <HAL_TIM_PWM_Start+0x3e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	bf14      	ite	ne
 8004dae:	2301      	movne	r3, #1
 8004db0:	2300      	moveq	r3, #0
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	e015      	b.n	8004de2 <HAL_TIM_PWM_Start+0x6a>
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b08      	cmp	r3, #8
 8004dba:	d109      	bne.n	8004dd0 <HAL_TIM_PWM_Start+0x58>
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	bf14      	ite	ne
 8004dc8:	2301      	movne	r3, #1
 8004dca:	2300      	moveq	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	e008      	b.n	8004de2 <HAL_TIM_PWM_Start+0x6a>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dd6:	b2db      	uxtb	r3, r3
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	bf14      	ite	ne
 8004ddc:	2301      	movne	r3, #1
 8004dde:	2300      	moveq	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e07c      	b.n	8004ee4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d104      	bne.n	8004dfa <HAL_TIM_PWM_Start+0x82>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004df8:	e013      	b.n	8004e22 <HAL_TIM_PWM_Start+0xaa>
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d104      	bne.n	8004e0a <HAL_TIM_PWM_Start+0x92>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2202      	movs	r2, #2
 8004e04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e08:	e00b      	b.n	8004e22 <HAL_TIM_PWM_Start+0xaa>
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	2b08      	cmp	r3, #8
 8004e0e:	d104      	bne.n	8004e1a <HAL_TIM_PWM_Start+0xa2>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2202      	movs	r2, #2
 8004e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e18:	e003      	b.n	8004e22 <HAL_TIM_PWM_Start+0xaa>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2202      	movs	r2, #2
 8004e1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	2201      	movs	r2, #1
 8004e28:	6839      	ldr	r1, [r7, #0]
 8004e2a:	4618      	mov	r0, r3
 8004e2c:	f000 fe62 	bl	8005af4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a2d      	ldr	r2, [pc, #180]	; (8004eec <HAL_TIM_PWM_Start+0x174>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d004      	beq.n	8004e44 <HAL_TIM_PWM_Start+0xcc>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a2c      	ldr	r2, [pc, #176]	; (8004ef0 <HAL_TIM_PWM_Start+0x178>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d101      	bne.n	8004e48 <HAL_TIM_PWM_Start+0xd0>
 8004e44:	2301      	movs	r3, #1
 8004e46:	e000      	b.n	8004e4a <HAL_TIM_PWM_Start+0xd2>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d007      	beq.n	8004e5e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a22      	ldr	r2, [pc, #136]	; (8004eec <HAL_TIM_PWM_Start+0x174>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d022      	beq.n	8004eae <HAL_TIM_PWM_Start+0x136>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e70:	d01d      	beq.n	8004eae <HAL_TIM_PWM_Start+0x136>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a1f      	ldr	r2, [pc, #124]	; (8004ef4 <HAL_TIM_PWM_Start+0x17c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d018      	beq.n	8004eae <HAL_TIM_PWM_Start+0x136>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a1d      	ldr	r2, [pc, #116]	; (8004ef8 <HAL_TIM_PWM_Start+0x180>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d013      	beq.n	8004eae <HAL_TIM_PWM_Start+0x136>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a1c      	ldr	r2, [pc, #112]	; (8004efc <HAL_TIM_PWM_Start+0x184>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00e      	beq.n	8004eae <HAL_TIM_PWM_Start+0x136>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a16      	ldr	r2, [pc, #88]	; (8004ef0 <HAL_TIM_PWM_Start+0x178>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d009      	beq.n	8004eae <HAL_TIM_PWM_Start+0x136>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a18      	ldr	r2, [pc, #96]	; (8004f00 <HAL_TIM_PWM_Start+0x188>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d004      	beq.n	8004eae <HAL_TIM_PWM_Start+0x136>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a16      	ldr	r2, [pc, #88]	; (8004f04 <HAL_TIM_PWM_Start+0x18c>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d111      	bne.n	8004ed2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2b06      	cmp	r3, #6
 8004ebe:	d010      	beq.n	8004ee2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed0:	e007      	b.n	8004ee2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f042 0201 	orr.w	r2, r2, #1
 8004ee0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3710      	adds	r7, #16
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	40010000 	.word	0x40010000
 8004ef0:	40010400 	.word	0x40010400
 8004ef4:	40000400 	.word	0x40000400
 8004ef8:	40000800 	.word	0x40000800
 8004efc:	40000c00 	.word	0x40000c00
 8004f00:	40014000 	.word	0x40014000
 8004f04:	40001800 	.word	0x40001800

08004f08 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b082      	sub	sp, #8
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d101      	bne.n	8004f1c <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e041      	b.n	8004fa0 <HAL_TIM_OnePulse_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d106      	bne.n	8004f36 <HAL_TIM_OnePulse_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OnePulse_MspInit(htim);
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f839 	bl	8004fa8 <HAL_TIM_OnePulse_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2202      	movs	r2, #2
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	3304      	adds	r3, #4
 8004f46:	4619      	mov	r1, r3
 8004f48:	4610      	mov	r0, r2
 8004f4a:	f000 fae9 	bl	8005520 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681a      	ldr	r2, [r3, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f022 0208 	bic.w	r2, r2, #8
 8004f5c:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6819      	ldr	r1, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2201      	movs	r2, #1
 8004f8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2201      	movs	r2, #1
 8004f92:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3708      	adds	r7, #8
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}

08004fa8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b083      	sub	sp, #12
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8004fb0:	bf00      	nop
 8004fb2:	370c      	adds	r7, #12
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fba:	4770      	bx	lr

08004fbc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691b      	ldr	r3, [r3, #16]
 8004fca:	f003 0302 	and.w	r3, r3, #2
 8004fce:	2b02      	cmp	r3, #2
 8004fd0:	d122      	bne.n	8005018 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	f003 0302 	and.w	r3, r3, #2
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d11b      	bne.n	8005018 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f06f 0202 	mvn.w	r2, #2
 8004fe8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2201      	movs	r2, #1
 8004fee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	f003 0303 	and.w	r3, r3, #3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fa70 	bl	80054e4 <HAL_TIM_IC_CaptureCallback>
 8005004:	e005      	b.n	8005012 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f000 fa62 	bl	80054d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f000 fa73 	bl	80054f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	f003 0304 	and.w	r3, r3, #4
 8005022:	2b04      	cmp	r3, #4
 8005024:	d122      	bne.n	800506c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b04      	cmp	r3, #4
 8005032:	d11b      	bne.n	800506c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f06f 0204 	mvn.w	r2, #4
 800503c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2202      	movs	r2, #2
 8005042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005052:	6878      	ldr	r0, [r7, #4]
 8005054:	f000 fa46 	bl	80054e4 <HAL_TIM_IC_CaptureCallback>
 8005058:	e005      	b.n	8005066 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	f000 fa38 	bl	80054d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005060:	6878      	ldr	r0, [r7, #4]
 8005062:	f000 fa49 	bl	80054f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	691b      	ldr	r3, [r3, #16]
 8005072:	f003 0308 	and.w	r3, r3, #8
 8005076:	2b08      	cmp	r3, #8
 8005078:	d122      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b08      	cmp	r3, #8
 8005086:	d11b      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f06f 0208 	mvn.w	r2, #8
 8005090:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2204      	movs	r2, #4
 8005096:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050a6:	6878      	ldr	r0, [r7, #4]
 80050a8:	f000 fa1c 	bl	80054e4 <HAL_TIM_IC_CaptureCallback>
 80050ac:	e005      	b.n	80050ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ae:	6878      	ldr	r0, [r7, #4]
 80050b0:	f000 fa0e 	bl	80054d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b4:	6878      	ldr	r0, [r7, #4]
 80050b6:	f000 fa1f 	bl	80054f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0310 	and.w	r3, r3, #16
 80050ca:	2b10      	cmp	r3, #16
 80050cc:	d122      	bne.n	8005114 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0310 	and.w	r3, r3, #16
 80050d8:	2b10      	cmp	r3, #16
 80050da:	d11b      	bne.n	8005114 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0210 	mvn.w	r2, #16
 80050e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2208      	movs	r2, #8
 80050ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	69db      	ldr	r3, [r3, #28]
 80050f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d003      	beq.n	8005102 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fa:	6878      	ldr	r0, [r7, #4]
 80050fc:	f000 f9f2 	bl	80054e4 <HAL_TIM_IC_CaptureCallback>
 8005100:	e005      	b.n	800510e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f000 f9e4 	bl	80054d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f000 f9f5 	bl	80054f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	f003 0301 	and.w	r3, r3, #1
 800511e:	2b01      	cmp	r3, #1
 8005120:	d10e      	bne.n	8005140 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	f003 0301 	and.w	r3, r3, #1
 800512c:	2b01      	cmp	r3, #1
 800512e:	d107      	bne.n	8005140 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f06f 0201 	mvn.w	r2, #1
 8005138:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7fb fda8 	bl	8000c90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800514a:	2b80      	cmp	r3, #128	; 0x80
 800514c:	d10e      	bne.n	800516c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005158:	2b80      	cmp	r3, #128	; 0x80
 800515a:	d107      	bne.n	800516c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fdc2 	bl	8005cf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005176:	2b40      	cmp	r3, #64	; 0x40
 8005178:	d10e      	bne.n	8005198 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005184:	2b40      	cmp	r3, #64	; 0x40
 8005186:	d107      	bne.n	8005198 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f9ba 	bl	800550c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0320 	and.w	r3, r3, #32
 80051a2:	2b20      	cmp	r3, #32
 80051a4:	d10e      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b20      	cmp	r3, #32
 80051b2:	d107      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0220 	mvn.w	r2, #32
 80051bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fd8c 	bl	8005cdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051c4:	bf00      	nop
 80051c6:	3708      	adds	r7, #8
 80051c8:	46bd      	mov	sp, r7
 80051ca:	bd80      	pop	{r7, pc}

080051cc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b084      	sub	sp, #16
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	60f8      	str	r0, [r7, #12]
 80051d4:	60b9      	str	r1, [r7, #8]
 80051d6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d101      	bne.n	80051e6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80051e2:	2302      	movs	r3, #2
 80051e4:	e0ac      	b.n	8005340 <HAL_TIM_PWM_ConfigChannel+0x174>
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b0c      	cmp	r3, #12
 80051f2:	f200 809f 	bhi.w	8005334 <HAL_TIM_PWM_ConfigChannel+0x168>
 80051f6:	a201      	add	r2, pc, #4	; (adr r2, 80051fc <HAL_TIM_PWM_ConfigChannel+0x30>)
 80051f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051fc:	08005231 	.word	0x08005231
 8005200:	08005335 	.word	0x08005335
 8005204:	08005335 	.word	0x08005335
 8005208:	08005335 	.word	0x08005335
 800520c:	08005271 	.word	0x08005271
 8005210:	08005335 	.word	0x08005335
 8005214:	08005335 	.word	0x08005335
 8005218:	08005335 	.word	0x08005335
 800521c:	080052b3 	.word	0x080052b3
 8005220:	08005335 	.word	0x08005335
 8005224:	08005335 	.word	0x08005335
 8005228:	08005335 	.word	0x08005335
 800522c:	080052f3 	.word	0x080052f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68b9      	ldr	r1, [r7, #8]
 8005236:	4618      	mov	r0, r3
 8005238:	f000 fa12 	bl	8005660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699a      	ldr	r2, [r3, #24]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f042 0208 	orr.w	r2, r2, #8
 800524a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	699a      	ldr	r2, [r3, #24]
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f022 0204 	bic.w	r2, r2, #4
 800525a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6999      	ldr	r1, [r3, #24]
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	691a      	ldr	r2, [r3, #16]
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	430a      	orrs	r2, r1
 800526c:	619a      	str	r2, [r3, #24]
      break;
 800526e:	e062      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	68b9      	ldr	r1, [r7, #8]
 8005276:	4618      	mov	r0, r3
 8005278:	f000 fa62 	bl	8005740 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699a      	ldr	r2, [r3, #24]
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800528a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	699a      	ldr	r2, [r3, #24]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800529a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6999      	ldr	r1, [r3, #24]
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	021a      	lsls	r2, r3, #8
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	430a      	orrs	r2, r1
 80052ae:	619a      	str	r2, [r3, #24]
      break;
 80052b0:	e041      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68b9      	ldr	r1, [r7, #8]
 80052b8:	4618      	mov	r0, r3
 80052ba:	f000 fab7 	bl	800582c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69da      	ldr	r2, [r3, #28]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0208 	orr.w	r2, r2, #8
 80052cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	69da      	ldr	r2, [r3, #28]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0204 	bic.w	r2, r2, #4
 80052dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	69d9      	ldr	r1, [r3, #28]
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	691a      	ldr	r2, [r3, #16]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	61da      	str	r2, [r3, #28]
      break;
 80052f0:	e021      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68b9      	ldr	r1, [r7, #8]
 80052f8:	4618      	mov	r0, r3
 80052fa:	f000 fb0b 	bl	8005914 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	69da      	ldr	r2, [r3, #28]
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800530c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	69da      	ldr	r2, [r3, #28]
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800531c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69d9      	ldr	r1, [r3, #28]
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	691b      	ldr	r3, [r3, #16]
 8005328:	021a      	lsls	r2, r3, #8
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	430a      	orrs	r2, r1
 8005330:	61da      	str	r2, [r3, #28]
      break;
 8005332:	e000      	b.n	8005336 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005334:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800533e:	2300      	movs	r3, #0
}
 8005340:	4618      	mov	r0, r3
 8005342:	3710      	adds	r7, #16
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}

08005348 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b084      	sub	sp, #16
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
 8005350:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005358:	2b01      	cmp	r3, #1
 800535a:	d101      	bne.n	8005360 <HAL_TIM_ConfigClockSource+0x18>
 800535c:	2302      	movs	r3, #2
 800535e:	e0b3      	b.n	80054c8 <HAL_TIM_ConfigClockSource+0x180>
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800537e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005386:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005398:	d03e      	beq.n	8005418 <HAL_TIM_ConfigClockSource+0xd0>
 800539a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800539e:	f200 8087 	bhi.w	80054b0 <HAL_TIM_ConfigClockSource+0x168>
 80053a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a6:	f000 8085 	beq.w	80054b4 <HAL_TIM_ConfigClockSource+0x16c>
 80053aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053ae:	d87f      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x168>
 80053b0:	2b70      	cmp	r3, #112	; 0x70
 80053b2:	d01a      	beq.n	80053ea <HAL_TIM_ConfigClockSource+0xa2>
 80053b4:	2b70      	cmp	r3, #112	; 0x70
 80053b6:	d87b      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x168>
 80053b8:	2b60      	cmp	r3, #96	; 0x60
 80053ba:	d050      	beq.n	800545e <HAL_TIM_ConfigClockSource+0x116>
 80053bc:	2b60      	cmp	r3, #96	; 0x60
 80053be:	d877      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x168>
 80053c0:	2b50      	cmp	r3, #80	; 0x50
 80053c2:	d03c      	beq.n	800543e <HAL_TIM_ConfigClockSource+0xf6>
 80053c4:	2b50      	cmp	r3, #80	; 0x50
 80053c6:	d873      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x168>
 80053c8:	2b40      	cmp	r3, #64	; 0x40
 80053ca:	d058      	beq.n	800547e <HAL_TIM_ConfigClockSource+0x136>
 80053cc:	2b40      	cmp	r3, #64	; 0x40
 80053ce:	d86f      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x168>
 80053d0:	2b30      	cmp	r3, #48	; 0x30
 80053d2:	d064      	beq.n	800549e <HAL_TIM_ConfigClockSource+0x156>
 80053d4:	2b30      	cmp	r3, #48	; 0x30
 80053d6:	d86b      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x168>
 80053d8:	2b20      	cmp	r3, #32
 80053da:	d060      	beq.n	800549e <HAL_TIM_ConfigClockSource+0x156>
 80053dc:	2b20      	cmp	r3, #32
 80053de:	d867      	bhi.n	80054b0 <HAL_TIM_ConfigClockSource+0x168>
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d05c      	beq.n	800549e <HAL_TIM_ConfigClockSource+0x156>
 80053e4:	2b10      	cmp	r3, #16
 80053e6:	d05a      	beq.n	800549e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80053e8:	e062      	b.n	80054b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6818      	ldr	r0, [r3, #0]
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	6899      	ldr	r1, [r3, #8]
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	685a      	ldr	r2, [r3, #4]
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	f000 fb5b 	bl	8005ab4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800540c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	609a      	str	r2, [r3, #8]
      break;
 8005416:	e04e      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6818      	ldr	r0, [r3, #0]
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	6899      	ldr	r1, [r3, #8]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685a      	ldr	r2, [r3, #4]
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	f000 fb44 	bl	8005ab4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	689a      	ldr	r2, [r3, #8]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800543a:	609a      	str	r2, [r3, #8]
      break;
 800543c:	e03b      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6818      	ldr	r0, [r3, #0]
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	6859      	ldr	r1, [r3, #4]
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	461a      	mov	r2, r3
 800544c:	f000 fab8 	bl	80059c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2150      	movs	r1, #80	; 0x50
 8005456:	4618      	mov	r0, r3
 8005458:	f000 fb11 	bl	8005a7e <TIM_ITRx_SetConfig>
      break;
 800545c:	e02b      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6818      	ldr	r0, [r3, #0]
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	6859      	ldr	r1, [r3, #4]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	461a      	mov	r2, r3
 800546c:	f000 fad7 	bl	8005a1e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	2160      	movs	r1, #96	; 0x60
 8005476:	4618      	mov	r0, r3
 8005478:	f000 fb01 	bl	8005a7e <TIM_ITRx_SetConfig>
      break;
 800547c:	e01b      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6818      	ldr	r0, [r3, #0]
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	6859      	ldr	r1, [r3, #4]
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	461a      	mov	r2, r3
 800548c:	f000 fa98 	bl	80059c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	2140      	movs	r1, #64	; 0x40
 8005496:	4618      	mov	r0, r3
 8005498:	f000 faf1 	bl	8005a7e <TIM_ITRx_SetConfig>
      break;
 800549c:	e00b      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4619      	mov	r1, r3
 80054a8:	4610      	mov	r0, r2
 80054aa:	f000 fae8 	bl	8005a7e <TIM_ITRx_SetConfig>
        break;
 80054ae:	e002      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80054b0:	bf00      	nop
 80054b2:	e000      	b.n	80054b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80054b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80054d8:	bf00      	nop
 80054da:	370c      	adds	r7, #12
 80054dc:	46bd      	mov	sp, r7
 80054de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e2:	4770      	bx	lr

080054e4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80054e4:	b480      	push	{r7}
 80054e6:	b083      	sub	sp, #12
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80054ec:	bf00      	nop
 80054ee:	370c      	adds	r7, #12
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr

080054f8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80054f8:	b480      	push	{r7}
 80054fa:	b083      	sub	sp, #12
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005500:	bf00      	nop
 8005502:	370c      	adds	r7, #12
 8005504:	46bd      	mov	sp, r7
 8005506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550a:	4770      	bx	lr

0800550c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a40      	ldr	r2, [pc, #256]	; (8005634 <TIM_Base_SetConfig+0x114>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d013      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800553e:	d00f      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a3d      	ldr	r2, [pc, #244]	; (8005638 <TIM_Base_SetConfig+0x118>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d00b      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	4a3c      	ldr	r2, [pc, #240]	; (800563c <TIM_Base_SetConfig+0x11c>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d007      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a3b      	ldr	r2, [pc, #236]	; (8005640 <TIM_Base_SetConfig+0x120>)
 8005554:	4293      	cmp	r3, r2
 8005556:	d003      	beq.n	8005560 <TIM_Base_SetConfig+0x40>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a3a      	ldr	r2, [pc, #232]	; (8005644 <TIM_Base_SetConfig+0x124>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d108      	bne.n	8005572 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005566:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	68fa      	ldr	r2, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a2f      	ldr	r2, [pc, #188]	; (8005634 <TIM_Base_SetConfig+0x114>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d02b      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005580:	d027      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a2c      	ldr	r2, [pc, #176]	; (8005638 <TIM_Base_SetConfig+0x118>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d023      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a2b      	ldr	r2, [pc, #172]	; (800563c <TIM_Base_SetConfig+0x11c>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d01f      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a2a      	ldr	r2, [pc, #168]	; (8005640 <TIM_Base_SetConfig+0x120>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d01b      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	4a29      	ldr	r2, [pc, #164]	; (8005644 <TIM_Base_SetConfig+0x124>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	d017      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	4a28      	ldr	r2, [pc, #160]	; (8005648 <TIM_Base_SetConfig+0x128>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d013      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	4a27      	ldr	r2, [pc, #156]	; (800564c <TIM_Base_SetConfig+0x12c>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d00f      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	4a26      	ldr	r2, [pc, #152]	; (8005650 <TIM_Base_SetConfig+0x130>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d00b      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a25      	ldr	r2, [pc, #148]	; (8005654 <TIM_Base_SetConfig+0x134>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d007      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a24      	ldr	r2, [pc, #144]	; (8005658 <TIM_Base_SetConfig+0x138>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_Base_SetConfig+0xb2>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a23      	ldr	r2, [pc, #140]	; (800565c <TIM_Base_SetConfig+0x13c>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d108      	bne.n	80055e4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80055d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	4313      	orrs	r3, r2
 80055e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	695b      	ldr	r3, [r3, #20]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68fa      	ldr	r2, [r7, #12]
 80055f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	689a      	ldr	r2, [r3, #8]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a0a      	ldr	r2, [pc, #40]	; (8005634 <TIM_Base_SetConfig+0x114>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d003      	beq.n	8005618 <TIM_Base_SetConfig+0xf8>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a0c      	ldr	r2, [pc, #48]	; (8005644 <TIM_Base_SetConfig+0x124>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d103      	bne.n	8005620 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	615a      	str	r2, [r3, #20]
}
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	40010000 	.word	0x40010000
 8005638:	40000400 	.word	0x40000400
 800563c:	40000800 	.word	0x40000800
 8005640:	40000c00 	.word	0x40000c00
 8005644:	40010400 	.word	0x40010400
 8005648:	40014000 	.word	0x40014000
 800564c:	40014400 	.word	0x40014400
 8005650:	40014800 	.word	0x40014800
 8005654:	40001800 	.word	0x40001800
 8005658:	40001c00 	.word	0x40001c00
 800565c:	40002000 	.word	0x40002000

08005660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f023 0201 	bic.w	r2, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6a1b      	ldr	r3, [r3, #32]
 800567a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800568e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f023 0303 	bic.w	r3, r3, #3
 8005696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005698:	683b      	ldr	r3, [r7, #0]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	4313      	orrs	r3, r2
 80056a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	f023 0302 	bic.w	r3, r3, #2
 80056a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a20      	ldr	r2, [pc, #128]	; (8005738 <TIM_OC1_SetConfig+0xd8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d003      	beq.n	80056c4 <TIM_OC1_SetConfig+0x64>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a1f      	ldr	r2, [pc, #124]	; (800573c <TIM_OC1_SetConfig+0xdc>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d10c      	bne.n	80056de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	f023 0308 	bic.w	r3, r3, #8
 80056ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	68db      	ldr	r3, [r3, #12]
 80056d0:	697a      	ldr	r2, [r7, #20]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f023 0304 	bic.w	r3, r3, #4
 80056dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a15      	ldr	r2, [pc, #84]	; (8005738 <TIM_OC1_SetConfig+0xd8>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d003      	beq.n	80056ee <TIM_OC1_SetConfig+0x8e>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a14      	ldr	r2, [pc, #80]	; (800573c <TIM_OC1_SetConfig+0xdc>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d111      	bne.n	8005712 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80056f6:	693b      	ldr	r3, [r7, #16]
 80056f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80056fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	699b      	ldr	r3, [r3, #24]
 800570c:	693a      	ldr	r2, [r7, #16]
 800570e:	4313      	orrs	r3, r2
 8005710:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	697a      	ldr	r2, [r7, #20]
 800572a:	621a      	str	r2, [r3, #32]
}
 800572c:	bf00      	nop
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	40010000 	.word	0x40010000
 800573c:	40010400 	.word	0x40010400

08005740 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005740:	b480      	push	{r7}
 8005742:	b087      	sub	sp, #28
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	f023 0210 	bic.w	r2, r3, #16
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a1b      	ldr	r3, [r3, #32]
 800575a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800576e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005776:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	021b      	lsls	r3, r3, #8
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	4313      	orrs	r3, r2
 8005782:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f023 0320 	bic.w	r3, r3, #32
 800578a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	689b      	ldr	r3, [r3, #8]
 8005790:	011b      	lsls	r3, r3, #4
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	4313      	orrs	r3, r2
 8005796:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a22      	ldr	r2, [pc, #136]	; (8005824 <TIM_OC2_SetConfig+0xe4>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d003      	beq.n	80057a8 <TIM_OC2_SetConfig+0x68>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	4a21      	ldr	r2, [pc, #132]	; (8005828 <TIM_OC2_SetConfig+0xe8>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d10d      	bne.n	80057c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80057ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	68db      	ldr	r3, [r3, #12]
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	697a      	ldr	r2, [r7, #20]
 80057b8:	4313      	orrs	r3, r2
 80057ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	4a17      	ldr	r2, [pc, #92]	; (8005824 <TIM_OC2_SetConfig+0xe4>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d003      	beq.n	80057d4 <TIM_OC2_SetConfig+0x94>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	4a16      	ldr	r2, [pc, #88]	; (8005828 <TIM_OC2_SetConfig+0xe8>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d113      	bne.n	80057fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80057dc:	693b      	ldr	r3, [r7, #16]
 80057de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	009b      	lsls	r3, r3, #2
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80057f0:	683b      	ldr	r3, [r7, #0]
 80057f2:	699b      	ldr	r3, [r3, #24]
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	685a      	ldr	r2, [r3, #4]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	697a      	ldr	r2, [r7, #20]
 8005814:	621a      	str	r2, [r3, #32]
}
 8005816:	bf00      	nop
 8005818:	371c      	adds	r7, #28
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	40010000 	.word	0x40010000
 8005828:	40010400 	.word	0x40010400

0800582c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800582c:	b480      	push	{r7}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6a1b      	ldr	r3, [r3, #32]
 800583a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a1b      	ldr	r3, [r3, #32]
 8005846:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685b      	ldr	r3, [r3, #4]
 800584c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	69db      	ldr	r3, [r3, #28]
 8005852:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f023 0303 	bic.w	r3, r3, #3
 8005862:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	4313      	orrs	r3, r2
 800586c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005874:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	021b      	lsls	r3, r3, #8
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	4313      	orrs	r3, r2
 8005880:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	4a21      	ldr	r2, [pc, #132]	; (800590c <TIM_OC3_SetConfig+0xe0>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d003      	beq.n	8005892 <TIM_OC3_SetConfig+0x66>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4a20      	ldr	r2, [pc, #128]	; (8005910 <TIM_OC3_SetConfig+0xe4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d10d      	bne.n	80058ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005898:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	021b      	lsls	r3, r3, #8
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	4a16      	ldr	r2, [pc, #88]	; (800590c <TIM_OC3_SetConfig+0xe0>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d003      	beq.n	80058be <TIM_OC3_SetConfig+0x92>
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4a15      	ldr	r2, [pc, #84]	; (8005910 <TIM_OC3_SetConfig+0xe4>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d113      	bne.n	80058e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80058be:	693b      	ldr	r3, [r7, #16]
 80058c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	011b      	lsls	r3, r3, #4
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	011b      	lsls	r3, r3, #4
 80058e0:	693a      	ldr	r2, [r7, #16]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	68fa      	ldr	r2, [r7, #12]
 80058f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	697a      	ldr	r2, [r7, #20]
 80058fe:	621a      	str	r2, [r3, #32]
}
 8005900:	bf00      	nop
 8005902:	371c      	adds	r7, #28
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr
 800590c:	40010000 	.word	0x40010000
 8005910:	40010400 	.word	0x40010400

08005914 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005914:	b480      	push	{r7}
 8005916:	b087      	sub	sp, #28
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6a1b      	ldr	r3, [r3, #32]
 800592e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	685b      	ldr	r3, [r3, #4]
 8005934:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005942:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800594a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	021b      	lsls	r3, r3, #8
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	4313      	orrs	r3, r2
 8005956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800595e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	031b      	lsls	r3, r3, #12
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	4313      	orrs	r3, r2
 800596a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	4a12      	ldr	r2, [pc, #72]	; (80059b8 <TIM_OC4_SetConfig+0xa4>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d003      	beq.n	800597c <TIM_OC4_SetConfig+0x68>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	4a11      	ldr	r2, [pc, #68]	; (80059bc <TIM_OC4_SetConfig+0xa8>)
 8005978:	4293      	cmp	r3, r2
 800597a:	d109      	bne.n	8005990 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005982:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	695b      	ldr	r3, [r3, #20]
 8005988:	019b      	lsls	r3, r3, #6
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	4313      	orrs	r3, r2
 800598e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68fa      	ldr	r2, [r7, #12]
 800599a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	685a      	ldr	r2, [r3, #4]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	693a      	ldr	r2, [r7, #16]
 80059a8:	621a      	str	r2, [r3, #32]
}
 80059aa:	bf00      	nop
 80059ac:	371c      	adds	r7, #28
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40010000 	.word	0x40010000
 80059bc:	40010400 	.word	0x40010400

080059c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6a1b      	ldr	r3, [r3, #32]
 80059d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	6a1b      	ldr	r3, [r3, #32]
 80059d6:	f023 0201 	bic.w	r2, r3, #1
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	011b      	lsls	r3, r3, #4
 80059f0:	693a      	ldr	r2, [r7, #16]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f023 030a 	bic.w	r3, r3, #10
 80059fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	621a      	str	r2, [r3, #32]
}
 8005a12:	bf00      	nop
 8005a14:	371c      	adds	r7, #28
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a1e:	b480      	push	{r7}
 8005a20:	b087      	sub	sp, #28
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	60f8      	str	r0, [r7, #12]
 8005a26:	60b9      	str	r1, [r7, #8]
 8005a28:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	6a1b      	ldr	r3, [r3, #32]
 8005a2e:	f023 0210 	bic.w	r2, r3, #16
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a1b      	ldr	r3, [r3, #32]
 8005a40:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a48:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	031b      	lsls	r3, r3, #12
 8005a4e:	697a      	ldr	r2, [r7, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005a5a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	693a      	ldr	r2, [r7, #16]
 8005a70:	621a      	str	r2, [r3, #32]
}
 8005a72:	bf00      	nop
 8005a74:	371c      	adds	r7, #28
 8005a76:	46bd      	mov	sp, r7
 8005a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7c:	4770      	bx	lr

08005a7e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a7e:	b480      	push	{r7}
 8005a80:	b085      	sub	sp, #20
 8005a82:	af00      	add	r7, sp, #0
 8005a84:	6078      	str	r0, [r7, #4]
 8005a86:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a94:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005a96:	683a      	ldr	r2, [r7, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	f043 0307 	orr.w	r3, r3, #7
 8005aa0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	609a      	str	r2, [r3, #8]
}
 8005aa8:	bf00      	nop
 8005aaa:	3714      	adds	r7, #20
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	689b      	ldr	r3, [r3, #8]
 8005ac6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ace:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	021a      	lsls	r2, r3, #8
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4313      	orrs	r3, r2
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	697a      	ldr	r2, [r7, #20]
 8005ae6:	609a      	str	r2, [r3, #8]
}
 8005ae8:	bf00      	nop
 8005aea:	371c      	adds	r7, #28
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b087      	sub	sp, #28
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	f003 031f 	and.w	r3, r3, #31
 8005b06:	2201      	movs	r2, #1
 8005b08:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	6a1a      	ldr	r2, [r3, #32]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	43db      	mvns	r3, r3
 8005b16:	401a      	ands	r2, r3
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a1a      	ldr	r2, [r3, #32]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	f003 031f 	and.w	r3, r3, #31
 8005b26:	6879      	ldr	r1, [r7, #4]
 8005b28:	fa01 f303 	lsl.w	r3, r1, r3
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	621a      	str	r2, [r3, #32]
}
 8005b32:	bf00      	nop
 8005b34:	371c      	adds	r7, #28
 8005b36:	46bd      	mov	sp, r7
 8005b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3c:	4770      	bx	lr
	...

08005b40 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b085      	sub	sp, #20
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d101      	bne.n	8005b58 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b54:	2302      	movs	r3, #2
 8005b56:	e05a      	b.n	8005c0e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2202      	movs	r2, #2
 8005b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b7e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4a21      	ldr	r2, [pc, #132]	; (8005c1c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d022      	beq.n	8005be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ba4:	d01d      	beq.n	8005be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a1d      	ldr	r2, [pc, #116]	; (8005c20 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d018      	beq.n	8005be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a1b      	ldr	r2, [pc, #108]	; (8005c24 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d013      	beq.n	8005be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a1a      	ldr	r2, [pc, #104]	; (8005c28 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d00e      	beq.n	8005be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a18      	ldr	r2, [pc, #96]	; (8005c2c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d009      	beq.n	8005be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a17      	ldr	r2, [pc, #92]	; (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d004      	beq.n	8005be2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a15      	ldr	r2, [pc, #84]	; (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d10c      	bne.n	8005bfc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005be8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	68ba      	ldr	r2, [r7, #8]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68ba      	ldr	r2, [r7, #8]
 8005bfa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3714      	adds	r7, #20
 8005c12:	46bd      	mov	sp, r7
 8005c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c18:	4770      	bx	lr
 8005c1a:	bf00      	nop
 8005c1c:	40010000 	.word	0x40010000
 8005c20:	40000400 	.word	0x40000400
 8005c24:	40000800 	.word	0x40000800
 8005c28:	40000c00 	.word	0x40000c00
 8005c2c:	40010400 	.word	0x40010400
 8005c30:	40014000 	.word	0x40014000
 8005c34:	40001800 	.word	0x40001800

08005c38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d101      	bne.n	8005c54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005c50:	2302      	movs	r3, #2
 8005c52:	e03d      	b.n	8005cd0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	68db      	ldr	r3, [r3, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c9a:	683b      	ldr	r3, [r7, #0]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	4313      	orrs	r3, r2
 8005cae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005cce:	2300      	movs	r3, #0
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3714      	adds	r7, #20
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ce4:	bf00      	nop
 8005ce6:	370c      	adds	r7, #12
 8005ce8:	46bd      	mov	sp, r7
 8005cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cee:	4770      	bx	lr

08005cf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005cf0:	b480      	push	{r7}
 8005cf2:	b083      	sub	sp, #12
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cf8:	bf00      	nop
 8005cfa:	370c      	adds	r7, #12
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d02:	4770      	bx	lr

08005d04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e03f      	b.n	8005d96 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fb fd2c 	bl	8001788 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2224      	movs	r2, #36	; 0x24
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005d46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fb6f 	bl	800642c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	691a      	ldr	r2, [r3, #16]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	695a      	ldr	r2, [r3, #20]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68da      	ldr	r2, [r3, #12]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2200      	movs	r2, #0
 8005d82:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2220      	movs	r2, #32
 8005d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2220      	movs	r2, #32
 8005d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	60f8      	str	r0, [r7, #12]
 8005da6:	60b9      	str	r1, [r7, #8]
 8005da8:	4613      	mov	r3, r2
 8005daa:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005db2:	b2db      	uxtb	r3, r3
 8005db4:	2b20      	cmp	r3, #32
 8005db6:	d130      	bne.n	8005e1a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <HAL_UART_Transmit_IT+0x26>
 8005dbe:	88fb      	ldrh	r3, [r7, #6]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e029      	b.n	8005e1c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d101      	bne.n	8005dd6 <HAL_UART_Transmit_IT+0x38>
 8005dd2:	2302      	movs	r3, #2
 8005dd4:	e022      	b.n	8005e1c <HAL_UART_Transmit_IT+0x7e>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	68ba      	ldr	r2, [r7, #8]
 8005de2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	88fa      	ldrh	r2, [r7, #6]
 8005de8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	88fa      	ldrh	r2, [r7, #6]
 8005dee:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2200      	movs	r2, #0
 8005df4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2221      	movs	r2, #33	; 0x21
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68da      	ldr	r2, [r3, #12]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e14:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005e16:	2300      	movs	r3, #0
 8005e18:	e000      	b.n	8005e1c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005e1a:	2302      	movs	r3, #2
  }
}
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	3714      	adds	r7, #20
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08a      	sub	sp, #40	; 0x28
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e52:	f003 030f 	and.w	r3, r3, #15
 8005e56:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10d      	bne.n	8005e7a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e60:	f003 0320 	and.w	r3, r3, #32
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d008      	beq.n	8005e7a <HAL_UART_IRQHandler+0x52>
 8005e68:	6a3b      	ldr	r3, [r7, #32]
 8005e6a:	f003 0320 	and.w	r3, r3, #32
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d003      	beq.n	8005e7a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f000 fa43 	bl	80062fe <UART_Receive_IT>
      return;
 8005e78:	e17c      	b.n	8006174 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005e7a:	69bb      	ldr	r3, [r7, #24]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 80b1 	beq.w	8005fe4 <HAL_UART_IRQHandler+0x1bc>
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	f003 0301 	and.w	r3, r3, #1
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d105      	bne.n	8005e98 <HAL_UART_IRQHandler+0x70>
 8005e8c:	6a3b      	ldr	r3, [r7, #32]
 8005e8e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f000 80a6 	beq.w	8005fe4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	f003 0301 	and.w	r3, r3, #1
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d00a      	beq.n	8005eb8 <HAL_UART_IRQHandler+0x90>
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d005      	beq.n	8005eb8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb0:	f043 0201 	orr.w	r2, r3, #1
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eba:	f003 0304 	and.w	r3, r3, #4
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d00a      	beq.n	8005ed8 <HAL_UART_IRQHandler+0xb0>
 8005ec2:	69fb      	ldr	r3, [r7, #28]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d005      	beq.n	8005ed8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed0:	f043 0202 	orr.w	r2, r3, #2
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eda:	f003 0302 	and.w	r3, r3, #2
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d00a      	beq.n	8005ef8 <HAL_UART_IRQHandler+0xd0>
 8005ee2:	69fb      	ldr	r3, [r7, #28]
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d005      	beq.n	8005ef8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ef0:	f043 0204 	orr.w	r2, r3, #4
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efa:	f003 0308 	and.w	r3, r3, #8
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00f      	beq.n	8005f22 <HAL_UART_IRQHandler+0xfa>
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	f003 0320 	and.w	r3, r3, #32
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d104      	bne.n	8005f16 <HAL_UART_IRQHandler+0xee>
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d005      	beq.n	8005f22 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f1a:	f043 0208 	orr.w	r2, r3, #8
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	f000 811f 	beq.w	800616a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d007      	beq.n	8005f46 <HAL_UART_IRQHandler+0x11e>
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	f003 0320 	and.w	r3, r3, #32
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d002      	beq.n	8005f46 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f9dc 	bl	80062fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	695b      	ldr	r3, [r3, #20]
 8005f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f50:	2b40      	cmp	r3, #64	; 0x40
 8005f52:	bf0c      	ite	eq
 8005f54:	2301      	moveq	r3, #1
 8005f56:	2300      	movne	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f60:	f003 0308 	and.w	r3, r3, #8
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d102      	bne.n	8005f6e <HAL_UART_IRQHandler+0x146>
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d031      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f91c 	bl	80061ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695b      	ldr	r3, [r3, #20]
 8005f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f7e:	2b40      	cmp	r3, #64	; 0x40
 8005f80:	d123      	bne.n	8005fca <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	695a      	ldr	r2, [r3, #20]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f90:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d013      	beq.n	8005fc2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	4a77      	ldr	r2, [pc, #476]	; (800617c <HAL_UART_IRQHandler+0x354>)
 8005fa0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fb ff2e 	bl	8001e08 <HAL_DMA_Abort_IT>
 8005fac:	4603      	mov	r3, r0
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d016      	beq.n	8005fe0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005fbc:	4610      	mov	r0, r2
 8005fbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc0:	e00e      	b.n	8005fe0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 f8dc 	bl	8006180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc8:	e00a      	b.n	8005fe0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 f8d8 	bl	8006180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd0:	e006      	b.n	8005fe0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f000 f8d4 	bl	8006180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005fde:	e0c4      	b.n	800616a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe0:	bf00      	nop
    return;
 8005fe2:	e0c2      	b.n	800616a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	f040 80a2 	bne.w	8006132 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff0:	f003 0310 	and.w	r3, r3, #16
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f000 809c 	beq.w	8006132 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005ffa:	6a3b      	ldr	r3, [r7, #32]
 8005ffc:	f003 0310 	and.w	r3, r3, #16
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 8096 	beq.w	8006132 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006006:	2300      	movs	r3, #0
 8006008:	60fb      	str	r3, [r7, #12]
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	60fb      	str	r3, [r7, #12]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685b      	ldr	r3, [r3, #4]
 8006018:	60fb      	str	r3, [r7, #12]
 800601a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	695b      	ldr	r3, [r3, #20]
 8006022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006026:	2b40      	cmp	r3, #64	; 0x40
 8006028:	d14f      	bne.n	80060ca <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8006034:	8a3b      	ldrh	r3, [r7, #16]
 8006036:	2b00      	cmp	r3, #0
 8006038:	f000 8099 	beq.w	800616e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006040:	8a3a      	ldrh	r2, [r7, #16]
 8006042:	429a      	cmp	r2, r3
 8006044:	f080 8093 	bcs.w	800616e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	8a3a      	ldrh	r2, [r7, #16]
 800604c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006052:	69db      	ldr	r3, [r3, #28]
 8006054:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006058:	d02b      	beq.n	80060b2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	68da      	ldr	r2, [r3, #12]
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006068:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695a      	ldr	r2, [r3, #20]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f022 0201 	bic.w	r2, r2, #1
 8006078:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695a      	ldr	r2, [r3, #20]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006088:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2220      	movs	r2, #32
 800608e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2200      	movs	r2, #0
 8006096:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	68da      	ldr	r2, [r3, #12]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0210 	bic.w	r2, r2, #16
 80060a6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7fb fe3b 	bl	8001d28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060ba:	b29b      	uxth	r3, r3
 80060bc:	1ad3      	subs	r3, r2, r3
 80060be:	b29b      	uxth	r3, r3
 80060c0:	4619      	mov	r1, r3
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 f866 	bl	8006194 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80060c8:	e051      	b.n	800616e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060d2:	b29b      	uxth	r3, r3
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80060dc:	b29b      	uxth	r3, r3
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d047      	beq.n	8006172 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80060e2:	8a7b      	ldrh	r3, [r7, #18]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d044      	beq.n	8006172 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	68da      	ldr	r2, [r3, #12]
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80060f6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695a      	ldr	r2, [r3, #20]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f022 0201 	bic.w	r2, r2, #1
 8006106:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2220      	movs	r2, #32
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0210 	bic.w	r2, r2, #16
 8006124:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006126:	8a7b      	ldrh	r3, [r7, #18]
 8006128:	4619      	mov	r1, r3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f832 	bl	8006194 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006130:	e01f      	b.n	8006172 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006138:	2b00      	cmp	r3, #0
 800613a:	d008      	beq.n	800614e <HAL_UART_IRQHandler+0x326>
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006142:	2b00      	cmp	r3, #0
 8006144:	d003      	beq.n	800614e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f871 	bl	800622e <UART_Transmit_IT>
    return;
 800614c:	e012      	b.n	8006174 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800614e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00d      	beq.n	8006174 <HAL_UART_IRQHandler+0x34c>
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800615e:	2b00      	cmp	r3, #0
 8006160:	d008      	beq.n	8006174 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8006162:	6878      	ldr	r0, [r7, #4]
 8006164:	f000 f8b3 	bl	80062ce <UART_EndTransmit_IT>
    return;
 8006168:	e004      	b.n	8006174 <HAL_UART_IRQHandler+0x34c>
    return;
 800616a:	bf00      	nop
 800616c:	e002      	b.n	8006174 <HAL_UART_IRQHandler+0x34c>
      return;
 800616e:	bf00      	nop
 8006170:	e000      	b.n	8006174 <HAL_UART_IRQHandler+0x34c>
      return;
 8006172:	bf00      	nop
  }
}
 8006174:	3728      	adds	r7, #40	; 0x28
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	08006207 	.word	0x08006207

08006180 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	460b      	mov	r3, r1
 800619e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80061a0:	bf00      	nop
 80061a2:	370c      	adds	r7, #12
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr

080061ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	68da      	ldr	r2, [r3, #12]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80061c2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	695a      	ldr	r2, [r3, #20]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f022 0201 	bic.w	r2, r2, #1
 80061d2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d107      	bne.n	80061ec <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68da      	ldr	r2, [r3, #12]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0210 	bic.w	r2, r2, #16
 80061ea:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2200      	movs	r2, #0
 80061f8:	631a      	str	r2, [r3, #48]	; 0x30
}
 80061fa:	bf00      	nop
 80061fc:	370c      	adds	r7, #12
 80061fe:	46bd      	mov	sp, r7
 8006200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006204:	4770      	bx	lr

08006206 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006206:	b580      	push	{r7, lr}
 8006208:	b084      	sub	sp, #16
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006212:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2200      	movs	r2, #0
 8006218:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2200      	movs	r2, #0
 800621e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7ff ffad 	bl	8006180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006226:	bf00      	nop
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800622e:	b480      	push	{r7}
 8006230:	b085      	sub	sp, #20
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b21      	cmp	r3, #33	; 0x21
 8006240:	d13e      	bne.n	80062c0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800624a:	d114      	bne.n	8006276 <UART_Transmit_IT+0x48>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	691b      	ldr	r3, [r3, #16]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d110      	bne.n	8006276 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6a1b      	ldr	r3, [r3, #32]
 8006258:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	881b      	ldrh	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006268:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a1b      	ldr	r3, [r3, #32]
 800626e:	1c9a      	adds	r2, r3, #2
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	621a      	str	r2, [r3, #32]
 8006274:	e008      	b.n	8006288 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	1c59      	adds	r1, r3, #1
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6211      	str	r1, [r2, #32]
 8006280:	781a      	ldrb	r2, [r3, #0]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800628c:	b29b      	uxth	r3, r3
 800628e:	3b01      	subs	r3, #1
 8006290:	b29b      	uxth	r3, r3
 8006292:	687a      	ldr	r2, [r7, #4]
 8006294:	4619      	mov	r1, r3
 8006296:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006298:	2b00      	cmp	r3, #0
 800629a:	d10f      	bne.n	80062bc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062aa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	68da      	ldr	r2, [r3, #12]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80062ba:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80062bc:	2300      	movs	r3, #0
 80062be:	e000      	b.n	80062c2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80062c0:	2302      	movs	r3, #2
  }
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr

080062ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b082      	sub	sp, #8
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2220      	movs	r2, #32
 80062ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fa fd40 	bl	8000d74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80062f4:	2300      	movs	r3, #0
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b22      	cmp	r3, #34	; 0x22
 8006310:	f040 8087 	bne.w	8006422 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800631c:	d117      	bne.n	800634e <UART_Receive_IT+0x50>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d113      	bne.n	800634e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	b29b      	uxth	r3, r3
 8006338:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800633c:	b29a      	uxth	r2, r3
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006346:	1c9a      	adds	r2, r3, #2
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	629a      	str	r2, [r3, #40]	; 0x28
 800634c:	e026      	b.n	800639c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006352:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006354:	2300      	movs	r3, #0
 8006356:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	689b      	ldr	r3, [r3, #8]
 800635c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006360:	d007      	beq.n	8006372 <UART_Receive_IT+0x74>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10a      	bne.n	8006380 <UART_Receive_IT+0x82>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d106      	bne.n	8006380 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	b2da      	uxtb	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	701a      	strb	r2, [r3, #0]
 800637e:	e008      	b.n	8006392 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	b2db      	uxtb	r3, r3
 8006388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800638c:	b2da      	uxtb	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80063a0:	b29b      	uxth	r3, r3
 80063a2:	3b01      	subs	r3, #1
 80063a4:	b29b      	uxth	r3, r3
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	4619      	mov	r1, r3
 80063aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d136      	bne.n	800641e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f022 0220 	bic.w	r2, r2, #32
 80063be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80063ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695a      	ldr	r2, [r3, #20]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0201 	bic.w	r2, r2, #1
 80063de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2220      	movs	r2, #32
 80063e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	d10e      	bne.n	800640e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	68da      	ldr	r2, [r3, #12]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f022 0210 	bic.w	r2, r2, #16
 80063fe:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006404:	4619      	mov	r1, r3
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7ff fec4 	bl	8006194 <HAL_UARTEx_RxEventCallback>
 800640c:	e002      	b.n	8006414 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f7fa fc92 	bl	8000d38 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800641a:	2300      	movs	r3, #0
 800641c:	e002      	b.n	8006424 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800641e:	2300      	movs	r3, #0
 8006420:	e000      	b.n	8006424 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006422:	2302      	movs	r3, #2
  }
}
 8006424:	4618      	mov	r0, r3
 8006426:	3710      	adds	r7, #16
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800642c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006430:	b09f      	sub	sp, #124	; 0x7c
 8006432:	af00      	add	r7, sp, #0
 8006434:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006440:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006442:	68d9      	ldr	r1, [r3, #12]
 8006444:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	ea40 0301 	orr.w	r3, r0, r1
 800644c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800644e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006450:	689a      	ldr	r2, [r3, #8]
 8006452:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	431a      	orrs	r2, r3
 8006458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	431a      	orrs	r2, r3
 800645e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006460:	69db      	ldr	r3, [r3, #28]
 8006462:	4313      	orrs	r3, r2
 8006464:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006470:	f021 010c 	bic.w	r1, r1, #12
 8006474:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800647a:	430b      	orrs	r3, r1
 800647c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800647e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	695b      	ldr	r3, [r3, #20]
 8006484:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800648a:	6999      	ldr	r1, [r3, #24]
 800648c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	ea40 0301 	orr.w	r3, r0, r1
 8006494:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006498:	681a      	ldr	r2, [r3, #0]
 800649a:	4bc5      	ldr	r3, [pc, #788]	; (80067b0 <UART_SetConfig+0x384>)
 800649c:	429a      	cmp	r2, r3
 800649e:	d004      	beq.n	80064aa <UART_SetConfig+0x7e>
 80064a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064a2:	681a      	ldr	r2, [r3, #0]
 80064a4:	4bc3      	ldr	r3, [pc, #780]	; (80067b4 <UART_SetConfig+0x388>)
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d103      	bne.n	80064b2 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80064aa:	f7fc f9d7 	bl	800285c <HAL_RCC_GetPCLK2Freq>
 80064ae:	6778      	str	r0, [r7, #116]	; 0x74
 80064b0:	e002      	b.n	80064b8 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80064b2:	f7fc f9bf 	bl	8002834 <HAL_RCC_GetPCLK1Freq>
 80064b6:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80064b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064c0:	f040 80b6 	bne.w	8006630 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80064c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064c6:	461c      	mov	r4, r3
 80064c8:	f04f 0500 	mov.w	r5, #0
 80064cc:	4622      	mov	r2, r4
 80064ce:	462b      	mov	r3, r5
 80064d0:	1891      	adds	r1, r2, r2
 80064d2:	6439      	str	r1, [r7, #64]	; 0x40
 80064d4:	415b      	adcs	r3, r3
 80064d6:	647b      	str	r3, [r7, #68]	; 0x44
 80064d8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064dc:	1912      	adds	r2, r2, r4
 80064de:	eb45 0303 	adc.w	r3, r5, r3
 80064e2:	f04f 0000 	mov.w	r0, #0
 80064e6:	f04f 0100 	mov.w	r1, #0
 80064ea:	00d9      	lsls	r1, r3, #3
 80064ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064f0:	00d0      	lsls	r0, r2, #3
 80064f2:	4602      	mov	r2, r0
 80064f4:	460b      	mov	r3, r1
 80064f6:	1911      	adds	r1, r2, r4
 80064f8:	6639      	str	r1, [r7, #96]	; 0x60
 80064fa:	416b      	adcs	r3, r5
 80064fc:	667b      	str	r3, [r7, #100]	; 0x64
 80064fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	461a      	mov	r2, r3
 8006504:	f04f 0300 	mov.w	r3, #0
 8006508:	1891      	adds	r1, r2, r2
 800650a:	63b9      	str	r1, [r7, #56]	; 0x38
 800650c:	415b      	adcs	r3, r3
 800650e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006510:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006514:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006518:	f7f9 fe7c 	bl	8000214 <__aeabi_uldivmod>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4ba5      	ldr	r3, [pc, #660]	; (80067b8 <UART_SetConfig+0x38c>)
 8006522:	fba3 2302 	umull	r2, r3, r3, r2
 8006526:	095b      	lsrs	r3, r3, #5
 8006528:	011e      	lsls	r6, r3, #4
 800652a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800652c:	461c      	mov	r4, r3
 800652e:	f04f 0500 	mov.w	r5, #0
 8006532:	4622      	mov	r2, r4
 8006534:	462b      	mov	r3, r5
 8006536:	1891      	adds	r1, r2, r2
 8006538:	6339      	str	r1, [r7, #48]	; 0x30
 800653a:	415b      	adcs	r3, r3
 800653c:	637b      	str	r3, [r7, #52]	; 0x34
 800653e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006542:	1912      	adds	r2, r2, r4
 8006544:	eb45 0303 	adc.w	r3, r5, r3
 8006548:	f04f 0000 	mov.w	r0, #0
 800654c:	f04f 0100 	mov.w	r1, #0
 8006550:	00d9      	lsls	r1, r3, #3
 8006552:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006556:	00d0      	lsls	r0, r2, #3
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	1911      	adds	r1, r2, r4
 800655e:	65b9      	str	r1, [r7, #88]	; 0x58
 8006560:	416b      	adcs	r3, r5
 8006562:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006564:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	461a      	mov	r2, r3
 800656a:	f04f 0300 	mov.w	r3, #0
 800656e:	1891      	adds	r1, r2, r2
 8006570:	62b9      	str	r1, [r7, #40]	; 0x28
 8006572:	415b      	adcs	r3, r3
 8006574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006576:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800657a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800657e:	f7f9 fe49 	bl	8000214 <__aeabi_uldivmod>
 8006582:	4602      	mov	r2, r0
 8006584:	460b      	mov	r3, r1
 8006586:	4b8c      	ldr	r3, [pc, #560]	; (80067b8 <UART_SetConfig+0x38c>)
 8006588:	fba3 1302 	umull	r1, r3, r3, r2
 800658c:	095b      	lsrs	r3, r3, #5
 800658e:	2164      	movs	r1, #100	; 0x64
 8006590:	fb01 f303 	mul.w	r3, r1, r3
 8006594:	1ad3      	subs	r3, r2, r3
 8006596:	00db      	lsls	r3, r3, #3
 8006598:	3332      	adds	r3, #50	; 0x32
 800659a:	4a87      	ldr	r2, [pc, #540]	; (80067b8 <UART_SetConfig+0x38c>)
 800659c:	fba2 2303 	umull	r2, r3, r2, r3
 80065a0:	095b      	lsrs	r3, r3, #5
 80065a2:	005b      	lsls	r3, r3, #1
 80065a4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80065a8:	441e      	add	r6, r3
 80065aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065ac:	4618      	mov	r0, r3
 80065ae:	f04f 0100 	mov.w	r1, #0
 80065b2:	4602      	mov	r2, r0
 80065b4:	460b      	mov	r3, r1
 80065b6:	1894      	adds	r4, r2, r2
 80065b8:	623c      	str	r4, [r7, #32]
 80065ba:	415b      	adcs	r3, r3
 80065bc:	627b      	str	r3, [r7, #36]	; 0x24
 80065be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065c2:	1812      	adds	r2, r2, r0
 80065c4:	eb41 0303 	adc.w	r3, r1, r3
 80065c8:	f04f 0400 	mov.w	r4, #0
 80065cc:	f04f 0500 	mov.w	r5, #0
 80065d0:	00dd      	lsls	r5, r3, #3
 80065d2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80065d6:	00d4      	lsls	r4, r2, #3
 80065d8:	4622      	mov	r2, r4
 80065da:	462b      	mov	r3, r5
 80065dc:	1814      	adds	r4, r2, r0
 80065de:	653c      	str	r4, [r7, #80]	; 0x50
 80065e0:	414b      	adcs	r3, r1
 80065e2:	657b      	str	r3, [r7, #84]	; 0x54
 80065e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	461a      	mov	r2, r3
 80065ea:	f04f 0300 	mov.w	r3, #0
 80065ee:	1891      	adds	r1, r2, r2
 80065f0:	61b9      	str	r1, [r7, #24]
 80065f2:	415b      	adcs	r3, r3
 80065f4:	61fb      	str	r3, [r7, #28]
 80065f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80065fa:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80065fe:	f7f9 fe09 	bl	8000214 <__aeabi_uldivmod>
 8006602:	4602      	mov	r2, r0
 8006604:	460b      	mov	r3, r1
 8006606:	4b6c      	ldr	r3, [pc, #432]	; (80067b8 <UART_SetConfig+0x38c>)
 8006608:	fba3 1302 	umull	r1, r3, r3, r2
 800660c:	095b      	lsrs	r3, r3, #5
 800660e:	2164      	movs	r1, #100	; 0x64
 8006610:	fb01 f303 	mul.w	r3, r1, r3
 8006614:	1ad3      	subs	r3, r2, r3
 8006616:	00db      	lsls	r3, r3, #3
 8006618:	3332      	adds	r3, #50	; 0x32
 800661a:	4a67      	ldr	r2, [pc, #412]	; (80067b8 <UART_SetConfig+0x38c>)
 800661c:	fba2 2303 	umull	r2, r3, r2, r3
 8006620:	095b      	lsrs	r3, r3, #5
 8006622:	f003 0207 	and.w	r2, r3, #7
 8006626:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4432      	add	r2, r6
 800662c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800662e:	e0b9      	b.n	80067a4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006632:	461c      	mov	r4, r3
 8006634:	f04f 0500 	mov.w	r5, #0
 8006638:	4622      	mov	r2, r4
 800663a:	462b      	mov	r3, r5
 800663c:	1891      	adds	r1, r2, r2
 800663e:	6139      	str	r1, [r7, #16]
 8006640:	415b      	adcs	r3, r3
 8006642:	617b      	str	r3, [r7, #20]
 8006644:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006648:	1912      	adds	r2, r2, r4
 800664a:	eb45 0303 	adc.w	r3, r5, r3
 800664e:	f04f 0000 	mov.w	r0, #0
 8006652:	f04f 0100 	mov.w	r1, #0
 8006656:	00d9      	lsls	r1, r3, #3
 8006658:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800665c:	00d0      	lsls	r0, r2, #3
 800665e:	4602      	mov	r2, r0
 8006660:	460b      	mov	r3, r1
 8006662:	eb12 0804 	adds.w	r8, r2, r4
 8006666:	eb43 0905 	adc.w	r9, r3, r5
 800666a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	4618      	mov	r0, r3
 8006670:	f04f 0100 	mov.w	r1, #0
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	008b      	lsls	r3, r1, #2
 800667e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006682:	0082      	lsls	r2, r0, #2
 8006684:	4640      	mov	r0, r8
 8006686:	4649      	mov	r1, r9
 8006688:	f7f9 fdc4 	bl	8000214 <__aeabi_uldivmod>
 800668c:	4602      	mov	r2, r0
 800668e:	460b      	mov	r3, r1
 8006690:	4b49      	ldr	r3, [pc, #292]	; (80067b8 <UART_SetConfig+0x38c>)
 8006692:	fba3 2302 	umull	r2, r3, r3, r2
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	011e      	lsls	r6, r3, #4
 800669a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800669c:	4618      	mov	r0, r3
 800669e:	f04f 0100 	mov.w	r1, #0
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	1894      	adds	r4, r2, r2
 80066a8:	60bc      	str	r4, [r7, #8]
 80066aa:	415b      	adcs	r3, r3
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80066b2:	1812      	adds	r2, r2, r0
 80066b4:	eb41 0303 	adc.w	r3, r1, r3
 80066b8:	f04f 0400 	mov.w	r4, #0
 80066bc:	f04f 0500 	mov.w	r5, #0
 80066c0:	00dd      	lsls	r5, r3, #3
 80066c2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80066c6:	00d4      	lsls	r4, r2, #3
 80066c8:	4622      	mov	r2, r4
 80066ca:	462b      	mov	r3, r5
 80066cc:	1814      	adds	r4, r2, r0
 80066ce:	64bc      	str	r4, [r7, #72]	; 0x48
 80066d0:	414b      	adcs	r3, r1
 80066d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	4618      	mov	r0, r3
 80066da:	f04f 0100 	mov.w	r1, #0
 80066de:	f04f 0200 	mov.w	r2, #0
 80066e2:	f04f 0300 	mov.w	r3, #0
 80066e6:	008b      	lsls	r3, r1, #2
 80066e8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80066ec:	0082      	lsls	r2, r0, #2
 80066ee:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80066f2:	f7f9 fd8f 	bl	8000214 <__aeabi_uldivmod>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4b2f      	ldr	r3, [pc, #188]	; (80067b8 <UART_SetConfig+0x38c>)
 80066fc:	fba3 1302 	umull	r1, r3, r3, r2
 8006700:	095b      	lsrs	r3, r3, #5
 8006702:	2164      	movs	r1, #100	; 0x64
 8006704:	fb01 f303 	mul.w	r3, r1, r3
 8006708:	1ad3      	subs	r3, r2, r3
 800670a:	011b      	lsls	r3, r3, #4
 800670c:	3332      	adds	r3, #50	; 0x32
 800670e:	4a2a      	ldr	r2, [pc, #168]	; (80067b8 <UART_SetConfig+0x38c>)
 8006710:	fba2 2303 	umull	r2, r3, r2, r3
 8006714:	095b      	lsrs	r3, r3, #5
 8006716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800671a:	441e      	add	r6, r3
 800671c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800671e:	4618      	mov	r0, r3
 8006720:	f04f 0100 	mov.w	r1, #0
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	1894      	adds	r4, r2, r2
 800672a:	603c      	str	r4, [r7, #0]
 800672c:	415b      	adcs	r3, r3
 800672e:	607b      	str	r3, [r7, #4]
 8006730:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006734:	1812      	adds	r2, r2, r0
 8006736:	eb41 0303 	adc.w	r3, r1, r3
 800673a:	f04f 0400 	mov.w	r4, #0
 800673e:	f04f 0500 	mov.w	r5, #0
 8006742:	00dd      	lsls	r5, r3, #3
 8006744:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006748:	00d4      	lsls	r4, r2, #3
 800674a:	4622      	mov	r2, r4
 800674c:	462b      	mov	r3, r5
 800674e:	eb12 0a00 	adds.w	sl, r2, r0
 8006752:	eb43 0b01 	adc.w	fp, r3, r1
 8006756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006758:	685b      	ldr	r3, [r3, #4]
 800675a:	4618      	mov	r0, r3
 800675c:	f04f 0100 	mov.w	r1, #0
 8006760:	f04f 0200 	mov.w	r2, #0
 8006764:	f04f 0300 	mov.w	r3, #0
 8006768:	008b      	lsls	r3, r1, #2
 800676a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800676e:	0082      	lsls	r2, r0, #2
 8006770:	4650      	mov	r0, sl
 8006772:	4659      	mov	r1, fp
 8006774:	f7f9 fd4e 	bl	8000214 <__aeabi_uldivmod>
 8006778:	4602      	mov	r2, r0
 800677a:	460b      	mov	r3, r1
 800677c:	4b0e      	ldr	r3, [pc, #56]	; (80067b8 <UART_SetConfig+0x38c>)
 800677e:	fba3 1302 	umull	r1, r3, r3, r2
 8006782:	095b      	lsrs	r3, r3, #5
 8006784:	2164      	movs	r1, #100	; 0x64
 8006786:	fb01 f303 	mul.w	r3, r1, r3
 800678a:	1ad3      	subs	r3, r2, r3
 800678c:	011b      	lsls	r3, r3, #4
 800678e:	3332      	adds	r3, #50	; 0x32
 8006790:	4a09      	ldr	r2, [pc, #36]	; (80067b8 <UART_SetConfig+0x38c>)
 8006792:	fba2 2303 	umull	r2, r3, r2, r3
 8006796:	095b      	lsrs	r3, r3, #5
 8006798:	f003 020f 	and.w	r2, r3, #15
 800679c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4432      	add	r2, r6
 80067a2:	609a      	str	r2, [r3, #8]
}
 80067a4:	bf00      	nop
 80067a6:	377c      	adds	r7, #124	; 0x7c
 80067a8:	46bd      	mov	sp, r7
 80067aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067ae:	bf00      	nop
 80067b0:	40011000 	.word	0x40011000
 80067b4:	40011400 	.word	0x40011400
 80067b8:	51eb851f 	.word	0x51eb851f

080067bc <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80067bc:	b084      	sub	sp, #16
 80067be:	b480      	push	{r7}
 80067c0:	b085      	sub	sp, #20
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	6078      	str	r0, [r7, #4]
 80067c6:	f107 001c 	add.w	r0, r7, #28
 80067ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 80067d2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 80067d4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 80067d6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 80067d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 80067da:	431a      	orrs	r2, r3
             Init.BusWide             |\
 80067dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 80067de:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 80067e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 80067e2:	431a      	orrs	r2, r3
             Init.ClockDiv
 80067e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 80067e6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	685b      	ldr	r3, [r3, #4]
 80067f2:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 80067f6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80067fa:	68fa      	ldr	r2, [r7, #12]
 80067fc:	431a      	orrs	r2, r3
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3714      	adds	r7, #20
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	b004      	add	sp, #16
 8006810:	4770      	bx	lr

08006812 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006820:	4618      	mov	r0, r3
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
 8006834:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	370c      	adds	r7, #12
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800684e:	b580      	push	{r7, lr}
 8006850:	b082      	sub	sp, #8
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2203      	movs	r2, #3
 800685a:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800685c:	2002      	movs	r0, #2
 800685e:	f7fb f87f 	bl	8001960 <HAL_Delay>
  
  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	3708      	adds	r7, #8
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}

0800686c <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 800686c:	b480      	push	{r7}
 800686e:	b083      	sub	sp, #12
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f003 0303 	and.w	r3, r3, #3
}
 800687c:	4618      	mov	r0, r3
 800687e:	370c      	adds	r7, #12
 8006880:	46bd      	mov	sp, r7
 8006882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006886:	4770      	bx	lr

08006888 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006892:	2300      	movs	r3, #0
 8006894:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80068a6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80068ac:	431a      	orrs	r2, r3
                       Command->CPSM);
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80068b2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80068c2:	f023 030f 	bic.w	r3, r3, #15
 80068c6:	68fa      	ldr	r2, [r7, #12]
 80068c8:	431a      	orrs	r2, r3
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 80068ce:	2300      	movs	r3, #0
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	3714      	adds	r7, #20
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	b2db      	uxtb	r3, r3
}
 80068ea:	4618      	mov	r0, r3
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b085      	sub	sp, #20
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	3314      	adds	r3, #20
 8006904:	461a      	mov	r2, r3
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	4413      	add	r3, r2
 800690a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
}  
 8006910:	4618      	mov	r0, r3
 8006912:	3714      	adds	r7, #20
 8006914:	46bd      	mov	sp, r7
 8006916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691a:	4770      	bx	lr

0800691c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800691c:	b480      	push	{r7}
 800691e:	b085      	sub	sp, #20
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
 8006924:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006926:	2300      	movs	r3, #0
 8006928:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685a      	ldr	r2, [r3, #4]
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800693a:	683b      	ldr	r3, [r7, #0]
 800693c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006942:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006948:	431a      	orrs	r2, r3
                       Data->DPSM);
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800694e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	431a      	orrs	r2, r3
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006966:	2300      	movs	r3, #0

}
 8006968:	4618      	mov	r0, r3
 800696a:	3714      	adds	r7, #20
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr

08006974 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b088      	sub	sp, #32
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006982:	2310      	movs	r3, #16
 8006984:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006986:	2340      	movs	r3, #64	; 0x40
 8006988:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800698a:	2300      	movs	r3, #0
 800698c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800698e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006992:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006994:	f107 0308 	add.w	r3, r7, #8
 8006998:	4619      	mov	r1, r3
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f7ff ff74 	bl	8006888 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80069a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80069a4:	2110      	movs	r1, #16
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 fa02 	bl	8006db0 <SDMMC_GetCmdResp1>
 80069ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069ae:	69fb      	ldr	r3, [r7, #28]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3720      	adds	r7, #32
 80069b4:	46bd      	mov	sp, r7
 80069b6:	bd80      	pop	{r7, pc}

080069b8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b088      	sub	sp, #32
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80069c6:	2311      	movs	r3, #17
 80069c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80069ca:	2340      	movs	r3, #64	; 0x40
 80069cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80069ce:	2300      	movs	r3, #0
 80069d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80069d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80069d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80069d8:	f107 0308 	add.w	r3, r7, #8
 80069dc:	4619      	mov	r1, r3
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f7ff ff52 	bl	8006888 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80069e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80069e8:	2111      	movs	r1, #17
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f9e0 	bl	8006db0 <SDMMC_GetCmdResp1>
 80069f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80069f2:	69fb      	ldr	r3, [r7, #28]
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3720      	adds	r7, #32
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b088      	sub	sp, #32
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
 8006a04:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006a0a:	2312      	movs	r3, #18
 8006a0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a0e:	2340      	movs	r3, #64	; 0x40
 8006a10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a12:	2300      	movs	r3, #0
 8006a14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a1a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a1c:	f107 0308 	add.w	r3, r7, #8
 8006a20:	4619      	mov	r1, r3
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7ff ff30 	bl	8006888 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a2c:	2112      	movs	r1, #18
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f9be 	bl	8006db0 <SDMMC_GetCmdResp1>
 8006a34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a36:	69fb      	ldr	r3, [r7, #28]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3720      	adds	r7, #32
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b088      	sub	sp, #32
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
 8006a48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006a4e:	2318      	movs	r3, #24
 8006a50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a52:	2340      	movs	r3, #64	; 0x40
 8006a54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006a60:	f107 0308 	add.w	r3, r7, #8
 8006a64:	4619      	mov	r1, r3
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff ff0e 	bl	8006888 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a70:	2118      	movs	r1, #24
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f99c 	bl	8006db0 <SDMMC_GetCmdResp1>
 8006a78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006a7a:	69fb      	ldr	r3, [r7, #28]
}
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	3720      	adds	r7, #32
 8006a80:	46bd      	mov	sp, r7
 8006a82:	bd80      	pop	{r7, pc}

08006a84 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b088      	sub	sp, #32
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006a92:	2319      	movs	r3, #25
 8006a94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006a96:	2340      	movs	r3, #64	; 0x40
 8006a98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006a9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006aa2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006aa4:	f107 0308 	add.w	r3, r7, #8
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7ff feec 	bl	8006888 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ab4:	2119      	movs	r1, #25
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f97a 	bl	8006db0 <SDMMC_GetCmdResp1>
 8006abc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006abe:	69fb      	ldr	r3, [r7, #28]
}
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	3720      	adds	r7, #32
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}

08006ac8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006ad4:	230c      	movs	r3, #12
 8006ad6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ad8:	2340      	movs	r3, #64	; 0x40
 8006ada:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006adc:	2300      	movs	r3, #0
 8006ade:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ae4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ae6:	f107 0308 	add.w	r3, r7, #8
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f7ff fecb 	bl	8006888 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006af2:	4a05      	ldr	r2, [pc, #20]	; (8006b08 <SDMMC_CmdStopTransfer+0x40>)
 8006af4:	210c      	movs	r1, #12
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	f000 f95a 	bl	8006db0 <SDMMC_GetCmdResp1>
 8006afc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006afe:	69fb      	ldr	r3, [r7, #28]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3720      	adds	r7, #32
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	05f5e100 	.word	0x05f5e100

08006b0c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	b08a      	sub	sp, #40	; 0x28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	60f8      	str	r0, [r7, #12]
 8006b14:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006b1c:	2307      	movs	r3, #7
 8006b1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006b20:	2340      	movs	r3, #64	; 0x40
 8006b22:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b24:	2300      	movs	r3, #0
 8006b26:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b2c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b2e:	f107 0310 	add.w	r3, r7, #16
 8006b32:	4619      	mov	r1, r3
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f7ff fea7 	bl	8006888 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b3e:	2107      	movs	r1, #7
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 f935 	bl	8006db0 <SDMMC_GetCmdResp1>
 8006b46:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3728      	adds	r7, #40	; 0x28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b088      	sub	sp, #32
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006b5e:	2300      	movs	r3, #0
 8006b60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006b62:	2300      	movs	r3, #0
 8006b64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006b66:	2300      	movs	r3, #0
 8006b68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006b6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b6e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006b70:	f107 0308 	add.w	r3, r7, #8
 8006b74:	4619      	mov	r1, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff fe86 	bl	8006888 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	f000 f8eb 	bl	8006d58 <SDMMC_GetCmdError>
 8006b82:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006b84:	69fb      	ldr	r3, [r7, #28]
}
 8006b86:	4618      	mov	r0, r3
 8006b88:	3720      	adds	r7, #32
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}

08006b8e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006b8e:	b580      	push	{r7, lr}
 8006b90:	b088      	sub	sp, #32
 8006b92:	af00      	add	r7, sp, #0
 8006b94:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006b96:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006b9a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006b9c:	2308      	movs	r3, #8
 8006b9e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ba0:	2340      	movs	r3, #64	; 0x40
 8006ba2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bac:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bae:	f107 0308 	add.w	r3, r7, #8
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff fe67 	bl	8006888 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 fae2 	bl	8007184 <SDMMC_GetCmdResp7>
 8006bc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006bc2:	69fb      	ldr	r3, [r7, #28]
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3720      	adds	r7, #32
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b088      	sub	sp, #32
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8006bda:	2337      	movs	r3, #55	; 0x37
 8006bdc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006bde:	2340      	movs	r3, #64	; 0x40
 8006be0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006be2:	2300      	movs	r3, #0
 8006be4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006be6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006bec:	f107 0308 	add.w	r3, r7, #8
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7ff fe48 	bl	8006888 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8006bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006bfc:	2137      	movs	r1, #55	; 0x37
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f8d6 	bl	8006db0 <SDMMC_GetCmdResp1>
 8006c04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c06:	69fb      	ldr	r3, [r7, #28]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3720      	adds	r7, #32
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}

08006c10 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	b088      	sub	sp, #32
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006c24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8006c26:	2329      	movs	r3, #41	; 0x29
 8006c28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006c2a:	2340      	movs	r3, #64	; 0x40
 8006c2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c2e:	2300      	movs	r3, #0
 8006c30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c36:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c38:	f107 0308 	add.w	r3, r7, #8
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f7ff fe22 	bl	8006888 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f000 f9e9 	bl	800701c <SDMMC_GetCmdResp3>
 8006c4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c4c:	69fb      	ldr	r3, [r7, #28]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3720      	adds	r7, #32
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}

08006c56 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8006c56:	b580      	push	{r7, lr}
 8006c58:	b088      	sub	sp, #32
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8006c62:	2302      	movs	r3, #2
 8006c64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006c66:	23c0      	movs	r3, #192	; 0xc0
 8006c68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c72:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006c74:	f107 0308 	add.w	r3, r7, #8
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7ff fe04 	bl	8006888 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f000 f983 	bl	8006f8c <SDMMC_GetCmdResp2>
 8006c86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006c88:	69fb      	ldr	r3, [r7, #28]
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3720      	adds	r7, #32
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}

08006c92 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006c92:	b580      	push	{r7, lr}
 8006c94:	b088      	sub	sp, #32
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
 8006c9a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8006ca0:	2309      	movs	r3, #9
 8006ca2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8006ca4:	23c0      	movs	r3, #192	; 0xc0
 8006ca6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cb0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cb2:	f107 0308 	add.w	r3, r7, #8
 8006cb6:	4619      	mov	r1, r3
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f7ff fde5 	bl	8006888 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f000 f964 	bl	8006f8c <SDMMC_GetCmdResp2>
 8006cc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006cc6:	69fb      	ldr	r3, [r7, #28]
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3720      	adds	r7, #32
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8006cde:	2303      	movs	r3, #3
 8006ce0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ce2:	2340      	movs	r3, #64	; 0x40
 8006ce4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006cea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cee:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006cf0:	f107 0308 	add.w	r3, r7, #8
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	6878      	ldr	r0, [r7, #4]
 8006cf8:	f7ff fdc6 	bl	8006888 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8006cfc:	683a      	ldr	r2, [r7, #0]
 8006cfe:	2103      	movs	r1, #3
 8006d00:	6878      	ldr	r0, [r7, #4]
 8006d02:	f000 f9c9 	bl	8007098 <SDMMC_GetCmdResp6>
 8006d06:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d08:	69fb      	ldr	r3, [r7, #28]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3720      	adds	r7, #32
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b088      	sub	sp, #32
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
 8006d1a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8006d20:	230d      	movs	r3, #13
 8006d22:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006d24:	2340      	movs	r3, #64	; 0x40
 8006d26:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006d2c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006d30:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006d32:	f107 0308 	add.w	r3, r7, #8
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7ff fda5 	bl	8006888 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8006d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d42:	210d      	movs	r1, #13
 8006d44:	6878      	ldr	r0, [r7, #4]
 8006d46:	f000 f833 	bl	8006db0 <SDMMC_GetCmdResp1>
 8006d4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006d4c:	69fb      	ldr	r3, [r7, #28]
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3720      	adds	r7, #32
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}
	...

08006d58 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b085      	sub	sp, #20
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006d60:	4b11      	ldr	r3, [pc, #68]	; (8006da8 <SDMMC_GetCmdError+0x50>)
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	4a11      	ldr	r2, [pc, #68]	; (8006dac <SDMMC_GetCmdError+0x54>)
 8006d66:	fba2 2303 	umull	r2, r3, r2, r3
 8006d6a:	0a5b      	lsrs	r3, r3, #9
 8006d6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d70:	fb02 f303 	mul.w	r3, r2, r3
 8006d74:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	1e5a      	subs	r2, r3, #1
 8006d7a:	60fa      	str	r2, [r7, #12]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d102      	bne.n	8006d86 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006d80:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006d84:	e009      	b.n	8006d9a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d0f1      	beq.n	8006d76 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	22c5      	movs	r2, #197	; 0xc5
 8006d96:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3714      	adds	r7, #20
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da4:	4770      	bx	lr
 8006da6:	bf00      	nop
 8006da8:	20000000 	.word	0x20000000
 8006dac:	10624dd3 	.word	0x10624dd3

08006db0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b088      	sub	sp, #32
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	460b      	mov	r3, r1
 8006dba:	607a      	str	r2, [r7, #4]
 8006dbc:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8006dbe:	4b70      	ldr	r3, [pc, #448]	; (8006f80 <SDMMC_GetCmdResp1+0x1d0>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	4a70      	ldr	r2, [pc, #448]	; (8006f84 <SDMMC_GetCmdResp1+0x1d4>)
 8006dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc8:	0a5a      	lsrs	r2, r3, #9
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	fb02 f303 	mul.w	r3, r2, r3
 8006dd0:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8006dd2:	69fb      	ldr	r3, [r7, #28]
 8006dd4:	1e5a      	subs	r2, r3, #1
 8006dd6:	61fa      	str	r2, [r7, #28]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d102      	bne.n	8006de2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006ddc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006de0:	e0c9      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006de6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d0ef      	beq.n	8006dd2 <SDMMC_GetCmdResp1+0x22>
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d1ea      	bne.n	8006dd2 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d004      	beq.n	8006e12 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	2204      	movs	r2, #4
 8006e0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006e0e:	2304      	movs	r3, #4
 8006e10:	e0b1      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d004      	beq.n	8006e28 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2201      	movs	r2, #1
 8006e22:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e24:	2301      	movs	r3, #1
 8006e26:	e0a6      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	22c5      	movs	r2, #197	; 0xc5
 8006e2c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8006e2e:	68f8      	ldr	r0, [r7, #12]
 8006e30:	f7ff fd54 	bl	80068dc <SDIO_GetCommandResponse>
 8006e34:	4603      	mov	r3, r0
 8006e36:	461a      	mov	r2, r3
 8006e38:	7afb      	ldrb	r3, [r7, #11]
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d001      	beq.n	8006e42 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e099      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8006e42:	2100      	movs	r1, #0
 8006e44:	68f8      	ldr	r0, [r7, #12]
 8006e46:	f7ff fd56 	bl	80068f6 <SDIO_GetResponse>
 8006e4a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	4b4e      	ldr	r3, [pc, #312]	; (8006f88 <SDMMC_GetCmdResp1+0x1d8>)
 8006e50:	4013      	ands	r3, r2
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d101      	bne.n	8006e5a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8006e56:	2300      	movs	r3, #0
 8006e58:	e08d      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	da02      	bge.n	8006e66 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8006e60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e64:	e087      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8006e66:	697b      	ldr	r3, [r7, #20]
 8006e68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d001      	beq.n	8006e74 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8006e70:	2340      	movs	r3, #64	; 0x40
 8006e72:	e080      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d001      	beq.n	8006e82 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8006e7e:	2380      	movs	r3, #128	; 0x80
 8006e80:	e079      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8006e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006e90:	e071      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d002      	beq.n	8006ea2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8006e9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006ea0:	e069      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8006eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eb0:	e061      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8006ebc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006ec0:	e059      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d002      	beq.n	8006ed2 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8006ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006ed0:	e051      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d002      	beq.n	8006ee2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8006edc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ee0:	e049      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d002      	beq.n	8006ef2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8006eec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006ef0:	e041      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d002      	beq.n	8006f02 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8006efc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f00:	e039      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8006f0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f10:	e031      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d002      	beq.n	8006f22 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8006f1c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006f20:	e029      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d002      	beq.n	8006f32 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8006f2c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006f30:	e021      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d002      	beq.n	8006f42 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8006f3c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006f40:	e019      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d002      	beq.n	8006f52 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8006f4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006f50:	e011      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8006f52:	697b      	ldr	r3, [r7, #20]
 8006f54:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8006f5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006f60:	e009      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	f003 0308 	and.w	r3, r3, #8
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d002      	beq.n	8006f72 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8006f6c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006f70:	e001      	b.n	8006f76 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8006f72:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3720      	adds	r7, #32
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}
 8006f7e:	bf00      	nop
 8006f80:	20000000 	.word	0x20000000
 8006f84:	10624dd3 	.word	0x10624dd3
 8006f88:	fdffe008 	.word	0xfdffe008

08006f8c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b085      	sub	sp, #20
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8006f94:	4b1f      	ldr	r3, [pc, #124]	; (8007014 <SDMMC_GetCmdResp2+0x88>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1f      	ldr	r2, [pc, #124]	; (8007018 <SDMMC_GetCmdResp2+0x8c>)
 8006f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9e:	0a5b      	lsrs	r3, r3, #9
 8006fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006fa4:	fb02 f303 	mul.w	r3, r2, r3
 8006fa8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	1e5a      	subs	r2, r3, #1
 8006fae:	60fa      	str	r2, [r7, #12]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d102      	bne.n	8006fba <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8006fb4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006fb8:	e026      	b.n	8007008 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fbe:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d0ef      	beq.n	8006faa <SDMMC_GetCmdResp2+0x1e>
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1ea      	bne.n	8006faa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fd8:	f003 0304 	and.w	r3, r3, #4
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d004      	beq.n	8006fea <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2204      	movs	r2, #4
 8006fe4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8006fe6:	2304      	movs	r3, #4
 8006fe8:	e00e      	b.n	8007008 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fee:	f003 0301 	and.w	r3, r3, #1
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d004      	beq.n	8007000 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2201      	movs	r2, #1
 8006ffa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	e003      	b.n	8007008 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	22c5      	movs	r2, #197	; 0xc5
 8007004:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8007006:	2300      	movs	r3, #0
}
 8007008:	4618      	mov	r0, r3
 800700a:	3714      	adds	r7, #20
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	20000000 	.word	0x20000000
 8007018:	10624dd3 	.word	0x10624dd3

0800701c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007024:	4b1a      	ldr	r3, [pc, #104]	; (8007090 <SDMMC_GetCmdResp3+0x74>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4a1a      	ldr	r2, [pc, #104]	; (8007094 <SDMMC_GetCmdResp3+0x78>)
 800702a:	fba2 2303 	umull	r2, r3, r2, r3
 800702e:	0a5b      	lsrs	r3, r3, #9
 8007030:	f241 3288 	movw	r2, #5000	; 0x1388
 8007034:	fb02 f303 	mul.w	r3, r2, r3
 8007038:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	1e5a      	subs	r2, r3, #1
 800703e:	60fa      	str	r2, [r7, #12]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d102      	bne.n	800704a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007044:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007048:	e01b      	b.n	8007082 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007056:	2b00      	cmp	r3, #0
 8007058:	d0ef      	beq.n	800703a <SDMMC_GetCmdResp3+0x1e>
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1ea      	bne.n	800703a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007068:	f003 0304 	and.w	r3, r3, #4
 800706c:	2b00      	cmp	r3, #0
 800706e:	d004      	beq.n	800707a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2204      	movs	r2, #4
 8007074:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8007076:	2304      	movs	r3, #4
 8007078:	e003      	b.n	8007082 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	22c5      	movs	r2, #197	; 0xc5
 800707e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3714      	adds	r7, #20
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	20000000 	.word	0x20000000
 8007094:	10624dd3 	.word	0x10624dd3

08007098 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b088      	sub	sp, #32
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	460b      	mov	r3, r1
 80070a2:	607a      	str	r2, [r7, #4]
 80070a4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80070a6:	4b35      	ldr	r3, [pc, #212]	; (800717c <SDMMC_GetCmdResp6+0xe4>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a35      	ldr	r2, [pc, #212]	; (8007180 <SDMMC_GetCmdResp6+0xe8>)
 80070ac:	fba2 2303 	umull	r2, r3, r2, r3
 80070b0:	0a5b      	lsrs	r3, r3, #9
 80070b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80070b6:	fb02 f303 	mul.w	r3, r2, r3
 80070ba:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	1e5a      	subs	r2, r3, #1
 80070c0:	61fa      	str	r2, [r7, #28]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d102      	bne.n	80070cc <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80070c6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80070ca:	e052      	b.n	8007172 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070d0:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070d2:	69bb      	ldr	r3, [r7, #24]
 80070d4:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d0ef      	beq.n	80070bc <SDMMC_GetCmdResp6+0x24>
 80070dc:	69bb      	ldr	r3, [r7, #24]
 80070de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d1ea      	bne.n	80070bc <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ea:	f003 0304 	and.w	r3, r3, #4
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d004      	beq.n	80070fc <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	2204      	movs	r2, #4
 80070f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80070f8:	2304      	movs	r3, #4
 80070fa:	e03a      	b.n	8007172 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	d004      	beq.n	8007112 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800710e:	2301      	movs	r3, #1
 8007110:	e02f      	b.n	8007172 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8007112:	68f8      	ldr	r0, [r7, #12]
 8007114:	f7ff fbe2 	bl	80068dc <SDIO_GetCommandResponse>
 8007118:	4603      	mov	r3, r0
 800711a:	461a      	mov	r2, r3
 800711c:	7afb      	ldrb	r3, [r7, #11]
 800711e:	4293      	cmp	r3, r2
 8007120:	d001      	beq.n	8007126 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8007122:	2301      	movs	r3, #1
 8007124:	e025      	b.n	8007172 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	22c5      	movs	r2, #197	; 0xc5
 800712a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 800712c:	2100      	movs	r1, #0
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f7ff fbe1 	bl	80068f6 <SDIO_GetResponse>
 8007134:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8007136:	697b      	ldr	r3, [r7, #20]
 8007138:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d106      	bne.n	800714e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	0c1b      	lsrs	r3, r3, #16
 8007144:	b29a      	uxth	r2, r3
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800714a:	2300      	movs	r3, #0
 800714c:	e011      	b.n	8007172 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007154:	2b00      	cmp	r3, #0
 8007156:	d002      	beq.n	800715e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007158:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800715c:	e009      	b.n	8007172 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007164:	2b00      	cmp	r3, #0
 8007166:	d002      	beq.n	800716e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800716c:	e001      	b.n	8007172 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800716e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007172:	4618      	mov	r0, r3
 8007174:	3720      	adds	r7, #32
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}
 800717a:	bf00      	nop
 800717c:	20000000 	.word	0x20000000
 8007180:	10624dd3 	.word	0x10624dd3

08007184 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007184:	b480      	push	{r7}
 8007186:	b085      	sub	sp, #20
 8007188:	af00      	add	r7, sp, #0
 800718a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800718c:	4b22      	ldr	r3, [pc, #136]	; (8007218 <SDMMC_GetCmdResp7+0x94>)
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a22      	ldr	r2, [pc, #136]	; (800721c <SDMMC_GetCmdResp7+0x98>)
 8007192:	fba2 2303 	umull	r2, r3, r2, r3
 8007196:	0a5b      	lsrs	r3, r3, #9
 8007198:	f241 3288 	movw	r2, #5000	; 0x1388
 800719c:	fb02 f303 	mul.w	r3, r2, r3
 80071a0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	1e5a      	subs	r2, r3, #1
 80071a6:	60fa      	str	r2, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d102      	bne.n	80071b2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80071ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80071b0:	e02c      	b.n	800720c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071b6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d0ef      	beq.n	80071a2 <SDMMC_GetCmdResp7+0x1e>
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d1ea      	bne.n	80071a2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071d0:	f003 0304 	and.w	r3, r3, #4
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d004      	beq.n	80071e2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2204      	movs	r2, #4
 80071dc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80071de:	2304      	movs	r3, #4
 80071e0:	e014      	b.n	800720c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071e6:	f003 0301 	and.w	r3, r3, #1
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d004      	beq.n	80071f8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80071f4:	2301      	movs	r3, #1
 80071f6:	e009      	b.n	800720c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007200:	2b00      	cmp	r3, #0
 8007202:	d002      	beq.n	800720a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2240      	movs	r2, #64	; 0x40
 8007208:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800720a:	2300      	movs	r3, #0
  
}
 800720c:	4618      	mov	r0, r3
 800720e:	3714      	adds	r7, #20
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr
 8007218:	20000000 	.word	0x20000000
 800721c:	10624dd3 	.word	0x10624dd3

08007220 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8007224:	4904      	ldr	r1, [pc, #16]	; (8007238 <MX_FATFS_Init+0x18>)
 8007226:	4805      	ldr	r0, [pc, #20]	; (800723c <MX_FATFS_Init+0x1c>)
 8007228:	f000 fa0a 	bl	8007640 <FATFS_LinkDriver>
 800722c:	4603      	mov	r3, r0
 800722e:	461a      	mov	r2, r3
 8007230:	4b03      	ldr	r3, [pc, #12]	; (8007240 <MX_FATFS_Init+0x20>)
 8007232:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007234:	bf00      	nop
 8007236:	bd80      	pop	{r7, pc}
 8007238:	20000c48 	.word	0x20000c48
 800723c:	08007a24 	.word	0x08007a24
 8007240:	20000c44 	.word	0x20000c44

08007244 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800724a:	2300      	movs	r3, #0
 800724c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800724e:	f000 f89e 	bl	800738e <BSP_SD_IsDetected>
 8007252:	4603      	mov	r3, r0
 8007254:	2b01      	cmp	r3, #1
 8007256:	d001      	beq.n	800725c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e005      	b.n	8007268 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 800725c:	4804      	ldr	r0, [pc, #16]	; (8007270 <BSP_SD_Init+0x2c>)
 800725e:	f7fc fa35 	bl	80036cc <HAL_SD_Init>
 8007262:	4603      	mov	r3, r0
 8007264:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 8007266:	79fb      	ldrb	r3, [r7, #7]
}
 8007268:	4618      	mov	r0, r3
 800726a:	3708      	adds	r7, #8
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}
 8007270:	20000980 	.word	0x20000980

08007274 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b088      	sub	sp, #32
 8007278:	af02      	add	r7, sp, #8
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007282:	2300      	movs	r3, #0
 8007284:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	9300      	str	r3, [sp, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	68ba      	ldr	r2, [r7, #8]
 800728e:	68f9      	ldr	r1, [r7, #12]
 8007290:	4806      	ldr	r0, [pc, #24]	; (80072ac <BSP_SD_ReadBlocks+0x38>)
 8007292:	f7fc fac9 	bl	8003828 <HAL_SD_ReadBlocks>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d001      	beq.n	80072a0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80072a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80072a2:	4618      	mov	r0, r3
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	20000980 	.word	0x20000980

080072b0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b088      	sub	sp, #32
 80072b4:	af02      	add	r7, sp, #8
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80072be:	2300      	movs	r3, #0
 80072c0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 80072c2:	683b      	ldr	r3, [r7, #0]
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	68f9      	ldr	r1, [r7, #12]
 80072cc:	4806      	ldr	r0, [pc, #24]	; (80072e8 <BSP_SD_WriteBlocks+0x38>)
 80072ce:	f7fc fc89 	bl	8003be4 <HAL_SD_WriteBlocks>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d001      	beq.n	80072dc <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}
 80072e6:	bf00      	nop
 80072e8:	20000980 	.word	0x20000980

080072ec <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80072f0:	4805      	ldr	r0, [pc, #20]	; (8007308 <BSP_SD_GetCardState+0x1c>)
 80072f2:	f7fd f94d 	bl	8004590 <HAL_SD_GetCardState>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b04      	cmp	r3, #4
 80072fa:	bf14      	ite	ne
 80072fc:	2301      	movne	r3, #1
 80072fe:	2300      	moveq	r3, #0
 8007300:	b2db      	uxtb	r3, r3
}
 8007302:	4618      	mov	r0, r3
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000980 	.word	0x20000980

0800730c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b082      	sub	sp, #8
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8007314:	6879      	ldr	r1, [r7, #4]
 8007316:	4803      	ldr	r0, [pc, #12]	; (8007324 <BSP_SD_GetCardInfo+0x18>)
 8007318:	f7fd f90e 	bl	8004538 <HAL_SD_GetCardInfo>
}
 800731c:	bf00      	nop
 800731e:	3708      	adds	r7, #8
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}
 8007324:	20000980 	.word	0x20000980

08007328 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b082      	sub	sp, #8
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8007330:	f000 f818 	bl	8007364 <BSP_SD_AbortCallback>
}
 8007334:	bf00      	nop
 8007336:	3708      	adds	r7, #8
 8007338:	46bd      	mov	sp, r7
 800733a:	bd80      	pop	{r7, pc}

0800733c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8007344:	f000 f815 	bl	8007372 <BSP_SD_WriteCpltCallback>
}
 8007348:	bf00      	nop
 800734a:	3708      	adds	r7, #8
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b082      	sub	sp, #8
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8007358:	f000 f812 	bl	8007380 <BSP_SD_ReadCpltCallback>
}
 800735c:	bf00      	nop
 800735e:	3708      	adds	r7, #8
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8007364:	b480      	push	{r7}
 8007366:	af00      	add	r7, sp, #0

}
 8007368:	bf00      	nop
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr

08007372 <BSP_SD_WriteCpltCallback>:
  * @brief BSP Tx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_WriteCpltCallback(void)
{
 8007372:	b480      	push	{r7}
 8007374:	af00      	add	r7, sp, #0

}
 8007376:	bf00      	nop
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <BSP_SD_ReadCpltCallback>:
  * @brief BSP Rx Transfer completed callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_ReadCpltCallback(void)
{
 8007380:	b480      	push	{r7}
 8007382:	af00      	add	r7, sp, #0

}
 8007384:	bf00      	nop
 8007386:	46bd      	mov	sp, r7
 8007388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738c:	4770      	bx	lr

0800738e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800738e:	b580      	push	{r7, lr}
 8007390:	b082      	sub	sp, #8
 8007392:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8007394:	2301      	movs	r3, #1
 8007396:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8007398:	f000 f80c 	bl	80073b4 <BSP_PlatformIsDetected>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d101      	bne.n	80073a6 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80073a2:	2300      	movs	r3, #0
 80073a4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80073a6:	79fb      	ldrb	r3, [r7, #7]
 80073a8:	b2db      	uxtb	r3, r3
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3708      	adds	r7, #8
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
	...

080073b4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80073ba:	2301      	movs	r3, #1
 80073bc:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80073be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073c2:	4806      	ldr	r0, [pc, #24]	; (80073dc <BSP_PlatformIsDetected+0x28>)
 80073c4:	f7fb f912 	bl	80025ec <HAL_GPIO_ReadPin>
 80073c8:	4603      	mov	r3, r0
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80073ce:	2300      	movs	r3, #0
 80073d0:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80073d2:	79fb      	ldrb	r3, [r7, #7]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3708      	adds	r7, #8
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	40020800 	.word	0x40020800

080073e0 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b082      	sub	sp, #8
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	4603      	mov	r3, r0
 80073e8:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80073ea:	4b0b      	ldr	r3, [pc, #44]	; (8007418 <SD_CheckStatus+0x38>)
 80073ec:	2201      	movs	r2, #1
 80073ee:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80073f0:	f7ff ff7c 	bl	80072ec <BSP_SD_GetCardState>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d107      	bne.n	800740a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80073fa:	4b07      	ldr	r3, [pc, #28]	; (8007418 <SD_CheckStatus+0x38>)
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	b2db      	uxtb	r3, r3
 8007400:	f023 0301 	bic.w	r3, r3, #1
 8007404:	b2da      	uxtb	r2, r3
 8007406:	4b04      	ldr	r3, [pc, #16]	; (8007418 <SD_CheckStatus+0x38>)
 8007408:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800740a:	4b03      	ldr	r3, [pc, #12]	; (8007418 <SD_CheckStatus+0x38>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	b2db      	uxtb	r3, r3
}
 8007410:	4618      	mov	r0, r3
 8007412:	3708      	adds	r7, #8
 8007414:	46bd      	mov	sp, r7
 8007416:	bd80      	pop	{r7, pc}
 8007418:	20000009 	.word	0x20000009

0800741c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	4603      	mov	r3, r0
 8007424:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007426:	4b0b      	ldr	r3, [pc, #44]	; (8007454 <SD_initialize+0x38>)
 8007428:	2201      	movs	r2, #1
 800742a:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800742c:	f7ff ff0a 	bl	8007244 <BSP_SD_Init>
 8007430:	4603      	mov	r3, r0
 8007432:	2b00      	cmp	r3, #0
 8007434:	d107      	bne.n	8007446 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007436:	79fb      	ldrb	r3, [r7, #7]
 8007438:	4618      	mov	r0, r3
 800743a:	f7ff ffd1 	bl	80073e0 <SD_CheckStatus>
 800743e:	4603      	mov	r3, r0
 8007440:	461a      	mov	r2, r3
 8007442:	4b04      	ldr	r3, [pc, #16]	; (8007454 <SD_initialize+0x38>)
 8007444:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007446:	4b03      	ldr	r3, [pc, #12]	; (8007454 <SD_initialize+0x38>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	b2db      	uxtb	r3, r3
}
 800744c:	4618      	mov	r0, r3
 800744e:	3708      	adds	r7, #8
 8007450:	46bd      	mov	sp, r7
 8007452:	bd80      	pop	{r7, pc}
 8007454:	20000009 	.word	0x20000009

08007458 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b082      	sub	sp, #8
 800745c:	af00      	add	r7, sp, #0
 800745e:	4603      	mov	r3, r0
 8007460:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8007462:	79fb      	ldrb	r3, [r7, #7]
 8007464:	4618      	mov	r0, r3
 8007466:	f7ff ffbb 	bl	80073e0 <SD_CheckStatus>
 800746a:	4603      	mov	r3, r0
}
 800746c:	4618      	mov	r0, r3
 800746e:	3708      	adds	r7, #8
 8007470:	46bd      	mov	sp, r7
 8007472:	bd80      	pop	{r7, pc}

08007474 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	60b9      	str	r1, [r7, #8]
 800747c:	607a      	str	r2, [r7, #4]
 800747e:	603b      	str	r3, [r7, #0]
 8007480:	4603      	mov	r3, r0
 8007482:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007484:	2301      	movs	r3, #1
 8007486:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 8007488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800748c:	683a      	ldr	r2, [r7, #0]
 800748e:	6879      	ldr	r1, [r7, #4]
 8007490:	68b8      	ldr	r0, [r7, #8]
 8007492:	f7ff feef 	bl	8007274 <BSP_SD_ReadBlocks>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d107      	bne.n	80074ac <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800749c:	bf00      	nop
 800749e:	f7ff ff25 	bl	80072ec <BSP_SD_GetCardState>
 80074a2:	4603      	mov	r3, r0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d1fa      	bne.n	800749e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80074a8:	2300      	movs	r3, #0
 80074aa:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80074ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3718      	adds	r7, #24
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80074b6:	b580      	push	{r7, lr}
 80074b8:	b086      	sub	sp, #24
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	603b      	str	r3, [r7, #0]
 80074c2:	4603      	mov	r3, r0
 80074c4:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80074ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80074ce:	683a      	ldr	r2, [r7, #0]
 80074d0:	6879      	ldr	r1, [r7, #4]
 80074d2:	68b8      	ldr	r0, [r7, #8]
 80074d4:	f7ff feec 	bl	80072b0 <BSP_SD_WriteBlocks>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d107      	bne.n	80074ee <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80074de:	bf00      	nop
 80074e0:	f7ff ff04 	bl	80072ec <BSP_SD_GetCardState>
 80074e4:	4603      	mov	r3, r0
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d1fa      	bne.n	80074e0 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80074ea:	2300      	movs	r3, #0
 80074ec:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80074ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b08c      	sub	sp, #48	; 0x30
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	4603      	mov	r3, r0
 8007500:	603a      	str	r2, [r7, #0]
 8007502:	71fb      	strb	r3, [r7, #7]
 8007504:	460b      	mov	r3, r1
 8007506:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800750e:	4b25      	ldr	r3, [pc, #148]	; (80075a4 <SD_ioctl+0xac>)
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	b2db      	uxtb	r3, r3
 8007514:	f003 0301 	and.w	r3, r3, #1
 8007518:	2b00      	cmp	r3, #0
 800751a:	d001      	beq.n	8007520 <SD_ioctl+0x28>
 800751c:	2303      	movs	r3, #3
 800751e:	e03c      	b.n	800759a <SD_ioctl+0xa2>

  switch (cmd)
 8007520:	79bb      	ldrb	r3, [r7, #6]
 8007522:	2b03      	cmp	r3, #3
 8007524:	d834      	bhi.n	8007590 <SD_ioctl+0x98>
 8007526:	a201      	add	r2, pc, #4	; (adr r2, 800752c <SD_ioctl+0x34>)
 8007528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800752c:	0800753d 	.word	0x0800753d
 8007530:	08007545 	.word	0x08007545
 8007534:	0800755d 	.word	0x0800755d
 8007538:	08007577 	.word	0x08007577
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800753c:	2300      	movs	r3, #0
 800753e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007542:	e028      	b.n	8007596 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007544:	f107 030c 	add.w	r3, r7, #12
 8007548:	4618      	mov	r0, r3
 800754a:	f7ff fedf 	bl	800730c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800754e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007550:	683b      	ldr	r3, [r7, #0]
 8007552:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007554:	2300      	movs	r3, #0
 8007556:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800755a:	e01c      	b.n	8007596 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800755c:	f107 030c 	add.w	r3, r7, #12
 8007560:	4618      	mov	r0, r3
 8007562:	f7ff fed3 	bl	800730c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007568:	b29a      	uxth	r2, r3
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007574:	e00f      	b.n	8007596 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007576:	f107 030c 	add.w	r3, r7, #12
 800757a:	4618      	mov	r0, r3
 800757c:	f7ff fec6 	bl	800730c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	0a5a      	lsrs	r2, r3, #9
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007588:	2300      	movs	r3, #0
 800758a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800758e:	e002      	b.n	8007596 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8007590:	2304      	movs	r3, #4
 8007592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8007596:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800759a:	4618      	mov	r0, r3
 800759c:	3730      	adds	r7, #48	; 0x30
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20000009 	.word	0x20000009

080075a8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	4613      	mov	r3, r2
 80075b4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80075b6:	2301      	movs	r3, #1
 80075b8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80075ba:	2300      	movs	r3, #0
 80075bc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80075be:	4b1f      	ldr	r3, [pc, #124]	; (800763c <FATFS_LinkDriverEx+0x94>)
 80075c0:	7a5b      	ldrb	r3, [r3, #9]
 80075c2:	b2db      	uxtb	r3, r3
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d131      	bne.n	800762c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80075c8:	4b1c      	ldr	r3, [pc, #112]	; (800763c <FATFS_LinkDriverEx+0x94>)
 80075ca:	7a5b      	ldrb	r3, [r3, #9]
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	461a      	mov	r2, r3
 80075d0:	4b1a      	ldr	r3, [pc, #104]	; (800763c <FATFS_LinkDriverEx+0x94>)
 80075d2:	2100      	movs	r1, #0
 80075d4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80075d6:	4b19      	ldr	r3, [pc, #100]	; (800763c <FATFS_LinkDriverEx+0x94>)
 80075d8:	7a5b      	ldrb	r3, [r3, #9]
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	4a17      	ldr	r2, [pc, #92]	; (800763c <FATFS_LinkDriverEx+0x94>)
 80075de:	009b      	lsls	r3, r3, #2
 80075e0:	4413      	add	r3, r2
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80075e6:	4b15      	ldr	r3, [pc, #84]	; (800763c <FATFS_LinkDriverEx+0x94>)
 80075e8:	7a5b      	ldrb	r3, [r3, #9]
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	461a      	mov	r2, r3
 80075ee:	4b13      	ldr	r3, [pc, #76]	; (800763c <FATFS_LinkDriverEx+0x94>)
 80075f0:	4413      	add	r3, r2
 80075f2:	79fa      	ldrb	r2, [r7, #7]
 80075f4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80075f6:	4b11      	ldr	r3, [pc, #68]	; (800763c <FATFS_LinkDriverEx+0x94>)
 80075f8:	7a5b      	ldrb	r3, [r3, #9]
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	1c5a      	adds	r2, r3, #1
 80075fe:	b2d1      	uxtb	r1, r2
 8007600:	4a0e      	ldr	r2, [pc, #56]	; (800763c <FATFS_LinkDriverEx+0x94>)
 8007602:	7251      	strb	r1, [r2, #9]
 8007604:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007606:	7dbb      	ldrb	r3, [r7, #22]
 8007608:	3330      	adds	r3, #48	; 0x30
 800760a:	b2da      	uxtb	r2, r3
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	3301      	adds	r3, #1
 8007614:	223a      	movs	r2, #58	; 0x3a
 8007616:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	3302      	adds	r3, #2
 800761c:	222f      	movs	r2, #47	; 0x2f
 800761e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	3303      	adds	r3, #3
 8007624:	2200      	movs	r2, #0
 8007626:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007628:	2300      	movs	r3, #0
 800762a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800762c:	7dfb      	ldrb	r3, [r7, #23]
}
 800762e:	4618      	mov	r0, r3
 8007630:	371c      	adds	r7, #28
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	200008b4 	.word	0x200008b4

08007640 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800764a:	2200      	movs	r2, #0
 800764c:	6839      	ldr	r1, [r7, #0]
 800764e:	6878      	ldr	r0, [r7, #4]
 8007650:	f7ff ffaa 	bl	80075a8 <FATFS_LinkDriverEx>
 8007654:	4603      	mov	r3, r0
}
 8007656:	4618      	mov	r0, r3
 8007658:	3708      	adds	r7, #8
 800765a:	46bd      	mov	sp, r7
 800765c:	bd80      	pop	{r7, pc}

0800765e <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 800765e:	b5b0      	push	{r4, r5, r7, lr}
 8007660:	b08a      	sub	sp, #40	; 0x28
 8007662:	af00      	add	r7, sp, #0
 8007664:	60f8      	str	r0, [r7, #12]
 8007666:	60b9      	str	r1, [r7, #8]
 8007668:	607a      	str	r2, [r7, #4]
 800766a:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 800766c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8007670:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8007674:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007678:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 800767a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800767c:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 800767e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8007680:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 800768e:	f107 0310 	add.w	r3, r7, #16
 8007692:	4618      	mov	r0, r3
 8007694:	f000 f80e 	bl	80076b4 <Lcd_init>

	return lcd;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	461d      	mov	r5, r3
 800769c:	f107 0410 	add.w	r4, r7, #16
 80076a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80076a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80076a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80076a8:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	3728      	adds	r7, #40	; 0x28
 80076b0:	46bd      	mov	sp, r7
 80076b2:	bdb0      	pop	{r4, r5, r7, pc}

080076b4 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	7d9b      	ldrb	r3, [r3, #22]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10c      	bne.n	80076de <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80076c4:	2133      	movs	r1, #51	; 0x33
 80076c6:	6878      	ldr	r0, [r7, #4]
 80076c8:	f000 f86c 	bl	80077a4 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80076cc:	2132      	movs	r1, #50	; 0x32
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f868 	bl	80077a4 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80076d4:	2128      	movs	r1, #40	; 0x28
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 f864 	bl	80077a4 <lcd_write_command>
 80076dc:	e003      	b.n	80076e6 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80076de:	2138      	movs	r1, #56	; 0x38
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 f85f 	bl	80077a4 <lcd_write_command>


	DELAY(1);
 80076e6:	2001      	movs	r0, #1
 80076e8:	f7fa f93a 	bl	8001960 <HAL_Delay>
	lcd_write_command(lcd, CLEAR_DISPLAY);
 80076ec:	2101      	movs	r1, #1
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f858 	bl	80077a4 <lcd_write_command>
	DELAY(1);// Clear screen
 80076f4:	2001      	movs	r0, #1
 80076f6:	f7fa f933 	bl	8001960 <HAL_Delay>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 80076fa:	210c      	movs	r1, #12
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f000 f851 	bl	80077a4 <lcd_write_command>
	DELAY(1);
 8007702:	2001      	movs	r0, #1
 8007704:	f7fa f92c 	bl	8001960 <HAL_Delay>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8007708:	2106      	movs	r1, #6
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 f84a 	bl	80077a4 <lcd_write_command>
}
 8007710:	bf00      	nop
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8007718:	b590      	push	{r4, r7, lr}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
 8007720:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8007722:	2300      	movs	r3, #0
 8007724:	73fb      	strb	r3, [r7, #15]
 8007726:	e00a      	b.n	800773e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8007728:	7bfb      	ldrb	r3, [r7, #15]
 800772a:	683a      	ldr	r2, [r7, #0]
 800772c:	4413      	add	r3, r2
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f864 	bl	8007800 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8007738:	7bfb      	ldrb	r3, [r7, #15]
 800773a:	3301      	adds	r3, #1
 800773c:	73fb      	strb	r3, [r7, #15]
 800773e:	7bfc      	ldrb	r4, [r7, #15]
 8007740:	6838      	ldr	r0, [r7, #0]
 8007742:	f7f8 fd5f 	bl	8000204 <strlen>
 8007746:	4603      	mov	r3, r0
 8007748:	429c      	cmp	r4, r3
 800774a:	d3ed      	bcc.n	8007728 <Lcd_string+0x10>
	}
}
 800774c:	bf00      	nop
 800774e:	bf00      	nop
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	bd90      	pop	{r4, r7, pc}
	...

08007758 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b082      	sub	sp, #8
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
 8007760:	460b      	mov	r3, r1
 8007762:	70fb      	strb	r3, [r7, #3]
 8007764:	4613      	mov	r3, r2
 8007766:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
 8007768:	78fb      	ldrb	r3, [r7, #3]
 800776a:	4a07      	ldr	r2, [pc, #28]	; (8007788 <Lcd_cursor+0x30>)
 800776c:	5cd2      	ldrb	r2, [r2, r3]
 800776e:	78bb      	ldrb	r3, [r7, #2]
 8007770:	4413      	add	r3, r2
 8007772:	b2db      	uxtb	r3, r3
 8007774:	3b80      	subs	r3, #128	; 0x80
 8007776:	b2db      	uxtb	r3, r3
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f812 	bl	80077a4 <lcd_write_command>
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
	#endif
}
 8007780:	bf00      	nop
 8007782:	3708      	adds	r7, #8
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	08007a38 	.word	0x08007a38

0800778c <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 800778c:	b580      	push	{r7, lr}
 800778e:	b082      	sub	sp, #8
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 8007794:	2101      	movs	r1, #1
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 f804 	bl	80077a4 <lcd_write_command>
}
 800779c:	bf00      	nop
 800779e:	3708      	adds	r7, #8
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
 80077ac:	460b      	mov	r3, r1
 80077ae:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6898      	ldr	r0, [r3, #8]
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	899b      	ldrh	r3, [r3, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	4619      	mov	r1, r3
 80077bc:	f7fa ff2e 	bl	800261c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	7d9b      	ldrb	r3, [r3, #22]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d111      	bne.n	80077ec <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	091b      	lsrs	r3, r3, #4
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2204      	movs	r2, #4
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 f842 	bl	800785c <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80077d8:	78fb      	ldrb	r3, [r7, #3]
 80077da:	f003 030f 	and.w	r3, r3, #15
 80077de:	b2db      	uxtb	r3, r3
 80077e0:	2204      	movs	r2, #4
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 f839 	bl	800785c <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80077ea:	e005      	b.n	80077f8 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80077ec:	78fb      	ldrb	r3, [r7, #3]
 80077ee:	2208      	movs	r2, #8
 80077f0:	4619      	mov	r1, r3
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 f832 	bl	800785c <lcd_write>
}
 80077f8:	bf00      	nop
 80077fa:	3708      	adds	r7, #8
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b082      	sub	sp, #8
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	460b      	mov	r3, r1
 800780a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6898      	ldr	r0, [r3, #8]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	899b      	ldrh	r3, [r3, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	4619      	mov	r1, r3
 8007818:	f7fa ff00 	bl	800261c <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	7d9b      	ldrb	r3, [r3, #22]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d111      	bne.n	8007848 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8007824:	78fb      	ldrb	r3, [r7, #3]
 8007826:	091b      	lsrs	r3, r3, #4
 8007828:	b2db      	uxtb	r3, r3
 800782a:	2204      	movs	r2, #4
 800782c:	4619      	mov	r1, r3
 800782e:	6878      	ldr	r0, [r7, #4]
 8007830:	f000 f814 	bl	800785c <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8007834:	78fb      	ldrb	r3, [r7, #3]
 8007836:	f003 030f 	and.w	r3, r3, #15
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2204      	movs	r2, #4
 800783e:	4619      	mov	r1, r3
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 f80b 	bl	800785c <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8007846:	e005      	b.n	8007854 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8007848:	78fb      	ldrb	r3, [r7, #3]
 800784a:	2208      	movs	r2, #8
 800784c:	4619      	mov	r1, r3
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f804 	bl	800785c <lcd_write>
}
 8007854:	bf00      	nop
 8007856:	3708      	adds	r7, #8
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}

0800785c <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b084      	sub	sp, #16
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
 8007868:	4613      	mov	r3, r2
 800786a:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 800786c:	2300      	movs	r3, #0
 800786e:	73fb      	strb	r3, [r7, #15]
 8007870:	e019      	b.n	80078a6 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681a      	ldr	r2, [r3, #0]
 8007876:	7bfb      	ldrb	r3, [r7, #15]
 8007878:	009b      	lsls	r3, r3, #2
 800787a:	4413      	add	r3, r2
 800787c:	6818      	ldr	r0, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685a      	ldr	r2, [r3, #4]
 8007882:	7bfb      	ldrb	r3, [r7, #15]
 8007884:	005b      	lsls	r3, r3, #1
 8007886:	4413      	add	r3, r2
 8007888:	8819      	ldrh	r1, [r3, #0]
 800788a:	78fa      	ldrb	r2, [r7, #3]
 800788c:	7bfb      	ldrb	r3, [r7, #15]
 800788e:	fa42 f303 	asr.w	r3, r2, r3
 8007892:	b2db      	uxtb	r3, r3
 8007894:	f003 0301 	and.w	r3, r3, #1
 8007898:	b2db      	uxtb	r3, r3
 800789a:	461a      	mov	r2, r3
 800789c:	f7fa febe 	bl	800261c <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80078a0:	7bfb      	ldrb	r3, [r7, #15]
 80078a2:	3301      	adds	r3, #1
 80078a4:	73fb      	strb	r3, [r7, #15]
 80078a6:	7bfa      	ldrb	r2, [r7, #15]
 80078a8:	78bb      	ldrb	r3, [r7, #2]
 80078aa:	429a      	cmp	r2, r3
 80078ac:	d3e1      	bcc.n	8007872 <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6918      	ldr	r0, [r3, #16]
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	8a9b      	ldrh	r3, [r3, #20]
 80078b6:	2201      	movs	r2, #1
 80078b8:	4619      	mov	r1, r3
 80078ba:	f7fa feaf 	bl	800261c <HAL_GPIO_WritePin>
	DELAY(1);
 80078be:	2001      	movs	r0, #1
 80078c0:	f7fa f84e 	bl	8001960 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6918      	ldr	r0, [r3, #16]
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	8a9b      	ldrh	r3, [r3, #20]
 80078cc:	2200      	movs	r2, #0
 80078ce:	4619      	mov	r1, r3
 80078d0:	f7fa fea4 	bl	800261c <HAL_GPIO_WritePin>
}
 80078d4:	bf00      	nop
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <__libc_init_array>:
 80078dc:	b570      	push	{r4, r5, r6, lr}
 80078de:	4d0d      	ldr	r5, [pc, #52]	; (8007914 <__libc_init_array+0x38>)
 80078e0:	4c0d      	ldr	r4, [pc, #52]	; (8007918 <__libc_init_array+0x3c>)
 80078e2:	1b64      	subs	r4, r4, r5
 80078e4:	10a4      	asrs	r4, r4, #2
 80078e6:	2600      	movs	r6, #0
 80078e8:	42a6      	cmp	r6, r4
 80078ea:	d109      	bne.n	8007900 <__libc_init_array+0x24>
 80078ec:	4d0b      	ldr	r5, [pc, #44]	; (800791c <__libc_init_array+0x40>)
 80078ee:	4c0c      	ldr	r4, [pc, #48]	; (8007920 <__libc_init_array+0x44>)
 80078f0:	f000 f82e 	bl	8007950 <_init>
 80078f4:	1b64      	subs	r4, r4, r5
 80078f6:	10a4      	asrs	r4, r4, #2
 80078f8:	2600      	movs	r6, #0
 80078fa:	42a6      	cmp	r6, r4
 80078fc:	d105      	bne.n	800790a <__libc_init_array+0x2e>
 80078fe:	bd70      	pop	{r4, r5, r6, pc}
 8007900:	f855 3b04 	ldr.w	r3, [r5], #4
 8007904:	4798      	blx	r3
 8007906:	3601      	adds	r6, #1
 8007908:	e7ee      	b.n	80078e8 <__libc_init_array+0xc>
 800790a:	f855 3b04 	ldr.w	r3, [r5], #4
 800790e:	4798      	blx	r3
 8007910:	3601      	adds	r6, #1
 8007912:	e7f2      	b.n	80078fa <__libc_init_array+0x1e>
 8007914:	08007a44 	.word	0x08007a44
 8007918:	08007a44 	.word	0x08007a44
 800791c:	08007a44 	.word	0x08007a44
 8007920:	08007a48 	.word	0x08007a48

08007924 <memcpy>:
 8007924:	440a      	add	r2, r1
 8007926:	4291      	cmp	r1, r2
 8007928:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800792c:	d100      	bne.n	8007930 <memcpy+0xc>
 800792e:	4770      	bx	lr
 8007930:	b510      	push	{r4, lr}
 8007932:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007936:	f803 4f01 	strb.w	r4, [r3, #1]!
 800793a:	4291      	cmp	r1, r2
 800793c:	d1f9      	bne.n	8007932 <memcpy+0xe>
 800793e:	bd10      	pop	{r4, pc}

08007940 <memset>:
 8007940:	4402      	add	r2, r0
 8007942:	4603      	mov	r3, r0
 8007944:	4293      	cmp	r3, r2
 8007946:	d100      	bne.n	800794a <memset+0xa>
 8007948:	4770      	bx	lr
 800794a:	f803 1b01 	strb.w	r1, [r3], #1
 800794e:	e7f9      	b.n	8007944 <memset+0x4>

08007950 <_init>:
 8007950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007952:	bf00      	nop
 8007954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007956:	bc08      	pop	{r3}
 8007958:	469e      	mov	lr, r3
 800795a:	4770      	bx	lr

0800795c <_fini>:
 800795c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800795e:	bf00      	nop
 8007960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007962:	bc08      	pop	{r3}
 8007964:	469e      	mov	lr, r3
 8007966:	4770      	bx	lr
